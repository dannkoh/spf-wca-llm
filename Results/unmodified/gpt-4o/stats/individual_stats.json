{
  "SameHundred": {
    "succeeded": true,
    "attempts": 1,
    "examples_right": 30,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)"
          ],
          "assertions": [
            "(assert  ( <  in0 100))"
          ]
        },
        "predicted": "(assert ( < in0 100))",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and  ( <  in0 100)  ( <  in1 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100)))",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100)))",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100)))",
        "equivalent": true
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100)))",
        "equivalent": true
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100))  ( <  in5 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100) ( < in5 100)))",
        "equivalent": true
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100))  ( <  in5 100))  ( <  in6 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100) ( < in5 100) ( < in6 100)))",
        "equivalent": true
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100))  ( <  in5 100))  ( <  in6 100))  ( <  in7 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100) ( < in5 100) ( < in6 100) ( < in7 100)))",
        "equivalent": true
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100))  ( <  in5 100))  ( <  in6 100))  ( <  in7 100))  ( <  in8 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100) ( < in5 100) ( < in6 100) ( < in7 100) ( < in8 100)))",
        "equivalent": true
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100))  ( <  in5 100))  ( <  in6 100))  ( <  in7 100))  ( <  in8 100))  ( <  in9 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100) ( < in5 100) ( < in6 100) ( < in7 100) ( < in8 100) ( < in9 100)))",
        "equivalent": true
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100))  ( <  in5 100))  ( <  in6 100))  ( <  in7 100))  ( <  in8 100))  ( <  in9 100))  ( <  in10 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100) ( < in5 100) ( < in6 100) ( < in7 100) ( < in8 100) ( < in9 100) ( < in10 100)))",
        "equivalent": true
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100))  ( <  in5 100))  ( <  in6 100))  ( <  in7 100))  ( <  in8 100))  ( <  in9 100))  ( <  in10 100))  ( <  in11 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100) ( < in5 100) ( < in6 100) ( < in7 100) ( < in8 100) ( < in9 100) ( < in10 100) ( < in11 100)))",
        "equivalent": true
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100))  ( <  in5 100))  ( <  in6 100))  ( <  in7 100))  ( <  in8 100))  ( <  in9 100))  ( <  in10 100))  ( <  in11 100))  ( <  in12 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100) ( < in5 100) ( < in6 100) ( < in7 100) ( < in8 100) ( < in9 100) ( < in10 100) ( < in11 100) ( < in12 100)))",
        "equivalent": true
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100))  ( <  in5 100))  ( <  in6 100))  ( <  in7 100))  ( <  in8 100))  ( <  in9 100))  ( <  in10 100))  ( <  in11 100))  ( <  in12 100))  ( <  in13 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100) ( < in5 100) ( < in6 100) ( < in7 100) ( < in8 100) ( < in9 100) ( < in10 100) ( < in11 100) ( < in12 100) ( < in13 100)))",
        "equivalent": true
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100))  ( <  in5 100))  ( <  in6 100))  ( <  in7 100))  ( <  in8 100))  ( <  in9 100))  ( <  in10 100))  ( <  in11 100))  ( <  in12 100))  ( <  in13 100))  ( <  in14 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100) ( < in5 100) ( < in6 100) ( < in7 100) ( < in8 100) ( < in9 100) ( < in10 100) ( < in11 100) ( < in12 100) ( < in13 100) ( < in14 100)))",
        "equivalent": true
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100))  ( <  in5 100))  ( <  in6 100))  ( <  in7 100))  ( <  in8 100))  ( <  in9 100))  ( <  in10 100))  ( <  in11 100))  ( <  in12 100))  ( <  in13 100))  ( <  in14 100))  ( <  in15 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100) ( < in5 100) ( < in6 100) ( < in7 100) ( < in8 100) ( < in9 100) ( < in10 100) ( < in11 100) ( < in12 100) ( < in13 100) ( < in14 100) ( < in15 100)))",
        "equivalent": true
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100))  ( <  in5 100))  ( <  in6 100))  ( <  in7 100))  ( <  in8 100))  ( <  in9 100))  ( <  in10 100))  ( <  in11 100))  ( <  in12 100))  ( <  in13 100))  ( <  in14 100))  ( <  in15 100))  ( <  in16 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100) ( < in5 100) ( < in6 100) ( < in7 100) ( < in8 100) ( < in9 100) ( < in10 100) ( < in11 100) ( < in12 100) ( < in13 100) ( < in14 100) ( < in15 100) ( < in16 100)))",
        "equivalent": true
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100))  ( <  in5 100))  ( <  in6 100))  ( <  in7 100))  ( <  in8 100))  ( <  in9 100))  ( <  in10 100))  ( <  in11 100))  ( <  in12 100))  ( <  in13 100))  ( <  in14 100))  ( <  in15 100))  ( <  in16 100))  ( <  in17 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100) ( < in5 100) ( < in6 100) ( < in7 100) ( < in8 100) ( < in9 100) ( < in10 100) ( < in11 100) ( < in12 100) ( < in13 100) ( < in14 100) ( < in15 100) ( < in16 100) ( < in17 100)))",
        "equivalent": true
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100))  ( <  in5 100))  ( <  in6 100))  ( <  in7 100))  ( <  in8 100))  ( <  in9 100))  ( <  in10 100))  ( <  in11 100))  ( <  in12 100))  ( <  in13 100))  ( <  in14 100))  ( <  in15 100))  ( <  in16 100))  ( <  in17 100))  ( <  in18 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100) ( < in5 100) ( < in6 100) ( < in7 100) ( < in8 100) ( < in9 100) ( < in10 100) ( < in11 100) ( < in12 100) ( < in13 100) ( < in14 100) ( < in15 100) ( < in16 100) ( < in17 100) ( < in18 100)))",
        "equivalent": true
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100))  ( <  in5 100))  ( <  in6 100))  ( <  in7 100))  ( <  in8 100))  ( <  in9 100))  ( <  in10 100))  ( <  in11 100))  ( <  in12 100))  ( <  in13 100))  ( <  in14 100))  ( <  in15 100))  ( <  in16 100))  ( <  in17 100))  ( <  in18 100))  ( <  in19 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100) ( < in5 100) ( < in6 100) ( < in7 100) ( < in8 100) ( < in9 100) ( < in10 100) ( < in11 100) ( < in12 100) ( < in13 100) ( < in14 100) ( < in15 100) ( < in16 100) ( < in17 100) ( < in18 100) ( < in19 100)))",
        "equivalent": true
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100))  ( <  in5 100))  ( <  in6 100))  ( <  in7 100))  ( <  in8 100))  ( <  in9 100))  ( <  in10 100))  ( <  in11 100))  ( <  in12 100))  ( <  in13 100))  ( <  in14 100))  ( <  in15 100))  ( <  in16 100))  ( <  in17 100))  ( <  in18 100))  ( <  in19 100))  ( <  in20 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100) ( < in5 100) ( < in6 100) ( < in7 100) ( < in8 100) ( < in9 100) ( < in10 100) ( < in11 100) ( < in12 100) ( < in13 100) ( < in14 100) ( < in15 100) ( < in16 100) ( < in17 100) ( < in18 100) ( < in19 100) ( < in20 100)))",
        "equivalent": true
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100))  ( <  in5 100))  ( <  in6 100))  ( <  in7 100))  ( <  in8 100))  ( <  in9 100))  ( <  in10 100))  ( <  in11 100))  ( <  in12 100))  ( <  in13 100))  ( <  in14 100))  ( <  in15 100))  ( <  in16 100))  ( <  in17 100))  ( <  in18 100))  ( <  in19 100))  ( <  in20 100))  ( <  in21 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100) ( < in5 100) ( < in6 100) ( < in7 100) ( < in8 100) ( < in9 100) ( < in10 100) ( < in11 100) ( < in12 100) ( < in13 100) ( < in14 100) ( < in15 100) ( < in16 100) ( < in17 100) ( < in18 100) ( < in19 100) ( < in20 100) ( < in21 100)))",
        "equivalent": true
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100))  ( <  in5 100))  ( <  in6 100))  ( <  in7 100))  ( <  in8 100))  ( <  in9 100))  ( <  in10 100))  ( <  in11 100))  ( <  in12 100))  ( <  in13 100))  ( <  in14 100))  ( <  in15 100))  ( <  in16 100))  ( <  in17 100))  ( <  in18 100))  ( <  in19 100))  ( <  in20 100))  ( <  in21 100))  ( <  in22 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100) ( < in5 100) ( < in6 100) ( < in7 100) ( < in8 100) ( < in9 100) ( < in10 100) ( < in11 100) ( < in12 100) ( < in13 100) ( < in14 100) ( < in15 100) ( < in16 100) ( < in17 100) ( < in18 100) ( < in19 100) ( < in20 100) ( < in21 100) ( < in22 100)))",
        "equivalent": true
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100))  ( <  in5 100))  ( <  in6 100))  ( <  in7 100))  ( <  in8 100))  ( <  in9 100))  ( <  in10 100))  ( <  in11 100))  ( <  in12 100))  ( <  in13 100))  ( <  in14 100))  ( <  in15 100))  ( <  in16 100))  ( <  in17 100))  ( <  in18 100))  ( <  in19 100))  ( <  in20 100))  ( <  in21 100))  ( <  in22 100))  ( <  in23 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100) ( < in5 100) ( < in6 100) ( < in7 100) ( < in8 100) ( < in9 100) ( < in10 100) ( < in11 100) ( < in12 100) ( < in13 100) ( < in14 100) ( < in15 100) ( < in16 100) ( < in17 100) ( < in18 100) ( < in19 100) ( < in20 100) ( < in21 100) ( < in22 100) ( < in23 100)))",
        "equivalent": true
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100))  ( <  in5 100))  ( <  in6 100))  ( <  in7 100))  ( <  in8 100))  ( <  in9 100))  ( <  in10 100))  ( <  in11 100))  ( <  in12 100))  ( <  in13 100))  ( <  in14 100))  ( <  in15 100))  ( <  in16 100))  ( <  in17 100))  ( <  in18 100))  ( <  in19 100))  ( <  in20 100))  ( <  in21 100))  ( <  in22 100))  ( <  in23 100))  ( <  in24 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100) ( < in5 100) ( < in6 100) ( < in7 100) ( < in8 100) ( < in9 100) ( < in10 100) ( < in11 100) ( < in12 100) ( < in13 100) ( < in14 100) ( < in15 100) ( < in16 100) ( < in17 100) ( < in18 100) ( < in19 100) ( < in20 100) ( < in21 100) ( < in22 100) ( < in23 100) ( < in24 100)))",
        "equivalent": true
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100))  ( <  in5 100))  ( <  in6 100))  ( <  in7 100))  ( <  in8 100))  ( <  in9 100))  ( <  in10 100))  ( <  in11 100))  ( <  in12 100))  ( <  in13 100))  ( <  in14 100))  ( <  in15 100))  ( <  in16 100))  ( <  in17 100))  ( <  in18 100))  ( <  in19 100))  ( <  in20 100))  ( <  in21 100))  ( <  in22 100))  ( <  in23 100))  ( <  in24 100))  ( <  in25 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100) ( < in5 100) ( < in6 100) ( < in7 100) ( < in8 100) ( < in9 100) ( < in10 100) ( < in11 100) ( < in12 100) ( < in13 100) ( < in14 100) ( < in15 100) ( < in16 100) ( < in17 100) ( < in18 100) ( < in19 100) ( < in20 100) ( < in21 100) ( < in22 100) ( < in23 100) ( < in24 100) ( < in25 100)))",
        "equivalent": true
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100))  ( <  in5 100))  ( <  in6 100))  ( <  in7 100))  ( <  in8 100))  ( <  in9 100))  ( <  in10 100))  ( <  in11 100))  ( <  in12 100))  ( <  in13 100))  ( <  in14 100))  ( <  in15 100))  ( <  in16 100))  ( <  in17 100))  ( <  in18 100))  ( <  in19 100))  ( <  in20 100))  ( <  in21 100))  ( <  in22 100))  ( <  in23 100))  ( <  in24 100))  ( <  in25 100))  ( <  in26 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100) ( < in5 100) ( < in6 100) ( < in7 100) ( < in8 100) ( < in9 100) ( < in10 100) ( < in11 100) ( < in12 100) ( < in13 100) ( < in14 100) ( < in15 100) ( < in16 100) ( < in17 100) ( < in18 100) ( < in19 100) ( < in20 100) ( < in21 100) ( < in22 100) ( < in23 100) ( < in24 100) ( < in25 100) ( < in26 100)))",
        "equivalent": true
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100))  ( <  in5 100))  ( <  in6 100))  ( <  in7 100))  ( <  in8 100))  ( <  in9 100))  ( <  in10 100))  ( <  in11 100))  ( <  in12 100))  ( <  in13 100))  ( <  in14 100))  ( <  in15 100))  ( <  in16 100))  ( <  in17 100))  ( <  in18 100))  ( <  in19 100))  ( <  in20 100))  ( <  in21 100))  ( <  in22 100))  ( <  in23 100))  ( <  in24 100))  ( <  in25 100))  ( <  in26 100))  ( <  in27 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100) ( < in5 100) ( < in6 100) ( < in7 100) ( < in8 100) ( < in9 100) ( < in10 100) ( < in11 100) ( < in12 100) ( < in13 100) ( < in14 100) ( < in15 100) ( < in16 100) ( < in17 100) ( < in18 100) ( < in19 100) ( < in20 100) ( < in21 100) ( < in22 100) ( < in23 100) ( < in24 100) ( < in25 100) ( < in26 100) ( < in27 100)))",
        "equivalent": true
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100))  ( <  in5 100))  ( <  in6 100))  ( <  in7 100))  ( <  in8 100))  ( <  in9 100))  ( <  in10 100))  ( <  in11 100))  ( <  in12 100))  ( <  in13 100))  ( <  in14 100))  ( <  in15 100))  ( <  in16 100))  ( <  in17 100))  ( <  in18 100))  ( <  in19 100))  ( <  in20 100))  ( <  in21 100))  ( <  in22 100))  ( <  in23 100))  ( <  in24 100))  ( <  in25 100))  ( <  in26 100))  ( <  in27 100))  ( <  in28 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100) ( < in5 100) ( < in6 100) ( < in7 100) ( < in8 100) ( < in9 100) ( < in10 100) ( < in11 100) ( < in12 100) ( < in13 100) ( < in14 100) ( < in15 100) ( < in16 100) ( < in17 100) ( < in18 100) ( < in19 100) ( < in20 100) ( < in21 100) ( < in22 100) ( < in23 100) ( < in24 100) ( < in25 100) ( < in26 100) ( < in27 100) ( < in28 100)))",
        "equivalent": true
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 100)  ( <  in1 100))  ( <  in2 100))  ( <  in3 100))  ( <  in4 100))  ( <  in5 100))  ( <  in6 100))  ( <  in7 100))  ( <  in8 100))  ( <  in9 100))  ( <  in10 100))  ( <  in11 100))  ( <  in12 100))  ( <  in13 100))  ( <  in14 100))  ( <  in15 100))  ( <  in16 100))  ( <  in17 100))  ( <  in18 100))  ( <  in19 100))  ( <  in20 100))  ( <  in21 100))  ( <  in22 100))  ( <  in23 100))  ( <  in24 100))  ( <  in25 100))  ( <  in26 100))  ( <  in27 100))  ( <  in28 100))  ( <  in29 100)))"
          ]
        },
        "predicted": "(assert (and ( < in0 100) ( < in1 100) ( < in2 100) ( < in3 100) ( < in4 100) ( < in5 100) ( < in6 100) ( < in7 100) ( < in8 100) ( < in9 100) ( < in10 100) ( < in11 100) ( < in12 100) ( < in13 100) ( < in14 100) ( < in15 100) ( < in16 100) ( < in17 100) ( < in18 100) ( < in19 100) ( < in20 100) ( < in21 100) ( < in22 100) ( < in23 100) ( < in24 100) ( < in25 100) ( < in26 100) ( < in27 100) ( < in28 100) ( < in29 100)))",
        "equivalent": true
      }
    }
  },
  "SameLowercase": {
    "succeeded": true,
    "attempts": 1,
    "examples_right": 30,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)"
          ],
          "assertions": [
            "(assert (and  ( >=  in0 97)  ( <=  in0 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122))))",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122))))",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122))))",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122))))",
        "equivalent": true
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122))))",
        "equivalent": true
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122))))",
        "equivalent": true
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122))))",
        "equivalent": true
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122))))",
        "equivalent": true
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122))))",
        "equivalent": true
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122))))",
        "equivalent": true
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122))))",
        "equivalent": true
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122))))",
        "equivalent": true
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122))))",
        "equivalent": true
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122))))",
        "equivalent": true
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122))))",
        "equivalent": true
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122))))",
        "equivalent": true
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122))))",
        "equivalent": true
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122))))",
        "equivalent": true
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122)) (and (>= in18 97) (<= in18 122))))",
        "equivalent": true
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122)) (and (>= in18 97) (<= in18 122)) (and (>= in19 97) (<= in19 122))))",
        "equivalent": true
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122)) (and (>= in18 97) (<= in18 122)) (and (>= in19 97) (<= in19 122)) (and (>= in20 97) (<= in20 122))))",
        "equivalent": true
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122)) (and (>= in18 97) (<= in18 122)) (and (>= in19 97) (<= in19 122)) (and (>= in20 97) (<= in20 122)) (and (>= in21 97) (<= in21 122))))",
        "equivalent": true
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122))  ( >=  in22 97))  ( <=  in22 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122)) (and (>= in18 97) (<= in18 122)) (and (>= in19 97) (<= in19 122)) (and (>= in20 97) (<= in20 122)) (and (>= in21 97) (<= in21 122)) (and (>= in22 97) (<= in22 122))))",
        "equivalent": true
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122))  ( >=  in22 97))  ( <=  in22 122))  ( >=  in23 97))  ( <=  in23 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122)) (and (>= in18 97) (<= in18 122)) (and (>= in19 97) (<= in19 122)) (and (>= in20 97) (<= in20 122)) (and (>= in21 97) (<= in21 122)) (and (>= in22 97) (<= in22 122)) (and (>= in23 97) (<= in23 122))))",
        "equivalent": true
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122))  ( >=  in22 97))  ( <=  in22 122))  ( >=  in23 97))  ( <=  in23 122))  ( >=  in24 97))  ( <=  in24 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122)) (and (>= in18 97) (<= in18 122)) (and (>= in19 97) (<= in19 122)) (and (>= in20 97) (<= in20 122)) (and (>= in21 97) (<= in21 122)) (and (>= in22 97) (<= in22 122)) (and (>= in23 97) (<= in23 122)) (and (>= in24 97) (<= in24 122))))",
        "equivalent": true
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122))  ( >=  in22 97))  ( <=  in22 122))  ( >=  in23 97))  ( <=  in23 122))  ( >=  in24 97))  ( <=  in24 122))  ( >=  in25 97))  ( <=  in25 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122)) (and (>= in18 97) (<= in18 122)) (and (>= in19 97) (<= in19 122)) (and (>= in20 97) (<= in20 122)) (and (>= in21 97) (<= in21 122)) (and (>= in22 97) (<= in22 122)) (and (>= in23 97) (<= in23 122)) (and (>= in24 97) (<= in24 122)) (and (>= in25 97) (<= in25 122))))",
        "equivalent": true
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122))  ( >=  in22 97))  ( <=  in22 122))  ( >=  in23 97))  ( <=  in23 122))  ( >=  in24 97))  ( <=  in24 122))  ( >=  in25 97))  ( <=  in25 122))  ( >=  in26 97))  ( <=  in26 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122)) (and (>= in18 97) (<= in18 122)) (and (>= in19 97) (<= in19 122)) (and (>= in20 97) (<= in20 122)) (and (>= in21 97) (<= in21 122)) (and (>= in22 97) (<= in22 122)) (and (>= in23 97) (<= in23 122)) (and (>= in24 97) (<= in24 122)) (and (>= in25 97) (<= in25 122)) (and (>= in26 97) (<= in26 122))))",
        "equivalent": true
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122))  ( >=  in22 97))  ( <=  in22 122))  ( >=  in23 97))  ( <=  in23 122))  ( >=  in24 97))  ( <=  in24 122))  ( >=  in25 97))  ( <=  in25 122))  ( >=  in26 97))  ( <=  in26 122))  ( >=  in27 97))  ( <=  in27 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122)) (and (>= in18 97) (<= in18 122)) (and (>= in19 97) (<= in19 122)) (and (>= in20 97) (<= in20 122)) (and (>= in21 97) (<= in21 122)) (and (>= in22 97) (<= in22 122)) (and (>= in23 97) (<= in23 122)) (and (>= in24 97) (<= in24 122)) (and (>= in25 97) (<= in25 122)) (and (>= in26 97) (<= in26 122)) (and (>= in27 97) (<= in27 122))))",
        "equivalent": true
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122))  ( >=  in22 97))  ( <=  in22 122))  ( >=  in23 97))  ( <=  in23 122))  ( >=  in24 97))  ( <=  in24 122))  ( >=  in25 97))  ( <=  in25 122))  ( >=  in26 97))  ( <=  in26 122))  ( >=  in27 97))  ( <=  in27 122))  ( >=  in28 97))  ( <=  in28 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122)) (and (>= in18 97) (<= in18 122)) (and (>= in19 97) (<= in19 122)) (and (>= in20 97) (<= in20 122)) (and (>= in21 97) (<= in21 122)) (and (>= in22 97) (<= in22 122)) (and (>= in23 97) (<= in23 122)) (and (>= in24 97) (<= in24 122)) (and (>= in25 97) (<= in25 122)) (and (>= in26 97) (<= in26 122)) (and (>= in27 97) (<= in27 122)) (and (>= in28 97) (<= in28 122))))",
        "equivalent": true
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122))  ( >=  in22 97))  ( <=  in22 122))  ( >=  in23 97))  ( <=  in23 122))  ( >=  in24 97))  ( <=  in24 122))  ( >=  in25 97))  ( <=  in25 122))  ( >=  in26 97))  ( <=  in26 122))  ( >=  in27 97))  ( <=  in27 122))  ( >=  in28 97))  ( <=  in28 122))  ( >=  in29 97))  ( <=  in29 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122)) (and (>= in18 97) (<= in18 122)) (and (>= in19 97) (<= in19 122)) (and (>= in20 97) (<= in20 122)) (and (>= in21 97) (<= in21 122)) (and (>= in22 97) (<= in22 122)) (and (>= in23 97) (<= in23 122)) (and (>= in24 97) (<= in24 122)) (and (>= in25 97) (<= in25 122)) (and (>= in26 97) (<= in26 122)) (and (>= in27 97) (<= in27 122)) (and (>= in28 97) (<= in28 122)) (and (>= in29 97) (<= in29 122))))",
        "equivalent": true
      }
    }
  },
  "SameOnlyThird": {
    "succeeded": true,
    "attempts": 1,
    "examples_right": 30,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert ( = in2 0))",
        "equivalent": true
      }
    }
  },
  "SameString": {
    "succeeded": true,
    "attempts": 1,
    "examples_right": 30,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)"
          ],
          "assertions": [
            "(assert  ( =  in0 120))"
          ]
        },
        "predicted": "(assert (and (= in0 120)))",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and  ( =  in0 120)  ( =  in1 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120)))",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120)))",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120)))",
        "equivalent": true
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120)))",
        "equivalent": true
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120) (= in5 120)))",
        "equivalent": true
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120) (= in5 120) (= in6 120)))",
        "equivalent": true
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120) (= in5 120) (= in6 120) (= in7 120)))",
        "equivalent": true
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120) (= in5 120) (= in6 120) (= in7 120) (= in8 120)))",
        "equivalent": true
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120) (= in5 120) (= in6 120) (= in7 120) (= in8 120) (= in9 120)))",
        "equivalent": true
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120) (= in5 120) (= in6 120) (= in7 120) (= in8 120) (= in9 120) (= in10 120)))",
        "equivalent": true
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120) (= in5 120) (= in6 120) (= in7 120) (= in8 120) (= in9 120) (= in10 120) (= in11 120)))",
        "equivalent": true
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120) (= in5 120) (= in6 120) (= in7 120) (= in8 120) (= in9 120) (= in10 120) (= in11 120) (= in12 120)))",
        "equivalent": true
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120) (= in5 120) (= in6 120) (= in7 120) (= in8 120) (= in9 120) (= in10 120) (= in11 120) (= in12 120) (= in13 120)))",
        "equivalent": true
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120) (= in5 120) (= in6 120) (= in7 120) (= in8 120) (= in9 120) (= in10 120) (= in11 120) (= in12 120) (= in13 120) (= in14 120)))",
        "equivalent": true
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120) (= in5 120) (= in6 120) (= in7 120) (= in8 120) (= in9 120) (= in10 120) (= in11 120) (= in12 120) (= in13 120) (= in14 120) (= in15 120)))",
        "equivalent": true
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120) (= in5 120) (= in6 120) (= in7 120) (= in8 120) (= in9 120) (= in10 120) (= in11 120) (= in12 120) (= in13 120) (= in14 120) (= in15 120) (= in16 120)))",
        "equivalent": true
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120) (= in5 120) (= in6 120) (= in7 120) (= in8 120) (= in9 120) (= in10 120) (= in11 120) (= in12 120) (= in13 120) (= in14 120) (= in15 120) (= in16 120) (= in17 120)))",
        "equivalent": true
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120))  ( =  in18 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120) (= in5 120) (= in6 120) (= in7 120) (= in8 120) (= in9 120) (= in10 120) (= in11 120) (= in12 120) (= in13 120) (= in14 120) (= in15 120) (= in16 120) (= in17 120) (= in18 120)))",
        "equivalent": true
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120))  ( =  in18 120))  ( =  in19 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120) (= in5 120) (= in6 120) (= in7 120) (= in8 120) (= in9 120) (= in10 120) (= in11 120) (= in12 120) (= in13 120) (= in14 120) (= in15 120) (= in16 120) (= in17 120) (= in18 120) (= in19 120)))",
        "equivalent": true
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120))  ( =  in18 120))  ( =  in19 120))  ( =  in20 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120) (= in5 120) (= in6 120) (= in7 120) (= in8 120) (= in9 120) (= in10 120) (= in11 120) (= in12 120) (= in13 120) (= in14 120) (= in15 120) (= in16 120) (= in17 120) (= in18 120) (= in19 120) (= in20 120)))",
        "equivalent": true
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120))  ( =  in18 120))  ( =  in19 120))  ( =  in20 120))  ( =  in21 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120) (= in5 120) (= in6 120) (= in7 120) (= in8 120) (= in9 120) (= in10 120) (= in11 120) (= in12 120) (= in13 120) (= in14 120) (= in15 120) (= in16 120) (= in17 120) (= in18 120) (= in19 120) (= in20 120) (= in21 120)))",
        "equivalent": true
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120))  ( =  in18 120))  ( =  in19 120))  ( =  in20 120))  ( =  in21 120))  ( =  in22 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120) (= in5 120) (= in6 120) (= in7 120) (= in8 120) (= in9 120) (= in10 120) (= in11 120) (= in12 120) (= in13 120) (= in14 120) (= in15 120) (= in16 120) (= in17 120) (= in18 120) (= in19 120) (= in20 120) (= in21 120) (= in22 120)))",
        "equivalent": true
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120))  ( =  in18 120))  ( =  in19 120))  ( =  in20 120))  ( =  in21 120))  ( =  in22 120))  ( =  in23 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120) (= in5 120) (= in6 120) (= in7 120) (= in8 120) (= in9 120) (= in10 120) (= in11 120) (= in12 120) (= in13 120) (= in14 120) (= in15 120) (= in16 120) (= in17 120) (= in18 120) (= in19 120) (= in20 120) (= in21 120) (= in22 120) (= in23 120)))",
        "equivalent": true
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120))  ( =  in18 120))  ( =  in19 120))  ( =  in20 120))  ( =  in21 120))  ( =  in22 120))  ( =  in23 120))  ( =  in24 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120) (= in5 120) (= in6 120) (= in7 120) (= in8 120) (= in9 120) (= in10 120) (= in11 120) (= in12 120) (= in13 120) (= in14 120) (= in15 120) (= in16 120) (= in17 120) (= in18 120) (= in19 120) (= in20 120) (= in21 120) (= in22 120) (= in23 120) (= in24 120)))",
        "equivalent": true
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120))  ( =  in18 120))  ( =  in19 120))  ( =  in20 120))  ( =  in21 120))  ( =  in22 120))  ( =  in23 120))  ( =  in24 120))  ( =  in25 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120) (= in5 120) (= in6 120) (= in7 120) (= in8 120) (= in9 120) (= in10 120) (= in11 120) (= in12 120) (= in13 120) (= in14 120) (= in15 120) (= in16 120) (= in17 120) (= in18 120) (= in19 120) (= in20 120) (= in21 120) (= in22 120) (= in23 120) (= in24 120) (= in25 120)))",
        "equivalent": true
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120))  ( =  in18 120))  ( =  in19 120))  ( =  in20 120))  ( =  in21 120))  ( =  in22 120))  ( =  in23 120))  ( =  in24 120))  ( =  in25 120))  ( =  in26 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120) (= in5 120) (= in6 120) (= in7 120) (= in8 120) (= in9 120) (= in10 120) (= in11 120) (= in12 120) (= in13 120) (= in14 120) (= in15 120) (= in16 120) (= in17 120) (= in18 120) (= in19 120) (= in20 120) (= in21 120) (= in22 120) (= in23 120) (= in24 120) (= in25 120) (= in26 120)))",
        "equivalent": true
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120))  ( =  in18 120))  ( =  in19 120))  ( =  in20 120))  ( =  in21 120))  ( =  in22 120))  ( =  in23 120))  ( =  in24 120))  ( =  in25 120))  ( =  in26 120))  ( =  in27 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120) (= in5 120) (= in6 120) (= in7 120) (= in8 120) (= in9 120) (= in10 120) (= in11 120) (= in12 120) (= in13 120) (= in14 120) (= in15 120) (= in16 120) (= in17 120) (= in18 120) (= in19 120) (= in20 120) (= in21 120) (= in22 120) (= in23 120) (= in24 120) (= in25 120) (= in26 120) (= in27 120)))",
        "equivalent": true
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120))  ( =  in18 120))  ( =  in19 120))  ( =  in20 120))  ( =  in21 120))  ( =  in22 120))  ( =  in23 120))  ( =  in24 120))  ( =  in25 120))  ( =  in26 120))  ( =  in27 120))  ( =  in28 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120) (= in5 120) (= in6 120) (= in7 120) (= in8 120) (= in9 120) (= in10 120) (= in11 120) (= in12 120) (= in13 120) (= in14 120) (= in15 120) (= in16 120) (= in17 120) (= in18 120) (= in19 120) (= in20 120) (= in21 120) (= in22 120) (= in23 120) (= in24 120) (= in25 120) (= in26 120) (= in27 120) (= in28 120)))",
        "equivalent": true
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120))  ( =  in18 120))  ( =  in19 120))  ( =  in20 120))  ( =  in21 120))  ( =  in22 120))  ( =  in23 120))  ( =  in24 120))  ( =  in25 120))  ( =  in26 120))  ( =  in27 120))  ( =  in28 120))  ( =  in29 120)))"
          ]
        },
        "predicted": "(assert (and (= in0 120) (= in1 120) (= in2 120) (= in3 120) (= in4 120) (= in5 120) (= in6 120) (= in7 120) (= in8 120) (= in9 120) (= in10 120) (= in11 120) (= in12 120) (= in13 120) (= in14 120) (= in15 120) (= in16 120) (= in17 120) (= in18 120) (= in19 120) (= in20 120) (= in21 120) (= in22 120) (= in23 120) (= in24 120) (= in25 120) (= in26 120) (= in27 120) (= in28 120) (= in29 120)))",
        "equivalent": true
      }
    }
  },
  "SimpleAscendingLast": {
    "succeeded": false,
    "attempts": 10,
    "examples_right": 2,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert  ( <  in1 in0))"
          ]
        },
        "predicted": "(assert ( <  in1 in0))",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and  ( <  in0 in1)  ( <  in2 in0)))"
          ]
        },
        "predicted": "(assert (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in0)))",
        "equivalent": false
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in3 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in0)))",
        "equivalent": false
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in4 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in0)))",
        "equivalent": false
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in5 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in5)) ( <  in5 in0)))",
        "equivalent": false
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in6 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in5)) ( <  in5 in6)) ( <  in6 in0)))",
        "equivalent": false
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in7 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in5)) ( <  in5 in6)) ( <  in6 in7)) ( <  in7 in0)))",
        "equivalent": false
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in8 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in5)) ( <  in5 in6)) ( <  in6 in7)) ( <  in7 in8)) ( <  in8 in0)))",
        "equivalent": false
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in9 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in5)) ( <  in5 in6)) ( <  in6 in7)) ( <  in7 in8)) ( <  in8 in9)) ( <  in9 in0)))",
        "equivalent": false
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in10 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in5)) ( <  in5 in6)) ( <  in6 in7)) ( <  in7 in8)) ( <  in8 in9)) ( <  in9 in10)) ( <  in10 in0)))",
        "equivalent": false
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in11 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in5)) ( <  in5 in6)) ( <  in6 in7)) ( <  in7 in8)) ( <  in8 in9)) ( <  in9 in10)) ( <  in10 in11)) ( <  in11 in0)))",
        "equivalent": false
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in12 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in5)) ( <  in5 in6)) ( <  in6 in7)) ( <  in7 in8)) ( <  in8 in9)) ( <  in9 in10)) ( <  in10 in11)) ( <  in11 in12)) ( <  in12 in0)))",
        "equivalent": false
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in13 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in5)) ( <  in5 in6)) ( <  in6 in7)) ( <  in7 in8)) ( <  in8 in9)) ( <  in9 in10)) ( <  in10 in11)) ( <  in11 in12)) ( <  in12 in13)) ( <  in13 in0)))",
        "equivalent": false
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in14 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in5)) ( <  in5 in6)) ( <  in6 in7)) ( <  in7 in8)) ( <  in8 in9)) ( <  in9 in10)) ( <  in10 in11)) ( <  in11 in12)) ( <  in12 in13)) ( <  in13 in14)) ( <  in14 in0)))",
        "equivalent": false
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in15 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in5)) ( <  in5 in6)) ( <  in6 in7)) ( <  in7 in8)) ( <  in8 in9)) ( <  in9 in10)) ( <  in10 in11)) ( <  in11 in12)) ( <  in12 in13)) ( <  in13 in14)) ( <  in14 in15)) ( <  in15 in0)))",
        "equivalent": false
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in16 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in5)) ( <  in5 in6)) ( <  in6 in7)) ( <  in7 in8)) ( <  in8 in9)) ( <  in9 in10)) ( <  in10 in11)) ( <  in11 in12)) ( <  in12 in13)) ( <  in13 in14)) ( <  in14 in15)) ( <  in15 in16)) ( <  in16 in0)))",
        "equivalent": false
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in17 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in5)) ( <  in5 in6)) ( <  in6 in7)) ( <  in7 in8)) ( <  in8 in9)) ( <  in9 in10)) ( <  in10 in11)) ( <  in11 in12)) ( <  in12 in13)) ( <  in13 in14)) ( <  in14 in15)) ( <  in15 in16)) ( <  in16 in17)) ( <  in17 in0)))",
        "equivalent": false
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in18 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in5)) ( <  in5 in6)) ( <  in6 in7)) ( <  in7 in8)) ( <  in8 in9)) ( <  in9 in10)) ( <  in10 in11)) ( <  in11 in12)) ( <  in12 in13)) ( <  in13 in14)) ( <  in14 in15)) ( <  in15 in16)) ( <  in16 in17)) ( <  in17 in18)) ( <  in18 in0)))",
        "equivalent": false
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in19 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in5)) ( <  in5 in6)) ( <  in6 in7)) ( <  in7 in8)) ( <  in8 in9)) ( <  in9 in10)) ( <  in10 in11)) ( <  in11 in12)) ( <  in12 in13)) ( <  in13 in14)) ( <  in14 in15)) ( <  in15 in16)) ( <  in16 in17)) ( <  in17 in18)) ( <  in18 in19)) ( <  in19 in0)))",
        "equivalent": false
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in20 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in5)) ( <  in5 in6)) ( <  in6 in7)) ( <  in7 in8)) ( <  in8 in9)) ( <  in9 in10)) ( <  in10 in11)) ( <  in11 in12)) ( <  in12 in13)) ( <  in13 in14)) ( <  in14 in15)) ( <  in15 in16)) ( <  in16 in17)) ( <  in17 in18)) ( <  in18 in19)) ( <  in19 in20)) ( <  in20 in0)))",
        "equivalent": false
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in21 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in5)) ( <  in5 in6)) ( <  in6 in7)) ( <  in7 in8)) ( <  in8 in9)) ( <  in9 in10)) ( <  in10 in11)) ( <  in11 in12)) ( <  in12 in13)) ( <  in13 in14)) ( <  in14 in15)) ( <  in15 in16)) ( <  in16 in17)) ( <  in17 in18)) ( <  in18 in19)) ( <  in19 in20)) ( <  in20 in21)) ( <  in21 in0)))",
        "equivalent": false
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21))  ( <  in22 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in5)) ( <  in5 in6)) ( <  in6 in7)) ( <  in7 in8)) ( <  in8 in9)) ( <  in9 in10)) ( <  in10 in11)) ( <  in11 in12)) ( <  in12 in13)) ( <  in13 in14)) ( <  in14 in15)) ( <  in15 in16)) ( <  in16 in17)) ( <  in17 in18)) ( <  in18 in19)) ( <  in19 in20)) ( <  in20 in21)) ( <  in21 in22)) ( <  in22 in0)))",
        "equivalent": false
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21))  ( <  in21 in22))  ( <  in23 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in5)) ( <  in5 in6)) ( <  in6 in7)) ( <  in7 in8)) ( <  in8 in9)) ( <  in9 in10)) ( <  in10 in11)) ( <  in11 in12)) ( <  in12 in13)) ( <  in13 in14)) ( <  in14 in15)) ( <  in15 in16)) ( <  in16 in17)) ( <  in17 in18)) ( <  in18 in19)) ( <  in19 in20)) ( <  in20 in21)) ( <  in21 in22)) ( <  in22 in23)) ( <  in23 in0)))",
        "equivalent": false
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21))  ( <  in21 in22))  ( <  in22 in23))  ( <  in24 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in5)) ( <  in5 in6)) ( <  in6 in7)) ( <  in7 in8)) ( <  in8 in9)) ( <  in9 in10)) ( <  in10 in11)) ( <  in11 in12)) ( <  in12 in13)) ( <  in13 in14)) ( <  in14 in15)) ( <  in15 in16)) ( <  in16 in17)) ( <  in17 in18)) ( <  in18 in19)) ( <  in19 in20)) ( <  in20 in21)) ( <  in21 in22)) ( <  in22 in23)) ( <  in23 in24)) ( <  in24 in0)))",
        "equivalent": false
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21))  ( <  in21 in22))  ( <  in22 in23))  ( <  in23 in24))  ( <  in25 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in5)) ( <  in5 in6)) ( <  in6 in7)) ( <  in7 in8)) ( <  in8 in9)) ( <  in9 in10)) ( <  in10 in11)) ( <  in11 in12)) ( <  in12 in13)) ( <  in13 in14)) ( <  in14 in15)) ( <  in15 in16)) ( <  in16 in17)) ( <  in17 in18)) ( <  in18 in19)) ( <  in19 in20)) ( <  in20 in21)) ( <  in21 in22)) ( <  in22 in23)) ( <  in23 in24)) ( <  in24 in25)) ( <  in25 in0)))",
        "equivalent": false
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21))  ( <  in21 in22))  ( <  in22 in23))  ( <  in23 in24))  ( <  in24 in25))  ( <  in26 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in5)) ( <  in5 in6)) ( <  in6 in7)) ( <  in7 in8)) ( <  in8 in9)) ( <  in9 in10)) ( <  in10 in11)) ( <  in11 in12)) ( <  in12 in13)) ( <  in13 in14)) ( <  in14 in15)) ( <  in15 in16)) ( <  in16 in17)) ( <  in17 in18)) ( <  in18 in19)) ( <  in19 in20)) ( <  in20 in21)) ( <  in21 in22)) ( <  in22 in23)) ( <  in23 in24)) ( <  in24 in25)) ( <  in25 in26)) ( <  in26 in0)))",
        "equivalent": false
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21))  ( <  in21 in22))  ( <  in22 in23))  ( <  in23 in24))  ( <  in24 in25))  ( <  in25 in26))  ( <  in27 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in5)) ( <  in5 in6)) ( <  in6 in7)) ( <  in7 in8)) ( <  in8 in9)) ( <  in9 in10)) ( <  in10 in11)) ( <  in11 in12)) ( <  in12 in13)) ( <  in13 in14)) ( <  in14 in15)) ( <  in15 in16)) ( <  in16 in17)) ( <  in17 in18)) ( <  in18 in19)) ( <  in19 in20)) ( <  in20 in21)) ( <  in21 in22)) ( <  in22 in23)) ( <  in23 in24)) ( <  in24 in25)) ( <  in25 in26)) ( <  in26 in27)) ( <  in27 in0)))",
        "equivalent": false
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21))  ( <  in21 in22))  ( <  in22 in23))  ( <  in23 in24))  ( <  in24 in25))  ( <  in25 in26))  ( <  in26 in27))  ( <  in28 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in5)) ( <  in5 in6)) ( <  in6 in7)) ( <  in7 in8)) ( <  in8 in9)) ( <  in9 in10)) ( <  in10 in11)) ( <  in11 in12)) ( <  in12 in13)) ( <  in13 in14)) ( <  in14 in15)) ( <  in15 in16)) ( <  in16 in17)) ( <  in17 in18)) ( <  in18 in19)) ( <  in19 in20)) ( <  in20 in21)) ( <  in21 in22)) ( <  in22 in23)) ( <  in23 in24)) ( <  in24 in25)) ( <  in25 in26)) ( <  in26 in27)) ( <  in27 in28)) ( <  in28 in0)))",
        "equivalent": false
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21))  ( <  in21 in22))  ( <  in22 in23))  ( <  in23 in24))  ( <  in24 in25))  ( <  in25 in26))  ( <  in26 in27))  ( <  in27 in28))  ( <  in29 in0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( <  in0 in1) ( <  in1 in2)) ( <  in2 in3)) ( <  in3 in4)) ( <  in4 in5)) ( <  in5 in6)) ( <  in6 in7)) ( <  in7 in8)) ( <  in8 in9)) ( <  in9 in10)) ( <  in10 in11)) ( <  in11 in12)) ( <  in12 in13)) ( <  in13 in14)) ( <  in14 in15)) ( <  in15 in16)) ( <  in16 in17)) ( <  in17 in18)) ( <  in18 in19)) ( <  in19 in20)) ( <  in20 in21)) ( <  in21 in22)) ( <  in22 in23)) ( <  in23 in24)) ( <  in24 in25)) ( <  in25 in26)) ( <  in26 in27)) ( <  in27 in28)) ( <  in28 in29)) ( <  in29 in0)))",
        "equivalent": false
      }
    }
  },
  "SimpleEveryThird": {
    "succeeded": true,
    "attempts": 1,
    "examples_right": 30,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert  ( =  in3 0))"
          ]
        },
        "predicted": "(assert (= in3 0))",
        "equivalent": true
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert  ( =  in3 0))"
          ]
        },
        "predicted": "(assert (= in3 0))",
        "equivalent": true
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert  ( =  in3 0))"
          ]
        },
        "predicted": "(assert (= in3 0))",
        "equivalent": true
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and  ( =  in3 0)  ( =  in6 0)))"
          ]
        },
        "predicted": "(assert (and (= in3 0) (= in6 0)))",
        "equivalent": true
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and  ( =  in3 0)  ( =  in6 0)))"
          ]
        },
        "predicted": "(assert (and (= in3 0) (= in6 0)))",
        "equivalent": true
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and  ( =  in3 0)  ( =  in6 0)))"
          ]
        },
        "predicted": "(assert (and (= in3 0) (= in6 0)))",
        "equivalent": true
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in9 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0)))"
          ]
        },
        "predicted": "(assert (and (and (= in3 0) (= in6 0) (= in9 0))))",
        "equivalent": true
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in9 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0)))"
          ]
        },
        "predicted": "(assert (and (and (= in3 0) (= in6 0) (= in9 0))))",
        "equivalent": true
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in9 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0)))"
          ]
        },
        "predicted": "(assert (and (and (= in3 0) (= in6 0) (= in9 0))))",
        "equivalent": true
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0)))"
          ]
        },
        "predicted": "(assert (and (and (and (= in3 0) (= in6 0) (= in9 0) (= in12 0)))))",
        "equivalent": true
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0)))"
          ]
        },
        "predicted": "(assert (and (and (and (= in3 0) (= in6 0) (= in9 0) (= in12 0)))))",
        "equivalent": true
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0)))"
          ]
        },
        "predicted": "(assert (and (and (and (= in3 0) (= in6 0) (= in9 0) (= in12 0)))))",
        "equivalent": true
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (= in3 0) (= in6 0) (= in9 0) (= in12 0) (= in15 0))))))",
        "equivalent": true
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (= in3 0) (= in6 0) (= in9 0) (= in12 0) (= in15 0))))))",
        "equivalent": true
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (= in3 0) (= in6 0) (= in9 0) (= in12 0) (= in15 0))))))",
        "equivalent": true
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in18 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0))  ( =  in18 0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (= in3 0) (= in6 0) (= in9 0) (= in12 0) (= in15 0) (= in18 0)))))))",
        "equivalent": true
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in18 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0))  ( =  in18 0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (= in3 0) (= in6 0) (= in9 0) (= in12 0) (= in15 0) (= in18 0)))))))",
        "equivalent": true
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in18 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0))  ( =  in18 0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (= in3 0) (= in6 0) (= in9 0) (= in12 0) (= in15 0) (= in18 0)))))))",
        "equivalent": true
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in21 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in18 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0))  ( =  in18 0))  ( =  in21 0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (= in3 0) (= in6 0) (= in9 0) (= in12 0) (= in15 0) (= in18 0) (= in21 0))))))))",
        "equivalent": true
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in21 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in18 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0))  ( =  in18 0))  ( =  in21 0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (= in3 0) (= in6 0) (= in9 0) (= in12 0) (= in15 0) (= in18 0) (= in21 0))))))))",
        "equivalent": true
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in21 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in18 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0))  ( =  in18 0))  ( =  in21 0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (= in3 0) (= in6 0) (= in9 0) (= in12 0) (= in15 0) (= in18 0) (= in21 0))))))))",
        "equivalent": true
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in21 Int)",
            "(declare-const in9 Int)",
            "(declare-const in24 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in18 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0))  ( =  in18 0))  ( =  in21 0))  ( =  in24 0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (= in3 0) (= in6 0) (= in9 0) (= in12 0) (= in15 0) (= in18 0) (= in21 0) (= in24 0)))))))))",
        "equivalent": true
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in21 Int)",
            "(declare-const in9 Int)",
            "(declare-const in24 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in18 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0))  ( =  in18 0))  ( =  in21 0))  ( =  in24 0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (= in3 0) (= in6 0) (= in9 0) (= in12 0) (= in15 0) (= in18 0) (= in21 0) (= in24 0)))))))))",
        "equivalent": true
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in21 Int)",
            "(declare-const in9 Int)",
            "(declare-const in24 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in18 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0))  ( =  in18 0))  ( =  in21 0))  ( =  in24 0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (= in3 0) (= in6 0) (= in9 0) (= in12 0) (= in15 0) (= in18 0) (= in21 0) (= in24 0)))))))))",
        "equivalent": true
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in21 Int)",
            "(declare-const in9 Int)",
            "(declare-const in24 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in27 Int)",
            "(declare-const in18 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0))  ( =  in18 0))  ( =  in21 0))  ( =  in24 0))  ( =  in27 0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (= in3 0) (= in6 0) (= in9 0) (= in12 0) (= in15 0) (= in18 0) (= in21 0) (= in24 0) (= in27 0))))))))))",
        "equivalent": true
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in21 Int)",
            "(declare-const in9 Int)",
            "(declare-const in24 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in27 Int)",
            "(declare-const in18 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0))  ( =  in18 0))  ( =  in21 0))  ( =  in24 0))  ( =  in27 0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (= in3 0) (= in6 0) (= in9 0) (= in12 0) (= in15 0) (= in18 0) (= in21 0) (= in24 0) (= in27 0))))))))))",
        "equivalent": true
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in21 Int)",
            "(declare-const in9 Int)",
            "(declare-const in24 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in27 Int)",
            "(declare-const in18 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0))  ( =  in18 0))  ( =  in21 0))  ( =  in24 0))  ( =  in27 0)))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (= in3 0) (= in6 0) (= in9 0) (= in12 0) (= in15 0) (= in18 0) (= in21 0) (= in24 0) (= in27 0))))))))))",
        "equivalent": true
      }
    }
  },
  "SimpleSignFlip": {
    "succeeded": true,
    "attempts": 1,
    "examples_right": 30,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert  ( =  in0 in1))"
          ]
        },
        "predicted": "(assert (and (= in0 in1)))",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and  ( =  in0 in1)  ( <  in1 in2)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2)))",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3)))",
        "equivalent": true
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4)))",
        "equivalent": true
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4) (= in4 in5)))",
        "equivalent": true
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4) (= in4 in5) (< in5 in6)))",
        "equivalent": true
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4) (= in4 in5) (< in5 in6) (= in6 in7)))",
        "equivalent": true
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4) (= in4 in5) (< in5 in6) (= in6 in7) (< in7 in8)))",
        "equivalent": true
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4) (= in4 in5) (< in5 in6) (= in6 in7) (< in7 in8) (= in8 in9)))",
        "equivalent": true
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4) (= in4 in5) (< in5 in6) (= in6 in7) (< in7 in8) (= in8 in9) (< in9 in10)))",
        "equivalent": true
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4) (= in4 in5) (< in5 in6) (= in6 in7) (< in7 in8) (= in8 in9) (< in9 in10) (= in10 in11)))",
        "equivalent": true
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4) (= in4 in5) (< in5 in6) (= in6 in7) (< in7 in8) (= in8 in9) (< in9 in10) (= in10 in11) (< in11 in12)))",
        "equivalent": true
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4) (= in4 in5) (< in5 in6) (= in6 in7) (< in7 in8) (= in8 in9) (< in9 in10) (= in10 in11) (< in11 in12) (= in12 in13)))",
        "equivalent": true
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4) (= in4 in5) (< in5 in6) (= in6 in7) (< in7 in8) (= in8 in9) (< in9 in10) (= in10 in11) (< in11 in12) (= in12 in13) (< in13 in14)))",
        "equivalent": true
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4) (= in4 in5) (< in5 in6) (= in6 in7) (< in7 in8) (= in8 in9) (< in9 in10) (= in10 in11) (< in11 in12) (= in12 in13) (< in13 in14) (= in14 in15)))",
        "equivalent": true
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4) (= in4 in5) (< in5 in6) (= in6 in7) (< in7 in8) (= in8 in9) (< in9 in10) (= in10 in11) (< in11 in12) (= in12 in13) (< in13 in14) (= in14 in15) (< in15 in16)))",
        "equivalent": true
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4) (= in4 in5) (< in5 in6) (= in6 in7) (< in7 in8) (= in8 in9) (< in9 in10) (= in10 in11) (< in11 in12) (= in12 in13) (< in13 in14) (= in14 in15) (< in15 in16) (= in16 in17)))",
        "equivalent": true
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17))  ( <  in17 in18)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4) (= in4 in5) (< in5 in6) (= in6 in7) (< in7 in8) (= in8 in9) (< in9 in10) (= in10 in11) (< in11 in12) (= in12 in13) (< in13 in14) (= in14 in15) (< in15 in16) (= in16 in17) (< in17 in18)))",
        "equivalent": true
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17))  ( <  in17 in18))  ( =  in18 in19)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4) (= in4 in5) (< in5 in6) (= in6 in7) (< in7 in8) (= in8 in9) (< in9 in10) (= in10 in11) (< in11 in12) (= in12 in13) (< in13 in14) (= in14 in15) (< in15 in16) (= in16 in17) (< in17 in18) (= in18 in19)))",
        "equivalent": true
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17))  ( <  in17 in18))  ( =  in18 in19))  ( <  in19 in20)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4) (= in4 in5) (< in5 in6) (= in6 in7) (< in7 in8) (= in8 in9) (< in9 in10) (= in10 in11) (< in11 in12) (= in12 in13) (< in13 in14) (= in14 in15) (< in15 in16) (= in16 in17) (< in17 in18) (= in18 in19) (< in19 in20)))",
        "equivalent": true
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17))  ( <  in17 in18))  ( =  in18 in19))  ( <  in19 in20))  ( =  in20 in21)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4) (= in4 in5) (< in5 in6) (= in6 in7) (< in7 in8) (= in8 in9) (< in9 in10) (= in10 in11) (< in11 in12) (= in12 in13) (< in13 in14) (= in14 in15) (< in15 in16) (= in16 in17) (< in17 in18) (= in18 in19) (< in19 in20) (= in20 in21)))",
        "equivalent": true
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17))  ( <  in17 in18))  ( =  in18 in19))  ( <  in19 in20))  ( =  in20 in21))  ( <  in21 in22)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4) (= in4 in5) (< in5 in6) (= in6 in7) (< in7 in8) (= in8 in9) (< in9 in10) (= in10 in11) (< in11 in12) (= in12 in13) (< in13 in14) (= in14 in15) (< in15 in16) (= in16 in17) (< in17 in18) (= in18 in19) (< in19 in20) (= in20 in21) (< in21 in22)))",
        "equivalent": true
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17))  ( <  in17 in18))  ( =  in18 in19))  ( <  in19 in20))  ( =  in20 in21))  ( <  in21 in22))  ( =  in22 in23)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4) (= in4 in5) (< in5 in6) (= in6 in7) (< in7 in8) (= in8 in9) (< in9 in10) (= in10 in11) (< in11 in12) (= in12 in13) (< in13 in14) (= in14 in15) (< in15 in16) (= in16 in17) (< in17 in18) (= in18 in19) (< in19 in20) (= in20 in21) (< in21 in22) (= in22 in23)))",
        "equivalent": true
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17))  ( <  in17 in18))  ( =  in18 in19))  ( <  in19 in20))  ( =  in20 in21))  ( <  in21 in22))  ( =  in22 in23))  ( <  in23 in24)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4) (= in4 in5) (< in5 in6) (= in6 in7) (< in7 in8) (= in8 in9) (< in9 in10) (= in10 in11) (< in11 in12) (= in12 in13) (< in13 in14) (= in14 in15) (< in15 in16) (= in16 in17) (< in17 in18) (= in18 in19) (< in19 in20) (= in20 in21) (< in21 in22) (= in22 in23) (< in23 in24)))",
        "equivalent": true
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17))  ( <  in17 in18))  ( =  in18 in19))  ( <  in19 in20))  ( =  in20 in21))  ( <  in21 in22))  ( =  in22 in23))  ( <  in23 in24))  ( =  in24 in25)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4) (= in4 in5) (< in5 in6) (= in6 in7) (< in7 in8) (= in8 in9) (< in9 in10) (= in10 in11) (< in11 in12) (= in12 in13) (< in13 in14) (= in14 in15) (< in15 in16) (= in16 in17) (< in17 in18) (= in18 in19) (< in19 in20) (= in20 in21) (< in21 in22) (= in22 in23) (< in23 in24) (= in24 in25)))",
        "equivalent": true
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17))  ( <  in17 in18))  ( =  in18 in19))  ( <  in19 in20))  ( =  in20 in21))  ( <  in21 in22))  ( =  in22 in23))  ( <  in23 in24))  ( =  in24 in25))  ( <  in25 in26)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4) (= in4 in5) (< in5 in6) (= in6 in7) (< in7 in8) (= in8 in9) (< in9 in10) (= in10 in11) (< in11 in12) (= in12 in13) (< in13 in14) (= in14 in15) (< in15 in16) (= in16 in17) (< in17 in18) (= in18 in19) (< in19 in20) (= in20 in21) (< in21 in22) (= in22 in23) (< in23 in24) (= in24 in25) (< in25 in26)))",
        "equivalent": true
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17))  ( <  in17 in18))  ( =  in18 in19))  ( <  in19 in20))  ( =  in20 in21))  ( <  in21 in22))  ( =  in22 in23))  ( <  in23 in24))  ( =  in24 in25))  ( <  in25 in26))  ( =  in26 in27)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4) (= in4 in5) (< in5 in6) (= in6 in7) (< in7 in8) (= in8 in9) (< in9 in10) (= in10 in11) (< in11 in12) (= in12 in13) (< in13 in14) (= in14 in15) (< in15 in16) (= in16 in17) (< in17 in18) (= in18 in19) (< in19 in20) (= in20 in21) (< in21 in22) (= in22 in23) (< in23 in24) (= in24 in25) (< in25 in26) (= in26 in27)))",
        "equivalent": true
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17))  ( <  in17 in18))  ( =  in18 in19))  ( <  in19 in20))  ( =  in20 in21))  ( <  in21 in22))  ( =  in22 in23))  ( <  in23 in24))  ( =  in24 in25))  ( <  in25 in26))  ( =  in26 in27))  ( <  in27 in28)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4) (= in4 in5) (< in5 in6) (= in6 in7) (< in7 in8) (= in8 in9) (< in9 in10) (= in10 in11) (< in11 in12) (= in12 in13) (< in13 in14) (= in14 in15) (< in15 in16) (= in16 in17) (< in17 in18) (= in18 in19) (< in19 in20) (= in20 in21) (< in21 in22) (= in22 in23) (< in23 in24) (= in24 in25) (< in25 in26) (= in26 in27) (< in27 in28)))",
        "equivalent": true
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17))  ( <  in17 in18))  ( =  in18 in19))  ( <  in19 in20))  ( =  in20 in21))  ( <  in21 in22))  ( =  in22 in23))  ( <  in23 in24))  ( =  in24 in25))  ( <  in25 in26))  ( =  in26 in27))  ( <  in27 in28))  ( =  in28 in29)))"
          ]
        },
        "predicted": "(assert (and (= in0 in1) (< in1 in2) (= in2 in3) (< in3 in4) (= in4 in5) (< in5 in6) (= in6 in7) (< in7 in8) (= in8 in9) (< in9 in10) (= in10 in11) (< in11 in12) (= in12 in13) (< in13 in14) (= in14 in15) (< in15 in16) (= in16 in17) (< in17 in18) (= in18 in19) (< in19 in20) (= in20 in21) (< in21 in22) (= in22 in23) (< in23 in24) (= in24 in25) (< in25 in26) (= in26 in27) (< in27 in28) (= in28 in29)))",
        "equivalent": true
      }
    }
  },
  "SimpleSymmetric": {
    "succeeded": true,
    "attempts": 1,
    "examples_right": 30,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in1x0 Int)",
            "(declare-const in0x1 Int)"
          ],
          "assertions": [
            "(assert  ( =  in1x0 in0x1))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1)))",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in2x1 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in0x2 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2)))",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in3x2 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in0x2 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3)))",
        "equivalent": true
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in4x3 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in0x2 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4)))",
        "equivalent": true
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5x2 Int)",
            "(declare-const in2x5 Int)",
            "(declare-const in4x3 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in5x3 Int)",
            "(declare-const in3x5 Int)",
            "(declare-const in5x0 Int)",
            "(declare-const in0x5 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in5x1 Int)",
            "(declare-const in1x5 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in5x4 Int)",
            "(declare-const in4x5 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in0x2 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4) ( = in5x0 in0x5) ( = in5x1 in1x5) ( = in5x2 in2x5) ( = in5x3 in3x5) ( = in5x4 in4x5)))",
        "equivalent": true
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6x1 Int)",
            "(declare-const in1x6 Int)",
            "(declare-const in5x2 Int)",
            "(declare-const in2x5 Int)",
            "(declare-const in4x3 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in6x2 Int)",
            "(declare-const in2x6 Int)",
            "(declare-const in5x3 Int)",
            "(declare-const in3x5 Int)",
            "(declare-const in5x0 Int)",
            "(declare-const in0x5 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in6x0 Int)",
            "(declare-const in0x6 Int)",
            "(declare-const in5x1 Int)",
            "(declare-const in1x5 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in6x5 Int)",
            "(declare-const in5x6 Int)",
            "(declare-const in6x3 Int)",
            "(declare-const in3x6 Int)",
            "(declare-const in5x4 Int)",
            "(declare-const in4x5 Int)",
            "(declare-const in6x4 Int)",
            "(declare-const in4x6 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in0x2 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4) ( = in5x0 in0x5) ( = in5x1 in1x5) ( = in5x2 in2x5) ( = in5x3 in3x5) ( = in5x4 in4x5) ( = in6x0 in0x6) ( = in6x1 in1x6) ( = in6x2 in2x6) ( = in6x3 in3x6) ( = in6x4 in4x6) ( = in6x5 in5x6)))",
        "equivalent": true
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in7x6 Int)",
            "(declare-const in7x0 Int)",
            "(declare-const in1x6 Int)",
            "(declare-const in5x2 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in7x1 Int)",
            "(declare-const in1x7 Int)",
            "(declare-const in5x3 Int)",
            "(declare-const in3x5 Int)",
            "(declare-const in5x0 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in5x1 Int)",
            "(declare-const in1x5 Int)",
            "(declare-const in7x4 Int)",
            "(declare-const in5x6 Int)",
            "(declare-const in7x5 Int)",
            "(declare-const in5x7 Int)",
            "(declare-const in7x2 Int)",
            "(declare-const in3x6 Int)",
            "(declare-const in5x4 Int)",
            "(declare-const in7x3 Int)",
            "(declare-const in3x7 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in6x7 Int)",
            "(declare-const in0x7 Int)",
            "(declare-const in6x1 Int)",
            "(declare-const in2x5 Int)",
            "(declare-const in4x3 Int)",
            "(declare-const in6x2 Int)",
            "(declare-const in2x6 Int)",
            "(declare-const in0x5 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in6x0 Int)",
            "(declare-const in0x6 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in4x7 Int)",
            "(declare-const in6x5 Int)",
            "(declare-const in2x7 Int)",
            "(declare-const in6x3 Int)",
            "(declare-const in4x5 Int)",
            "(declare-const in6x4 Int)",
            "(declare-const in4x6 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in0x2 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6))  ( =  in7x0 in0x7))  ( =  in7x1 in1x7))  ( =  in7x2 in2x7))  ( =  in7x3 in3x7))  ( =  in7x4 in4x7))  ( =  in7x5 in5x7))  ( =  in7x6 in6x7)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4) ( = in5x0 in0x5) ( = in5x1 in1x5) ( = in5x2 in2x5) ( = in5x3 in3x5) ( = in5x4 in4x5) ( = in6x0 in0x6) ( = in6x1 in1x6) ( = in6x2 in2x6) ( = in6x3 in3x6) ( = in6x4 in4x6) ( = in6x5 in5x6) ( = in7x0 in0x7) ( = in7x1 in1x7) ( = in7x2 in2x7) ( = in7x3 in3x7) ( = in7x4 in4x7) ( = in7x5 in5x7) ( = in7x6 in6x7)))",
        "equivalent": true
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in7x8 Int)",
            "(declare-const in5x8 Int)",
            "(declare-const in7x6 Int)",
            "(declare-const in7x0 Int)",
            "(declare-const in1x6 Int)",
            "(declare-const in5x2 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in7x1 Int)",
            "(declare-const in1x7 Int)",
            "(declare-const in5x3 Int)",
            "(declare-const in3x5 Int)",
            "(declare-const in5x0 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in5x1 Int)",
            "(declare-const in1x5 Int)",
            "(declare-const in3x8 Int)",
            "(declare-const in7x4 Int)",
            "(declare-const in5x6 Int)",
            "(declare-const in7x5 Int)",
            "(declare-const in5x7 Int)",
            "(declare-const in1x8 Int)",
            "(declare-const in7x2 Int)",
            "(declare-const in3x6 Int)",
            "(declare-const in5x4 Int)",
            "(declare-const in7x3 Int)",
            "(declare-const in3x7 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in8x7 Int)",
            "(declare-const in8x5 Int)",
            "(declare-const in6x7 Int)",
            "(declare-const in8x6 Int)",
            "(declare-const in6x8 Int)",
            "(declare-const in0x7 Int)",
            "(declare-const in6x1 Int)",
            "(declare-const in2x5 Int)",
            "(declare-const in4x3 Int)",
            "(declare-const in8x0 Int)",
            "(declare-const in0x8 Int)",
            "(declare-const in6x2 Int)",
            "(declare-const in2x6 Int)",
            "(declare-const in0x5 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in6x0 Int)",
            "(declare-const in0x6 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in8x3 Int)",
            "(declare-const in4x7 Int)",
            "(declare-const in6x5 Int)",
            "(declare-const in8x4 Int)",
            "(declare-const in4x8 Int)",
            "(declare-const in8x1 Int)",
            "(declare-const in2x7 Int)",
            "(declare-const in6x3 Int)",
            "(declare-const in4x5 Int)",
            "(declare-const in8x2 Int)",
            "(declare-const in2x8 Int)",
            "(declare-const in6x4 Int)",
            "(declare-const in4x6 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in0x2 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6))  ( =  in7x0 in0x7))  ( =  in7x1 in1x7))  ( =  in7x2 in2x7))  ( =  in7x3 in3x7))  ( =  in7x4 in4x7))  ( =  in7x5 in5x7))  ( =  in7x6 in6x7))  ( =  in8x0 in0x8))  ( =  in8x1 in1x8))  ( =  in8x2 in2x8))  ( =  in8x3 in3x8))  ( =  in8x4 in4x8))  ( =  in8x5 in5x8))  ( =  in8x6 in6x8))  ( =  in8x7 in7x8)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4) ( = in5x0 in0x5) ( = in5x1 in1x5) ( = in5x2 in2x5) ( = in5x3 in3x5) ( = in5x4 in4x5) ( = in6x0 in0x6) ( = in6x1 in1x6) ( = in6x2 in2x6) ( = in6x3 in3x6) ( = in6x4 in4x6) ( = in6x5 in5x6) ( = in7x0 in0x7) ( = in7x1 in1x7) ( = in7x2 in2x7) ( = in7x3 in3x7) ( = in7x4 in4x7) ( = in7x5 in5x7) ( = in7x6 in6x7) ( = in8x0 in0x8) ( = in8x1 in1x8) ( = in8x2 in2x8) ( = in8x3 in3x8) ( = in8x4 in4x8) ( = in8x5 in5x8) ( = in8x6 in6x8) ( = in8x7 in7x8)))",
        "equivalent": true
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in9x6 Int)",
            "(declare-const in7x8 Int)",
            "(declare-const in9x7 Int)",
            "(declare-const in7x9 Int)",
            "(declare-const in9x4 Int)",
            "(declare-const in5x8 Int)",
            "(declare-const in7x6 Int)",
            "(declare-const in9x5 Int)",
            "(declare-const in5x9 Int)",
            "(declare-const in9x8 Int)",
            "(declare-const in7x0 Int)",
            "(declare-const in1x6 Int)",
            "(declare-const in5x2 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in7x1 Int)",
            "(declare-const in1x7 Int)",
            "(declare-const in5x3 Int)",
            "(declare-const in3x5 Int)",
            "(declare-const in5x0 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in5x1 Int)",
            "(declare-const in1x5 Int)",
            "(declare-const in9x2 Int)",
            "(declare-const in3x8 Int)",
            "(declare-const in7x4 Int)",
            "(declare-const in5x6 Int)",
            "(declare-const in9x3 Int)",
            "(declare-const in3x9 Int)",
            "(declare-const in7x5 Int)",
            "(declare-const in5x7 Int)",
            "(declare-const in9x0 Int)",
            "(declare-const in1x8 Int)",
            "(declare-const in7x2 Int)",
            "(declare-const in3x6 Int)",
            "(declare-const in5x4 Int)",
            "(declare-const in9x1 Int)",
            "(declare-const in1x9 Int)",
            "(declare-const in7x3 Int)",
            "(declare-const in3x7 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in6x9 Int)",
            "(declare-const in8x7 Int)",
            "(declare-const in4x9 Int)",
            "(declare-const in8x5 Int)",
            "(declare-const in6x7 Int)",
            "(declare-const in8x6 Int)",
            "(declare-const in6x8 Int)",
            "(declare-const in8x9 Int)",
            "(declare-const in0x7 Int)",
            "(declare-const in6x1 Int)",
            "(declare-const in2x5 Int)",
            "(declare-const in4x3 Int)",
            "(declare-const in8x0 Int)",
            "(declare-const in0x8 Int)",
            "(declare-const in6x2 Int)",
            "(declare-const in2x6 Int)",
            "(declare-const in0x5 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in6x0 Int)",
            "(declare-const in0x6 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in2x9 Int)",
            "(declare-const in8x3 Int)",
            "(declare-const in4x7 Int)",
            "(declare-const in6x5 Int)",
            "(declare-const in8x4 Int)",
            "(declare-const in4x8 Int)",
            "(declare-const in0x9 Int)",
            "(declare-const in8x1 Int)",
            "(declare-const in2x7 Int)",
            "(declare-const in6x3 Int)",
            "(declare-const in4x5 Int)",
            "(declare-const in8x2 Int)",
            "(declare-const in2x8 Int)",
            "(declare-const in6x4 Int)",
            "(declare-const in4x6 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in0x2 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6))  ( =  in7x0 in0x7))  ( =  in7x1 in1x7))  ( =  in7x2 in2x7))  ( =  in7x3 in3x7))  ( =  in7x4 in4x7))  ( =  in7x5 in5x7))  ( =  in7x6 in6x7))  ( =  in8x0 in0x8))  ( =  in8x1 in1x8))  ( =  in8x2 in2x8))  ( =  in8x3 in3x8))  ( =  in8x4 in4x8))  ( =  in8x5 in5x8))  ( =  in8x6 in6x8))  ( =  in8x7 in7x8))  ( =  in9x0 in0x9))  ( =  in9x1 in1x9))  ( =  in9x2 in2x9))  ( =  in9x3 in3x9))  ( =  in9x4 in4x9))  ( =  in9x5 in5x9))  ( =  in9x6 in6x9))  ( =  in9x7 in7x9))  ( =  in9x8 in8x9)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4) ( = in5x0 in0x5) ( = in5x1 in1x5) ( = in5x2 in2x5) ( = in5x3 in3x5) ( = in5x4 in4x5) ( = in6x0 in0x6) ( = in6x1 in1x6) ( = in6x2 in2x6) ( = in6x3 in3x6) ( = in6x4 in4x6) ( = in6x5 in5x6) ( = in7x0 in0x7) ( = in7x1 in1x7) ( = in7x2 in2x7) ( = in7x3 in3x7) ( = in7x4 in4x7) ( = in7x5 in5x7) ( = in7x6 in6x7) ( = in8x0 in0x8) ( = in8x1 in1x8) ( = in8x2 in2x8) ( = in8x3 in3x8) ( = in8x4 in4x8) ( = in8x5 in5x8) ( = in8x6 in6x8) ( = in8x7 in7x8) ( = in9x0 in0x9) ( = in9x1 in1x9) ( = in9x2 in2x9) ( = in9x3 in3x9) ( = in9x4 in4x9) ( = in9x5 in5x9) ( = in9x6 in6x9) ( = in9x7 in7x9) ( = in9x8 in8x9)))",
        "equivalent": true
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in7x8 Int)",
            "(declare-const in7x9 Int)",
            "(declare-const in7x6 Int)",
            "(declare-const in7x0 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in7x1 Int)",
            "(declare-const in3x5 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in6x10 Int)",
            "(declare-const in3x8 Int)",
            "(declare-const in7x4 Int)",
            "(declare-const in3x9 Int)",
            "(declare-const in7x5 Int)",
            "(declare-const in7x2 Int)",
            "(declare-const in3x6 Int)",
            "(declare-const in7x3 Int)",
            "(declare-const in3x7 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in9x10 Int)",
            "(declare-const in1x10 Int)",
            "(declare-const in8x7 Int)",
            "(declare-const in4x9 Int)",
            "(declare-const in8x5 Int)",
            "(declare-const in8x6 Int)",
            "(declare-const in8x9 Int)",
            "(declare-const in0x7 Int)",
            "(declare-const in4x3 Int)",
            "(declare-const in8x0 Int)",
            "(declare-const in0x8 Int)",
            "(declare-const in8x10 Int)",
            "(declare-const in0x5 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in0x6 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in8x3 Int)",
            "(declare-const in4x7 Int)",
            "(declare-const in8x4 Int)",
            "(declare-const in4x8 Int)",
            "(declare-const in0x9 Int)",
            "(declare-const in8x1 Int)",
            "(declare-const in4x5 Int)",
            "(declare-const in8x2 Int)",
            "(declare-const in4x6 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in0x10 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in0x2 Int)",
            "(declare-const in3x10 Int)",
            "(declare-const in9x6 Int)",
            "(declare-const in9x7 Int)",
            "(declare-const in9x4 Int)",
            "(declare-const in5x8 Int)",
            "(declare-const in9x5 Int)",
            "(declare-const in5x9 Int)",
            "(declare-const in9x8 Int)",
            "(declare-const in10x5 Int)",
            "(declare-const in1x6 Int)",
            "(declare-const in5x2 Int)",
            "(declare-const in10x4 Int)",
            "(declare-const in1x7 Int)",
            "(declare-const in5x3 Int)",
            "(declare-const in10x7 Int)",
            "(declare-const in5x0 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in10x6 Int)",
            "(declare-const in5x1 Int)",
            "(declare-const in1x5 Int)",
            "(declare-const in10x9 Int)",
            "(declare-const in9x2 Int)",
            "(declare-const in5x6 Int)",
            "(declare-const in10x8 Int)",
            "(declare-const in9x3 Int)",
            "(declare-const in5x7 Int)",
            "(declare-const in9x0 Int)",
            "(declare-const in1x8 Int)",
            "(declare-const in5x4 Int)",
            "(declare-const in9x1 Int)",
            "(declare-const in1x9 Int)",
            "(declare-const in2x10 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in5x10 Int)",
            "(declare-const in6x9 Int)",
            "(declare-const in6x7 Int)",
            "(declare-const in6x8 Int)",
            "(declare-const in6x1 Int)",
            "(declare-const in2x5 Int)",
            "(declare-const in6x2 Int)",
            "(declare-const in2x6 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in6x0 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in2x9 Int)",
            "(declare-const in6x5 Int)",
            "(declare-const in2x7 Int)",
            "(declare-const in6x3 Int)",
            "(declare-const in2x8 Int)",
            "(declare-const in6x4 Int)",
            "(declare-const in4x10 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in10x1 Int)",
            "(declare-const in10x0 Int)",
            "(declare-const in10x3 Int)",
            "(declare-const in10x2 Int)",
            "(declare-const in7x10 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6))  ( =  in7x0 in0x7))  ( =  in7x1 in1x7))  ( =  in7x2 in2x7))  ( =  in7x3 in3x7))  ( =  in7x4 in4x7))  ( =  in7x5 in5x7))  ( =  in7x6 in6x7))  ( =  in8x0 in0x8))  ( =  in8x1 in1x8))  ( =  in8x2 in2x8))  ( =  in8x3 in3x8))  ( =  in8x4 in4x8))  ( =  in8x5 in5x8))  ( =  in8x6 in6x8))  ( =  in8x7 in7x8))  ( =  in9x0 in0x9))  ( =  in9x1 in1x9))  ( =  in9x2 in2x9))  ( =  in9x3 in3x9))  ( =  in9x4 in4x9))  ( =  in9x5 in5x9))  ( =  in9x6 in6x9))  ( =  in9x7 in7x9))  ( =  in9x8 in8x9))  ( =  in10x0 in0x10))  ( =  in10x1 in1x10))  ( =  in10x2 in2x10))  ( =  in10x3 in3x10))  ( =  in10x4 in4x10))  ( =  in10x5 in5x10))  ( =  in10x6 in6x10))  ( =  in10x7 in7x10))  ( =  in10x8 in8x10))  ( =  in10x9 in9x10)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4) ( = in5x0 in0x5) ( = in5x1 in1x5) ( = in5x2 in2x5) ( = in5x3 in3x5) ( = in5x4 in4x5) ( = in6x0 in0x6) ( = in6x1 in1x6) ( = in6x2 in2x6) ( = in6x3 in3x6) ( = in6x4 in4x6) ( = in6x5 in5x6) ( = in7x0 in0x7) ( = in7x1 in1x7) ( = in7x2 in2x7) ( = in7x3 in3x7) ( = in7x4 in4x7) ( = in7x5 in5x7) ( = in7x6 in6x7) ( = in8x0 in0x8) ( = in8x1 in1x8) ( = in8x2 in2x8) ( = in8x3 in3x8) ( = in8x4 in4x8) ( = in8x5 in5x8) ( = in8x6 in6x8) ( = in8x7 in7x8) ( = in9x0 in0x9) ( = in9x1 in1x9) ( = in9x2 in2x9) ( = in9x3 in3x9) ( = in9x4 in4x9) ( = in9x5 in5x9) ( = in9x6 in6x9) ( = in9x7 in7x9) ( = in9x8 in8x9) ( = in10x0 in0x10) ( = in10x1 in1x10) ( = in10x2 in2x10) ( = in10x3 in3x10) ( = in10x4 in4x10) ( = in10x5 in5x10) ( = in10x6 in6x10) ( = in10x7 in7x10) ( = in10x8 in8x10) ( = in10x9 in9x10)))",
        "equivalent": true
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in7x8 Int)",
            "(declare-const in7x9 Int)",
            "(declare-const in7x6 Int)",
            "(declare-const in7x0 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in7x1 Int)",
            "(declare-const in3x5 Int)",
            "(declare-const in6x11 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in6x10 Int)",
            "(declare-const in3x8 Int)",
            "(declare-const in7x4 Int)",
            "(declare-const in3x9 Int)",
            "(declare-const in7x5 Int)",
            "(declare-const in7x2 Int)",
            "(declare-const in3x6 Int)",
            "(declare-const in7x3 Int)",
            "(declare-const in3x7 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in11x0 Int)",
            "(declare-const in11x2 Int)",
            "(declare-const in11x1 Int)",
            "(declare-const in9x11 Int)",
            "(declare-const in9x10 Int)",
            "(declare-const in1x10 Int)",
            "(declare-const in1x11 Int)",
            "(declare-const in8x7 Int)",
            "(declare-const in4x9 Int)",
            "(declare-const in8x5 Int)",
            "(declare-const in8x6 Int)",
            "(declare-const in8x9 Int)",
            "(declare-const in0x7 Int)",
            "(declare-const in4x3 Int)",
            "(declare-const in8x0 Int)",
            "(declare-const in0x8 Int)",
            "(declare-const in8x10 Int)",
            "(declare-const in0x5 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in8x11 Int)",
            "(declare-const in0x6 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in8x3 Int)",
            "(declare-const in4x7 Int)",
            "(declare-const in8x4 Int)",
            "(declare-const in4x8 Int)",
            "(declare-const in0x9 Int)",
            "(declare-const in8x1 Int)",
            "(declare-const in4x5 Int)",
            "(declare-const in8x2 Int)",
            "(declare-const in4x6 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in0x10 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in0x11 Int)",
            "(declare-const in0x2 Int)",
            "(declare-const in3x11 Int)",
            "(declare-const in3x10 Int)",
            "(declare-const in9x6 Int)",
            "(declare-const in9x7 Int)",
            "(declare-const in9x4 Int)",
            "(declare-const in5x8 Int)",
            "(declare-const in9x5 Int)",
            "(declare-const in5x9 Int)",
            "(declare-const in9x8 Int)",
            "(declare-const in10x5 Int)",
            "(declare-const in1x6 Int)",
            "(declare-const in5x2 Int)",
            "(declare-const in10x4 Int)",
            "(declare-const in1x7 Int)",
            "(declare-const in5x3 Int)",
            "(declare-const in10x7 Int)",
            "(declare-const in5x0 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in10x6 Int)",
            "(declare-const in5x1 Int)",
            "(declare-const in1x5 Int)",
            "(declare-const in10x9 Int)",
            "(declare-const in9x2 Int)",
            "(declare-const in5x6 Int)",
            "(declare-const in10x8 Int)",
            "(declare-const in9x3 Int)",
            "(declare-const in5x7 Int)",
            "(declare-const in9x0 Int)",
            "(declare-const in1x8 Int)",
            "(declare-const in5x4 Int)",
            "(declare-const in9x1 Int)",
            "(declare-const in1x9 Int)",
            "(declare-const in2x11 Int)",
            "(declare-const in2x10 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in11x10 Int)",
            "(declare-const in5x10 Int)",
            "(declare-const in5x11 Int)",
            "(declare-const in6x9 Int)",
            "(declare-const in6x7 Int)",
            "(declare-const in6x8 Int)",
            "(declare-const in11x4 Int)",
            "(declare-const in6x1 Int)",
            "(declare-const in2x5 Int)",
            "(declare-const in11x3 Int)",
            "(declare-const in6x2 Int)",
            "(declare-const in2x6 Int)",
            "(declare-const in11x6 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in11x5 Int)",
            "(declare-const in6x0 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in11x8 Int)",
            "(declare-const in2x9 Int)",
            "(declare-const in6x5 Int)",
            "(declare-const in11x7 Int)",
            "(declare-const in2x7 Int)",
            "(declare-const in6x3 Int)",
            "(declare-const in11x9 Int)",
            "(declare-const in2x8 Int)",
            "(declare-const in6x4 Int)",
            "(declare-const in4x10 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in4x11 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in10x1 Int)",
            "(declare-const in10x0 Int)",
            "(declare-const in10x3 Int)",
            "(declare-const in10x2 Int)",
            "(declare-const in7x10 Int)",
            "(declare-const in7x11 Int)",
            "(declare-const in10x11 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6))  ( =  in7x0 in0x7))  ( =  in7x1 in1x7))  ( =  in7x2 in2x7))  ( =  in7x3 in3x7))  ( =  in7x4 in4x7))  ( =  in7x5 in5x7))  ( =  in7x6 in6x7))  ( =  in8x0 in0x8))  ( =  in8x1 in1x8))  ( =  in8x2 in2x8))  ( =  in8x3 in3x8))  ( =  in8x4 in4x8))  ( =  in8x5 in5x8))  ( =  in8x6 in6x8))  ( =  in8x7 in7x8))  ( =  in9x0 in0x9))  ( =  in9x1 in1x9))  ( =  in9x2 in2x9))  ( =  in9x3 in3x9))  ( =  in9x4 in4x9))  ( =  in9x5 in5x9))  ( =  in9x6 in6x9))  ( =  in9x7 in7x9))  ( =  in9x8 in8x9))  ( =  in10x0 in0x10))  ( =  in10x1 in1x10))  ( =  in10x2 in2x10))  ( =  in10x3 in3x10))  ( =  in10x4 in4x10))  ( =  in10x5 in5x10))  ( =  in10x6 in6x10))  ( =  in10x7 in7x10))  ( =  in10x8 in8x10))  ( =  in10x9 in9x10))  ( =  in11x0 in0x11))  ( =  in11x1 in1x11))  ( =  in11x2 in2x11))  ( =  in11x3 in3x11))  ( =  in11x4 in4x11))  ( =  in11x5 in5x11))  ( =  in11x6 in6x11))  ( =  in11x7 in7x11))  ( =  in11x8 in8x11))  ( =  in11x9 in9x11))  ( =  in11x10 in10x11)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4) ( = in5x0 in0x5) ( = in5x1 in1x5) ( = in5x2 in2x5) ( = in5x3 in3x5) ( = in5x4 in4x5) ( = in6x0 in0x6) ( = in6x1 in1x6) ( = in6x2 in2x6) ( = in6x3 in3x6) ( = in6x4 in4x6) ( = in6x5 in5x6) ( = in7x0 in0x7) ( = in7x1 in1x7) ( = in7x2 in2x7) ( = in7x3 in3x7) ( = in7x4 in4x7) ( = in7x5 in5x7) ( = in7x6 in6x7) ( = in8x0 in0x8) ( = in8x1 in1x8) ( = in8x2 in2x8) ( = in8x3 in3x8) ( = in8x4 in4x8) ( = in8x5 in5x8) ( = in8x6 in6x8) ( = in8x7 in7x8) ( = in9x0 in0x9) ( = in9x1 in1x9) ( = in9x2 in2x9) ( = in9x3 in3x9) ( = in9x4 in4x9) ( = in9x5 in5x9) ( = in9x6 in6x9) ( = in9x7 in7x9) ( = in9x8 in8x9) ( = in10x0 in0x10) ( = in10x1 in1x10) ( = in10x2 in2x10) ( = in10x3 in3x10) ( = in10x4 in4x10) ( = in10x5 in5x10) ( = in10x6 in6x10) ( = in10x7 in7x10) ( = in10x8 in8x10) ( = in10x9 in9x10) ( = in11x0 in0x11) ( = in11x1 in1x11) ( = in11x2 in2x11) ( = in11x3 in3x11) ( = in11x4 in4x11) ( = in11x5 in5x11) ( = in11x6 in6x11) ( = in11x7 in7x11) ( = in11x8 in8x11) ( = in11x9 in9x11) ( = in11x10 in10x11)))",
        "equivalent": true
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in7x8 Int)",
            "(declare-const in7x9 Int)",
            "(declare-const in7x6 Int)",
            "(declare-const in12x4 Int)",
            "(declare-const in7x0 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in12x5 Int)",
            "(declare-const in7x1 Int)",
            "(declare-const in3x5 Int)",
            "(declare-const in12x2 Int)",
            "(declare-const in6x11 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in12x3 Int)",
            "(declare-const in6x10 Int)",
            "(declare-const in12x8 Int)",
            "(declare-const in3x8 Int)",
            "(declare-const in7x4 Int)",
            "(declare-const in12x9 Int)",
            "(declare-const in3x9 Int)",
            "(declare-const in7x5 Int)",
            "(declare-const in12x6 Int)",
            "(declare-const in7x2 Int)",
            "(declare-const in3x6 Int)",
            "(declare-const in12x7 Int)",
            "(declare-const in7x3 Int)",
            "(declare-const in3x7 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in6x12 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in11x0 Int)",
            "(declare-const in11x2 Int)",
            "(declare-const in11x1 Int)",
            "(declare-const in9x11 Int)",
            "(declare-const in9x12 Int)",
            "(declare-const in9x10 Int)",
            "(declare-const in1x10 Int)",
            "(declare-const in12x11 Int)",
            "(declare-const in1x12 Int)",
            "(declare-const in12x10 Int)",
            "(declare-const in1x11 Int)",
            "(declare-const in8x7 Int)",
            "(declare-const in4x9 Int)",
            "(declare-const in8x5 Int)",
            "(declare-const in8x6 Int)",
            "(declare-const in8x9 Int)",
            "(declare-const in8x12 Int)",
            "(declare-const in0x7 Int)",
            "(declare-const in4x3 Int)",
            "(declare-const in8x0 Int)",
            "(declare-const in0x8 Int)",
            "(declare-const in8x10 Int)",
            "(declare-const in0x5 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in8x11 Int)",
            "(declare-const in0x6 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in8x3 Int)",
            "(declare-const in4x7 Int)",
            "(declare-const in8x4 Int)",
            "(declare-const in4x8 Int)",
            "(declare-const in0x9 Int)",
            "(declare-const in8x1 Int)",
            "(declare-const in4x5 Int)",
            "(declare-const in8x2 Int)",
            "(declare-const in4x6 Int)",
            "(declare-const in0x12 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in0x10 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in0x11 Int)",
            "(declare-const in0x2 Int)",
            "(declare-const in12x0 Int)",
            "(declare-const in12x1 Int)",
            "(declare-const in3x12 Int)",
            "(declare-const in3x11 Int)",
            "(declare-const in3x10 Int)",
            "(declare-const in9x6 Int)",
            "(declare-const in9x7 Int)",
            "(declare-const in9x4 Int)",
            "(declare-const in5x8 Int)",
            "(declare-const in9x5 Int)",
            "(declare-const in5x9 Int)",
            "(declare-const in9x8 Int)",
            "(declare-const in10x5 Int)",
            "(declare-const in1x6 Int)",
            "(declare-const in5x2 Int)",
            "(declare-const in10x4 Int)",
            "(declare-const in1x7 Int)",
            "(declare-const in5x3 Int)",
            "(declare-const in10x7 Int)",
            "(declare-const in5x0 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in10x6 Int)",
            "(declare-const in5x1 Int)",
            "(declare-const in1x5 Int)",
            "(declare-const in10x9 Int)",
            "(declare-const in9x2 Int)",
            "(declare-const in5x6 Int)",
            "(declare-const in10x8 Int)",
            "(declare-const in9x3 Int)",
            "(declare-const in5x7 Int)",
            "(declare-const in9x0 Int)",
            "(declare-const in1x8 Int)",
            "(declare-const in5x4 Int)",
            "(declare-const in9x1 Int)",
            "(declare-const in1x9 Int)",
            "(declare-const in2x11 Int)",
            "(declare-const in11x12 Int)",
            "(declare-const in2x10 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in2x12 Int)",
            "(declare-const in11x10 Int)",
            "(declare-const in5x10 Int)",
            "(declare-const in5x11 Int)",
            "(declare-const in5x12 Int)",
            "(declare-const in6x9 Int)",
            "(declare-const in6x7 Int)",
            "(declare-const in6x8 Int)",
            "(declare-const in11x4 Int)",
            "(declare-const in6x1 Int)",
            "(declare-const in2x5 Int)",
            "(declare-const in11x3 Int)",
            "(declare-const in6x2 Int)",
            "(declare-const in2x6 Int)",
            "(declare-const in11x6 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in11x5 Int)",
            "(declare-const in6x0 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in11x8 Int)",
            "(declare-const in2x9 Int)",
            "(declare-const in6x5 Int)",
            "(declare-const in11x7 Int)",
            "(declare-const in2x7 Int)",
            "(declare-const in6x3 Int)",
            "(declare-const in11x9 Int)",
            "(declare-const in2x8 Int)",
            "(declare-const in6x4 Int)",
            "(declare-const in4x10 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in4x11 Int)",
            "(declare-const in4x12 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in10x1 Int)",
            "(declare-const in10x0 Int)",
            "(declare-const in10x3 Int)",
            "(declare-const in10x2 Int)",
            "(declare-const in7x10 Int)",
            "(declare-const in7x12 Int)",
            "(declare-const in7x11 Int)",
            "(declare-const in10x12 Int)",
            "(declare-const in10x11 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6))  ( =  in7x0 in0x7))  ( =  in7x1 in1x7))  ( =  in7x2 in2x7))  ( =  in7x3 in3x7))  ( =  in7x4 in4x7))  ( =  in7x5 in5x7))  ( =  in7x6 in6x7))  ( =  in8x0 in0x8))  ( =  in8x1 in1x8))  ( =  in8x2 in2x8))  ( =  in8x3 in3x8))  ( =  in8x4 in4x8))  ( =  in8x5 in5x8))  ( =  in8x6 in6x8))  ( =  in8x7 in7x8))  ( =  in9x0 in0x9))  ( =  in9x1 in1x9))  ( =  in9x2 in2x9))  ( =  in9x3 in3x9))  ( =  in9x4 in4x9))  ( =  in9x5 in5x9))  ( =  in9x6 in6x9))  ( =  in9x7 in7x9))  ( =  in9x8 in8x9))  ( =  in10x0 in0x10))  ( =  in10x1 in1x10))  ( =  in10x2 in2x10))  ( =  in10x3 in3x10))  ( =  in10x4 in4x10))  ( =  in10x5 in5x10))  ( =  in10x6 in6x10))  ( =  in10x7 in7x10))  ( =  in10x8 in8x10))  ( =  in10x9 in9x10))  ( =  in11x0 in0x11))  ( =  in11x1 in1x11))  ( =  in11x2 in2x11))  ( =  in11x3 in3x11))  ( =  in11x4 in4x11))  ( =  in11x5 in5x11))  ( =  in11x6 in6x11))  ( =  in11x7 in7x11))  ( =  in11x8 in8x11))  ( =  in11x9 in9x11))  ( =  in11x10 in10x11))  ( =  in12x0 in0x12))  ( =  in12x1 in1x12))  ( =  in12x2 in2x12))  ( =  in12x3 in3x12))  ( =  in12x4 in4x12))  ( =  in12x5 in5x12))  ( =  in12x6 in6x12))  ( =  in12x7 in7x12))  ( =  in12x8 in8x12))  ( =  in12x9 in9x12))  ( =  in12x10 in10x12))  ( =  in12x11 in11x12)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4) ( = in5x0 in0x5) ( = in5x1 in1x5) ( = in5x2 in2x5) ( = in5x3 in3x5) ( = in5x4 in4x5) ( = in6x0 in0x6) ( = in6x1 in1x6) ( = in6x2 in2x6) ( = in6x3 in3x6) ( = in6x4 in4x6) ( = in6x5 in5x6) ( = in7x0 in0x7) ( = in7x1 in1x7) ( = in7x2 in2x7) ( = in7x3 in3x7) ( = in7x4 in4x7) ( = in7x5 in5x7) ( = in7x6 in6x7) ( = in8x0 in0x8) ( = in8x1 in1x8) ( = in8x2 in2x8) ( = in8x3 in3x8) ( = in8x4 in4x8) ( = in8x5 in5x8) ( = in8x6 in6x8) ( = in8x7 in7x8) ( = in9x0 in0x9) ( = in9x1 in1x9) ( = in9x2 in2x9) ( = in9x3 in3x9) ( = in9x4 in4x9) ( = in9x5 in5x9) ( = in9x6 in6x9) ( = in9x7 in7x9) ( = in9x8 in8x9) ( = in10x0 in0x10) ( = in10x1 in1x10) ( = in10x2 in2x10) ( = in10x3 in3x10) ( = in10x4 in4x10) ( = in10x5 in5x10) ( = in10x6 in6x10) ( = in10x7 in7x10) ( = in10x8 in8x10) ( = in10x9 in9x10) ( = in11x0 in0x11) ( = in11x1 in1x11) ( = in11x2 in2x11) ( = in11x3 in3x11) ( = in11x4 in4x11) ( = in11x5 in5x11) ( = in11x6 in6x11) ( = in11x7 in7x11) ( = in11x8 in8x11) ( = in11x9 in9x11) ( = in11x10 in10x11) ( = in12x0 in0x12) ( = in12x1 in1x12) ( = in12x2 in2x12) ( = in12x3 in3x12) ( = in12x4 in4x12) ( = in12x5 in5x12) ( = in12x6 in6x12) ( = in12x7 in7x12) ( = in12x8 in8x12) ( = in12x9 in9x12) ( = in12x10 in10x12) ( = in12x11 in11x12)))",
        "equivalent": true
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in7x8 Int)",
            "(declare-const in7x9 Int)",
            "(declare-const in7x6 Int)",
            "(declare-const in12x4 Int)",
            "(declare-const in7x0 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in12x5 Int)",
            "(declare-const in7x1 Int)",
            "(declare-const in3x5 Int)",
            "(declare-const in12x2 Int)",
            "(declare-const in6x11 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in12x3 Int)",
            "(declare-const in6x10 Int)",
            "(declare-const in12x8 Int)",
            "(declare-const in3x8 Int)",
            "(declare-const in7x4 Int)",
            "(declare-const in12x9 Int)",
            "(declare-const in3x9 Int)",
            "(declare-const in7x5 Int)",
            "(declare-const in12x6 Int)",
            "(declare-const in7x2 Int)",
            "(declare-const in3x6 Int)",
            "(declare-const in12x7 Int)",
            "(declare-const in7x3 Int)",
            "(declare-const in3x7 Int)",
            "(declare-const in6x13 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in6x12 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in11x0 Int)",
            "(declare-const in11x2 Int)",
            "(declare-const in11x1 Int)",
            "(declare-const in9x13 Int)",
            "(declare-const in9x11 Int)",
            "(declare-const in9x12 Int)",
            "(declare-const in9x10 Int)",
            "(declare-const in1x10 Int)",
            "(declare-const in12x13 Int)",
            "(declare-const in12x11 Int)",
            "(declare-const in1x13 Int)",
            "(declare-const in1x12 Int)",
            "(declare-const in12x10 Int)",
            "(declare-const in1x11 Int)",
            "(declare-const in8x7 Int)",
            "(declare-const in4x9 Int)",
            "(declare-const in8x5 Int)",
            "(declare-const in8x6 Int)",
            "(declare-const in8x9 Int)",
            "(declare-const in13x3 Int)",
            "(declare-const in8x12 Int)",
            "(declare-const in0x7 Int)",
            "(declare-const in4x3 Int)",
            "(declare-const in8x13 Int)",
            "(declare-const in13x4 Int)",
            "(declare-const in8x0 Int)",
            "(declare-const in0x8 Int)",
            "(declare-const in13x1 Int)",
            "(declare-const in8x10 Int)",
            "(declare-const in0x5 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in13x2 Int)",
            "(declare-const in8x11 Int)",
            "(declare-const in0x6 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in13x7 Int)",
            "(declare-const in8x3 Int)",
            "(declare-const in4x7 Int)",
            "(declare-const in13x8 Int)",
            "(declare-const in8x4 Int)",
            "(declare-const in4x8 Int)",
            "(declare-const in13x5 Int)",
            "(declare-const in0x9 Int)",
            "(declare-const in8x1 Int)",
            "(declare-const in4x5 Int)",
            "(declare-const in13x6 Int)",
            "(declare-const in8x2 Int)",
            "(declare-const in4x6 Int)",
            "(declare-const in13x9 Int)",
            "(declare-const in0x12 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in0x13 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in0x10 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in0x11 Int)",
            "(declare-const in0x2 Int)",
            "(declare-const in12x0 Int)",
            "(declare-const in12x1 Int)",
            "(declare-const in3x12 Int)",
            "(declare-const in3x11 Int)",
            "(declare-const in3x10 Int)",
            "(declare-const in3x13 Int)",
            "(declare-const in9x6 Int)",
            "(declare-const in9x7 Int)",
            "(declare-const in9x4 Int)",
            "(declare-const in5x8 Int)",
            "(declare-const in9x5 Int)",
            "(declare-const in5x9 Int)",
            "(declare-const in9x8 Int)",
            "(declare-const in10x5 Int)",
            "(declare-const in1x6 Int)",
            "(declare-const in5x2 Int)",
            "(declare-const in10x4 Int)",
            "(declare-const in1x7 Int)",
            "(declare-const in5x3 Int)",
            "(declare-const in10x7 Int)",
            "(declare-const in5x0 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in10x6 Int)",
            "(declare-const in5x1 Int)",
            "(declare-const in1x5 Int)",
            "(declare-const in10x9 Int)",
            "(declare-const in9x2 Int)",
            "(declare-const in5x6 Int)",
            "(declare-const in10x8 Int)",
            "(declare-const in9x3 Int)",
            "(declare-const in5x7 Int)",
            "(declare-const in9x0 Int)",
            "(declare-const in1x8 Int)",
            "(declare-const in5x4 Int)",
            "(declare-const in9x1 Int)",
            "(declare-const in1x9 Int)",
            "(declare-const in11x13 Int)",
            "(declare-const in2x11 Int)",
            "(declare-const in11x12 Int)",
            "(declare-const in2x10 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in2x13 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in2x12 Int)",
            "(declare-const in11x10 Int)",
            "(declare-const in13x0 Int)",
            "(declare-const in5x10 Int)",
            "(declare-const in5x11 Int)",
            "(declare-const in5x12 Int)",
            "(declare-const in5x13 Int)",
            "(declare-const in6x9 Int)",
            "(declare-const in6x7 Int)",
            "(declare-const in6x8 Int)",
            "(declare-const in11x4 Int)",
            "(declare-const in6x1 Int)",
            "(declare-const in2x5 Int)",
            "(declare-const in11x3 Int)",
            "(declare-const in6x2 Int)",
            "(declare-const in2x6 Int)",
            "(declare-const in11x6 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in11x5 Int)",
            "(declare-const in6x0 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in11x8 Int)",
            "(declare-const in2x9 Int)",
            "(declare-const in6x5 Int)",
            "(declare-const in11x7 Int)",
            "(declare-const in2x7 Int)",
            "(declare-const in6x3 Int)",
            "(declare-const in11x9 Int)",
            "(declare-const in2x8 Int)",
            "(declare-const in6x4 Int)",
            "(declare-const in13x12 Int)",
            "(declare-const in4x10 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in4x11 Int)",
            "(declare-const in13x10 Int)",
            "(declare-const in4x12 Int)",
            "(declare-const in13x11 Int)",
            "(declare-const in4x13 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in10x1 Int)",
            "(declare-const in10x0 Int)",
            "(declare-const in10x3 Int)",
            "(declare-const in10x2 Int)",
            "(declare-const in7x10 Int)",
            "(declare-const in7x12 Int)",
            "(declare-const in7x11 Int)",
            "(declare-const in10x12 Int)",
            "(declare-const in10x11 Int)",
            "(declare-const in10x13 Int)",
            "(declare-const in7x13 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6))  ( =  in7x0 in0x7))  ( =  in7x1 in1x7))  ( =  in7x2 in2x7))  ( =  in7x3 in3x7))  ( =  in7x4 in4x7))  ( =  in7x5 in5x7))  ( =  in7x6 in6x7))  ( =  in8x0 in0x8))  ( =  in8x1 in1x8))  ( =  in8x2 in2x8))  ( =  in8x3 in3x8))  ( =  in8x4 in4x8))  ( =  in8x5 in5x8))  ( =  in8x6 in6x8))  ( =  in8x7 in7x8))  ( =  in9x0 in0x9))  ( =  in9x1 in1x9))  ( =  in9x2 in2x9))  ( =  in9x3 in3x9))  ( =  in9x4 in4x9))  ( =  in9x5 in5x9))  ( =  in9x6 in6x9))  ( =  in9x7 in7x9))  ( =  in9x8 in8x9))  ( =  in10x0 in0x10))  ( =  in10x1 in1x10))  ( =  in10x2 in2x10))  ( =  in10x3 in3x10))  ( =  in10x4 in4x10))  ( =  in10x5 in5x10))  ( =  in10x6 in6x10))  ( =  in10x7 in7x10))  ( =  in10x8 in8x10))  ( =  in10x9 in9x10))  ( =  in11x0 in0x11))  ( =  in11x1 in1x11))  ( =  in11x2 in2x11))  ( =  in11x3 in3x11))  ( =  in11x4 in4x11))  ( =  in11x5 in5x11))  ( =  in11x6 in6x11))  ( =  in11x7 in7x11))  ( =  in11x8 in8x11))  ( =  in11x9 in9x11))  ( =  in11x10 in10x11))  ( =  in12x0 in0x12))  ( =  in12x1 in1x12))  ( =  in12x2 in2x12))  ( =  in12x3 in3x12))  ( =  in12x4 in4x12))  ( =  in12x5 in5x12))  ( =  in12x6 in6x12))  ( =  in12x7 in7x12))  ( =  in12x8 in8x12))  ( =  in12x9 in9x12))  ( =  in12x10 in10x12))  ( =  in12x11 in11x12))  ( =  in13x0 in0x13))  ( =  in13x1 in1x13))  ( =  in13x2 in2x13))  ( =  in13x3 in3x13))  ( =  in13x4 in4x13))  ( =  in13x5 in5x13))  ( =  in13x6 in6x13))  ( =  in13x7 in7x13))  ( =  in13x8 in8x13))  ( =  in13x9 in9x13))  ( =  in13x10 in10x13))  ( =  in13x11 in11x13))  ( =  in13x12 in12x13)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4) ( = in5x0 in0x5) ( = in5x1 in1x5) ( = in5x2 in2x5) ( = in5x3 in3x5) ( = in5x4 in4x5) ( = in6x0 in0x6) ( = in6x1 in1x6) ( = in6x2 in2x6) ( = in6x3 in3x6) ( = in6x4 in4x6) ( = in6x5 in5x6) ( = in7x0 in0x7) ( = in7x1 in1x7) ( = in7x2 in2x7) ( = in7x3 in3x7) ( = in7x4 in4x7) ( = in7x5 in5x7) ( = in7x6 in6x7) ( = in8x0 in0x8) ( = in8x1 in1x8) ( = in8x2 in2x8) ( = in8x3 in3x8) ( = in8x4 in4x8) ( = in8x5 in5x8) ( = in8x6 in6x8) ( = in8x7 in7x8) ( = in9x0 in0x9) ( = in9x1 in1x9) ( = in9x2 in2x9) ( = in9x3 in3x9) ( = in9x4 in4x9) ( = in9x5 in5x9) ( = in9x6 in6x9) ( = in9x7 in7x9) ( = in9x8 in8x9) ( = in10x0 in0x10) ( = in10x1 in1x10) ( = in10x2 in2x10) ( = in10x3 in3x10) ( = in10x4 in4x10) ( = in10x5 in5x10) ( = in10x6 in6x10) ( = in10x7 in7x10) ( = in10x8 in8x10) ( = in10x9 in9x10) ( = in11x0 in0x11) ( = in11x1 in1x11) ( = in11x2 in2x11) ( = in11x3 in3x11) ( = in11x4 in4x11) ( = in11x5 in5x11) ( = in11x6 in6x11) ( = in11x7 in7x11) ( = in11x8 in8x11) ( = in11x9 in9x11) ( = in11x10 in10x11) ( = in12x0 in0x12) ( = in12x1 in1x12) ( = in12x2 in2x12) ( = in12x3 in3x12) ( = in12x4 in4x12) ( = in12x5 in5x12) ( = in12x6 in6x12) ( = in12x7 in7x12) ( = in12x8 in8x12) ( = in12x9 in9x12) ( = in12x10 in10x12) ( = in12x11 in11x12) ( = in13x0 in0x13) ( = in13x1 in1x13) ( = in13x2 in2x13) ( = in13x3 in3x13) ( = in13x4 in4x13) ( = in13x5 in5x13) ( = in13x6 in6x13) ( = in13x7 in7x13) ( = in13x8 in8x13) ( = in13x9 in9x13) ( = in13x10 in10x13) ( = in13x11 in11x13) ( = in13x12 in12x13)))",
        "equivalent": true
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in7x8 Int)",
            "(declare-const in7x9 Int)",
            "(declare-const in7x6 Int)",
            "(declare-const in12x4 Int)",
            "(declare-const in7x0 Int)",
            "(declare-const in12x5 Int)",
            "(declare-const in7x1 Int)",
            "(declare-const in12x2 Int)",
            "(declare-const in6x11 Int)",
            "(declare-const in12x3 Int)",
            "(declare-const in6x10 Int)",
            "(declare-const in12x8 Int)",
            "(declare-const in7x4 Int)",
            "(declare-const in12x9 Int)",
            "(declare-const in7x5 Int)",
            "(declare-const in12x6 Int)",
            "(declare-const in7x2 Int)",
            "(declare-const in12x7 Int)",
            "(declare-const in7x3 Int)",
            "(declare-const in6x13 Int)",
            "(declare-const in6x12 Int)",
            "(declare-const in6x14 Int)",
            "(declare-const in11x0 Int)",
            "(declare-const in11x2 Int)",
            "(declare-const in11x1 Int)",
            "(declare-const in1x10 Int)",
            "(declare-const in12x13 Int)",
            "(declare-const in12x14 Int)",
            "(declare-const in1x14 Int)",
            "(declare-const in12x11 Int)",
            "(declare-const in1x13 Int)",
            "(declare-const in1x12 Int)",
            "(declare-const in12x10 Int)",
            "(declare-const in1x11 Int)",
            "(declare-const in0x14 Int)",
            "(declare-const in8x7 Int)",
            "(declare-const in8x5 Int)",
            "(declare-const in8x6 Int)",
            "(declare-const in8x9 Int)",
            "(declare-const in13x3 Int)",
            "(declare-const in0x7 Int)",
            "(declare-const in13x4 Int)",
            "(declare-const in8x0 Int)",
            "(declare-const in0x8 Int)",
            "(declare-const in13x1 Int)",
            "(declare-const in0x5 Int)",
            "(declare-const in13x2 Int)",
            "(declare-const in0x6 Int)",
            "(declare-const in13x7 Int)",
            "(declare-const in8x3 Int)",
            "(declare-const in13x8 Int)",
            "(declare-const in8x4 Int)",
            "(declare-const in13x5 Int)",
            "(declare-const in0x9 Int)",
            "(declare-const in8x1 Int)",
            "(declare-const in13x6 Int)",
            "(declare-const in8x2 Int)",
            "(declare-const in13x9 Int)",
            "(declare-const in0x12 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in0x13 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in0x10 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in0x11 Int)",
            "(declare-const in0x2 Int)",
            "(declare-const in12x0 Int)",
            "(declare-const in12x1 Int)",
            "(declare-const in9x6 Int)",
            "(declare-const in9x7 Int)",
            "(declare-const in9x4 Int)",
            "(declare-const in9x5 Int)",
            "(declare-const in9x8 Int)",
            "(declare-const in10x5 Int)",
            "(declare-const in1x6 Int)",
            "(declare-const in10x4 Int)",
            "(declare-const in1x7 Int)",
            "(declare-const in10x7 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in10x6 Int)",
            "(declare-const in1x5 Int)",
            "(declare-const in10x9 Int)",
            "(declare-const in9x2 Int)",
            "(declare-const in10x8 Int)",
            "(declare-const in9x3 Int)",
            "(declare-const in9x0 Int)",
            "(declare-const in1x8 Int)",
            "(declare-const in9x1 Int)",
            "(declare-const in1x9 Int)",
            "(declare-const in11x13 Int)",
            "(declare-const in2x11 Int)",
            "(declare-const in11x12 Int)",
            "(declare-const in2x10 Int)",
            "(declare-const in11x14 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in2x14 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in2x13 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in2x12 Int)",
            "(declare-const in11x10 Int)",
            "(declare-const in11x4 Int)",
            "(declare-const in2x5 Int)",
            "(declare-const in11x3 Int)",
            "(declare-const in2x6 Int)",
            "(declare-const in11x6 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in11x5 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in11x8 Int)",
            "(declare-const in2x9 Int)",
            "(declare-const in11x7 Int)",
            "(declare-const in2x7 Int)",
            "(declare-const in11x9 Int)",
            "(declare-const in2x8 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in10x1 Int)",
            "(declare-const in10x0 Int)",
            "(declare-const in10x3 Int)",
            "(declare-const in10x2 Int)",
            "(declare-const in7x10 Int)",
            "(declare-const in7x12 Int)",
            "(declare-const in7x11 Int)",
            "(declare-const in10x12 Int)",
            "(declare-const in10x11 Int)",
            "(declare-const in10x14 Int)",
            "(declare-const in10x13 Int)",
            "(declare-const in7x14 Int)",
            "(declare-const in7x13 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in3x5 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in3x8 Int)",
            "(declare-const in3x9 Int)",
            "(declare-const in3x6 Int)",
            "(declare-const in3x7 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in9x13 Int)",
            "(declare-const in9x14 Int)",
            "(declare-const in9x11 Int)",
            "(declare-const in9x12 Int)",
            "(declare-const in9x10 Int)",
            "(declare-const in4x9 Int)",
            "(declare-const in8x12 Int)",
            "(declare-const in4x3 Int)",
            "(declare-const in8x13 Int)",
            "(declare-const in8x10 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in8x11 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in4x7 Int)",
            "(declare-const in4x8 Int)",
            "(declare-const in4x5 Int)",
            "(declare-const in4x6 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in8x14 Int)",
            "(declare-const in14x10 Int)",
            "(declare-const in3x12 Int)",
            "(declare-const in3x11 Int)",
            "(declare-const in3x10 Int)",
            "(declare-const in14x13 Int)",
            "(declare-const in14x12 Int)",
            "(declare-const in3x14 Int)",
            "(declare-const in14x11 Int)",
            "(declare-const in3x13 Int)",
            "(declare-const in5x8 Int)",
            "(declare-const in5x9 Int)",
            "(declare-const in14x2 Int)",
            "(declare-const in5x2 Int)",
            "(declare-const in14x3 Int)",
            "(declare-const in5x3 Int)",
            "(declare-const in14x0 Int)",
            "(declare-const in5x0 Int)",
            "(declare-const in14x1 Int)",
            "(declare-const in5x1 Int)",
            "(declare-const in14x6 Int)",
            "(declare-const in5x6 Int)",
            "(declare-const in14x7 Int)",
            "(declare-const in5x7 Int)",
            "(declare-const in14x4 Int)",
            "(declare-const in5x4 Int)",
            "(declare-const in14x5 Int)",
            "(declare-const in14x8 Int)",
            "(declare-const in14x9 Int)",
            "(declare-const in13x0 Int)",
            "(declare-const in5x10 Int)",
            "(declare-const in5x11 Int)",
            "(declare-const in5x12 Int)",
            "(declare-const in5x13 Int)",
            "(declare-const in5x14 Int)",
            "(declare-const in6x9 Int)",
            "(declare-const in6x7 Int)",
            "(declare-const in6x8 Int)",
            "(declare-const in6x1 Int)",
            "(declare-const in6x2 Int)",
            "(declare-const in6x0 Int)",
            "(declare-const in6x5 Int)",
            "(declare-const in6x3 Int)",
            "(declare-const in6x4 Int)",
            "(declare-const in4x14 Int)",
            "(declare-const in13x14 Int)",
            "(declare-const in13x12 Int)",
            "(declare-const in4x10 Int)",
            "(declare-const in4x11 Int)",
            "(declare-const in13x10 Int)",
            "(declare-const in4x12 Int)",
            "(declare-const in13x11 Int)",
            "(declare-const in4x13 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6))  ( =  in7x0 in0x7))  ( =  in7x1 in1x7))  ( =  in7x2 in2x7))  ( =  in7x3 in3x7))  ( =  in7x4 in4x7))  ( =  in7x5 in5x7))  ( =  in7x6 in6x7))  ( =  in8x0 in0x8))  ( =  in8x1 in1x8))  ( =  in8x2 in2x8))  ( =  in8x3 in3x8))  ( =  in8x4 in4x8))  ( =  in8x5 in5x8))  ( =  in8x6 in6x8))  ( =  in8x7 in7x8))  ( =  in9x0 in0x9))  ( =  in9x1 in1x9))  ( =  in9x2 in2x9))  ( =  in9x3 in3x9))  ( =  in9x4 in4x9))  ( =  in9x5 in5x9))  ( =  in9x6 in6x9))  ( =  in9x7 in7x9))  ( =  in9x8 in8x9))  ( =  in10x0 in0x10))  ( =  in10x1 in1x10))  ( =  in10x2 in2x10))  ( =  in10x3 in3x10))  ( =  in10x4 in4x10))  ( =  in10x5 in5x10))  ( =  in10x6 in6x10))  ( =  in10x7 in7x10))  ( =  in10x8 in8x10))  ( =  in10x9 in9x10))  ( =  in11x0 in0x11))  ( =  in11x1 in1x11))  ( =  in11x2 in2x11))  ( =  in11x3 in3x11))  ( =  in11x4 in4x11))  ( =  in11x5 in5x11))  ( =  in11x6 in6x11))  ( =  in11x7 in7x11))  ( =  in11x8 in8x11))  ( =  in11x9 in9x11))  ( =  in11x10 in10x11))  ( =  in12x0 in0x12))  ( =  in12x1 in1x12))  ( =  in12x2 in2x12))  ( =  in12x3 in3x12))  ( =  in12x4 in4x12))  ( =  in12x5 in5x12))  ( =  in12x6 in6x12))  ( =  in12x7 in7x12))  ( =  in12x8 in8x12))  ( =  in12x9 in9x12))  ( =  in12x10 in10x12))  ( =  in12x11 in11x12))  ( =  in13x0 in0x13))  ( =  in13x1 in1x13))  ( =  in13x2 in2x13))  ( =  in13x3 in3x13))  ( =  in13x4 in4x13))  ( =  in13x5 in5x13))  ( =  in13x6 in6x13))  ( =  in13x7 in7x13))  ( =  in13x8 in8x13))  ( =  in13x9 in9x13))  ( =  in13x10 in10x13))  ( =  in13x11 in11x13))  ( =  in13x12 in12x13))  ( =  in14x0 in0x14))  ( =  in14x1 in1x14))  ( =  in14x2 in2x14))  ( =  in14x3 in3x14))  ( =  in14x4 in4x14))  ( =  in14x5 in5x14))  ( =  in14x6 in6x14))  ( =  in14x7 in7x14))  ( =  in14x8 in8x14))  ( =  in14x9 in9x14))  ( =  in14x10 in10x14))  ( =  in14x11 in11x14))  ( =  in14x12 in12x14))  ( =  in14x13 in13x14)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4) ( = in5x0 in0x5) ( = in5x1 in1x5) ( = in5x2 in2x5) ( = in5x3 in3x5) ( = in5x4 in4x5) ( = in6x0 in0x6) ( = in6x1 in1x6) ( = in6x2 in2x6) ( = in6x3 in3x6) ( = in6x4 in4x6) ( = in6x5 in5x6) ( = in7x0 in0x7) ( = in7x1 in1x7) ( = in7x2 in2x7) ( = in7x3 in3x7) ( = in7x4 in4x7) ( = in7x5 in5x7) ( = in7x6 in6x7) ( = in8x0 in0x8) ( = in8x1 in1x8) ( = in8x2 in2x8) ( = in8x3 in3x8) ( = in8x4 in4x8) ( = in8x5 in5x8) ( = in8x6 in6x8) ( = in8x7 in7x8) ( = in9x0 in0x9) ( = in9x1 in1x9) ( = in9x2 in2x9) ( = in9x3 in3x9) ( = in9x4 in4x9) ( = in9x5 in5x9) ( = in9x6 in6x9) ( = in9x7 in7x9) ( = in9x8 in8x9) ( = in10x0 in0x10) ( = in10x1 in1x10) ( = in10x2 in2x10) ( = in10x3 in3x10) ( = in10x4 in4x10) ( = in10x5 in5x10) ( = in10x6 in6x10) ( = in10x7 in7x10) ( = in10x8 in8x10) ( = in10x9 in9x10) ( = in11x0 in0x11) ( = in11x1 in1x11) ( = in11x2 in2x11) ( = in11x3 in3x11) ( = in11x4 in4x11) ( = in11x5 in5x11) ( = in11x6 in6x11) ( = in11x7 in7x11) ( = in11x8 in8x11) ( = in11x9 in9x11) ( = in11x10 in10x11) ( = in12x0 in0x12) ( = in12x1 in1x12) ( = in12x2 in2x12) ( = in12x3 in3x12) ( = in12x4 in4x12) ( = in12x5 in5x12) ( = in12x6 in6x12) ( = in12x7 in7x12) ( = in12x8 in8x12) ( = in12x9 in9x12) ( = in12x10 in10x12) ( = in12x11 in11x12) ( = in13x0 in0x13) ( = in13x1 in1x13) ( = in13x2 in2x13) ( = in13x3 in3x13) ( = in13x4 in4x13) ( = in13x5 in5x13) ( = in13x6 in6x13) ( = in13x7 in7x13) ( = in13x8 in8x13) ( = in13x9 in9x13) ( = in13x10 in10x13) ( = in13x11 in11x13) ( = in13x12 in12x13) ( = in14x0 in0x14) ( = in14x1 in1x14) ( = in14x2 in2x14) ( = in14x3 in3x14) ( = in14x4 in4x14) ( = in14x5 in5x14) ( = in14x6 in6x14) ( = in14x7 in7x14) ( = in14x8 in8x14) ( = in14x9 in9x14) ( = in14x10 in10x14) ( = in14x11 in11x14) ( = in14x12 in12x14) ( = in14x13 in13x14)))",
        "equivalent": true
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in7x8 Int)",
            "(declare-const in7x9 Int)",
            "(declare-const in7x6 Int)",
            "(declare-const in12x4 Int)",
            "(declare-const in7x0 Int)",
            "(declare-const in12x5 Int)",
            "(declare-const in7x1 Int)",
            "(declare-const in12x2 Int)",
            "(declare-const in6x11 Int)",
            "(declare-const in12x3 Int)",
            "(declare-const in6x10 Int)",
            "(declare-const in12x8 Int)",
            "(declare-const in7x4 Int)",
            "(declare-const in12x9 Int)",
            "(declare-const in7x5 Int)",
            "(declare-const in12x6 Int)",
            "(declare-const in7x2 Int)",
            "(declare-const in12x7 Int)",
            "(declare-const in7x3 Int)",
            "(declare-const in6x13 Int)",
            "(declare-const in6x12 Int)",
            "(declare-const in6x15 Int)",
            "(declare-const in6x14 Int)",
            "(declare-const in1x15 Int)",
            "(declare-const in11x0 Int)",
            "(declare-const in11x2 Int)",
            "(declare-const in11x1 Int)",
            "(declare-const in12x15 Int)",
            "(declare-const in1x10 Int)",
            "(declare-const in12x13 Int)",
            "(declare-const in12x14 Int)",
            "(declare-const in1x14 Int)",
            "(declare-const in12x11 Int)",
            "(declare-const in1x13 Int)",
            "(declare-const in1x12 Int)",
            "(declare-const in12x10 Int)",
            "(declare-const in1x11 Int)",
            "(declare-const in0x14 Int)",
            "(declare-const in0x15 Int)",
            "(declare-const in8x7 Int)",
            "(declare-const in8x5 Int)",
            "(declare-const in8x6 Int)",
            "(declare-const in8x9 Int)",
            "(declare-const in13x3 Int)",
            "(declare-const in0x7 Int)",
            "(declare-const in13x4 Int)",
            "(declare-const in8x0 Int)",
            "(declare-const in0x8 Int)",
            "(declare-const in13x1 Int)",
            "(declare-const in0x5 Int)",
            "(declare-const in13x2 Int)",
            "(declare-const in0x6 Int)",
            "(declare-const in13x7 Int)",
            "(declare-const in8x3 Int)",
            "(declare-const in13x8 Int)",
            "(declare-const in8x4 Int)",
            "(declare-const in13x5 Int)",
            "(declare-const in0x9 Int)",
            "(declare-const in8x1 Int)",
            "(declare-const in13x6 Int)",
            "(declare-const in8x2 Int)",
            "(declare-const in13x9 Int)",
            "(declare-const in0x12 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in0x13 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in0x10 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in0x11 Int)",
            "(declare-const in0x2 Int)",
            "(declare-const in12x0 Int)",
            "(declare-const in12x1 Int)",
            "(declare-const in9x6 Int)",
            "(declare-const in9x7 Int)",
            "(declare-const in9x4 Int)",
            "(declare-const in9x5 Int)",
            "(declare-const in9x8 Int)",
            "(declare-const in10x5 Int)",
            "(declare-const in1x6 Int)",
            "(declare-const in10x4 Int)",
            "(declare-const in1x7 Int)",
            "(declare-const in10x7 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in10x6 Int)",
            "(declare-const in1x5 Int)",
            "(declare-const in10x9 Int)",
            "(declare-const in9x2 Int)",
            "(declare-const in10x8 Int)",
            "(declare-const in9x3 Int)",
            "(declare-const in9x0 Int)",
            "(declare-const in1x8 Int)",
            "(declare-const in9x1 Int)",
            "(declare-const in1x9 Int)",
            "(declare-const in11x13 Int)",
            "(declare-const in2x11 Int)",
            "(declare-const in11x12 Int)",
            "(declare-const in2x10 Int)",
            "(declare-const in11x15 Int)",
            "(declare-const in11x14 Int)",
            "(declare-const in2x15 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in2x14 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in2x13 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in2x12 Int)",
            "(declare-const in11x10 Int)",
            "(declare-const in11x4 Int)",
            "(declare-const in2x5 Int)",
            "(declare-const in11x3 Int)",
            "(declare-const in2x6 Int)",
            "(declare-const in11x6 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in11x5 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in11x8 Int)",
            "(declare-const in2x9 Int)",
            "(declare-const in11x7 Int)",
            "(declare-const in2x7 Int)",
            "(declare-const in11x9 Int)",
            "(declare-const in2x8 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in10x1 Int)",
            "(declare-const in10x0 Int)",
            "(declare-const in10x3 Int)",
            "(declare-const in10x2 Int)",
            "(declare-const in7x10 Int)",
            "(declare-const in7x12 Int)",
            "(declare-const in7x11 Int)",
            "(declare-const in10x15 Int)",
            "(declare-const in10x12 Int)",
            "(declare-const in10x11 Int)",
            "(declare-const in10x14 Int)",
            "(declare-const in10x13 Int)",
            "(declare-const in7x14 Int)",
            "(declare-const in7x13 Int)",
            "(declare-const in7x15 Int)",
            "(declare-const in15x11 Int)",
            "(declare-const in15x10 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in3x5 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in3x8 Int)",
            "(declare-const in3x9 Int)",
            "(declare-const in3x6 Int)",
            "(declare-const in3x7 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in15x14 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in15x13 Int)",
            "(declare-const in15x12 Int)",
            "(declare-const in9x13 Int)",
            "(declare-const in9x14 Int)",
            "(declare-const in9x11 Int)",
            "(declare-const in9x12 Int)",
            "(declare-const in9x10 Int)",
            "(declare-const in9x15 Int)",
            "(declare-const in4x9 Int)",
            "(declare-const in8x12 Int)",
            "(declare-const in4x3 Int)",
            "(declare-const in8x13 Int)",
            "(declare-const in8x10 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in8x11 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in4x7 Int)",
            "(declare-const in4x8 Int)",
            "(declare-const in4x5 Int)",
            "(declare-const in4x6 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in8x14 Int)",
            "(declare-const in8x15 Int)",
            "(declare-const in14x10 Int)",
            "(declare-const in3x12 Int)",
            "(declare-const in3x11 Int)",
            "(declare-const in3x10 Int)",
            "(declare-const in14x15 Int)",
            "(declare-const in3x15 Int)",
            "(declare-const in14x13 Int)",
            "(declare-const in14x12 Int)",
            "(declare-const in3x14 Int)",
            "(declare-const in14x11 Int)",
            "(declare-const in3x13 Int)",
            "(declare-const in5x8 Int)",
            "(declare-const in5x9 Int)",
            "(declare-const in14x2 Int)",
            "(declare-const in5x2 Int)",
            "(declare-const in14x3 Int)",
            "(declare-const in5x3 Int)",
            "(declare-const in14x0 Int)",
            "(declare-const in5x0 Int)",
            "(declare-const in14x1 Int)",
            "(declare-const in5x1 Int)",
            "(declare-const in14x6 Int)",
            "(declare-const in5x6 Int)",
            "(declare-const in14x7 Int)",
            "(declare-const in5x7 Int)",
            "(declare-const in14x4 Int)",
            "(declare-const in5x4 Int)",
            "(declare-const in14x5 Int)",
            "(declare-const in14x8 Int)",
            "(declare-const in14x9 Int)",
            "(declare-const in13x0 Int)",
            "(declare-const in5x10 Int)",
            "(declare-const in5x15 Int)",
            "(declare-const in5x11 Int)",
            "(declare-const in5x12 Int)",
            "(declare-const in5x13 Int)",
            "(declare-const in5x14 Int)",
            "(declare-const in6x9 Int)",
            "(declare-const in6x7 Int)",
            "(declare-const in6x8 Int)",
            "(declare-const in15x1 Int)",
            "(declare-const in6x1 Int)",
            "(declare-const in15x2 Int)",
            "(declare-const in6x2 Int)",
            "(declare-const in15x0 Int)",
            "(declare-const in6x0 Int)",
            "(declare-const in15x5 Int)",
            "(declare-const in6x5 Int)",
            "(declare-const in15x6 Int)",
            "(declare-const in15x3 Int)",
            "(declare-const in6x3 Int)",
            "(declare-const in15x4 Int)",
            "(declare-const in6x4 Int)",
            "(declare-const in15x9 Int)",
            "(declare-const in4x14 Int)",
            "(declare-const in4x15 Int)",
            "(declare-const in15x7 Int)",
            "(declare-const in13x14 Int)",
            "(declare-const in13x15 Int)",
            "(declare-const in15x8 Int)",
            "(declare-const in13x12 Int)",
            "(declare-const in4x10 Int)",
            "(declare-const in4x11 Int)",
            "(declare-const in13x10 Int)",
            "(declare-const in4x12 Int)",
            "(declare-const in13x11 Int)",
            "(declare-const in4x13 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6))  ( =  in7x0 in0x7))  ( =  in7x1 in1x7))  ( =  in7x2 in2x7))  ( =  in7x3 in3x7))  ( =  in7x4 in4x7))  ( =  in7x5 in5x7))  ( =  in7x6 in6x7))  ( =  in8x0 in0x8))  ( =  in8x1 in1x8))  ( =  in8x2 in2x8))  ( =  in8x3 in3x8))  ( =  in8x4 in4x8))  ( =  in8x5 in5x8))  ( =  in8x6 in6x8))  ( =  in8x7 in7x8))  ( =  in9x0 in0x9))  ( =  in9x1 in1x9))  ( =  in9x2 in2x9))  ( =  in9x3 in3x9))  ( =  in9x4 in4x9))  ( =  in9x5 in5x9))  ( =  in9x6 in6x9))  ( =  in9x7 in7x9))  ( =  in9x8 in8x9))  ( =  in10x0 in0x10))  ( =  in10x1 in1x10))  ( =  in10x2 in2x10))  ( =  in10x3 in3x10))  ( =  in10x4 in4x10))  ( =  in10x5 in5x10))  ( =  in10x6 in6x10))  ( =  in10x7 in7x10))  ( =  in10x8 in8x10))  ( =  in10x9 in9x10))  ( =  in11x0 in0x11))  ( =  in11x1 in1x11))  ( =  in11x2 in2x11))  ( =  in11x3 in3x11))  ( =  in11x4 in4x11))  ( =  in11x5 in5x11))  ( =  in11x6 in6x11))  ( =  in11x7 in7x11))  ( =  in11x8 in8x11))  ( =  in11x9 in9x11))  ( =  in11x10 in10x11))  ( =  in12x0 in0x12))  ( =  in12x1 in1x12))  ( =  in12x2 in2x12))  ( =  in12x3 in3x12))  ( =  in12x4 in4x12))  ( =  in12x5 in5x12))  ( =  in12x6 in6x12))  ( =  in12x7 in7x12))  ( =  in12x8 in8x12))  ( =  in12x9 in9x12))  ( =  in12x10 in10x12))  ( =  in12x11 in11x12))  ( =  in13x0 in0x13))  ( =  in13x1 in1x13))  ( =  in13x2 in2x13))  ( =  in13x3 in3x13))  ( =  in13x4 in4x13))  ( =  in13x5 in5x13))  ( =  in13x6 in6x13))  ( =  in13x7 in7x13))  ( =  in13x8 in8x13))  ( =  in13x9 in9x13))  ( =  in13x10 in10x13))  ( =  in13x11 in11x13))  ( =  in13x12 in12x13))  ( =  in14x0 in0x14))  ( =  in14x1 in1x14))  ( =  in14x2 in2x14))  ( =  in14x3 in3x14))  ( =  in14x4 in4x14))  ( =  in14x5 in5x14))  ( =  in14x6 in6x14))  ( =  in14x7 in7x14))  ( =  in14x8 in8x14))  ( =  in14x9 in9x14))  ( =  in14x10 in10x14))  ( =  in14x11 in11x14))  ( =  in14x12 in12x14))  ( =  in14x13 in13x14))  ( =  in15x0 in0x15))  ( =  in15x1 in1x15))  ( =  in15x2 in2x15))  ( =  in15x3 in3x15))  ( =  in15x4 in4x15))  ( =  in15x5 in5x15))  ( =  in15x6 in6x15))  ( =  in15x7 in7x15))  ( =  in15x8 in8x15))  ( =  in15x9 in9x15))  ( =  in15x10 in10x15))  ( =  in15x11 in11x15))  ( =  in15x12 in12x15))  ( =  in15x13 in13x15))  ( =  in15x14 in14x15)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4) ( = in5x0 in0x5) ( = in5x1 in1x5) ( = in5x2 in2x5) ( = in5x3 in3x5) ( = in5x4 in4x5) ( = in6x0 in0x6) ( = in6x1 in1x6) ( = in6x2 in2x6) ( = in6x3 in3x6) ( = in6x4 in4x6) ( = in6x5 in5x6) ( = in7x0 in0x7) ( = in7x1 in1x7) ( = in7x2 in2x7) ( = in7x3 in3x7) ( = in7x4 in4x7) ( = in7x5 in5x7) ( = in7x6 in6x7) ( = in8x0 in0x8) ( = in8x1 in1x8) ( = in8x2 in2x8) ( = in8x3 in3x8) ( = in8x4 in4x8) ( = in8x5 in5x8) ( = in8x6 in6x8) ( = in8x7 in7x8) ( = in9x0 in0x9) ( = in9x1 in1x9) ( = in9x2 in2x9) ( = in9x3 in3x9) ( = in9x4 in4x9) ( = in9x5 in5x9) ( = in9x6 in6x9) ( = in9x7 in7x9) ( = in9x8 in8x9) ( = in10x0 in0x10) ( = in10x1 in1x10) ( = in10x2 in2x10) ( = in10x3 in3x10) ( = in10x4 in4x10) ( = in10x5 in5x10) ( = in10x6 in6x10) ( = in10x7 in7x10) ( = in10x8 in8x10) ( = in10x9 in9x10) ( = in11x0 in0x11) ( = in11x1 in1x11) ( = in11x2 in2x11) ( = in11x3 in3x11) ( = in11x4 in4x11) ( = in11x5 in5x11) ( = in11x6 in6x11) ( = in11x7 in7x11) ( = in11x8 in8x11) ( = in11x9 in9x11) ( = in11x10 in10x11) ( = in12x0 in0x12) ( = in12x1 in1x12) ( = in12x2 in2x12) ( = in12x3 in3x12) ( = in12x4 in4x12) ( = in12x5 in5x12) ( = in12x6 in6x12) ( = in12x7 in7x12) ( = in12x8 in8x12) ( = in12x9 in9x12) ( = in12x10 in10x12) ( = in12x11 in11x12) ( = in13x0 in0x13) ( = in13x1 in1x13) ( = in13x2 in2x13) ( = in13x3 in3x13) ( = in13x4 in4x13) ( = in13x5 in5x13) ( = in13x6 in6x13) ( = in13x7 in7x13) ( = in13x8 in8x13) ( = in13x9 in9x13) ( = in13x10 in10x13) ( = in13x11 in11x13) ( = in13x12 in12x13) ( = in14x0 in0x14) ( = in14x1 in1x14) ( = in14x2 in2x14) ( = in14x3 in3x14) ( = in14x4 in4x14) ( = in14x5 in5x14) ( = in14x6 in6x14) ( = in14x7 in7x14) ( = in14x8 in8x14) ( = in14x9 in9x14) ( = in14x10 in10x14) ( = in14x11 in11x14) ( = in14x12 in12x14) ( = in14x13 in13x14) ( = in15x0 in0x15) ( = in15x1 in1x15) ( = in15x2 in2x15) ( = in15x3 in3x15) ( = in15x4 in4x15) ( = in15x5 in5x15) ( = in15x6 in6x15) ( = in15x7 in7x15) ( = in15x8 in8x15) ( = in15x9 in9x15) ( = in15x10 in10x15) ( = in15x11 in11x15) ( = in15x12 in12x15) ( = in15x13 in13x15) ( = in15x14 in14x15)))",
        "equivalent": true
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in7x8 Int)",
            "(declare-const in7x9 Int)",
            "(declare-const in7x6 Int)",
            "(declare-const in12x4 Int)",
            "(declare-const in7x0 Int)",
            "(declare-const in12x5 Int)",
            "(declare-const in7x1 Int)",
            "(declare-const in12x2 Int)",
            "(declare-const in6x11 Int)",
            "(declare-const in12x3 Int)",
            "(declare-const in6x10 Int)",
            "(declare-const in12x8 Int)",
            "(declare-const in7x4 Int)",
            "(declare-const in12x9 Int)",
            "(declare-const in7x5 Int)",
            "(declare-const in12x6 Int)",
            "(declare-const in7x2 Int)",
            "(declare-const in12x7 Int)",
            "(declare-const in7x3 Int)",
            "(declare-const in6x16 Int)",
            "(declare-const in6x13 Int)",
            "(declare-const in6x12 Int)",
            "(declare-const in6x15 Int)",
            "(declare-const in6x14 Int)",
            "(declare-const in1x16 Int)",
            "(declare-const in1x15 Int)",
            "(declare-const in11x0 Int)",
            "(declare-const in11x2 Int)",
            "(declare-const in11x1 Int)",
            "(declare-const in12x15 Int)",
            "(declare-const in1x10 Int)",
            "(declare-const in12x16 Int)",
            "(declare-const in12x13 Int)",
            "(declare-const in12x14 Int)",
            "(declare-const in1x14 Int)",
            "(declare-const in12x11 Int)",
            "(declare-const in1x13 Int)",
            "(declare-const in1x12 Int)",
            "(declare-const in12x10 Int)",
            "(declare-const in1x11 Int)",
            "(declare-const in0x16 Int)",
            "(declare-const in0x14 Int)",
            "(declare-const in0x15 Int)",
            "(declare-const in8x7 Int)",
            "(declare-const in8x5 Int)",
            "(declare-const in8x6 Int)",
            "(declare-const in8x9 Int)",
            "(declare-const in13x3 Int)",
            "(declare-const in0x7 Int)",
            "(declare-const in13x4 Int)",
            "(declare-const in8x0 Int)",
            "(declare-const in0x8 Int)",
            "(declare-const in13x1 Int)",
            "(declare-const in0x5 Int)",
            "(declare-const in13x2 Int)",
            "(declare-const in0x6 Int)",
            "(declare-const in13x7 Int)",
            "(declare-const in8x3 Int)",
            "(declare-const in13x8 Int)",
            "(declare-const in8x4 Int)",
            "(declare-const in13x5 Int)",
            "(declare-const in0x9 Int)",
            "(declare-const in8x1 Int)",
            "(declare-const in13x6 Int)",
            "(declare-const in8x2 Int)",
            "(declare-const in13x9 Int)",
            "(declare-const in0x12 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in0x13 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in0x10 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in0x11 Int)",
            "(declare-const in0x2 Int)",
            "(declare-const in12x0 Int)",
            "(declare-const in12x1 Int)",
            "(declare-const in2x16 Int)",
            "(declare-const in9x6 Int)",
            "(declare-const in9x7 Int)",
            "(declare-const in9x4 Int)",
            "(declare-const in9x5 Int)",
            "(declare-const in9x8 Int)",
            "(declare-const in10x5 Int)",
            "(declare-const in1x6 Int)",
            "(declare-const in10x4 Int)",
            "(declare-const in1x7 Int)",
            "(declare-const in10x7 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in10x6 Int)",
            "(declare-const in1x5 Int)",
            "(declare-const in10x9 Int)",
            "(declare-const in9x2 Int)",
            "(declare-const in11x16 Int)",
            "(declare-const in10x8 Int)",
            "(declare-const in9x3 Int)",
            "(declare-const in9x0 Int)",
            "(declare-const in1x8 Int)",
            "(declare-const in9x1 Int)",
            "(declare-const in1x9 Int)",
            "(declare-const in11x13 Int)",
            "(declare-const in2x11 Int)",
            "(declare-const in11x12 Int)",
            "(declare-const in2x10 Int)",
            "(declare-const in11x15 Int)",
            "(declare-const in11x14 Int)",
            "(declare-const in2x15 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in2x14 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in2x13 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in2x12 Int)",
            "(declare-const in11x10 Int)",
            "(declare-const in16x13 Int)",
            "(declare-const in16x14 Int)",
            "(declare-const in16x15 Int)",
            "(declare-const in16x10 Int)",
            "(declare-const in16x11 Int)",
            "(declare-const in16x12 Int)",
            "(declare-const in11x4 Int)",
            "(declare-const in2x5 Int)",
            "(declare-const in11x3 Int)",
            "(declare-const in2x6 Int)",
            "(declare-const in11x6 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in11x5 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in11x8 Int)",
            "(declare-const in2x9 Int)",
            "(declare-const in11x7 Int)",
            "(declare-const in2x7 Int)",
            "(declare-const in11x9 Int)",
            "(declare-const in2x8 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in10x1 Int)",
            "(declare-const in10x0 Int)",
            "(declare-const in10x3 Int)",
            "(declare-const in10x2 Int)",
            "(declare-const in7x10 Int)",
            "(declare-const in7x12 Int)",
            "(declare-const in7x11 Int)",
            "(declare-const in10x16 Int)",
            "(declare-const in10x15 Int)",
            "(declare-const in10x12 Int)",
            "(declare-const in10x11 Int)",
            "(declare-const in10x14 Int)",
            "(declare-const in10x13 Int)",
            "(declare-const in7x14 Int)",
            "(declare-const in7x13 Int)",
            "(declare-const in7x16 Int)",
            "(declare-const in7x15 Int)",
            "(declare-const in15x11 Int)",
            "(declare-const in15x10 Int)",
            "(declare-const in16x0 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in16x1 Int)",
            "(declare-const in3x5 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in16x4 Int)",
            "(declare-const in3x8 Int)",
            "(declare-const in16x5 Int)",
            "(declare-const in3x9 Int)",
            "(declare-const in16x2 Int)",
            "(declare-const in3x6 Int)",
            "(declare-const in16x3 Int)",
            "(declare-const in3x7 Int)",
            "(declare-const in16x8 Int)",
            "(declare-const in16x9 Int)",
            "(declare-const in16x6 Int)",
            "(declare-const in15x16 Int)",
            "(declare-const in16x7 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in15x14 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in15x13 Int)",
            "(declare-const in15x12 Int)",
            "(declare-const in9x13 Int)",
            "(declare-const in9x14 Int)",
            "(declare-const in9x11 Int)",
            "(declare-const in9x12 Int)",
            "(declare-const in9x10 Int)",
            "(declare-const in9x15 Int)",
            "(declare-const in9x16 Int)",
            "(declare-const in4x9 Int)",
            "(declare-const in8x12 Int)",
            "(declare-const in4x3 Int)",
            "(declare-const in8x13 Int)",
            "(declare-const in8x10 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in8x11 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in4x7 Int)",
            "(declare-const in4x8 Int)",
            "(declare-const in4x5 Int)",
            "(declare-const in4x6 Int)",
            "(declare-const in8x16 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in8x14 Int)",
            "(declare-const in8x15 Int)",
            "(declare-const in14x10 Int)",
            "(declare-const in3x12 Int)",
            "(declare-const in3x11 Int)",
            "(declare-const in14x16 Int)",
            "(declare-const in3x10 Int)",
            "(declare-const in14x15 Int)",
            "(declare-const in3x16 Int)",
            "(declare-const in3x15 Int)",
            "(declare-const in14x13 Int)",
            "(declare-const in14x12 Int)",
            "(declare-const in3x14 Int)",
            "(declare-const in14x11 Int)",
            "(declare-const in3x13 Int)",
            "(declare-const in5x8 Int)",
            "(declare-const in5x9 Int)",
            "(declare-const in14x2 Int)",
            "(declare-const in5x2 Int)",
            "(declare-const in14x3 Int)",
            "(declare-const in5x3 Int)",
            "(declare-const in14x0 Int)",
            "(declare-const in5x0 Int)",
            "(declare-const in14x1 Int)",
            "(declare-const in5x1 Int)",
            "(declare-const in14x6 Int)",
            "(declare-const in5x6 Int)",
            "(declare-const in14x7 Int)",
            "(declare-const in5x7 Int)",
            "(declare-const in14x4 Int)",
            "(declare-const in5x4 Int)",
            "(declare-const in14x5 Int)",
            "(declare-const in14x8 Int)",
            "(declare-const in14x9 Int)",
            "(declare-const in13x0 Int)",
            "(declare-const in5x10 Int)",
            "(declare-const in5x15 Int)",
            "(declare-const in5x16 Int)",
            "(declare-const in5x11 Int)",
            "(declare-const in5x12 Int)",
            "(declare-const in5x13 Int)",
            "(declare-const in5x14 Int)",
            "(declare-const in6x9 Int)",
            "(declare-const in6x7 Int)",
            "(declare-const in6x8 Int)",
            "(declare-const in15x1 Int)",
            "(declare-const in6x1 Int)",
            "(declare-const in15x2 Int)",
            "(declare-const in6x2 Int)",
            "(declare-const in15x0 Int)",
            "(declare-const in6x0 Int)",
            "(declare-const in15x5 Int)",
            "(declare-const in6x5 Int)",
            "(declare-const in15x6 Int)",
            "(declare-const in15x3 Int)",
            "(declare-const in6x3 Int)",
            "(declare-const in15x4 Int)",
            "(declare-const in6x4 Int)",
            "(declare-const in13x16 Int)",
            "(declare-const in15x9 Int)",
            "(declare-const in4x14 Int)",
            "(declare-const in4x15 Int)",
            "(declare-const in4x16 Int)",
            "(declare-const in15x7 Int)",
            "(declare-const in13x14 Int)",
            "(declare-const in13x15 Int)",
            "(declare-const in15x8 Int)",
            "(declare-const in13x12 Int)",
            "(declare-const in4x10 Int)",
            "(declare-const in4x11 Int)",
            "(declare-const in13x10 Int)",
            "(declare-const in4x12 Int)",
            "(declare-const in13x11 Int)",
            "(declare-const in4x13 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6))  ( =  in7x0 in0x7))  ( =  in7x1 in1x7))  ( =  in7x2 in2x7))  ( =  in7x3 in3x7))  ( =  in7x4 in4x7))  ( =  in7x5 in5x7))  ( =  in7x6 in6x7))  ( =  in8x0 in0x8))  ( =  in8x1 in1x8))  ( =  in8x2 in2x8))  ( =  in8x3 in3x8))  ( =  in8x4 in4x8))  ( =  in8x5 in5x8))  ( =  in8x6 in6x8))  ( =  in8x7 in7x8))  ( =  in9x0 in0x9))  ( =  in9x1 in1x9))  ( =  in9x2 in2x9))  ( =  in9x3 in3x9))  ( =  in9x4 in4x9))  ( =  in9x5 in5x9))  ( =  in9x6 in6x9))  ( =  in9x7 in7x9))  ( =  in9x8 in8x9))  ( =  in10x0 in0x10))  ( =  in10x1 in1x10))  ( =  in10x2 in2x10))  ( =  in10x3 in3x10))  ( =  in10x4 in4x10))  ( =  in10x5 in5x10))  ( =  in10x6 in6x10))  ( =  in10x7 in7x10))  ( =  in10x8 in8x10))  ( =  in10x9 in9x10))  ( =  in11x0 in0x11))  ( =  in11x1 in1x11))  ( =  in11x2 in2x11))  ( =  in11x3 in3x11))  ( =  in11x4 in4x11))  ( =  in11x5 in5x11))  ( =  in11x6 in6x11))  ( =  in11x7 in7x11))  ( =  in11x8 in8x11))  ( =  in11x9 in9x11))  ( =  in11x10 in10x11))  ( =  in12x0 in0x12))  ( =  in12x1 in1x12))  ( =  in12x2 in2x12))  ( =  in12x3 in3x12))  ( =  in12x4 in4x12))  ( =  in12x5 in5x12))  ( =  in12x6 in6x12))  ( =  in12x7 in7x12))  ( =  in12x8 in8x12))  ( =  in12x9 in9x12))  ( =  in12x10 in10x12))  ( =  in12x11 in11x12))  ( =  in13x0 in0x13))  ( =  in13x1 in1x13))  ( =  in13x2 in2x13))  ( =  in13x3 in3x13))  ( =  in13x4 in4x13))  ( =  in13x5 in5x13))  ( =  in13x6 in6x13))  ( =  in13x7 in7x13))  ( =  in13x8 in8x13))  ( =  in13x9 in9x13))  ( =  in13x10 in10x13))  ( =  in13x11 in11x13))  ( =  in13x12 in12x13))  ( =  in14x0 in0x14))  ( =  in14x1 in1x14))  ( =  in14x2 in2x14))  ( =  in14x3 in3x14))  ( =  in14x4 in4x14))  ( =  in14x5 in5x14))  ( =  in14x6 in6x14))  ( =  in14x7 in7x14))  ( =  in14x8 in8x14))  ( =  in14x9 in9x14))  ( =  in14x10 in10x14))  ( =  in14x11 in11x14))  ( =  in14x12 in12x14))  ( =  in14x13 in13x14))  ( =  in15x0 in0x15))  ( =  in15x1 in1x15))  ( =  in15x2 in2x15))  ( =  in15x3 in3x15))  ( =  in15x4 in4x15))  ( =  in15x5 in5x15))  ( =  in15x6 in6x15))  ( =  in15x7 in7x15))  ( =  in15x8 in8x15))  ( =  in15x9 in9x15))  ( =  in15x10 in10x15))  ( =  in15x11 in11x15))  ( =  in15x12 in12x15))  ( =  in15x13 in13x15))  ( =  in15x14 in14x15))  ( =  in16x0 in0x16))  ( =  in16x1 in1x16))  ( =  in16x2 in2x16))  ( =  in16x3 in3x16))  ( =  in16x4 in4x16))  ( =  in16x5 in5x16))  ( =  in16x6 in6x16))  ( =  in16x7 in7x16))  ( =  in16x8 in8x16))  ( =  in16x9 in9x16))  ( =  in16x10 in10x16))  ( =  in16x11 in11x16))  ( =  in16x12 in12x16))  ( =  in16x13 in13x16))  ( =  in16x14 in14x16))  ( =  in16x15 in15x16)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4) ( = in5x0 in0x5) ( = in5x1 in1x5) ( = in5x2 in2x5) ( = in5x3 in3x5) ( = in5x4 in4x5) ( = in6x0 in0x6) ( = in6x1 in1x6) ( = in6x2 in2x6) ( = in6x3 in3x6) ( = in6x4 in4x6) ( = in6x5 in5x6) ( = in7x0 in0x7) ( = in7x1 in1x7) ( = in7x2 in2x7) ( = in7x3 in3x7) ( = in7x4 in4x7) ( = in7x5 in5x7) ( = in7x6 in6x7) ( = in8x0 in0x8) ( = in8x1 in1x8) ( = in8x2 in2x8) ( = in8x3 in3x8) ( = in8x4 in4x8) ( = in8x5 in5x8) ( = in8x6 in6x8) ( = in8x7 in7x8) ( = in9x0 in0x9) ( = in9x1 in1x9) ( = in9x2 in2x9) ( = in9x3 in3x9) ( = in9x4 in4x9) ( = in9x5 in5x9) ( = in9x6 in6x9) ( = in9x7 in7x9) ( = in9x8 in8x9) ( = in10x0 in0x10) ( = in10x1 in1x10) ( = in10x2 in2x10) ( = in10x3 in3x10) ( = in10x4 in4x10) ( = in10x5 in5x10) ( = in10x6 in6x10) ( = in10x7 in7x10) ( = in10x8 in8x10) ( = in10x9 in9x10) ( = in11x0 in0x11) ( = in11x1 in1x11) ( = in11x2 in2x11) ( = in11x3 in3x11) ( = in11x4 in4x11) ( = in11x5 in5x11) ( = in11x6 in6x11) ( = in11x7 in7x11) ( = in11x8 in8x11) ( = in11x9 in9x11) ( = in11x10 in10x11) ( = in12x0 in0x12) ( = in12x1 in1x12) ( = in12x2 in2x12) ( = in12x3 in3x12) ( = in12x4 in4x12) ( = in12x5 in5x12) ( = in12x6 in6x12) ( = in12x7 in7x12) ( = in12x8 in8x12) ( = in12x9 in9x12) ( = in12x10 in10x12) ( = in12x11 in11x12) ( = in13x0 in0x13) ( = in13x1 in1x13) ( = in13x2 in2x13) ( = in13x3 in3x13) ( = in13x4 in4x13) ( = in13x5 in5x13) ( = in13x6 in6x13) ( = in13x7 in7x13) ( = in13x8 in8x13) ( = in13x9 in9x13) ( = in13x10 in10x13) ( = in13x11 in11x13) ( = in13x12 in12x13) ( = in14x0 in0x14) ( = in14x1 in1x14) ( = in14x2 in2x14) ( = in14x3 in3x14) ( = in14x4 in4x14) ( = in14x5 in5x14) ( = in14x6 in6x14) ( = in14x7 in7x14) ( = in14x8 in8x14) ( = in14x9 in9x14) ( = in14x10 in10x14) ( = in14x11 in11x14) ( = in14x12 in12x14) ( = in14x13 in13x14) ( = in15x0 in0x15) ( = in15x1 in1x15) ( = in15x2 in2x15) ( = in15x3 in3x15) ( = in15x4 in4x15) ( = in15x5 in5x15) ( = in15x6 in6x15) ( = in15x7 in7x15) ( = in15x8 in8x15) ( = in15x9 in9x15) ( = in15x10 in10x15) ( = in15x11 in11x15) ( = in15x12 in12x15) ( = in15x13 in13x15) ( = in15x14 in14x15) ( = in16x0 in0x16) ( = in16x1 in1x16) ( = in16x2 in2x16) ( = in16x3 in3x16) ( = in16x4 in4x16) ( = in16x5 in5x16) ( = in16x6 in6x16) ( = in16x7 in7x16) ( = in16x8 in8x16) ( = in16x9 in9x16) ( = in16x10 in10x16) ( = in16x11 in11x16) ( = in16x12 in12x16) ( = in16x13 in13x16) ( = in16x14 in14x16) ( = in16x15 in15x16)))",
        "equivalent": true
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in7x8 Int)",
            "(declare-const in7x9 Int)",
            "(declare-const in7x6 Int)",
            "(declare-const in12x4 Int)",
            "(declare-const in7x0 Int)",
            "(declare-const in12x5 Int)",
            "(declare-const in7x1 Int)",
            "(declare-const in12x2 Int)",
            "(declare-const in6x11 Int)",
            "(declare-const in12x3 Int)",
            "(declare-const in6x10 Int)",
            "(declare-const in12x8 Int)",
            "(declare-const in7x4 Int)",
            "(declare-const in12x9 Int)",
            "(declare-const in7x5 Int)",
            "(declare-const in12x6 Int)",
            "(declare-const in7x2 Int)",
            "(declare-const in12x7 Int)",
            "(declare-const in7x3 Int)",
            "(declare-const in6x17 Int)",
            "(declare-const in6x16 Int)",
            "(declare-const in6x13 Int)",
            "(declare-const in6x12 Int)",
            "(declare-const in6x15 Int)",
            "(declare-const in6x14 Int)",
            "(declare-const in1x17 Int)",
            "(declare-const in1x16 Int)",
            "(declare-const in1x15 Int)",
            "(declare-const in11x0 Int)",
            "(declare-const in11x2 Int)",
            "(declare-const in11x1 Int)",
            "(declare-const in12x17 Int)",
            "(declare-const in12x15 Int)",
            "(declare-const in1x10 Int)",
            "(declare-const in12x16 Int)",
            "(declare-const in12x13 Int)",
            "(declare-const in12x14 Int)",
            "(declare-const in1x14 Int)",
            "(declare-const in12x11 Int)",
            "(declare-const in1x13 Int)",
            "(declare-const in1x12 Int)",
            "(declare-const in12x10 Int)",
            "(declare-const in1x11 Int)",
            "(declare-const in17x14 Int)",
            "(declare-const in0x16 Int)",
            "(declare-const in17x15 Int)",
            "(declare-const in0x17 Int)",
            "(declare-const in17x16 Int)",
            "(declare-const in0x14 Int)",
            "(declare-const in0x15 Int)",
            "(declare-const in8x7 Int)",
            "(declare-const in8x5 Int)",
            "(declare-const in8x6 Int)",
            "(declare-const in8x9 Int)",
            "(declare-const in13x3 Int)",
            "(declare-const in0x7 Int)",
            "(declare-const in13x4 Int)",
            "(declare-const in8x0 Int)",
            "(declare-const in0x8 Int)",
            "(declare-const in13x1 Int)",
            "(declare-const in0x5 Int)",
            "(declare-const in13x2 Int)",
            "(declare-const in0x6 Int)",
            "(declare-const in13x7 Int)",
            "(declare-const in8x3 Int)",
            "(declare-const in13x8 Int)",
            "(declare-const in8x4 Int)",
            "(declare-const in13x5 Int)",
            "(declare-const in0x9 Int)",
            "(declare-const in8x1 Int)",
            "(declare-const in13x6 Int)",
            "(declare-const in8x2 Int)",
            "(declare-const in13x9 Int)",
            "(declare-const in17x10 Int)",
            "(declare-const in0x12 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in17x11 Int)",
            "(declare-const in0x13 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in17x12 Int)",
            "(declare-const in0x10 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in17x13 Int)",
            "(declare-const in0x11 Int)",
            "(declare-const in0x2 Int)",
            "(declare-const in12x0 Int)",
            "(declare-const in12x1 Int)",
            "(declare-const in2x17 Int)",
            "(declare-const in2x16 Int)",
            "(declare-const in9x6 Int)",
            "(declare-const in9x7 Int)",
            "(declare-const in9x4 Int)",
            "(declare-const in9x5 Int)",
            "(declare-const in9x8 Int)",
            "(declare-const in10x5 Int)",
            "(declare-const in1x6 Int)",
            "(declare-const in10x4 Int)",
            "(declare-const in1x7 Int)",
            "(declare-const in10x7 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in10x6 Int)",
            "(declare-const in1x5 Int)",
            "(declare-const in11x17 Int)",
            "(declare-const in10x9 Int)",
            "(declare-const in9x2 Int)",
            "(declare-const in11x16 Int)",
            "(declare-const in10x8 Int)",
            "(declare-const in9x3 Int)",
            "(declare-const in9x0 Int)",
            "(declare-const in1x8 Int)",
            "(declare-const in9x1 Int)",
            "(declare-const in1x9 Int)",
            "(declare-const in11x13 Int)",
            "(declare-const in2x11 Int)",
            "(declare-const in11x12 Int)",
            "(declare-const in2x10 Int)",
            "(declare-const in11x15 Int)",
            "(declare-const in11x14 Int)",
            "(declare-const in2x15 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in2x14 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in2x13 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in2x12 Int)",
            "(declare-const in11x10 Int)",
            "(declare-const in16x13 Int)",
            "(declare-const in16x14 Int)",
            "(declare-const in16x15 Int)",
            "(declare-const in16x17 Int)",
            "(declare-const in16x10 Int)",
            "(declare-const in16x11 Int)",
            "(declare-const in16x12 Int)",
            "(declare-const in11x4 Int)",
            "(declare-const in2x5 Int)",
            "(declare-const in11x3 Int)",
            "(declare-const in2x6 Int)",
            "(declare-const in11x6 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in11x5 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in11x8 Int)",
            "(declare-const in2x9 Int)",
            "(declare-const in11x7 Int)",
            "(declare-const in2x7 Int)",
            "(declare-const in11x9 Int)",
            "(declare-const in2x8 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in10x1 Int)",
            "(declare-const in10x0 Int)",
            "(declare-const in10x3 Int)",
            "(declare-const in10x2 Int)",
            "(declare-const in7x10 Int)",
            "(declare-const in7x12 Int)",
            "(declare-const in7x11 Int)",
            "(declare-const in10x16 Int)",
            "(declare-const in10x15 Int)",
            "(declare-const in10x17 Int)",
            "(declare-const in10x12 Int)",
            "(declare-const in7x17 Int)",
            "(declare-const in10x11 Int)",
            "(declare-const in10x14 Int)",
            "(declare-const in10x13 Int)",
            "(declare-const in7x14 Int)",
            "(declare-const in7x13 Int)",
            "(declare-const in7x16 Int)",
            "(declare-const in7x15 Int)",
            "(declare-const in15x11 Int)",
            "(declare-const in15x10 Int)",
            "(declare-const in16x0 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in16x1 Int)",
            "(declare-const in3x5 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in16x4 Int)",
            "(declare-const in3x8 Int)",
            "(declare-const in16x5 Int)",
            "(declare-const in3x9 Int)",
            "(declare-const in16x2 Int)",
            "(declare-const in3x6 Int)",
            "(declare-const in16x3 Int)",
            "(declare-const in3x7 Int)",
            "(declare-const in16x8 Int)",
            "(declare-const in16x9 Int)",
            "(declare-const in15x17 Int)",
            "(declare-const in16x6 Int)",
            "(declare-const in15x16 Int)",
            "(declare-const in16x7 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in15x14 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in15x13 Int)",
            "(declare-const in15x12 Int)",
            "(declare-const in9x13 Int)",
            "(declare-const in9x14 Int)",
            "(declare-const in9x11 Int)",
            "(declare-const in9x12 Int)",
            "(declare-const in9x10 Int)",
            "(declare-const in9x17 Int)",
            "(declare-const in9x15 Int)",
            "(declare-const in9x16 Int)",
            "(declare-const in4x9 Int)",
            "(declare-const in8x12 Int)",
            "(declare-const in4x3 Int)",
            "(declare-const in17x0 Int)",
            "(declare-const in8x13 Int)",
            "(declare-const in8x10 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in8x11 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in17x3 Int)",
            "(declare-const in4x7 Int)",
            "(declare-const in17x4 Int)",
            "(declare-const in4x8 Int)",
            "(declare-const in17x1 Int)",
            "(declare-const in4x5 Int)",
            "(declare-const in17x2 Int)",
            "(declare-const in4x6 Int)",
            "(declare-const in17x7 Int)",
            "(declare-const in17x8 Int)",
            "(declare-const in17x5 Int)",
            "(declare-const in17x6 Int)",
            "(declare-const in8x16 Int)",
            "(declare-const in8x17 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in17x9 Int)",
            "(declare-const in8x14 Int)",
            "(declare-const in8x15 Int)",
            "(declare-const in14x10 Int)",
            "(declare-const in3x17 Int)",
            "(declare-const in3x12 Int)",
            "(declare-const in14x17 Int)",
            "(declare-const in3x11 Int)",
            "(declare-const in14x16 Int)",
            "(declare-const in3x10 Int)",
            "(declare-const in14x15 Int)",
            "(declare-const in3x16 Int)",
            "(declare-const in3x15 Int)",
            "(declare-const in14x13 Int)",
            "(declare-const in14x12 Int)",
            "(declare-const in3x14 Int)",
            "(declare-const in14x11 Int)",
            "(declare-const in3x13 Int)",
            "(declare-const in5x8 Int)",
            "(declare-const in5x9 Int)",
            "(declare-const in14x2 Int)",
            "(declare-const in5x2 Int)",
            "(declare-const in14x3 Int)",
            "(declare-const in5x3 Int)",
            "(declare-const in14x0 Int)",
            "(declare-const in5x0 Int)",
            "(declare-const in14x1 Int)",
            "(declare-const in5x1 Int)",
            "(declare-const in14x6 Int)",
            "(declare-const in5x6 Int)",
            "(declare-const in14x7 Int)",
            "(declare-const in5x7 Int)",
            "(declare-const in14x4 Int)",
            "(declare-const in5x4 Int)",
            "(declare-const in14x5 Int)",
            "(declare-const in14x8 Int)",
            "(declare-const in14x9 Int)",
            "(declare-const in13x0 Int)",
            "(declare-const in5x10 Int)",
            "(declare-const in5x15 Int)",
            "(declare-const in5x16 Int)",
            "(declare-const in5x17 Int)",
            "(declare-const in5x11 Int)",
            "(declare-const in5x12 Int)",
            "(declare-const in5x13 Int)",
            "(declare-const in5x14 Int)",
            "(declare-const in6x9 Int)",
            "(declare-const in6x7 Int)",
            "(declare-const in6x8 Int)",
            "(declare-const in15x1 Int)",
            "(declare-const in6x1 Int)",
            "(declare-const in15x2 Int)",
            "(declare-const in6x2 Int)",
            "(declare-const in15x0 Int)",
            "(declare-const in6x0 Int)",
            "(declare-const in15x5 Int)",
            "(declare-const in6x5 Int)",
            "(declare-const in15x6 Int)",
            "(declare-const in15x3 Int)",
            "(declare-const in6x3 Int)",
            "(declare-const in15x4 Int)",
            "(declare-const in6x4 Int)",
            "(declare-const in13x16 Int)",
            "(declare-const in15x9 Int)",
            "(declare-const in4x14 Int)",
            "(declare-const in13x17 Int)",
            "(declare-const in4x15 Int)",
            "(declare-const in4x16 Int)",
            "(declare-const in15x7 Int)",
            "(declare-const in13x14 Int)",
            "(declare-const in4x17 Int)",
            "(declare-const in13x15 Int)",
            "(declare-const in15x8 Int)",
            "(declare-const in13x12 Int)",
            "(declare-const in4x10 Int)",
            "(declare-const in4x11 Int)",
            "(declare-const in13x10 Int)",
            "(declare-const in4x12 Int)",
            "(declare-const in13x11 Int)",
            "(declare-const in4x13 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6))  ( =  in7x0 in0x7))  ( =  in7x1 in1x7))  ( =  in7x2 in2x7))  ( =  in7x3 in3x7))  ( =  in7x4 in4x7))  ( =  in7x5 in5x7))  ( =  in7x6 in6x7))  ( =  in8x0 in0x8))  ( =  in8x1 in1x8))  ( =  in8x2 in2x8))  ( =  in8x3 in3x8))  ( =  in8x4 in4x8))  ( =  in8x5 in5x8))  ( =  in8x6 in6x8))  ( =  in8x7 in7x8))  ( =  in9x0 in0x9))  ( =  in9x1 in1x9))  ( =  in9x2 in2x9))  ( =  in9x3 in3x9))  ( =  in9x4 in4x9))  ( =  in9x5 in5x9))  ( =  in9x6 in6x9))  ( =  in9x7 in7x9))  ( =  in9x8 in8x9))  ( =  in10x0 in0x10))  ( =  in10x1 in1x10))  ( =  in10x2 in2x10))  ( =  in10x3 in3x10))  ( =  in10x4 in4x10))  ( =  in10x5 in5x10))  ( =  in10x6 in6x10))  ( =  in10x7 in7x10))  ( =  in10x8 in8x10))  ( =  in10x9 in9x10))  ( =  in11x0 in0x11))  ( =  in11x1 in1x11))  ( =  in11x2 in2x11))  ( =  in11x3 in3x11))  ( =  in11x4 in4x11))  ( =  in11x5 in5x11))  ( =  in11x6 in6x11))  ( =  in11x7 in7x11))  ( =  in11x8 in8x11))  ( =  in11x9 in9x11))  ( =  in11x10 in10x11))  ( =  in12x0 in0x12))  ( =  in12x1 in1x12))  ( =  in12x2 in2x12))  ( =  in12x3 in3x12))  ( =  in12x4 in4x12))  ( =  in12x5 in5x12))  ( =  in12x6 in6x12))  ( =  in12x7 in7x12))  ( =  in12x8 in8x12))  ( =  in12x9 in9x12))  ( =  in12x10 in10x12))  ( =  in12x11 in11x12))  ( =  in13x0 in0x13))  ( =  in13x1 in1x13))  ( =  in13x2 in2x13))  ( =  in13x3 in3x13))  ( =  in13x4 in4x13))  ( =  in13x5 in5x13))  ( =  in13x6 in6x13))  ( =  in13x7 in7x13))  ( =  in13x8 in8x13))  ( =  in13x9 in9x13))  ( =  in13x10 in10x13))  ( =  in13x11 in11x13))  ( =  in13x12 in12x13))  ( =  in14x0 in0x14))  ( =  in14x1 in1x14))  ( =  in14x2 in2x14))  ( =  in14x3 in3x14))  ( =  in14x4 in4x14))  ( =  in14x5 in5x14))  ( =  in14x6 in6x14))  ( =  in14x7 in7x14))  ( =  in14x8 in8x14))  ( =  in14x9 in9x14))  ( =  in14x10 in10x14))  ( =  in14x11 in11x14))  ( =  in14x12 in12x14))  ( =  in14x13 in13x14))  ( =  in15x0 in0x15))  ( =  in15x1 in1x15))  ( =  in15x2 in2x15))  ( =  in15x3 in3x15))  ( =  in15x4 in4x15))  ( =  in15x5 in5x15))  ( =  in15x6 in6x15))  ( =  in15x7 in7x15))  ( =  in15x8 in8x15))  ( =  in15x9 in9x15))  ( =  in15x10 in10x15))  ( =  in15x11 in11x15))  ( =  in15x12 in12x15))  ( =  in15x13 in13x15))  ( =  in15x14 in14x15))  ( =  in16x0 in0x16))  ( =  in16x1 in1x16))  ( =  in16x2 in2x16))  ( =  in16x3 in3x16))  ( =  in16x4 in4x16))  ( =  in16x5 in5x16))  ( =  in16x6 in6x16))  ( =  in16x7 in7x16))  ( =  in16x8 in8x16))  ( =  in16x9 in9x16))  ( =  in16x10 in10x16))  ( =  in16x11 in11x16))  ( =  in16x12 in12x16))  ( =  in16x13 in13x16))  ( =  in16x14 in14x16))  ( =  in16x15 in15x16))  ( =  in17x0 in0x17))  ( =  in17x1 in1x17))  ( =  in17x2 in2x17))  ( =  in17x3 in3x17))  ( =  in17x4 in4x17))  ( =  in17x5 in5x17))  ( =  in17x6 in6x17))  ( =  in17x7 in7x17))  ( =  in17x8 in8x17))  ( =  in17x9 in9x17))  ( =  in17x10 in10x17))  ( =  in17x11 in11x17))  ( =  in17x12 in12x17))  ( =  in17x13 in13x17))  ( =  in17x14 in14x17))  ( =  in17x15 in15x17))  ( =  in17x16 in16x17)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4) ( = in5x0 in0x5) ( = in5x1 in1x5) ( = in5x2 in2x5) ( = in5x3 in3x5) ( = in5x4 in4x5) ( = in6x0 in0x6) ( = in6x1 in1x6) ( = in6x2 in2x6) ( = in6x3 in3x6) ( = in6x4 in4x6) ( = in6x5 in5x6) ( = in7x0 in0x7) ( = in7x1 in1x7) ( = in7x2 in2x7) ( = in7x3 in3x7) ( = in7x4 in4x7) ( = in7x5 in5x7) ( = in7x6 in6x7) ( = in8x0 in0x8) ( = in8x1 in1x8) ( = in8x2 in2x8) ( = in8x3 in3x8) ( = in8x4 in4x8) ( = in8x5 in5x8) ( = in8x6 in6x8) ( = in8x7 in7x8) ( = in9x0 in0x9) ( = in9x1 in1x9) ( = in9x2 in2x9) ( = in9x3 in3x9) ( = in9x4 in4x9) ( = in9x5 in5x9) ( = in9x6 in6x9) ( = in9x7 in7x9) ( = in9x8 in8x9) ( = in10x0 in0x10) ( = in10x1 in1x10) ( = in10x2 in2x10) ( = in10x3 in3x10) ( = in10x4 in4x10) ( = in10x5 in5x10) ( = in10x6 in6x10) ( = in10x7 in7x10) ( = in10x8 in8x10) ( = in10x9 in9x10) ( = in11x0 in0x11) ( = in11x1 in1x11) ( = in11x2 in2x11) ( = in11x3 in3x11) ( = in11x4 in4x11) ( = in11x5 in5x11) ( = in11x6 in6x11) ( = in11x7 in7x11) ( = in11x8 in8x11) ( = in11x9 in9x11) ( = in11x10 in10x11) ( = in12x0 in0x12) ( = in12x1 in1x12) ( = in12x2 in2x12) ( = in12x3 in3x12) ( = in12x4 in4x12) ( = in12x5 in5x12) ( = in12x6 in6x12) ( = in12x7 in7x12) ( = in12x8 in8x12) ( = in12x9 in9x12) ( = in12x10 in10x12) ( = in12x11 in11x12) ( = in13x0 in0x13) ( = in13x1 in1x13) ( = in13x2 in2x13) ( = in13x3 in3x13) ( = in13x4 in4x13) ( = in13x5 in5x13) ( = in13x6 in6x13) ( = in13x7 in7x13) ( = in13x8 in8x13) ( = in13x9 in9x13) ( = in13x10 in10x13) ( = in13x11 in11x13) ( = in13x12 in12x13) ( = in14x0 in0x14) ( = in14x1 in1x14) ( = in14x2 in2x14) ( = in14x3 in3x14) ( = in14x4 in4x14) ( = in14x5 in5x14) ( = in14x6 in6x14) ( = in14x7 in7x14) ( = in14x8 in8x14) ( = in14x9 in9x14) ( = in14x10 in10x14) ( = in14x11 in11x14) ( = in14x12 in12x14) ( = in14x13 in13x14) ( = in15x0 in0x15) ( = in15x1 in1x15) ( = in15x2 in2x15) ( = in15x3 in3x15) ( = in15x4 in4x15) ( = in15x5 in5x15) ( = in15x6 in6x15) ( = in15x7 in7x15) ( = in15x8 in8x15) ( = in15x9 in9x15) ( = in15x10 in10x15) ( = in15x11 in11x15) ( = in15x12 in12x15) ( = in15x13 in13x15) ( = in15x14 in14x15) ( = in16x0 in0x16) ( = in16x1 in1x16) ( = in16x2 in2x16) ( = in16x3 in3x16) ( = in16x4 in4x16) ( = in16x5 in5x16) ( = in16x6 in6x16) ( = in16x7 in7x16) ( = in16x8 in8x16) ( = in16x9 in9x16) ( = in16x10 in10x16) ( = in16x11 in11x16) ( = in16x12 in12x16) ( = in16x13 in13x16) ( = in16x14 in14x16) ( = in16x15 in15x16) ( = in17x0 in0x17) ( = in17x1 in1x17) ( = in17x2 in2x17) ( = in17x3 in3x17) ( = in17x4 in4x17) ( = in17x5 in5x17) ( = in17x6 in6x17) ( = in17x7 in7x17) ( = in17x8 in8x17) ( = in17x9 in9x17) ( = in17x10 in10x17) ( = in17x11 in11x17) ( = in17x12 in12x17) ( = in17x13 in13x17) ( = in17x14 in14x17) ( = in17x15 in15x17) ( = in17x16 in16x17)))",
        "equivalent": true
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in7x8 Int)",
            "(declare-const in7x9 Int)",
            "(declare-const in7x6 Int)",
            "(declare-const in12x4 Int)",
            "(declare-const in7x0 Int)",
            "(declare-const in12x5 Int)",
            "(declare-const in7x1 Int)",
            "(declare-const in12x2 Int)",
            "(declare-const in6x11 Int)",
            "(declare-const in12x3 Int)",
            "(declare-const in6x10 Int)",
            "(declare-const in12x8 Int)",
            "(declare-const in7x4 Int)",
            "(declare-const in12x9 Int)",
            "(declare-const in7x5 Int)",
            "(declare-const in12x6 Int)",
            "(declare-const in7x2 Int)",
            "(declare-const in12x7 Int)",
            "(declare-const in7x3 Int)",
            "(declare-const in6x17 Int)",
            "(declare-const in6x16 Int)",
            "(declare-const in6x18 Int)",
            "(declare-const in6x13 Int)",
            "(declare-const in6x12 Int)",
            "(declare-const in6x15 Int)",
            "(declare-const in6x14 Int)",
            "(declare-const in1x18 Int)",
            "(declare-const in1x17 Int)",
            "(declare-const in1x16 Int)",
            "(declare-const in1x15 Int)",
            "(declare-const in11x0 Int)",
            "(declare-const in11x2 Int)",
            "(declare-const in11x1 Int)",
            "(declare-const in12x17 Int)",
            "(declare-const in12x18 Int)",
            "(declare-const in12x15 Int)",
            "(declare-const in1x10 Int)",
            "(declare-const in12x16 Int)",
            "(declare-const in12x13 Int)",
            "(declare-const in12x14 Int)",
            "(declare-const in1x14 Int)",
            "(declare-const in12x11 Int)",
            "(declare-const in1x13 Int)",
            "(declare-const in1x12 Int)",
            "(declare-const in12x10 Int)",
            "(declare-const in1x11 Int)",
            "(declare-const in17x14 Int)",
            "(declare-const in0x16 Int)",
            "(declare-const in17x15 Int)",
            "(declare-const in0x17 Int)",
            "(declare-const in17x16 Int)",
            "(declare-const in0x14 Int)",
            "(declare-const in0x15 Int)",
            "(declare-const in17x18 Int)",
            "(declare-const in0x18 Int)",
            "(declare-const in8x7 Int)",
            "(declare-const in8x5 Int)",
            "(declare-const in8x6 Int)",
            "(declare-const in8x9 Int)",
            "(declare-const in13x3 Int)",
            "(declare-const in0x7 Int)",
            "(declare-const in13x4 Int)",
            "(declare-const in8x0 Int)",
            "(declare-const in0x8 Int)",
            "(declare-const in13x1 Int)",
            "(declare-const in0x5 Int)",
            "(declare-const in13x2 Int)",
            "(declare-const in0x6 Int)",
            "(declare-const in13x7 Int)",
            "(declare-const in8x3 Int)",
            "(declare-const in13x8 Int)",
            "(declare-const in8x4 Int)",
            "(declare-const in13x5 Int)",
            "(declare-const in0x9 Int)",
            "(declare-const in8x1 Int)",
            "(declare-const in13x6 Int)",
            "(declare-const in8x2 Int)",
            "(declare-const in13x9 Int)",
            "(declare-const in17x10 Int)",
            "(declare-const in0x12 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in17x11 Int)",
            "(declare-const in0x13 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in17x12 Int)",
            "(declare-const in0x10 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in17x13 Int)",
            "(declare-const in0x11 Int)",
            "(declare-const in0x2 Int)",
            "(declare-const in12x0 Int)",
            "(declare-const in12x1 Int)",
            "(declare-const in2x18 Int)",
            "(declare-const in2x17 Int)",
            "(declare-const in2x16 Int)",
            "(declare-const in9x6 Int)",
            "(declare-const in9x7 Int)",
            "(declare-const in9x4 Int)",
            "(declare-const in9x5 Int)",
            "(declare-const in9x8 Int)",
            "(declare-const in10x5 Int)",
            "(declare-const in1x6 Int)",
            "(declare-const in10x4 Int)",
            "(declare-const in1x7 Int)",
            "(declare-const in10x7 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in10x6 Int)",
            "(declare-const in1x5 Int)",
            "(declare-const in18x2 Int)",
            "(declare-const in11x17 Int)",
            "(declare-const in10x9 Int)",
            "(declare-const in9x2 Int)",
            "(declare-const in18x3 Int)",
            "(declare-const in11x16 Int)",
            "(declare-const in10x8 Int)",
            "(declare-const in9x3 Int)",
            "(declare-const in18x0 Int)",
            "(declare-const in9x0 Int)",
            "(declare-const in1x8 Int)",
            "(declare-const in11x18 Int)",
            "(declare-const in18x1 Int)",
            "(declare-const in9x1 Int)",
            "(declare-const in1x9 Int)",
            "(declare-const in18x6 Int)",
            "(declare-const in11x13 Int)",
            "(declare-const in2x11 Int)",
            "(declare-const in18x7 Int)",
            "(declare-const in11x12 Int)",
            "(declare-const in2x10 Int)",
            "(declare-const in18x4 Int)",
            "(declare-const in11x15 Int)",
            "(declare-const in18x5 Int)",
            "(declare-const in11x14 Int)",
            "(declare-const in2x15 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in2x14 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in18x8 Int)",
            "(declare-const in2x13 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in18x9 Int)",
            "(declare-const in2x12 Int)",
            "(declare-const in11x10 Int)",
            "(declare-const in16x13 Int)",
            "(declare-const in16x14 Int)",
            "(declare-const in16x15 Int)",
            "(declare-const in16x17 Int)",
            "(declare-const in16x18 Int)",
            "(declare-const in16x10 Int)",
            "(declare-const in16x11 Int)",
            "(declare-const in16x12 Int)",
            "(declare-const in11x4 Int)",
            "(declare-const in2x5 Int)",
            "(declare-const in11x3 Int)",
            "(declare-const in2x6 Int)",
            "(declare-const in11x6 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in11x5 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in11x8 Int)",
            "(declare-const in2x9 Int)",
            "(declare-const in11x7 Int)",
            "(declare-const in2x7 Int)",
            "(declare-const in11x9 Int)",
            "(declare-const in2x8 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in10x1 Int)",
            "(declare-const in10x0 Int)",
            "(declare-const in10x3 Int)",
            "(declare-const in10x2 Int)",
            "(declare-const in7x10 Int)",
            "(declare-const in7x12 Int)",
            "(declare-const in7x11 Int)",
            "(declare-const in10x16 Int)",
            "(declare-const in10x15 Int)",
            "(declare-const in10x18 Int)",
            "(declare-const in10x17 Int)",
            "(declare-const in7x18 Int)",
            "(declare-const in10x12 Int)",
            "(declare-const in7x17 Int)",
            "(declare-const in10x11 Int)",
            "(declare-const in10x14 Int)",
            "(declare-const in10x13 Int)",
            "(declare-const in7x14 Int)",
            "(declare-const in7x13 Int)",
            "(declare-const in7x16 Int)",
            "(declare-const in7x15 Int)",
            "(declare-const in15x11 Int)",
            "(declare-const in15x10 Int)",
            "(declare-const in16x0 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in16x1 Int)",
            "(declare-const in3x5 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in16x4 Int)",
            "(declare-const in3x8 Int)",
            "(declare-const in16x5 Int)",
            "(declare-const in3x9 Int)",
            "(declare-const in16x2 Int)",
            "(declare-const in3x6 Int)",
            "(declare-const in16x3 Int)",
            "(declare-const in3x7 Int)",
            "(declare-const in16x8 Int)",
            "(declare-const in15x18 Int)",
            "(declare-const in16x9 Int)",
            "(declare-const in15x17 Int)",
            "(declare-const in16x6 Int)",
            "(declare-const in15x16 Int)",
            "(declare-const in16x7 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in15x14 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in15x13 Int)",
            "(declare-const in15x12 Int)",
            "(declare-const in9x13 Int)",
            "(declare-const in9x14 Int)",
            "(declare-const in9x11 Int)",
            "(declare-const in9x12 Int)",
            "(declare-const in9x10 Int)",
            "(declare-const in9x17 Int)",
            "(declare-const in9x18 Int)",
            "(declare-const in9x15 Int)",
            "(declare-const in9x16 Int)",
            "(declare-const in4x9 Int)",
            "(declare-const in8x12 Int)",
            "(declare-const in4x3 Int)",
            "(declare-const in17x0 Int)",
            "(declare-const in8x13 Int)",
            "(declare-const in8x10 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in8x11 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in17x3 Int)",
            "(declare-const in4x7 Int)",
            "(declare-const in17x4 Int)",
            "(declare-const in4x8 Int)",
            "(declare-const in17x1 Int)",
            "(declare-const in4x5 Int)",
            "(declare-const in17x2 Int)",
            "(declare-const in4x6 Int)",
            "(declare-const in17x7 Int)",
            "(declare-const in17x8 Int)",
            "(declare-const in8x18 Int)",
            "(declare-const in17x5 Int)",
            "(declare-const in17x6 Int)",
            "(declare-const in8x16 Int)",
            "(declare-const in8x17 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in17x9 Int)",
            "(declare-const in8x14 Int)",
            "(declare-const in8x15 Int)",
            "(declare-const in14x10 Int)",
            "(declare-const in3x18 Int)",
            "(declare-const in3x17 Int)",
            "(declare-const in14x18 Int)",
            "(declare-const in3x12 Int)",
            "(declare-const in14x17 Int)",
            "(declare-const in3x11 Int)",
            "(declare-const in14x16 Int)",
            "(declare-const in3x10 Int)",
            "(declare-const in14x15 Int)",
            "(declare-const in3x16 Int)",
            "(declare-const in3x15 Int)",
            "(declare-const in14x13 Int)",
            "(declare-const in14x12 Int)",
            "(declare-const in3x14 Int)",
            "(declare-const in14x11 Int)",
            "(declare-const in3x13 Int)",
            "(declare-const in5x8 Int)",
            "(declare-const in5x9 Int)",
            "(declare-const in14x2 Int)",
            "(declare-const in5x2 Int)",
            "(declare-const in14x3 Int)",
            "(declare-const in5x3 Int)",
            "(declare-const in14x0 Int)",
            "(declare-const in5x0 Int)",
            "(declare-const in14x1 Int)",
            "(declare-const in5x1 Int)",
            "(declare-const in14x6 Int)",
            "(declare-const in5x6 Int)",
            "(declare-const in14x7 Int)",
            "(declare-const in5x7 Int)",
            "(declare-const in14x4 Int)",
            "(declare-const in5x4 Int)",
            "(declare-const in14x5 Int)",
            "(declare-const in14x8 Int)",
            "(declare-const in14x9 Int)",
            "(declare-const in13x0 Int)",
            "(declare-const in5x10 Int)",
            "(declare-const in5x15 Int)",
            "(declare-const in5x16 Int)",
            "(declare-const in5x17 Int)",
            "(declare-const in5x18 Int)",
            "(declare-const in5x11 Int)",
            "(declare-const in5x12 Int)",
            "(declare-const in5x13 Int)",
            "(declare-const in5x14 Int)",
            "(declare-const in4x18 Int)",
            "(declare-const in6x9 Int)",
            "(declare-const in6x7 Int)",
            "(declare-const in6x8 Int)",
            "(declare-const in15x1 Int)",
            "(declare-const in6x1 Int)",
            "(declare-const in15x2 Int)",
            "(declare-const in6x2 Int)",
            "(declare-const in15x0 Int)",
            "(declare-const in6x0 Int)",
            "(declare-const in15x5 Int)",
            "(declare-const in6x5 Int)",
            "(declare-const in15x6 Int)",
            "(declare-const in13x18 Int)",
            "(declare-const in15x3 Int)",
            "(declare-const in6x3 Int)",
            "(declare-const in15x4 Int)",
            "(declare-const in6x4 Int)",
            "(declare-const in13x16 Int)",
            "(declare-const in15x9 Int)",
            "(declare-const in4x14 Int)",
            "(declare-const in13x17 Int)",
            "(declare-const in4x15 Int)",
            "(declare-const in4x16 Int)",
            "(declare-const in15x7 Int)",
            "(declare-const in13x14 Int)",
            "(declare-const in4x17 Int)",
            "(declare-const in13x15 Int)",
            "(declare-const in15x8 Int)",
            "(declare-const in13x12 Int)",
            "(declare-const in4x10 Int)",
            "(declare-const in4x11 Int)",
            "(declare-const in13x10 Int)",
            "(declare-const in4x12 Int)",
            "(declare-const in13x11 Int)",
            "(declare-const in4x13 Int)",
            "(declare-const in18x16 Int)",
            "(declare-const in18x15 Int)",
            "(declare-const in18x17 Int)",
            "(declare-const in18x10 Int)",
            "(declare-const in18x12 Int)",
            "(declare-const in18x11 Int)",
            "(declare-const in18x14 Int)",
            "(declare-const in18x13 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6))  ( =  in7x0 in0x7))  ( =  in7x1 in1x7))  ( =  in7x2 in2x7))  ( =  in7x3 in3x7))  ( =  in7x4 in4x7))  ( =  in7x5 in5x7))  ( =  in7x6 in6x7))  ( =  in8x0 in0x8))  ( =  in8x1 in1x8))  ( =  in8x2 in2x8))  ( =  in8x3 in3x8))  ( =  in8x4 in4x8))  ( =  in8x5 in5x8))  ( =  in8x6 in6x8))  ( =  in8x7 in7x8))  ( =  in9x0 in0x9))  ( =  in9x1 in1x9))  ( =  in9x2 in2x9))  ( =  in9x3 in3x9))  ( =  in9x4 in4x9))  ( =  in9x5 in5x9))  ( =  in9x6 in6x9))  ( =  in9x7 in7x9))  ( =  in9x8 in8x9))  ( =  in10x0 in0x10))  ( =  in10x1 in1x10))  ( =  in10x2 in2x10))  ( =  in10x3 in3x10))  ( =  in10x4 in4x10))  ( =  in10x5 in5x10))  ( =  in10x6 in6x10))  ( =  in10x7 in7x10))  ( =  in10x8 in8x10))  ( =  in10x9 in9x10))  ( =  in11x0 in0x11))  ( =  in11x1 in1x11))  ( =  in11x2 in2x11))  ( =  in11x3 in3x11))  ( =  in11x4 in4x11))  ( =  in11x5 in5x11))  ( =  in11x6 in6x11))  ( =  in11x7 in7x11))  ( =  in11x8 in8x11))  ( =  in11x9 in9x11))  ( =  in11x10 in10x11))  ( =  in12x0 in0x12))  ( =  in12x1 in1x12))  ( =  in12x2 in2x12))  ( =  in12x3 in3x12))  ( =  in12x4 in4x12))  ( =  in12x5 in5x12))  ( =  in12x6 in6x12))  ( =  in12x7 in7x12))  ( =  in12x8 in8x12))  ( =  in12x9 in9x12))  ( =  in12x10 in10x12))  ( =  in12x11 in11x12))  ( =  in13x0 in0x13))  ( =  in13x1 in1x13))  ( =  in13x2 in2x13))  ( =  in13x3 in3x13))  ( =  in13x4 in4x13))  ( =  in13x5 in5x13))  ( =  in13x6 in6x13))  ( =  in13x7 in7x13))  ( =  in13x8 in8x13))  ( =  in13x9 in9x13))  ( =  in13x10 in10x13))  ( =  in13x11 in11x13))  ( =  in13x12 in12x13))  ( =  in14x0 in0x14))  ( =  in14x1 in1x14))  ( =  in14x2 in2x14))  ( =  in14x3 in3x14))  ( =  in14x4 in4x14))  ( =  in14x5 in5x14))  ( =  in14x6 in6x14))  ( =  in14x7 in7x14))  ( =  in14x8 in8x14))  ( =  in14x9 in9x14))  ( =  in14x10 in10x14))  ( =  in14x11 in11x14))  ( =  in14x12 in12x14))  ( =  in14x13 in13x14))  ( =  in15x0 in0x15))  ( =  in15x1 in1x15))  ( =  in15x2 in2x15))  ( =  in15x3 in3x15))  ( =  in15x4 in4x15))  ( =  in15x5 in5x15))  ( =  in15x6 in6x15))  ( =  in15x7 in7x15))  ( =  in15x8 in8x15))  ( =  in15x9 in9x15))  ( =  in15x10 in10x15))  ( =  in15x11 in11x15))  ( =  in15x12 in12x15))  ( =  in15x13 in13x15))  ( =  in15x14 in14x15))  ( =  in16x0 in0x16))  ( =  in16x1 in1x16))  ( =  in16x2 in2x16))  ( =  in16x3 in3x16))  ( =  in16x4 in4x16))  ( =  in16x5 in5x16))  ( =  in16x6 in6x16))  ( =  in16x7 in7x16))  ( =  in16x8 in8x16))  ( =  in16x9 in9x16))  ( =  in16x10 in10x16))  ( =  in16x11 in11x16))  ( =  in16x12 in12x16))  ( =  in16x13 in13x16))  ( =  in16x14 in14x16))  ( =  in16x15 in15x16))  ( =  in17x0 in0x17))  ( =  in17x1 in1x17))  ( =  in17x2 in2x17))  ( =  in17x3 in3x17))  ( =  in17x4 in4x17))  ( =  in17x5 in5x17))  ( =  in17x6 in6x17))  ( =  in17x7 in7x17))  ( =  in17x8 in8x17))  ( =  in17x9 in9x17))  ( =  in17x10 in10x17))  ( =  in17x11 in11x17))  ( =  in17x12 in12x17))  ( =  in17x13 in13x17))  ( =  in17x14 in14x17))  ( =  in17x15 in15x17))  ( =  in17x16 in16x17))  ( =  in18x0 in0x18))  ( =  in18x1 in1x18))  ( =  in18x2 in2x18))  ( =  in18x3 in3x18))  ( =  in18x4 in4x18))  ( =  in18x5 in5x18))  ( =  in18x6 in6x18))  ( =  in18x7 in7x18))  ( =  in18x8 in8x18))  ( =  in18x9 in9x18))  ( =  in18x10 in10x18))  ( =  in18x11 in11x18))  ( =  in18x12 in12x18))  ( =  in18x13 in13x18))  ( =  in18x14 in14x18))  ( =  in18x15 in15x18))  ( =  in18x16 in16x18))  ( =  in18x17 in17x18)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4) ( = in5x0 in0x5) ( = in5x1 in1x5) ( = in5x2 in2x5) ( = in5x3 in3x5) ( = in5x4 in4x5) ( = in6x0 in0x6) ( = in6x1 in1x6) ( = in6x2 in2x6) ( = in6x3 in3x6) ( = in6x4 in4x6) ( = in6x5 in5x6) ( = in7x0 in0x7) ( = in7x1 in1x7) ( = in7x2 in2x7) ( = in7x3 in3x7) ( = in7x4 in4x7) ( = in7x5 in5x7) ( = in7x6 in6x7) ( = in8x0 in0x8) ( = in8x1 in1x8) ( = in8x2 in2x8) ( = in8x3 in3x8) ( = in8x4 in4x8) ( = in8x5 in5x8) ( = in8x6 in6x8) ( = in8x7 in7x8) ( = in9x0 in0x9) ( = in9x1 in1x9) ( = in9x2 in2x9) ( = in9x3 in3x9) ( = in9x4 in4x9) ( = in9x5 in5x9) ( = in9x6 in6x9) ( = in9x7 in7x9) ( = in9x8 in8x9) ( = in10x0 in0x10) ( = in10x1 in1x10) ( = in10x2 in2x10) ( = in10x3 in3x10) ( = in10x4 in4x10) ( = in10x5 in5x10) ( = in10x6 in6x10) ( = in10x7 in7x10) ( = in10x8 in8x10) ( = in10x9 in9x10) ( = in11x0 in0x11) ( = in11x1 in1x11) ( = in11x2 in2x11) ( = in11x3 in3x11) ( = in11x4 in4x11) ( = in11x5 in5x11) ( = in11x6 in6x11) ( = in11x7 in7x11) ( = in11x8 in8x11) ( = in11x9 in9x11) ( = in11x10 in10x11) ( = in12x0 in0x12) ( = in12x1 in1x12) ( = in12x2 in2x12) ( = in12x3 in3x12) ( = in12x4 in4x12) ( = in12x5 in5x12) ( = in12x6 in6x12) ( = in12x7 in7x12) ( = in12x8 in8x12) ( = in12x9 in9x12) ( = in12x10 in10x12) ( = in12x11 in11x12) ( = in13x0 in0x13) ( = in13x1 in1x13) ( = in13x2 in2x13) ( = in13x3 in3x13) ( = in13x4 in4x13) ( = in13x5 in5x13) ( = in13x6 in6x13) ( = in13x7 in7x13) ( = in13x8 in8x13) ( = in13x9 in9x13) ( = in13x10 in10x13) ( = in13x11 in11x13) ( = in13x12 in12x13) ( = in14x0 in0x14) ( = in14x1 in1x14) ( = in14x2 in2x14) ( = in14x3 in3x14) ( = in14x4 in4x14) ( = in14x5 in5x14) ( = in14x6 in6x14) ( = in14x7 in7x14) ( = in14x8 in8x14) ( = in14x9 in9x14) ( = in14x10 in10x14) ( = in14x11 in11x14) ( = in14x12 in12x14) ( = in14x13 in13x14) ( = in15x0 in0x15) ( = in15x1 in1x15) ( = in15x2 in2x15) ( = in15x3 in3x15) ( = in15x4 in4x15) ( = in15x5 in5x15) ( = in15x6 in6x15) ( = in15x7 in7x15) ( = in15x8 in8x15) ( = in15x9 in9x15) ( = in15x10 in10x15) ( = in15x11 in11x15) ( = in15x12 in12x15) ( = in15x13 in13x15) ( = in15x14 in14x15) ( = in16x0 in0x16) ( = in16x1 in1x16) ( = in16x2 in2x16) ( = in16x3 in3x16) ( = in16x4 in4x16) ( = in16x5 in5x16) ( = in16x6 in6x16) ( = in16x7 in7x16) ( = in16x8 in8x16) ( = in16x9 in9x16) ( = in16x10 in10x16) ( = in16x11 in11x16) ( = in16x12 in12x16) ( = in16x13 in13x16) ( = in16x14 in14x16) ( = in16x15 in15x16) ( = in17x0 in0x17) ( = in17x1 in1x17) ( = in17x2 in2x17) ( = in17x3 in3x17) ( = in17x4 in4x17) ( = in17x5 in5x17) ( = in17x6 in6x17) ( = in17x7 in7x17) ( = in17x8 in8x17) ( = in17x9 in9x17) ( = in17x10 in10x17) ( = in17x11 in11x17) ( = in17x12 in12x17) ( = in17x13 in13x17) ( = in17x14 in14x17) ( = in17x15 in15x17) ( = in17x16 in16x17) ( = in18x0 in0x18) ( = in18x1 in1x18) ( = in18x2 in2x18) ( = in18x3 in3x18) ( = in18x4 in4x18) ( = in18x5 in5x18) ( = in18x6 in6x18) ( = in18x7 in7x18) ( = in18x8 in8x18) ( = in18x9 in9x18) ( = in18x10 in10x18) ( = in18x11 in11x18) ( = in18x12 in12x18) ( = in18x13 in13x18) ( = in18x14 in14x18) ( = in18x15 in15x18) ( = in18x16 in16x18) ( = in18x17 in17x18)))",
        "equivalent": true
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in7x8 Int)",
            "(declare-const in7x9 Int)",
            "(declare-const in7x6 Int)",
            "(declare-const in12x4 Int)",
            "(declare-const in7x0 Int)",
            "(declare-const in12x5 Int)",
            "(declare-const in7x1 Int)",
            "(declare-const in12x2 Int)",
            "(declare-const in6x11 Int)",
            "(declare-const in12x3 Int)",
            "(declare-const in6x10 Int)",
            "(declare-const in12x8 Int)",
            "(declare-const in7x4 Int)",
            "(declare-const in12x9 Int)",
            "(declare-const in7x5 Int)",
            "(declare-const in12x6 Int)",
            "(declare-const in7x2 Int)",
            "(declare-const in12x7 Int)",
            "(declare-const in7x3 Int)",
            "(declare-const in6x17 Int)",
            "(declare-const in6x16 Int)",
            "(declare-const in6x19 Int)",
            "(declare-const in6x18 Int)",
            "(declare-const in6x13 Int)",
            "(declare-const in6x12 Int)",
            "(declare-const in6x15 Int)",
            "(declare-const in6x14 Int)",
            "(declare-const in1x18 Int)",
            "(declare-const in1x17 Int)",
            "(declare-const in1x16 Int)",
            "(declare-const in1x15 Int)",
            "(declare-const in1x19 Int)",
            "(declare-const in11x0 Int)",
            "(declare-const in11x2 Int)",
            "(declare-const in11x1 Int)",
            "(declare-const in12x19 Int)",
            "(declare-const in12x17 Int)",
            "(declare-const in12x18 Int)",
            "(declare-const in12x15 Int)",
            "(declare-const in1x10 Int)",
            "(declare-const in12x16 Int)",
            "(declare-const in12x13 Int)",
            "(declare-const in12x14 Int)",
            "(declare-const in1x14 Int)",
            "(declare-const in12x11 Int)",
            "(declare-const in1x13 Int)",
            "(declare-const in1x12 Int)",
            "(declare-const in12x10 Int)",
            "(declare-const in1x11 Int)",
            "(declare-const in17x14 Int)",
            "(declare-const in0x16 Int)",
            "(declare-const in17x15 Int)",
            "(declare-const in0x17 Int)",
            "(declare-const in17x16 Int)",
            "(declare-const in0x14 Int)",
            "(declare-const in0x15 Int)",
            "(declare-const in17x18 Int)",
            "(declare-const in17x19 Int)",
            "(declare-const in0x18 Int)",
            "(declare-const in0x19 Int)",
            "(declare-const in8x7 Int)",
            "(declare-const in8x5 Int)",
            "(declare-const in8x6 Int)",
            "(declare-const in8x9 Int)",
            "(declare-const in13x3 Int)",
            "(declare-const in0x7 Int)",
            "(declare-const in13x4 Int)",
            "(declare-const in8x0 Int)",
            "(declare-const in0x8 Int)",
            "(declare-const in13x1 Int)",
            "(declare-const in0x5 Int)",
            "(declare-const in13x2 Int)",
            "(declare-const in0x6 Int)",
            "(declare-const in13x7 Int)",
            "(declare-const in8x3 Int)",
            "(declare-const in13x8 Int)",
            "(declare-const in8x4 Int)",
            "(declare-const in13x5 Int)",
            "(declare-const in0x9 Int)",
            "(declare-const in8x1 Int)",
            "(declare-const in13x6 Int)",
            "(declare-const in8x2 Int)",
            "(declare-const in13x9 Int)",
            "(declare-const in17x10 Int)",
            "(declare-const in0x12 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in17x11 Int)",
            "(declare-const in0x13 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in17x12 Int)",
            "(declare-const in0x10 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in17x13 Int)",
            "(declare-const in0x11 Int)",
            "(declare-const in0x2 Int)",
            "(declare-const in12x0 Int)",
            "(declare-const in12x1 Int)",
            "(declare-const in2x19 Int)",
            "(declare-const in2x18 Int)",
            "(declare-const in2x17 Int)",
            "(declare-const in2x16 Int)",
            "(declare-const in9x6 Int)",
            "(declare-const in9x7 Int)",
            "(declare-const in9x4 Int)",
            "(declare-const in9x5 Int)",
            "(declare-const in9x8 Int)",
            "(declare-const in10x5 Int)",
            "(declare-const in1x6 Int)",
            "(declare-const in10x4 Int)",
            "(declare-const in1x7 Int)",
            "(declare-const in10x7 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in10x6 Int)",
            "(declare-const in1x5 Int)",
            "(declare-const in18x2 Int)",
            "(declare-const in11x17 Int)",
            "(declare-const in10x9 Int)",
            "(declare-const in9x2 Int)",
            "(declare-const in18x3 Int)",
            "(declare-const in11x16 Int)",
            "(declare-const in10x8 Int)",
            "(declare-const in9x3 Int)",
            "(declare-const in11x19 Int)",
            "(declare-const in18x0 Int)",
            "(declare-const in9x0 Int)",
            "(declare-const in1x8 Int)",
            "(declare-const in11x18 Int)",
            "(declare-const in18x1 Int)",
            "(declare-const in9x1 Int)",
            "(declare-const in1x9 Int)",
            "(declare-const in18x6 Int)",
            "(declare-const in11x13 Int)",
            "(declare-const in2x11 Int)",
            "(declare-const in18x7 Int)",
            "(declare-const in11x12 Int)",
            "(declare-const in2x10 Int)",
            "(declare-const in18x4 Int)",
            "(declare-const in11x15 Int)",
            "(declare-const in18x5 Int)",
            "(declare-const in11x14 Int)",
            "(declare-const in2x15 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in2x14 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in18x8 Int)",
            "(declare-const in2x13 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in18x9 Int)",
            "(declare-const in2x12 Int)",
            "(declare-const in11x10 Int)",
            "(declare-const in16x13 Int)",
            "(declare-const in16x14 Int)",
            "(declare-const in16x15 Int)",
            "(declare-const in16x17 Int)",
            "(declare-const in16x18 Int)",
            "(declare-const in16x19 Int)",
            "(declare-const in16x10 Int)",
            "(declare-const in16x11 Int)",
            "(declare-const in16x12 Int)",
            "(declare-const in11x4 Int)",
            "(declare-const in2x5 Int)",
            "(declare-const in11x3 Int)",
            "(declare-const in2x6 Int)",
            "(declare-const in11x6 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in11x5 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in19x1 Int)",
            "(declare-const in11x8 Int)",
            "(declare-const in2x9 Int)",
            "(declare-const in19x2 Int)",
            "(declare-const in11x7 Int)",
            "(declare-const in2x7 Int)",
            "(declare-const in19x0 Int)",
            "(declare-const in11x9 Int)",
            "(declare-const in2x8 Int)",
            "(declare-const in19x5 Int)",
            "(declare-const in19x6 Int)",
            "(declare-const in19x3 Int)",
            "(declare-const in19x4 Int)",
            "(declare-const in19x9 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in19x7 Int)",
            "(declare-const in19x8 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in10x1 Int)",
            "(declare-const in10x0 Int)",
            "(declare-const in10x3 Int)",
            "(declare-const in10x2 Int)",
            "(declare-const in7x10 Int)",
            "(declare-const in10x19 Int)",
            "(declare-const in7x12 Int)",
            "(declare-const in7x11 Int)",
            "(declare-const in10x16 Int)",
            "(declare-const in10x15 Int)",
            "(declare-const in10x18 Int)",
            "(declare-const in10x17 Int)",
            "(declare-const in7x18 Int)",
            "(declare-const in10x12 Int)",
            "(declare-const in7x17 Int)",
            "(declare-const in10x11 Int)",
            "(declare-const in10x14 Int)",
            "(declare-const in7x19 Int)",
            "(declare-const in10x13 Int)",
            "(declare-const in7x14 Int)",
            "(declare-const in7x13 Int)",
            "(declare-const in7x16 Int)",
            "(declare-const in7x15 Int)",
            "(declare-const in15x11 Int)",
            "(declare-const in15x10 Int)",
            "(declare-const in16x0 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in16x1 Int)",
            "(declare-const in3x5 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in16x4 Int)",
            "(declare-const in3x8 Int)",
            "(declare-const in16x5 Int)",
            "(declare-const in3x9 Int)",
            "(declare-const in16x2 Int)",
            "(declare-const in3x6 Int)",
            "(declare-const in16x3 Int)",
            "(declare-const in3x7 Int)",
            "(declare-const in15x19 Int)",
            "(declare-const in16x8 Int)",
            "(declare-const in15x18 Int)",
            "(declare-const in16x9 Int)",
            "(declare-const in15x17 Int)",
            "(declare-const in16x6 Int)",
            "(declare-const in15x16 Int)",
            "(declare-const in16x7 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in15x14 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in15x13 Int)",
            "(declare-const in15x12 Int)",
            "(declare-const in9x13 Int)",
            "(declare-const in9x14 Int)",
            "(declare-const in9x11 Int)",
            "(declare-const in9x12 Int)",
            "(declare-const in9x10 Int)",
            "(declare-const in9x19 Int)",
            "(declare-const in9x17 Int)",
            "(declare-const in9x18 Int)",
            "(declare-const in9x15 Int)",
            "(declare-const in9x16 Int)",
            "(declare-const in4x9 Int)",
            "(declare-const in8x12 Int)",
            "(declare-const in4x3 Int)",
            "(declare-const in17x0 Int)",
            "(declare-const in8x13 Int)",
            "(declare-const in8x10 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in8x11 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in17x3 Int)",
            "(declare-const in4x7 Int)",
            "(declare-const in17x4 Int)",
            "(declare-const in4x8 Int)",
            "(declare-const in17x1 Int)",
            "(declare-const in4x5 Int)",
            "(declare-const in17x2 Int)",
            "(declare-const in4x6 Int)",
            "(declare-const in17x7 Int)",
            "(declare-const in17x8 Int)",
            "(declare-const in8x18 Int)",
            "(declare-const in17x5 Int)",
            "(declare-const in8x19 Int)",
            "(declare-const in17x6 Int)",
            "(declare-const in8x16 Int)",
            "(declare-const in8x17 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in17x9 Int)",
            "(declare-const in8x14 Int)",
            "(declare-const in8x15 Int)",
            "(declare-const in14x10 Int)",
            "(declare-const in3x19 Int)",
            "(declare-const in3x18 Int)",
            "(declare-const in3x17 Int)",
            "(declare-const in14x19 Int)",
            "(declare-const in14x18 Int)",
            "(declare-const in3x12 Int)",
            "(declare-const in14x17 Int)",
            "(declare-const in3x11 Int)",
            "(declare-const in14x16 Int)",
            "(declare-const in3x10 Int)",
            "(declare-const in14x15 Int)",
            "(declare-const in3x16 Int)",
            "(declare-const in3x15 Int)",
            "(declare-const in14x13 Int)",
            "(declare-const in14x12 Int)",
            "(declare-const in3x14 Int)",
            "(declare-const in14x11 Int)",
            "(declare-const in3x13 Int)",
            "(declare-const in19x17 Int)",
            "(declare-const in19x16 Int)",
            "(declare-const in19x18 Int)",
            "(declare-const in5x8 Int)",
            "(declare-const in5x9 Int)",
            "(declare-const in14x2 Int)",
            "(declare-const in5x2 Int)",
            "(declare-const in14x3 Int)",
            "(declare-const in5x3 Int)",
            "(declare-const in14x0 Int)",
            "(declare-const in5x0 Int)",
            "(declare-const in14x1 Int)",
            "(declare-const in5x1 Int)",
            "(declare-const in14x6 Int)",
            "(declare-const in5x6 Int)",
            "(declare-const in14x7 Int)",
            "(declare-const in5x7 Int)",
            "(declare-const in14x4 Int)",
            "(declare-const in5x4 Int)",
            "(declare-const in14x5 Int)",
            "(declare-const in19x11 Int)",
            "(declare-const in14x8 Int)",
            "(declare-const in19x10 Int)",
            "(declare-const in14x9 Int)",
            "(declare-const in19x13 Int)",
            "(declare-const in19x12 Int)",
            "(declare-const in19x15 Int)",
            "(declare-const in19x14 Int)",
            "(declare-const in5x19 Int)",
            "(declare-const in13x0 Int)",
            "(declare-const in5x10 Int)",
            "(declare-const in5x15 Int)",
            "(declare-const in5x16 Int)",
            "(declare-const in5x17 Int)",
            "(declare-const in5x18 Int)",
            "(declare-const in5x11 Int)",
            "(declare-const in5x12 Int)",
            "(declare-const in5x13 Int)",
            "(declare-const in5x14 Int)",
            "(declare-const in4x18 Int)",
            "(declare-const in4x19 Int)",
            "(declare-const in6x9 Int)",
            "(declare-const in6x7 Int)",
            "(declare-const in6x8 Int)",
            "(declare-const in15x1 Int)",
            "(declare-const in6x1 Int)",
            "(declare-const in15x2 Int)",
            "(declare-const in6x2 Int)",
            "(declare-const in15x0 Int)",
            "(declare-const in6x0 Int)",
            "(declare-const in15x5 Int)",
            "(declare-const in6x5 Int)",
            "(declare-const in15x6 Int)",
            "(declare-const in13x18 Int)",
            "(declare-const in15x3 Int)",
            "(declare-const in6x3 Int)",
            "(declare-const in13x19 Int)",
            "(declare-const in15x4 Int)",
            "(declare-const in6x4 Int)",
            "(declare-const in13x16 Int)",
            "(declare-const in15x9 Int)",
            "(declare-const in4x14 Int)",
            "(declare-const in13x17 Int)",
            "(declare-const in4x15 Int)",
            "(declare-const in4x16 Int)",
            "(declare-const in15x7 Int)",
            "(declare-const in13x14 Int)",
            "(declare-const in4x17 Int)",
            "(declare-const in13x15 Int)",
            "(declare-const in15x8 Int)",
            "(declare-const in13x12 Int)",
            "(declare-const in4x10 Int)",
            "(declare-const in4x11 Int)",
            "(declare-const in13x10 Int)",
            "(declare-const in4x12 Int)",
            "(declare-const in13x11 Int)",
            "(declare-const in4x13 Int)",
            "(declare-const in18x16 Int)",
            "(declare-const in18x15 Int)",
            "(declare-const in18x17 Int)",
            "(declare-const in18x19 Int)",
            "(declare-const in18x10 Int)",
            "(declare-const in18x12 Int)",
            "(declare-const in18x11 Int)",
            "(declare-const in18x14 Int)",
            "(declare-const in18x13 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6))  ( =  in7x0 in0x7))  ( =  in7x1 in1x7))  ( =  in7x2 in2x7))  ( =  in7x3 in3x7))  ( =  in7x4 in4x7))  ( =  in7x5 in5x7))  ( =  in7x6 in6x7))  ( =  in8x0 in0x8))  ( =  in8x1 in1x8))  ( =  in8x2 in2x8))  ( =  in8x3 in3x8))  ( =  in8x4 in4x8))  ( =  in8x5 in5x8))  ( =  in8x6 in6x8))  ( =  in8x7 in7x8))  ( =  in9x0 in0x9))  ( =  in9x1 in1x9))  ( =  in9x2 in2x9))  ( =  in9x3 in3x9))  ( =  in9x4 in4x9))  ( =  in9x5 in5x9))  ( =  in9x6 in6x9))  ( =  in9x7 in7x9))  ( =  in9x8 in8x9))  ( =  in10x0 in0x10))  ( =  in10x1 in1x10))  ( =  in10x2 in2x10))  ( =  in10x3 in3x10))  ( =  in10x4 in4x10))  ( =  in10x5 in5x10))  ( =  in10x6 in6x10))  ( =  in10x7 in7x10))  ( =  in10x8 in8x10))  ( =  in10x9 in9x10))  ( =  in11x0 in0x11))  ( =  in11x1 in1x11))  ( =  in11x2 in2x11))  ( =  in11x3 in3x11))  ( =  in11x4 in4x11))  ( =  in11x5 in5x11))  ( =  in11x6 in6x11))  ( =  in11x7 in7x11))  ( =  in11x8 in8x11))  ( =  in11x9 in9x11))  ( =  in11x10 in10x11))  ( =  in12x0 in0x12))  ( =  in12x1 in1x12))  ( =  in12x2 in2x12))  ( =  in12x3 in3x12))  ( =  in12x4 in4x12))  ( =  in12x5 in5x12))  ( =  in12x6 in6x12))  ( =  in12x7 in7x12))  ( =  in12x8 in8x12))  ( =  in12x9 in9x12))  ( =  in12x10 in10x12))  ( =  in12x11 in11x12))  ( =  in13x0 in0x13))  ( =  in13x1 in1x13))  ( =  in13x2 in2x13))  ( =  in13x3 in3x13))  ( =  in13x4 in4x13))  ( =  in13x5 in5x13))  ( =  in13x6 in6x13))  ( =  in13x7 in7x13))  ( =  in13x8 in8x13))  ( =  in13x9 in9x13))  ( =  in13x10 in10x13))  ( =  in13x11 in11x13))  ( =  in13x12 in12x13))  ( =  in14x0 in0x14))  ( =  in14x1 in1x14))  ( =  in14x2 in2x14))  ( =  in14x3 in3x14))  ( =  in14x4 in4x14))  ( =  in14x5 in5x14))  ( =  in14x6 in6x14))  ( =  in14x7 in7x14))  ( =  in14x8 in8x14))  ( =  in14x9 in9x14))  ( =  in14x10 in10x14))  ( =  in14x11 in11x14))  ( =  in14x12 in12x14))  ( =  in14x13 in13x14))  ( =  in15x0 in0x15))  ( =  in15x1 in1x15))  ( =  in15x2 in2x15))  ( =  in15x3 in3x15))  ( =  in15x4 in4x15))  ( =  in15x5 in5x15))  ( =  in15x6 in6x15))  ( =  in15x7 in7x15))  ( =  in15x8 in8x15))  ( =  in15x9 in9x15))  ( =  in15x10 in10x15))  ( =  in15x11 in11x15))  ( =  in15x12 in12x15))  ( =  in15x13 in13x15))  ( =  in15x14 in14x15))  ( =  in16x0 in0x16))  ( =  in16x1 in1x16))  ( =  in16x2 in2x16))  ( =  in16x3 in3x16))  ( =  in16x4 in4x16))  ( =  in16x5 in5x16))  ( =  in16x6 in6x16))  ( =  in16x7 in7x16))  ( =  in16x8 in8x16))  ( =  in16x9 in9x16))  ( =  in16x10 in10x16))  ( =  in16x11 in11x16))  ( =  in16x12 in12x16))  ( =  in16x13 in13x16))  ( =  in16x14 in14x16))  ( =  in16x15 in15x16))  ( =  in17x0 in0x17))  ( =  in17x1 in1x17))  ( =  in17x2 in2x17))  ( =  in17x3 in3x17))  ( =  in17x4 in4x17))  ( =  in17x5 in5x17))  ( =  in17x6 in6x17))  ( =  in17x7 in7x17))  ( =  in17x8 in8x17))  ( =  in17x9 in9x17))  ( =  in17x10 in10x17))  ( =  in17x11 in11x17))  ( =  in17x12 in12x17))  ( =  in17x13 in13x17))  ( =  in17x14 in14x17))  ( =  in17x15 in15x17))  ( =  in17x16 in16x17))  ( =  in18x0 in0x18))  ( =  in18x1 in1x18))  ( =  in18x2 in2x18))  ( =  in18x3 in3x18))  ( =  in18x4 in4x18))  ( =  in18x5 in5x18))  ( =  in18x6 in6x18))  ( =  in18x7 in7x18))  ( =  in18x8 in8x18))  ( =  in18x9 in9x18))  ( =  in18x10 in10x18))  ( =  in18x11 in11x18))  ( =  in18x12 in12x18))  ( =  in18x13 in13x18))  ( =  in18x14 in14x18))  ( =  in18x15 in15x18))  ( =  in18x16 in16x18))  ( =  in18x17 in17x18))  ( =  in19x0 in0x19))  ( =  in19x1 in1x19))  ( =  in19x2 in2x19))  ( =  in19x3 in3x19))  ( =  in19x4 in4x19))  ( =  in19x5 in5x19))  ( =  in19x6 in6x19))  ( =  in19x7 in7x19))  ( =  in19x8 in8x19))  ( =  in19x9 in9x19))  ( =  in19x10 in10x19))  ( =  in19x11 in11x19))  ( =  in19x12 in12x19))  ( =  in19x13 in13x19))  ( =  in19x14 in14x19))  ( =  in19x15 in15x19))  ( =  in19x16 in16x19))  ( =  in19x17 in17x19))  ( =  in19x18 in18x19)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4) ( = in5x0 in0x5) ( = in5x1 in1x5) ( = in5x2 in2x5) ( = in5x3 in3x5) ( = in5x4 in4x5) ( = in6x0 in0x6) ( = in6x1 in1x6) ( = in6x2 in2x6) ( = in6x3 in3x6) ( = in6x4 in4x6) ( = in6x5 in5x6) ( = in7x0 in0x7) ( = in7x1 in1x7) ( = in7x2 in2x7) ( = in7x3 in3x7) ( = in7x4 in4x7) ( = in7x5 in5x7) ( = in7x6 in6x7) ( = in8x0 in0x8) ( = in8x1 in1x8) ( = in8x2 in2x8) ( = in8x3 in3x8) ( = in8x4 in4x8) ( = in8x5 in5x8) ( = in8x6 in6x8) ( = in8x7 in7x8) ( = in9x0 in0x9) ( = in9x1 in1x9) ( = in9x2 in2x9) ( = in9x3 in3x9) ( = in9x4 in4x9) ( = in9x5 in5x9) ( = in9x6 in6x9) ( = in9x7 in7x9) ( = in9x8 in8x9) ( = in10x0 in0x10) ( = in10x1 in1x10) ( = in10x2 in2x10) ( = in10x3 in3x10) ( = in10x4 in4x10) ( = in10x5 in5x10) ( = in10x6 in6x10) ( = in10x7 in7x10) ( = in10x8 in8x10) ( = in10x9 in9x10) ( = in11x0 in0x11) ( = in11x1 in1x11) ( = in11x2 in2x11) ( = in11x3 in3x11) ( = in11x4 in4x11) ( = in11x5 in5x11) ( = in11x6 in6x11) ( = in11x7 in7x11) ( = in11x8 in8x11) ( = in11x9 in9x11) ( = in11x10 in10x11) ( = in12x0 in0x12) ( = in12x1 in1x12) ( = in12x2 in2x12) ( = in12x3 in3x12) ( = in12x4 in4x12) ( = in12x5 in5x12) ( = in12x6 in6x12) ( = in12x7 in7x12) ( = in12x8 in8x12) ( = in12x9 in9x12) ( = in12x10 in10x12) ( = in12x11 in11x12) ( = in13x0 in0x13) ( = in13x1 in1x13) ( = in13x2 in2x13) ( = in13x3 in3x13) ( = in13x4 in4x13) ( = in13x5 in5x13) ( = in13x6 in6x13) ( = in13x7 in7x13) ( = in13x8 in8x13) ( = in13x9 in9x13) ( = in13x10 in10x13) ( = in13x11 in11x13) ( = in13x12 in12x13) ( = in14x0 in0x14) ( = in14x1 in1x14) ( = in14x2 in2x14) ( = in14x3 in3x14) ( = in14x4 in4x14) ( = in14x5 in5x14) ( = in14x6 in6x14) ( = in14x7 in7x14) ( = in14x8 in8x14) ( = in14x9 in9x14) ( = in14x10 in10x14) ( = in14x11 in11x14) ( = in14x12 in12x14) ( = in14x13 in13x14) ( = in15x0 in0x15) ( = in15x1 in1x15) ( = in15x2 in2x15) ( = in15x3 in3x15) ( = in15x4 in4x15) ( = in15x5 in5x15) ( = in15x6 in6x15) ( = in15x7 in7x15) ( = in15x8 in8x15) ( = in15x9 in9x15) ( = in15x10 in10x15) ( = in15x11 in11x15) ( = in15x12 in12x15) ( = in15x13 in13x15) ( = in15x14 in14x15) ( = in16x0 in0x16) ( = in16x1 in1x16) ( = in16x2 in2x16) ( = in16x3 in3x16) ( = in16x4 in4x16) ( = in16x5 in5x16) ( = in16x6 in6x16) ( = in16x7 in7x16) ( = in16x8 in8x16) ( = in16x9 in9x16) ( = in16x10 in10x16) ( = in16x11 in11x16) ( = in16x12 in12x16) ( = in16x13 in13x16) ( = in16x14 in14x16) ( = in16x15 in15x16) ( = in17x0 in0x17) ( = in17x1 in1x17) ( = in17x2 in2x17) ( = in17x3 in3x17) ( = in17x4 in4x17) ( = in17x5 in5x17) ( = in17x6 in6x17) ( = in17x7 in7x17) ( = in17x8 in8x17) ( = in17x9 in9x17) ( = in17x10 in10x17) ( = in17x11 in11x17) ( = in17x12 in12x17) ( = in17x13 in13x17) ( = in17x14 in14x17) ( = in17x15 in15x17) ( = in17x16 in16x17) ( = in18x0 in0x18) ( = in18x1 in1x18) ( = in18x2 in2x18) ( = in18x3 in3x18) ( = in18x4 in4x18) ( = in18x5 in5x18) ( = in18x6 in6x18) ( = in18x7 in7x18) ( = in18x8 in8x18) ( = in18x9 in9x18) ( = in18x10 in10x18) ( = in18x11 in11x18) ( = in18x12 in12x18) ( = in18x13 in13x18) ( = in18x14 in14x18) ( = in18x15 in15x18) ( = in18x16 in16x18) ( = in18x17 in17x18) ( = in19x0 in0x19) ( = in19x1 in1x19) ( = in19x2 in2x19) ( = in19x3 in3x19) ( = in19x4 in4x19) ( = in19x5 in5x19) ( = in19x6 in6x19) ( = in19x7 in7x19) ( = in19x8 in8x19) ( = in19x9 in9x19) ( = in19x10 in10x19) ( = in19x11 in11x19) ( = in19x12 in12x19) ( = in19x13 in13x19) ( = in19x14 in14x19) ( = in19x15 in15x19) ( = in19x16 in16x19) ( = in19x17 in17x19) ( = in19x18 in18x19)))",
        "equivalent": true
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in7x8 Int)",
            "(declare-const in7x9 Int)",
            "(declare-const in7x6 Int)",
            "(declare-const in7x0 Int)",
            "(declare-const in7x1 Int)",
            "(declare-const in7x4 Int)",
            "(declare-const in7x5 Int)",
            "(declare-const in7x2 Int)",
            "(declare-const in7x3 Int)",
            "(declare-const in12x20 Int)",
            "(declare-const in1x18 Int)",
            "(declare-const in1x17 Int)",
            "(declare-const in1x16 Int)",
            "(declare-const in1x15 Int)",
            "(declare-const in1x19 Int)",
            "(declare-const in12x19 Int)",
            "(declare-const in12x17 Int)",
            "(declare-const in12x18 Int)",
            "(declare-const in12x15 Int)",
            "(declare-const in1x10 Int)",
            "(declare-const in12x16 Int)",
            "(declare-const in12x13 Int)",
            "(declare-const in12x14 Int)",
            "(declare-const in1x14 Int)",
            "(declare-const in12x11 Int)",
            "(declare-const in1x13 Int)",
            "(declare-const in1x12 Int)",
            "(declare-const in12x10 Int)",
            "(declare-const in1x11 Int)",
            "(declare-const in0x16 Int)",
            "(declare-const in0x17 Int)",
            "(declare-const in0x14 Int)",
            "(declare-const in0x15 Int)",
            "(declare-const in0x18 Int)",
            "(declare-const in0x19 Int)",
            "(declare-const in8x7 Int)",
            "(declare-const in8x5 Int)",
            "(declare-const in8x6 Int)",
            "(declare-const in8x9 Int)",
            "(declare-const in8x0 Int)",
            "(declare-const in8x3 Int)",
            "(declare-const in8x4 Int)",
            "(declare-const in8x1 Int)",
            "(declare-const in8x2 Int)",
            "(declare-const in0x12 Int)",
            "(declare-const in0x13 Int)",
            "(declare-const in0x10 Int)",
            "(declare-const in0x11 Int)",
            "(declare-const in0x20 Int)",
            "(declare-const in11x20 Int)",
            "(declare-const in2x19 Int)",
            "(declare-const in2x18 Int)",
            "(declare-const in2x17 Int)",
            "(declare-const in2x16 Int)",
            "(declare-const in9x6 Int)",
            "(declare-const in9x7 Int)",
            "(declare-const in9x4 Int)",
            "(declare-const in9x5 Int)",
            "(declare-const in9x8 Int)",
            "(declare-const in18x2 Int)",
            "(declare-const in11x17 Int)",
            "(declare-const in9x2 Int)",
            "(declare-const in18x3 Int)",
            "(declare-const in11x16 Int)",
            "(declare-const in9x3 Int)",
            "(declare-const in11x19 Int)",
            "(declare-const in18x0 Int)",
            "(declare-const in9x0 Int)",
            "(declare-const in11x18 Int)",
            "(declare-const in18x1 Int)",
            "(declare-const in9x1 Int)",
            "(declare-const in18x6 Int)",
            "(declare-const in11x13 Int)",
            "(declare-const in2x11 Int)",
            "(declare-const in18x7 Int)",
            "(declare-const in11x12 Int)",
            "(declare-const in2x10 Int)",
            "(declare-const in18x4 Int)",
            "(declare-const in11x15 Int)",
            "(declare-const in18x5 Int)",
            "(declare-const in11x14 Int)",
            "(declare-const in2x15 Int)",
            "(declare-const in2x14 Int)",
            "(declare-const in18x8 Int)",
            "(declare-const in2x13 Int)",
            "(declare-const in18x9 Int)",
            "(declare-const in2x12 Int)",
            "(declare-const in11x10 Int)",
            "(declare-const in2x20 Int)",
            "(declare-const in19x1 Int)",
            "(declare-const in19x2 Int)",
            "(declare-const in19x0 Int)",
            "(declare-const in19x5 Int)",
            "(declare-const in1x20 Int)",
            "(declare-const in19x6 Int)",
            "(declare-const in19x3 Int)",
            "(declare-const in19x4 Int)",
            "(declare-const in19x9 Int)",
            "(declare-const in19x7 Int)",
            "(declare-const in10x20 Int)",
            "(declare-const in19x8 Int)",
            "(declare-const in10x19 Int)",
            "(declare-const in10x16 Int)",
            "(declare-const in10x15 Int)",
            "(declare-const in10x18 Int)",
            "(declare-const in10x17 Int)",
            "(declare-const in10x12 Int)",
            "(declare-const in10x11 Int)",
            "(declare-const in10x14 Int)",
            "(declare-const in10x13 Int)",
            "(declare-const in15x11 Int)",
            "(declare-const in15x10 Int)",
            "(declare-const in15x19 Int)",
            "(declare-const in15x18 Int)",
            "(declare-const in15x17 Int)",
            "(declare-const in15x16 Int)",
            "(declare-const in15x14 Int)",
            "(declare-const in15x13 Int)",
            "(declare-const in15x12 Int)",
            "(declare-const in9x13 Int)",
            "(declare-const in9x14 Int)",
            "(declare-const in9x11 Int)",
            "(declare-const in9x12 Int)",
            "(declare-const in9x10 Int)",
            "(declare-const in9x19 Int)",
            "(declare-const in9x17 Int)",
            "(declare-const in9x18 Int)",
            "(declare-const in9x15 Int)",
            "(declare-const in9x16 Int)",
            "(declare-const in14x20 Int)",
            "(declare-const in20x0 Int)",
            "(declare-const in20x3 Int)",
            "(declare-const in20x4 Int)",
            "(declare-const in20x1 Int)",
            "(declare-const in20x2 Int)",
            "(declare-const in8x12 Int)",
            "(declare-const in8x13 Int)",
            "(declare-const in8x10 Int)",
            "(declare-const in8x11 Int)",
            "(declare-const in8x18 Int)",
            "(declare-const in8x19 Int)",
            "(declare-const in8x16 Int)",
            "(declare-const in8x17 Int)",
            "(declare-const in8x14 Int)",
            "(declare-const in8x15 Int)",
            "(declare-const in14x10 Int)",
            "(declare-const in20x7 Int)",
            "(declare-const in20x8 Int)",
            "(declare-const in20x5 Int)",
            "(declare-const in20x6 Int)",
            "(declare-const in8x20 Int)",
            "(declare-const in20x9 Int)",
            "(declare-const in14x19 Int)",
            "(declare-const in14x18 Int)",
            "(declare-const in14x17 Int)",
            "(declare-const in14x16 Int)",
            "(declare-const in14x15 Int)",
            "(declare-const in14x13 Int)",
            "(declare-const in14x12 Int)",
            "(declare-const in14x11 Int)",
            "(declare-const in13x20 Int)",
            "(declare-const in9x20 Int)",
            "(declare-const in13x18 Int)",
            "(declare-const in13x19 Int)",
            "(declare-const in13x16 Int)",
            "(declare-const in13x17 Int)",
            "(declare-const in13x14 Int)",
            "(declare-const in13x15 Int)",
            "(declare-const in13x12 Int)",
            "(declare-const in13x10 Int)",
            "(declare-const in13x11 Int)",
            "(declare-const in12x4 Int)",
            "(declare-const in12x5 Int)",
            "(declare-const in12x2 Int)",
            "(declare-const in6x11 Int)",
            "(declare-const in12x3 Int)",
            "(declare-const in6x10 Int)",
            "(declare-const in12x8 Int)",
            "(declare-const in12x9 Int)",
            "(declare-const in12x6 Int)",
            "(declare-const in12x7 Int)",
            "(declare-const in6x17 Int)",
            "(declare-const in6x16 Int)",
            "(declare-const in6x19 Int)",
            "(declare-const in6x18 Int)",
            "(declare-const in6x13 Int)",
            "(declare-const in6x12 Int)",
            "(declare-const in6x15 Int)",
            "(declare-const in6x14 Int)",
            "(declare-const in11x0 Int)",
            "(declare-const in11x2 Int)",
            "(declare-const in11x1 Int)",
            "(declare-const in6x20 Int)",
            "(declare-const in17x20 Int)",
            "(declare-const in17x14 Int)",
            "(declare-const in17x15 Int)",
            "(declare-const in17x16 Int)",
            "(declare-const in17x18 Int)",
            "(declare-const in17x19 Int)",
            "(declare-const in13x3 Int)",
            "(declare-const in0x7 Int)",
            "(declare-const in13x4 Int)",
            "(declare-const in0x8 Int)",
            "(declare-const in5x20 Int)",
            "(declare-const in13x1 Int)",
            "(declare-const in0x5 Int)",
            "(declare-const in13x2 Int)",
            "(declare-const in0x6 Int)",
            "(declare-const in13x7 Int)",
            "(declare-const in13x8 Int)",
            "(declare-const in13x5 Int)",
            "(declare-const in0x9 Int)",
            "(declare-const in13x6 Int)",
            "(declare-const in13x9 Int)",
            "(declare-const in17x10 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in17x11 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in17x12 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in17x13 Int)",
            "(declare-const in0x2 Int)",
            "(declare-const in12x0 Int)",
            "(declare-const in12x1 Int)",
            "(declare-const in10x5 Int)",
            "(declare-const in1x6 Int)",
            "(declare-const in7x20 Int)",
            "(declare-const in10x4 Int)",
            "(declare-const in1x7 Int)",
            "(declare-const in10x7 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in10x6 Int)",
            "(declare-const in1x5 Int)",
            "(declare-const in10x9 Int)",
            "(declare-const in10x8 Int)",
            "(declare-const in1x8 Int)",
            "(declare-const in1x9 Int)",
            "(declare-const in16x20 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in16x13 Int)",
            "(declare-const in16x14 Int)",
            "(declare-const in16x15 Int)",
            "(declare-const in16x17 Int)",
            "(declare-const in16x18 Int)",
            "(declare-const in16x19 Int)",
            "(declare-const in16x10 Int)",
            "(declare-const in16x11 Int)",
            "(declare-const in16x12 Int)",
            "(declare-const in11x4 Int)",
            "(declare-const in2x5 Int)",
            "(declare-const in11x3 Int)",
            "(declare-const in2x6 Int)",
            "(declare-const in11x6 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in11x5 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in11x8 Int)",
            "(declare-const in2x9 Int)",
            "(declare-const in11x7 Int)",
            "(declare-const in2x7 Int)",
            "(declare-const in11x9 Int)",
            "(declare-const in2x8 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in15x20 Int)",
            "(declare-const in10x1 Int)",
            "(declare-const in10x0 Int)",
            "(declare-const in10x3 Int)",
            "(declare-const in10x2 Int)",
            "(declare-const in7x10 Int)",
            "(declare-const in7x12 Int)",
            "(declare-const in7x11 Int)",
            "(declare-const in7x18 Int)",
            "(declare-const in7x17 Int)",
            "(declare-const in7x19 Int)",
            "(declare-const in7x14 Int)",
            "(declare-const in7x13 Int)",
            "(declare-const in7x16 Int)",
            "(declare-const in7x15 Int)",
            "(declare-const in16x0 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in16x1 Int)",
            "(declare-const in3x5 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in16x4 Int)",
            "(declare-const in3x8 Int)",
            "(declare-const in16x5 Int)",
            "(declare-const in3x9 Int)",
            "(declare-const in16x2 Int)",
            "(declare-const in3x6 Int)",
            "(declare-const in16x3 Int)",
            "(declare-const in3x7 Int)",
            "(declare-const in16x8 Int)",
            "(declare-const in16x9 Int)",
            "(declare-const in16x6 Int)",
            "(declare-const in3x20 Int)",
            "(declare-const in16x7 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in4x9 Int)",
            "(declare-const in4x3 Int)",
            "(declare-const in17x0 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in17x3 Int)",
            "(declare-const in4x7 Int)",
            "(declare-const in17x4 Int)",
            "(declare-const in4x8 Int)",
            "(declare-const in17x1 Int)",
            "(declare-const in4x5 Int)",
            "(declare-const in17x2 Int)",
            "(declare-const in4x6 Int)",
            "(declare-const in17x7 Int)",
            "(declare-const in17x8 Int)",
            "(declare-const in17x5 Int)",
            "(declare-const in17x6 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in17x9 Int)",
            "(declare-const in20x17 Int)",
            "(declare-const in20x16 Int)",
            "(declare-const in3x19 Int)",
            "(declare-const in20x15 Int)",
            "(declare-const in3x18 Int)",
            "(declare-const in20x14 Int)",
            "(declare-const in3x17 Int)",
            "(declare-const in20x19 Int)",
            "(declare-const in20x18 Int)",
            "(declare-const in20x13 Int)",
            "(declare-const in20x12 Int)",
            "(declare-const in20x11 Int)",
            "(declare-const in20x10 Int)",
            "(declare-const in19x20 Int)",
            "(declare-const in3x12 Int)",
            "(declare-const in3x11 Int)",
            "(declare-const in3x10 Int)",
            "(declare-const in3x16 Int)",
            "(declare-const in3x15 Int)",
            "(declare-const in3x14 Int)",
            "(declare-const in3x13 Int)",
            "(declare-const in19x17 Int)",
            "(declare-const in19x16 Int)",
            "(declare-const in19x18 Int)",
            "(declare-const in5x8 Int)",
            "(declare-const in5x9 Int)",
            "(declare-const in14x2 Int)",
            "(declare-const in5x2 Int)",
            "(declare-const in14x3 Int)",
            "(declare-const in5x3 Int)",
            "(declare-const in14x0 Int)",
            "(declare-const in5x0 Int)",
            "(declare-const in14x1 Int)",
            "(declare-const in5x1 Int)",
            "(declare-const in14x6 Int)",
            "(declare-const in5x6 Int)",
            "(declare-const in14x7 Int)",
            "(declare-const in5x7 Int)",
            "(declare-const in14x4 Int)",
            "(declare-const in5x4 Int)",
            "(declare-const in14x5 Int)",
            "(declare-const in19x11 Int)",
            "(declare-const in14x8 Int)",
            "(declare-const in19x10 Int)",
            "(declare-const in14x9 Int)",
            "(declare-const in19x13 Int)",
            "(declare-const in19x12 Int)",
            "(declare-const in19x15 Int)",
            "(declare-const in19x14 Int)",
            "(declare-const in5x19 Int)",
            "(declare-const in13x0 Int)",
            "(declare-const in5x10 Int)",
            "(declare-const in5x15 Int)",
            "(declare-const in5x16 Int)",
            "(declare-const in5x17 Int)",
            "(declare-const in5x18 Int)",
            "(declare-const in5x11 Int)",
            "(declare-const in5x12 Int)",
            "(declare-const in5x13 Int)",
            "(declare-const in5x14 Int)",
            "(declare-const in4x18 Int)",
            "(declare-const in4x19 Int)",
            "(declare-const in6x9 Int)",
            "(declare-const in6x7 Int)",
            "(declare-const in6x8 Int)",
            "(declare-const in15x1 Int)",
            "(declare-const in6x1 Int)",
            "(declare-const in15x2 Int)",
            "(declare-const in6x2 Int)",
            "(declare-const in15x0 Int)",
            "(declare-const in6x0 Int)",
            "(declare-const in15x5 Int)",
            "(declare-const in6x5 Int)",
            "(declare-const in15x6 Int)",
            "(declare-const in15x3 Int)",
            "(declare-const in6x3 Int)",
            "(declare-const in15x4 Int)",
            "(declare-const in6x4 Int)",
            "(declare-const in15x9 Int)",
            "(declare-const in4x14 Int)",
            "(declare-const in4x15 Int)",
            "(declare-const in4x16 Int)",
            "(declare-const in15x7 Int)",
            "(declare-const in18x20 Int)",
            "(declare-const in4x17 Int)",
            "(declare-const in15x8 Int)",
            "(declare-const in4x10 Int)",
            "(declare-const in4x11 Int)",
            "(declare-const in4x12 Int)",
            "(declare-const in4x13 Int)",
            "(declare-const in18x16 Int)",
            "(declare-const in18x15 Int)",
            "(declare-const in18x17 Int)",
            "(declare-const in18x19 Int)",
            "(declare-const in4x20 Int)",
            "(declare-const in18x10 Int)",
            "(declare-const in18x12 Int)",
            "(declare-const in18x11 Int)",
            "(declare-const in18x14 Int)",
            "(declare-const in18x13 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6))  ( =  in7x0 in0x7))  ( =  in7x1 in1x7))  ( =  in7x2 in2x7))  ( =  in7x3 in3x7))  ( =  in7x4 in4x7))  ( =  in7x5 in5x7))  ( =  in7x6 in6x7))  ( =  in8x0 in0x8))  ( =  in8x1 in1x8))  ( =  in8x2 in2x8))  ( =  in8x3 in3x8))  ( =  in8x4 in4x8))  ( =  in8x5 in5x8))  ( =  in8x6 in6x8))  ( =  in8x7 in7x8))  ( =  in9x0 in0x9))  ( =  in9x1 in1x9))  ( =  in9x2 in2x9))  ( =  in9x3 in3x9))  ( =  in9x4 in4x9))  ( =  in9x5 in5x9))  ( =  in9x6 in6x9))  ( =  in9x7 in7x9))  ( =  in9x8 in8x9))  ( =  in10x0 in0x10))  ( =  in10x1 in1x10))  ( =  in10x2 in2x10))  ( =  in10x3 in3x10))  ( =  in10x4 in4x10))  ( =  in10x5 in5x10))  ( =  in10x6 in6x10))  ( =  in10x7 in7x10))  ( =  in10x8 in8x10))  ( =  in10x9 in9x10))  ( =  in11x0 in0x11))  ( =  in11x1 in1x11))  ( =  in11x2 in2x11))  ( =  in11x3 in3x11))  ( =  in11x4 in4x11))  ( =  in11x5 in5x11))  ( =  in11x6 in6x11))  ( =  in11x7 in7x11))  ( =  in11x8 in8x11))  ( =  in11x9 in9x11))  ( =  in11x10 in10x11))  ( =  in12x0 in0x12))  ( =  in12x1 in1x12))  ( =  in12x2 in2x12))  ( =  in12x3 in3x12))  ( =  in12x4 in4x12))  ( =  in12x5 in5x12))  ( =  in12x6 in6x12))  ( =  in12x7 in7x12))  ( =  in12x8 in8x12))  ( =  in12x9 in9x12))  ( =  in12x10 in10x12))  ( =  in12x11 in11x12))  ( =  in13x0 in0x13))  ( =  in13x1 in1x13))  ( =  in13x2 in2x13))  ( =  in13x3 in3x13))  ( =  in13x4 in4x13))  ( =  in13x5 in5x13))  ( =  in13x6 in6x13))  ( =  in13x7 in7x13))  ( =  in13x8 in8x13))  ( =  in13x9 in9x13))  ( =  in13x10 in10x13))  ( =  in13x11 in11x13))  ( =  in13x12 in12x13))  ( =  in14x0 in0x14))  ( =  in14x1 in1x14))  ( =  in14x2 in2x14))  ( =  in14x3 in3x14))  ( =  in14x4 in4x14))  ( =  in14x5 in5x14))  ( =  in14x6 in6x14))  ( =  in14x7 in7x14))  ( =  in14x8 in8x14))  ( =  in14x9 in9x14))  ( =  in14x10 in10x14))  ( =  in14x11 in11x14))  ( =  in14x12 in12x14))  ( =  in14x13 in13x14))  ( =  in15x0 in0x15))  ( =  in15x1 in1x15))  ( =  in15x2 in2x15))  ( =  in15x3 in3x15))  ( =  in15x4 in4x15))  ( =  in15x5 in5x15))  ( =  in15x6 in6x15))  ( =  in15x7 in7x15))  ( =  in15x8 in8x15))  ( =  in15x9 in9x15))  ( =  in15x10 in10x15))  ( =  in15x11 in11x15))  ( =  in15x12 in12x15))  ( =  in15x13 in13x15))  ( =  in15x14 in14x15))  ( =  in16x0 in0x16))  ( =  in16x1 in1x16))  ( =  in16x2 in2x16))  ( =  in16x3 in3x16))  ( =  in16x4 in4x16))  ( =  in16x5 in5x16))  ( =  in16x6 in6x16))  ( =  in16x7 in7x16))  ( =  in16x8 in8x16))  ( =  in16x9 in9x16))  ( =  in16x10 in10x16))  ( =  in16x11 in11x16))  ( =  in16x12 in12x16))  ( =  in16x13 in13x16))  ( =  in16x14 in14x16))  ( =  in16x15 in15x16))  ( =  in17x0 in0x17))  ( =  in17x1 in1x17))  ( =  in17x2 in2x17))  ( =  in17x3 in3x17))  ( =  in17x4 in4x17))  ( =  in17x5 in5x17))  ( =  in17x6 in6x17))  ( =  in17x7 in7x17))  ( =  in17x8 in8x17))  ( =  in17x9 in9x17))  ( =  in17x10 in10x17))  ( =  in17x11 in11x17))  ( =  in17x12 in12x17))  ( =  in17x13 in13x17))  ( =  in17x14 in14x17))  ( =  in17x15 in15x17))  ( =  in17x16 in16x17))  ( =  in18x0 in0x18))  ( =  in18x1 in1x18))  ( =  in18x2 in2x18))  ( =  in18x3 in3x18))  ( =  in18x4 in4x18))  ( =  in18x5 in5x18))  ( =  in18x6 in6x18))  ( =  in18x7 in7x18))  ( =  in18x8 in8x18))  ( =  in18x9 in9x18))  ( =  in18x10 in10x18))  ( =  in18x11 in11x18))  ( =  in18x12 in12x18))  ( =  in18x13 in13x18))  ( =  in18x14 in14x18))  ( =  in18x15 in15x18))  ( =  in18x16 in16x18))  ( =  in18x17 in17x18))  ( =  in19x0 in0x19))  ( =  in19x1 in1x19))  ( =  in19x2 in2x19))  ( =  in19x3 in3x19))  ( =  in19x4 in4x19))  ( =  in19x5 in5x19))  ( =  in19x6 in6x19))  ( =  in19x7 in7x19))  ( =  in19x8 in8x19))  ( =  in19x9 in9x19))  ( =  in19x10 in10x19))  ( =  in19x11 in11x19))  ( =  in19x12 in12x19))  ( =  in19x13 in13x19))  ( =  in19x14 in14x19))  ( =  in19x15 in15x19))  ( =  in19x16 in16x19))  ( =  in19x17 in17x19))  ( =  in19x18 in18x19))  ( =  in20x0 in0x20))  ( =  in20x1 in1x20))  ( =  in20x2 in2x20))  ( =  in20x3 in3x20))  ( =  in20x4 in4x20))  ( =  in20x5 in5x20))  ( =  in20x6 in6x20))  ( =  in20x7 in7x20))  ( =  in20x8 in8x20))  ( =  in20x9 in9x20))  ( =  in20x10 in10x20))  ( =  in20x11 in11x20))  ( =  in20x12 in12x20))  ( =  in20x13 in13x20))  ( =  in20x14 in14x20))  ( =  in20x15 in15x20))  ( =  in20x16 in16x20))  ( =  in20x17 in17x20))  ( =  in20x18 in18x20))  ( =  in20x19 in19x20)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4) ( = in5x0 in0x5) ( = in5x1 in1x5) ( = in5x2 in2x5) ( = in5x3 in3x5) ( = in5x4 in4x5) ( = in6x0 in0x6) ( = in6x1 in1x6) ( = in6x2 in2x6) ( = in6x3 in3x6) ( = in6x4 in4x6) ( = in6x5 in5x6) ( = in7x0 in0x7) ( = in7x1 in1x7) ( = in7x2 in2x7) ( = in7x3 in3x7) ( = in7x4 in4x7) ( = in7x5 in5x7) ( = in7x6 in6x7) ( = in8x0 in0x8) ( = in8x1 in1x8) ( = in8x2 in2x8) ( = in8x3 in3x8) ( = in8x4 in4x8) ( = in8x5 in5x8) ( = in8x6 in6x8) ( = in8x7 in7x8) ( = in9x0 in0x9) ( = in9x1 in1x9) ( = in9x2 in2x9) ( = in9x3 in3x9) ( = in9x4 in4x9) ( = in9x5 in5x9) ( = in9x6 in6x9) ( = in9x7 in7x9) ( = in9x8 in8x9) ( = in10x0 in0x10) ( = in10x1 in1x10) ( = in10x2 in2x10) ( = in10x3 in3x10) ( = in10x4 in4x10) ( = in10x5 in5x10) ( = in10x6 in6x10) ( = in10x7 in7x10) ( = in10x8 in8x10) ( = in10x9 in9x10) ( = in11x0 in0x11) ( = in11x1 in1x11) ( = in11x2 in2x11) ( = in11x3 in3x11) ( = in11x4 in4x11) ( = in11x5 in5x11) ( = in11x6 in6x11) ( = in11x7 in7x11) ( = in11x8 in8x11) ( = in11x9 in9x11) ( = in11x10 in10x11) ( = in12x0 in0x12) ( = in12x1 in1x12) ( = in12x2 in2x12) ( = in12x3 in3x12) ( = in12x4 in4x12) ( = in12x5 in5x12) ( = in12x6 in6x12) ( = in12x7 in7x12) ( = in12x8 in8x12) ( = in12x9 in9x12) ( = in12x10 in10x12) ( = in12x11 in11x12) ( = in13x0 in0x13) ( = in13x1 in1x13) ( = in13x2 in2x13) ( = in13x3 in3x13) ( = in13x4 in4x13) ( = in13x5 in5x13) ( = in13x6 in6x13) ( = in13x7 in7x13) ( = in13x8 in8x13) ( = in13x9 in9x13) ( = in13x10 in10x13) ( = in13x11 in11x13) ( = in13x12 in12x13) ( = in14x0 in0x14) ( = in14x1 in1x14) ( = in14x2 in2x14) ( = in14x3 in3x14) ( = in14x4 in4x14) ( = in14x5 in5x14) ( = in14x6 in6x14) ( = in14x7 in7x14) ( = in14x8 in8x14) ( = in14x9 in9x14) ( = in14x10 in10x14) ( = in14x11 in11x14) ( = in14x12 in12x14) ( = in14x13 in13x14) ( = in15x0 in0x15) ( = in15x1 in1x15) ( = in15x2 in2x15) ( = in15x3 in3x15) ( = in15x4 in4x15) ( = in15x5 in5x15) ( = in15x6 in6x15) ( = in15x7 in7x15) ( = in15x8 in8x15) ( = in15x9 in9x15) ( = in15x10 in10x15) ( = in15x11 in11x15) ( = in15x12 in12x15) ( = in15x13 in13x15) ( = in15x14 in14x15) ( = in16x0 in0x16) ( = in16x1 in1x16) ( = in16x2 in2x16) ( = in16x3 in3x16) ( = in16x4 in4x16) ( = in16x5 in5x16) ( = in16x6 in6x16) ( = in16x7 in7x16) ( = in16x8 in8x16) ( = in16x9 in9x16) ( = in16x10 in10x16) ( = in16x11 in11x16) ( = in16x12 in12x16) ( = in16x13 in13x16) ( = in16x14 in14x16) ( = in16x15 in15x16) ( = in17x0 in0x17) ( = in17x1 in1x17) ( = in17x2 in2x17) ( = in17x3 in3x17) ( = in17x4 in4x17) ( = in17x5 in5x17) ( = in17x6 in6x17) ( = in17x7 in7x17) ( = in17x8 in8x17) ( = in17x9 in9x17) ( = in17x10 in10x17) ( = in17x11 in11x17) ( = in17x12 in12x17) ( = in17x13 in13x17) ( = in17x14 in14x17) ( = in17x15 in15x17) ( = in17x16 in16x17) ( = in18x0 in0x18) ( = in18x1 in1x18) ( = in18x2 in2x18) ( = in18x3 in3x18) ( = in18x4 in4x18) ( = in18x5 in5x18) ( = in18x6 in6x18) ( = in18x7 in7x18) ( = in18x8 in8x18) ( = in18x9 in9x18) ( = in18x10 in10x18) ( = in18x11 in11x18) ( = in18x12 in12x18) ( = in18x13 in13x18) ( = in18x14 in14x18) ( = in18x15 in15x18) ( = in18x16 in16x18) ( = in18x17 in17x18) ( = in19x0 in0x19) ( = in19x1 in1x19) ( = in19x2 in2x19) ( = in19x3 in3x19) ( = in19x4 in4x19) ( = in19x5 in5x19) ( = in19x6 in6x19) ( = in19x7 in7x19) ( = in19x8 in8x19) ( = in19x9 in9x19) ( = in19x10 in10x19) ( = in19x11 in11x19) ( = in19x12 in12x19) ( = in19x13 in13x19) ( = in19x14 in14x19) ( = in19x15 in15x19) ( = in19x16 in16x19) ( = in19x17 in17x19) ( = in19x18 in18x19) ( = in20x0 in0x20) ( = in20x1 in1x20) ( = in20x2 in2x20) ( = in20x3 in3x20) ( = in20x4 in4x20) ( = in20x5 in5x20) ( = in20x6 in6x20) ( = in20x7 in7x20) ( = in20x8 in8x20) ( = in20x9 in9x20) ( = in20x10 in10x20) ( = in20x11 in11x20) ( = in20x12 in12x20) ( = in20x13 in13x20) ( = in20x14 in14x20) ( = in20x15 in15x20) ( = in20x16 in16x20) ( = in20x17 in17x20) ( = in20x18 in18x20) ( = in20x19 in19x20)))",
        "equivalent": true
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in7x8 Int)",
            "(declare-const in7x9 Int)",
            "(declare-const in7x6 Int)",
            "(declare-const in7x0 Int)",
            "(declare-const in7x1 Int)",
            "(declare-const in7x4 Int)",
            "(declare-const in7x5 Int)",
            "(declare-const in7x2 Int)",
            "(declare-const in7x3 Int)",
            "(declare-const in12x20 Int)",
            "(declare-const in12x21 Int)",
            "(declare-const in1x18 Int)",
            "(declare-const in1x17 Int)",
            "(declare-const in1x16 Int)",
            "(declare-const in1x15 Int)",
            "(declare-const in1x19 Int)",
            "(declare-const in12x19 Int)",
            "(declare-const in12x17 Int)",
            "(declare-const in12x18 Int)",
            "(declare-const in12x15 Int)",
            "(declare-const in1x10 Int)",
            "(declare-const in12x16 Int)",
            "(declare-const in12x13 Int)",
            "(declare-const in12x14 Int)",
            "(declare-const in1x14 Int)",
            "(declare-const in12x11 Int)",
            "(declare-const in1x13 Int)",
            "(declare-const in1x12 Int)",
            "(declare-const in12x10 Int)",
            "(declare-const in1x11 Int)",
            "(declare-const in0x16 Int)",
            "(declare-const in0x17 Int)",
            "(declare-const in0x14 Int)",
            "(declare-const in0x15 Int)",
            "(declare-const in0x18 Int)",
            "(declare-const in0x19 Int)",
            "(declare-const in8x7 Int)",
            "(declare-const in8x5 Int)",
            "(declare-const in8x6 Int)",
            "(declare-const in8x9 Int)",
            "(declare-const in8x0 Int)",
            "(declare-const in8x3 Int)",
            "(declare-const in8x4 Int)",
            "(declare-const in8x1 Int)",
            "(declare-const in8x2 Int)",
            "(declare-const in0x12 Int)",
            "(declare-const in0x13 Int)",
            "(declare-const in0x10 Int)",
            "(declare-const in0x11 Int)",
            "(declare-const in0x20 Int)",
            "(declare-const in11x20 Int)",
            "(declare-const in0x21 Int)",
            "(declare-const in11x21 Int)",
            "(declare-const in2x19 Int)",
            "(declare-const in2x18 Int)",
            "(declare-const in2x17 Int)",
            "(declare-const in2x16 Int)",
            "(declare-const in9x6 Int)",
            "(declare-const in9x7 Int)",
            "(declare-const in9x4 Int)",
            "(declare-const in9x5 Int)",
            "(declare-const in9x8 Int)",
            "(declare-const in18x2 Int)",
            "(declare-const in11x17 Int)",
            "(declare-const in9x2 Int)",
            "(declare-const in18x3 Int)",
            "(declare-const in11x16 Int)",
            "(declare-const in9x3 Int)",
            "(declare-const in11x19 Int)",
            "(declare-const in18x0 Int)",
            "(declare-const in9x0 Int)",
            "(declare-const in11x18 Int)",
            "(declare-const in18x1 Int)",
            "(declare-const in9x1 Int)",
            "(declare-const in18x6 Int)",
            "(declare-const in11x13 Int)",
            "(declare-const in2x11 Int)",
            "(declare-const in18x7 Int)",
            "(declare-const in11x12 Int)",
            "(declare-const in2x10 Int)",
            "(declare-const in18x4 Int)",
            "(declare-const in11x15 Int)",
            "(declare-const in18x5 Int)",
            "(declare-const in11x14 Int)",
            "(declare-const in2x15 Int)",
            "(declare-const in2x14 Int)",
            "(declare-const in18x8 Int)",
            "(declare-const in2x13 Int)",
            "(declare-const in18x9 Int)",
            "(declare-const in2x12 Int)",
            "(declare-const in11x10 Int)",
            "(declare-const in2x21 Int)",
            "(declare-const in2x20 Int)",
            "(declare-const in19x1 Int)",
            "(declare-const in19x2 Int)",
            "(declare-const in19x0 Int)",
            "(declare-const in1x21 Int)",
            "(declare-const in19x5 Int)",
            "(declare-const in1x20 Int)",
            "(declare-const in19x6 Int)",
            "(declare-const in19x3 Int)",
            "(declare-const in19x4 Int)",
            "(declare-const in19x9 Int)",
            "(declare-const in10x21 Int)",
            "(declare-const in19x7 Int)",
            "(declare-const in10x20 Int)",
            "(declare-const in19x8 Int)",
            "(declare-const in21x20 Int)",
            "(declare-const in10x19 Int)",
            "(declare-const in10x16 Int)",
            "(declare-const in10x15 Int)",
            "(declare-const in10x18 Int)",
            "(declare-const in10x17 Int)",
            "(declare-const in10x12 Int)",
            "(declare-const in10x11 Int)",
            "(declare-const in10x14 Int)",
            "(declare-const in10x13 Int)",
            "(declare-const in15x11 Int)",
            "(declare-const in15x10 Int)",
            "(declare-const in15x19 Int)",
            "(declare-const in15x18 Int)",
            "(declare-const in15x17 Int)",
            "(declare-const in15x16 Int)",
            "(declare-const in15x14 Int)",
            "(declare-const in15x13 Int)",
            "(declare-const in15x12 Int)",
            "(declare-const in9x13 Int)",
            "(declare-const in9x14 Int)",
            "(declare-const in9x11 Int)",
            "(declare-const in9x12 Int)",
            "(declare-const in9x10 Int)",
            "(declare-const in9x19 Int)",
            "(declare-const in9x17 Int)",
            "(declare-const in9x18 Int)",
            "(declare-const in9x15 Int)",
            "(declare-const in9x16 Int)",
            "(declare-const in14x21 Int)",
            "(declare-const in14x20 Int)",
            "(declare-const in20x0 Int)",
            "(declare-const in20x3 Int)",
            "(declare-const in20x4 Int)",
            "(declare-const in20x1 Int)",
            "(declare-const in20x2 Int)",
            "(declare-const in8x12 Int)",
            "(declare-const in8x13 Int)",
            "(declare-const in8x10 Int)",
            "(declare-const in8x11 Int)",
            "(declare-const in8x18 Int)",
            "(declare-const in8x19 Int)",
            "(declare-const in8x16 Int)",
            "(declare-const in8x17 Int)",
            "(declare-const in8x14 Int)",
            "(declare-const in8x15 Int)",
            "(declare-const in14x10 Int)",
            "(declare-const in20x7 Int)",
            "(declare-const in20x8 Int)",
            "(declare-const in8x21 Int)",
            "(declare-const in20x5 Int)",
            "(declare-const in20x6 Int)",
            "(declare-const in8x20 Int)",
            "(declare-const in20x9 Int)",
            "(declare-const in14x19 Int)",
            "(declare-const in14x18 Int)",
            "(declare-const in14x17 Int)",
            "(declare-const in14x16 Int)",
            "(declare-const in14x15 Int)",
            "(declare-const in14x13 Int)",
            "(declare-const in14x12 Int)",
            "(declare-const in14x11 Int)",
            "(declare-const in13x20 Int)",
            "(declare-const in13x21 Int)",
            "(declare-const in9x20 Int)",
            "(declare-const in9x21 Int)",
            "(declare-const in13x18 Int)",
            "(declare-const in13x19 Int)",
            "(declare-const in13x16 Int)",
            "(declare-const in13x17 Int)",
            "(declare-const in13x14 Int)",
            "(declare-const in13x15 Int)",
            "(declare-const in13x12 Int)",
            "(declare-const in13x10 Int)",
            "(declare-const in13x11 Int)",
            "(declare-const in12x4 Int)",
            "(declare-const in12x5 Int)",
            "(declare-const in12x2 Int)",
            "(declare-const in6x11 Int)",
            "(declare-const in12x3 Int)",
            "(declare-const in6x10 Int)",
            "(declare-const in12x8 Int)",
            "(declare-const in12x9 Int)",
            "(declare-const in12x6 Int)",
            "(declare-const in12x7 Int)",
            "(declare-const in6x17 Int)",
            "(declare-const in6x16 Int)",
            "(declare-const in6x19 Int)",
            "(declare-const in6x18 Int)",
            "(declare-const in6x13 Int)",
            "(declare-const in6x12 Int)",
            "(declare-const in6x15 Int)",
            "(declare-const in6x14 Int)",
            "(declare-const in11x0 Int)",
            "(declare-const in11x2 Int)",
            "(declare-const in11x1 Int)",
            "(declare-const in6x20 Int)",
            "(declare-const in6x21 Int)",
            "(declare-const in17x20 Int)",
            "(declare-const in17x21 Int)",
            "(declare-const in17x14 Int)",
            "(declare-const in17x15 Int)",
            "(declare-const in17x16 Int)",
            "(declare-const in17x18 Int)",
            "(declare-const in17x19 Int)",
            "(declare-const in13x3 Int)",
            "(declare-const in0x7 Int)",
            "(declare-const in13x4 Int)",
            "(declare-const in0x8 Int)",
            "(declare-const in5x20 Int)",
            "(declare-const in13x1 Int)",
            "(declare-const in0x5 Int)",
            "(declare-const in5x21 Int)",
            "(declare-const in13x2 Int)",
            "(declare-const in0x6 Int)",
            "(declare-const in13x7 Int)",
            "(declare-const in13x8 Int)",
            "(declare-const in13x5 Int)",
            "(declare-const in0x9 Int)",
            "(declare-const in13x6 Int)",
            "(declare-const in13x9 Int)",
            "(declare-const in17x10 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in17x11 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in17x12 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in17x13 Int)",
            "(declare-const in0x2 Int)",
            "(declare-const in12x0 Int)",
            "(declare-const in12x1 Int)",
            "(declare-const in21x2 Int)",
            "(declare-const in21x3 Int)",
            "(declare-const in21x0 Int)",
            "(declare-const in21x1 Int)",
            "(declare-const in7x21 Int)",
            "(declare-const in10x5 Int)",
            "(declare-const in1x6 Int)",
            "(declare-const in7x20 Int)",
            "(declare-const in10x4 Int)",
            "(declare-const in1x7 Int)",
            "(declare-const in10x7 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in10x6 Int)",
            "(declare-const in1x5 Int)",
            "(declare-const in10x9 Int)",
            "(declare-const in10x8 Int)",
            "(declare-const in1x8 Int)",
            "(declare-const in1x9 Int)",
            "(declare-const in16x20 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in16x21 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in16x13 Int)",
            "(declare-const in16x14 Int)",
            "(declare-const in16x15 Int)",
            "(declare-const in16x17 Int)",
            "(declare-const in16x18 Int)",
            "(declare-const in16x19 Int)",
            "(declare-const in21x6 Int)",
            "(declare-const in21x7 Int)",
            "(declare-const in21x4 Int)",
            "(declare-const in21x5 Int)",
            "(declare-const in21x8 Int)",
            "(declare-const in21x9 Int)",
            "(declare-const in16x10 Int)",
            "(declare-const in16x11 Int)",
            "(declare-const in16x12 Int)",
            "(declare-const in11x4 Int)",
            "(declare-const in2x5 Int)",
            "(declare-const in11x3 Int)",
            "(declare-const in2x6 Int)",
            "(declare-const in11x6 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in11x5 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in11x8 Int)",
            "(declare-const in2x9 Int)",
            "(declare-const in11x7 Int)",
            "(declare-const in2x7 Int)",
            "(declare-const in11x9 Int)",
            "(declare-const in2x8 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in15x21 Int)",
            "(declare-const in15x20 Int)",
            "(declare-const in10x1 Int)",
            "(declare-const in10x0 Int)",
            "(declare-const in10x3 Int)",
            "(declare-const in10x2 Int)",
            "(declare-const in7x10 Int)",
            "(declare-const in7x12 Int)",
            "(declare-const in7x11 Int)",
            "(declare-const in7x18 Int)",
            "(declare-const in7x17 Int)",
            "(declare-const in7x19 Int)",
            "(declare-const in7x14 Int)",
            "(declare-const in7x13 Int)",
            "(declare-const in7x16 Int)",
            "(declare-const in7x15 Int)",
            "(declare-const in21x19 Int)",
            "(declare-const in21x15 Int)",
            "(declare-const in21x16 Int)",
            "(declare-const in21x17 Int)",
            "(declare-const in21x18 Int)",
            "(declare-const in21x11 Int)",
            "(declare-const in21x12 Int)",
            "(declare-const in21x13 Int)",
            "(declare-const in21x14 Int)",
            "(declare-const in21x10 Int)",
            "(declare-const in16x0 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in16x1 Int)",
            "(declare-const in3x5 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in16x4 Int)",
            "(declare-const in3x8 Int)",
            "(declare-const in16x5 Int)",
            "(declare-const in3x9 Int)",
            "(declare-const in16x2 Int)",
            "(declare-const in3x6 Int)",
            "(declare-const in16x3 Int)",
            "(declare-const in3x7 Int)",
            "(declare-const in16x8 Int)",
            "(declare-const in16x9 Int)",
            "(declare-const in3x21 Int)",
            "(declare-const in16x6 Int)",
            "(declare-const in3x20 Int)",
            "(declare-const in16x7 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in4x9 Int)",
            "(declare-const in20x21 Int)",
            "(declare-const in4x3 Int)",
            "(declare-const in17x0 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in17x3 Int)",
            "(declare-const in4x7 Int)",
            "(declare-const in17x4 Int)",
            "(declare-const in4x8 Int)",
            "(declare-const in17x1 Int)",
            "(declare-const in4x5 Int)",
            "(declare-const in17x2 Int)",
            "(declare-const in4x6 Int)",
            "(declare-const in17x7 Int)",
            "(declare-const in17x8 Int)",
            "(declare-const in17x5 Int)",
            "(declare-const in17x6 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in17x9 Int)",
            "(declare-const in20x17 Int)",
            "(declare-const in20x16 Int)",
            "(declare-const in3x19 Int)",
            "(declare-const in20x15 Int)",
            "(declare-const in3x18 Int)",
            "(declare-const in20x14 Int)",
            "(declare-const in3x17 Int)",
            "(declare-const in20x19 Int)",
            "(declare-const in20x18 Int)",
            "(declare-const in20x13 Int)",
            "(declare-const in20x12 Int)",
            "(declare-const in20x11 Int)",
            "(declare-const in20x10 Int)",
            "(declare-const in19x20 Int)",
            "(declare-const in3x12 Int)",
            "(declare-const in3x11 Int)",
            "(declare-const in3x10 Int)",
            "(declare-const in19x21 Int)",
            "(declare-const in3x16 Int)",
            "(declare-const in3x15 Int)",
            "(declare-const in3x14 Int)",
            "(declare-const in3x13 Int)",
            "(declare-const in19x17 Int)",
            "(declare-const in19x16 Int)",
            "(declare-const in19x18 Int)",
            "(declare-const in5x8 Int)",
            "(declare-const in5x9 Int)",
            "(declare-const in14x2 Int)",
            "(declare-const in5x2 Int)",
            "(declare-const in14x3 Int)",
            "(declare-const in5x3 Int)",
            "(declare-const in14x0 Int)",
            "(declare-const in5x0 Int)",
            "(declare-const in14x1 Int)",
            "(declare-const in5x1 Int)",
            "(declare-const in14x6 Int)",
            "(declare-const in5x6 Int)",
            "(declare-const in14x7 Int)",
            "(declare-const in5x7 Int)",
            "(declare-const in14x4 Int)",
            "(declare-const in5x4 Int)",
            "(declare-const in14x5 Int)",
            "(declare-const in19x11 Int)",
            "(declare-const in14x8 Int)",
            "(declare-const in19x10 Int)",
            "(declare-const in14x9 Int)",
            "(declare-const in19x13 Int)",
            "(declare-const in19x12 Int)",
            "(declare-const in19x15 Int)",
            "(declare-const in19x14 Int)",
            "(declare-const in5x19 Int)",
            "(declare-const in13x0 Int)",
            "(declare-const in5x10 Int)",
            "(declare-const in5x15 Int)",
            "(declare-const in5x16 Int)",
            "(declare-const in5x17 Int)",
            "(declare-const in5x18 Int)",
            "(declare-const in5x11 Int)",
            "(declare-const in5x12 Int)",
            "(declare-const in5x13 Int)",
            "(declare-const in5x14 Int)",
            "(declare-const in4x18 Int)",
            "(declare-const in4x19 Int)",
            "(declare-const in6x9 Int)",
            "(declare-const in6x7 Int)",
            "(declare-const in6x8 Int)",
            "(declare-const in15x1 Int)",
            "(declare-const in6x1 Int)",
            "(declare-const in15x2 Int)",
            "(declare-const in6x2 Int)",
            "(declare-const in15x0 Int)",
            "(declare-const in6x0 Int)",
            "(declare-const in15x5 Int)",
            "(declare-const in6x5 Int)",
            "(declare-const in15x6 Int)",
            "(declare-const in15x3 Int)",
            "(declare-const in6x3 Int)",
            "(declare-const in15x4 Int)",
            "(declare-const in6x4 Int)",
            "(declare-const in15x9 Int)",
            "(declare-const in4x14 Int)",
            "(declare-const in4x15 Int)",
            "(declare-const in18x21 Int)",
            "(declare-const in4x16 Int)",
            "(declare-const in15x7 Int)",
            "(declare-const in18x20 Int)",
            "(declare-const in4x17 Int)",
            "(declare-const in15x8 Int)",
            "(declare-const in4x10 Int)",
            "(declare-const in4x11 Int)",
            "(declare-const in4x12 Int)",
            "(declare-const in4x13 Int)",
            "(declare-const in18x16 Int)",
            "(declare-const in18x15 Int)",
            "(declare-const in18x17 Int)",
            "(declare-const in18x19 Int)",
            "(declare-const in4x20 Int)",
            "(declare-const in18x10 Int)",
            "(declare-const in4x21 Int)",
            "(declare-const in18x12 Int)",
            "(declare-const in18x11 Int)",
            "(declare-const in18x14 Int)",
            "(declare-const in18x13 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6))  ( =  in7x0 in0x7))  ( =  in7x1 in1x7))  ( =  in7x2 in2x7))  ( =  in7x3 in3x7))  ( =  in7x4 in4x7))  ( =  in7x5 in5x7))  ( =  in7x6 in6x7))  ( =  in8x0 in0x8))  ( =  in8x1 in1x8))  ( =  in8x2 in2x8))  ( =  in8x3 in3x8))  ( =  in8x4 in4x8))  ( =  in8x5 in5x8))  ( =  in8x6 in6x8))  ( =  in8x7 in7x8))  ( =  in9x0 in0x9))  ( =  in9x1 in1x9))  ( =  in9x2 in2x9))  ( =  in9x3 in3x9))  ( =  in9x4 in4x9))  ( =  in9x5 in5x9))  ( =  in9x6 in6x9))  ( =  in9x7 in7x9))  ( =  in9x8 in8x9))  ( =  in10x0 in0x10))  ( =  in10x1 in1x10))  ( =  in10x2 in2x10))  ( =  in10x3 in3x10))  ( =  in10x4 in4x10))  ( =  in10x5 in5x10))  ( =  in10x6 in6x10))  ( =  in10x7 in7x10))  ( =  in10x8 in8x10))  ( =  in10x9 in9x10))  ( =  in11x0 in0x11))  ( =  in11x1 in1x11))  ( =  in11x2 in2x11))  ( =  in11x3 in3x11))  ( =  in11x4 in4x11))  ( =  in11x5 in5x11))  ( =  in11x6 in6x11))  ( =  in11x7 in7x11))  ( =  in11x8 in8x11))  ( =  in11x9 in9x11))  ( =  in11x10 in10x11))  ( =  in12x0 in0x12))  ( =  in12x1 in1x12))  ( =  in12x2 in2x12))  ( =  in12x3 in3x12))  ( =  in12x4 in4x12))  ( =  in12x5 in5x12))  ( =  in12x6 in6x12))  ( =  in12x7 in7x12))  ( =  in12x8 in8x12))  ( =  in12x9 in9x12))  ( =  in12x10 in10x12))  ( =  in12x11 in11x12))  ( =  in13x0 in0x13))  ( =  in13x1 in1x13))  ( =  in13x2 in2x13))  ( =  in13x3 in3x13))  ( =  in13x4 in4x13))  ( =  in13x5 in5x13))  ( =  in13x6 in6x13))  ( =  in13x7 in7x13))  ( =  in13x8 in8x13))  ( =  in13x9 in9x13))  ( =  in13x10 in10x13))  ( =  in13x11 in11x13))  ( =  in13x12 in12x13))  ( =  in14x0 in0x14))  ( =  in14x1 in1x14))  ( =  in14x2 in2x14))  ( =  in14x3 in3x14))  ( =  in14x4 in4x14))  ( =  in14x5 in5x14))  ( =  in14x6 in6x14))  ( =  in14x7 in7x14))  ( =  in14x8 in8x14))  ( =  in14x9 in9x14))  ( =  in14x10 in10x14))  ( =  in14x11 in11x14))  ( =  in14x12 in12x14))  ( =  in14x13 in13x14))  ( =  in15x0 in0x15))  ( =  in15x1 in1x15))  ( =  in15x2 in2x15))  ( =  in15x3 in3x15))  ( =  in15x4 in4x15))  ( =  in15x5 in5x15))  ( =  in15x6 in6x15))  ( =  in15x7 in7x15))  ( =  in15x8 in8x15))  ( =  in15x9 in9x15))  ( =  in15x10 in10x15))  ( =  in15x11 in11x15))  ( =  in15x12 in12x15))  ( =  in15x13 in13x15))  ( =  in15x14 in14x15))  ( =  in16x0 in0x16))  ( =  in16x1 in1x16))  ( =  in16x2 in2x16))  ( =  in16x3 in3x16))  ( =  in16x4 in4x16))  ( =  in16x5 in5x16))  ( =  in16x6 in6x16))  ( =  in16x7 in7x16))  ( =  in16x8 in8x16))  ( =  in16x9 in9x16))  ( =  in16x10 in10x16))  ( =  in16x11 in11x16))  ( =  in16x12 in12x16))  ( =  in16x13 in13x16))  ( =  in16x14 in14x16))  ( =  in16x15 in15x16))  ( =  in17x0 in0x17))  ( =  in17x1 in1x17))  ( =  in17x2 in2x17))  ( =  in17x3 in3x17))  ( =  in17x4 in4x17))  ( =  in17x5 in5x17))  ( =  in17x6 in6x17))  ( =  in17x7 in7x17))  ( =  in17x8 in8x17))  ( =  in17x9 in9x17))  ( =  in17x10 in10x17))  ( =  in17x11 in11x17))  ( =  in17x12 in12x17))  ( =  in17x13 in13x17))  ( =  in17x14 in14x17))  ( =  in17x15 in15x17))  ( =  in17x16 in16x17))  ( =  in18x0 in0x18))  ( =  in18x1 in1x18))  ( =  in18x2 in2x18))  ( =  in18x3 in3x18))  ( =  in18x4 in4x18))  ( =  in18x5 in5x18))  ( =  in18x6 in6x18))  ( =  in18x7 in7x18))  ( =  in18x8 in8x18))  ( =  in18x9 in9x18))  ( =  in18x10 in10x18))  ( =  in18x11 in11x18))  ( =  in18x12 in12x18))  ( =  in18x13 in13x18))  ( =  in18x14 in14x18))  ( =  in18x15 in15x18))  ( =  in18x16 in16x18))  ( =  in18x17 in17x18))  ( =  in19x0 in0x19))  ( =  in19x1 in1x19))  ( =  in19x2 in2x19))  ( =  in19x3 in3x19))  ( =  in19x4 in4x19))  ( =  in19x5 in5x19))  ( =  in19x6 in6x19))  ( =  in19x7 in7x19))  ( =  in19x8 in8x19))  ( =  in19x9 in9x19))  ( =  in19x10 in10x19))  ( =  in19x11 in11x19))  ( =  in19x12 in12x19))  ( =  in19x13 in13x19))  ( =  in19x14 in14x19))  ( =  in19x15 in15x19))  ( =  in19x16 in16x19))  ( =  in19x17 in17x19))  ( =  in19x18 in18x19))  ( =  in20x0 in0x20))  ( =  in20x1 in1x20))  ( =  in20x2 in2x20))  ( =  in20x3 in3x20))  ( =  in20x4 in4x20))  ( =  in20x5 in5x20))  ( =  in20x6 in6x20))  ( =  in20x7 in7x20))  ( =  in20x8 in8x20))  ( =  in20x9 in9x20))  ( =  in20x10 in10x20))  ( =  in20x11 in11x20))  ( =  in20x12 in12x20))  ( =  in20x13 in13x20))  ( =  in20x14 in14x20))  ( =  in20x15 in15x20))  ( =  in20x16 in16x20))  ( =  in20x17 in17x20))  ( =  in20x18 in18x20))  ( =  in20x19 in19x20))  ( =  in21x0 in0x21))  ( =  in21x1 in1x21))  ( =  in21x2 in2x21))  ( =  in21x3 in3x21))  ( =  in21x4 in4x21))  ( =  in21x5 in5x21))  ( =  in21x6 in6x21))  ( =  in21x7 in7x21))  ( =  in21x8 in8x21))  ( =  in21x9 in9x21))  ( =  in21x10 in10x21))  ( =  in21x11 in11x21))  ( =  in21x12 in12x21))  ( =  in21x13 in13x21))  ( =  in21x14 in14x21))  ( =  in21x15 in15x21))  ( =  in21x16 in16x21))  ( =  in21x17 in17x21))  ( =  in21x18 in18x21))  ( =  in21x19 in19x21))  ( =  in21x20 in20x21)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4) ( = in5x0 in0x5) ( = in5x1 in1x5) ( = in5x2 in2x5) ( = in5x3 in3x5) ( = in5x4 in4x5) ( = in6x0 in0x6) ( = in6x1 in1x6) ( = in6x2 in2x6) ( = in6x3 in3x6) ( = in6x4 in4x6) ( = in6x5 in5x6) ( = in7x0 in0x7) ( = in7x1 in1x7) ( = in7x2 in2x7) ( = in7x3 in3x7) ( = in7x4 in4x7) ( = in7x5 in5x7) ( = in7x6 in6x7) ( = in8x0 in0x8) ( = in8x1 in1x8) ( = in8x2 in2x8) ( = in8x3 in3x8) ( = in8x4 in4x8) ( = in8x5 in5x8) ( = in8x6 in6x8) ( = in8x7 in7x8) ( = in9x0 in0x9) ( = in9x1 in1x9) ( = in9x2 in2x9) ( = in9x3 in3x9) ( = in9x4 in4x9) ( = in9x5 in5x9) ( = in9x6 in6x9) ( = in9x7 in7x9) ( = in9x8 in8x9) ( = in10x0 in0x10) ( = in10x1 in1x10) ( = in10x2 in2x10) ( = in10x3 in3x10) ( = in10x4 in4x10) ( = in10x5 in5x10) ( = in10x6 in6x10) ( = in10x7 in7x10) ( = in10x8 in8x10) ( = in10x9 in9x10) ( = in11x0 in0x11) ( = in11x1 in1x11) ( = in11x2 in2x11) ( = in11x3 in3x11) ( = in11x4 in4x11) ( = in11x5 in5x11) ( = in11x6 in6x11) ( = in11x7 in7x11) ( = in11x8 in8x11) ( = in11x9 in9x11) ( = in11x10 in10x11) ( = in12x0 in0x12) ( = in12x1 in1x12) ( = in12x2 in2x12) ( = in12x3 in3x12) ( = in12x4 in4x12) ( = in12x5 in5x12) ( = in12x6 in6x12) ( = in12x7 in7x12) ( = in12x8 in8x12) ( = in12x9 in9x12) ( = in12x10 in10x12) ( = in12x11 in11x12) ( = in13x0 in0x13) ( = in13x1 in1x13) ( = in13x2 in2x13) ( = in13x3 in3x13) ( = in13x4 in4x13) ( = in13x5 in5x13) ( = in13x6 in6x13) ( = in13x7 in7x13) ( = in13x8 in8x13) ( = in13x9 in9x13) ( = in13x10 in10x13) ( = in13x11 in11x13) ( = in13x12 in12x13) ( = in14x0 in0x14) ( = in14x1 in1x14) ( = in14x2 in2x14) ( = in14x3 in3x14) ( = in14x4 in4x14) ( = in14x5 in5x14) ( = in14x6 in6x14) ( = in14x7 in7x14) ( = in14x8 in8x14) ( = in14x9 in9x14) ( = in14x10 in10x14) ( = in14x11 in11x14) ( = in14x12 in12x14) ( = in14x13 in13x14) ( = in15x0 in0x15) ( = in15x1 in1x15) ( = in15x2 in2x15) ( = in15x3 in3x15) ( = in15x4 in4x15) ( = in15x5 in5x15) ( = in15x6 in6x15) ( = in15x7 in7x15) ( = in15x8 in8x15) ( = in15x9 in9x15) ( = in15x10 in10x15) ( = in15x11 in11x15) ( = in15x12 in12x15) ( = in15x13 in13x15) ( = in15x14 in14x15) ( = in16x0 in0x16) ( = in16x1 in1x16) ( = in16x2 in2x16) ( = in16x3 in3x16) ( = in16x4 in4x16) ( = in16x5 in5x16) ( = in16x6 in6x16) ( = in16x7 in7x16) ( = in16x8 in8x16) ( = in16x9 in9x16) ( = in16x10 in10x16) ( = in16x11 in11x16) ( = in16x12 in12x16) ( = in16x13 in13x16) ( = in16x14 in14x16) ( = in16x15 in15x16) ( = in17x0 in0x17) ( = in17x1 in1x17) ( = in17x2 in2x17) ( = in17x3 in3x17) ( = in17x4 in4x17) ( = in17x5 in5x17) ( = in17x6 in6x17) ( = in17x7 in7x17) ( = in17x8 in8x17) ( = in17x9 in9x17) ( = in17x10 in10x17) ( = in17x11 in11x17) ( = in17x12 in12x17) ( = in17x13 in13x17) ( = in17x14 in14x17) ( = in17x15 in15x17) ( = in17x16 in16x17) ( = in18x0 in0x18) ( = in18x1 in1x18) ( = in18x2 in2x18) ( = in18x3 in3x18) ( = in18x4 in4x18) ( = in18x5 in5x18) ( = in18x6 in6x18) ( = in18x7 in7x18) ( = in18x8 in8x18) ( = in18x9 in9x18) ( = in18x10 in10x18) ( = in18x11 in11x18) ( = in18x12 in12x18) ( = in18x13 in13x18) ( = in18x14 in14x18) ( = in18x15 in15x18) ( = in18x16 in16x18) ( = in18x17 in17x18) ( = in19x0 in0x19) ( = in19x1 in1x19) ( = in19x2 in2x19) ( = in19x3 in3x19) ( = in19x4 in4x19) ( = in19x5 in5x19) ( = in19x6 in6x19) ( = in19x7 in7x19) ( = in19x8 in8x19) ( = in19x9 in9x19) ( = in19x10 in10x19) ( = in19x11 in11x19) ( = in19x12 in12x19) ( = in19x13 in13x19) ( = in19x14 in14x19) ( = in19x15 in15x19) ( = in19x16 in16x19) ( = in19x17 in17x19) ( = in19x18 in18x19) ( = in20x0 in0x20) ( = in20x1 in1x20) ( = in20x2 in2x20) ( = in20x3 in3x20) ( = in20x4 in4x20) ( = in20x5 in5x20) ( = in20x6 in6x20) ( = in20x7 in7x20) ( = in20x8 in8x20) ( = in20x9 in9x20) ( = in20x10 in10x20) ( = in20x11 in11x20) ( = in20x12 in12x20) ( = in20x13 in13x20) ( = in20x14 in14x20) ( = in20x15 in15x20) ( = in20x16 in16x20) ( = in20x17 in17x20) ( = in20x18 in18x20) ( = in20x19 in19x20) ( = in21x0 in0x21) ( = in21x1 in1x21) ( = in21x2 in2x21) ( = in21x3 in3x21) ( = in21x4 in4x21) ( = in21x5 in5x21) ( = in21x6 in6x21) ( = in21x7 in7x21) ( = in21x8 in8x21) ( = in21x9 in9x21) ( = in21x10 in10x21) ( = in21x11 in11x21) ( = in21x12 in12x21) ( = in21x13 in13x21) ( = in21x14 in14x21) ( = in21x15 in15x21) ( = in21x16 in16x21) ( = in21x17 in17x21) ( = in21x18 in18x21) ( = in21x19 in19x21) ( = in21x20 in20x21)))",
        "equivalent": true
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in7x8 Int)",
            "(declare-const in7x9 Int)",
            "(declare-const in7x6 Int)",
            "(declare-const in7x0 Int)",
            "(declare-const in7x1 Int)",
            "(declare-const in7x4 Int)",
            "(declare-const in7x5 Int)",
            "(declare-const in7x2 Int)",
            "(declare-const in7x3 Int)",
            "(declare-const in12x22 Int)",
            "(declare-const in12x20 Int)",
            "(declare-const in12x21 Int)",
            "(declare-const in1x18 Int)",
            "(declare-const in1x17 Int)",
            "(declare-const in1x16 Int)",
            "(declare-const in1x15 Int)",
            "(declare-const in1x19 Int)",
            "(declare-const in12x19 Int)",
            "(declare-const in12x17 Int)",
            "(declare-const in12x18 Int)",
            "(declare-const in12x15 Int)",
            "(declare-const in1x10 Int)",
            "(declare-const in12x16 Int)",
            "(declare-const in12x13 Int)",
            "(declare-const in12x14 Int)",
            "(declare-const in1x14 Int)",
            "(declare-const in12x11 Int)",
            "(declare-const in1x13 Int)",
            "(declare-const in1x12 Int)",
            "(declare-const in12x10 Int)",
            "(declare-const in1x11 Int)",
            "(declare-const in0x16 Int)",
            "(declare-const in0x17 Int)",
            "(declare-const in0x14 Int)",
            "(declare-const in0x15 Int)",
            "(declare-const in0x18 Int)",
            "(declare-const in0x19 Int)",
            "(declare-const in8x7 Int)",
            "(declare-const in8x5 Int)",
            "(declare-const in8x6 Int)",
            "(declare-const in8x9 Int)",
            "(declare-const in8x0 Int)",
            "(declare-const in8x3 Int)",
            "(declare-const in8x4 Int)",
            "(declare-const in8x1 Int)",
            "(declare-const in8x2 Int)",
            "(declare-const in0x12 Int)",
            "(declare-const in0x13 Int)",
            "(declare-const in0x10 Int)",
            "(declare-const in0x11 Int)",
            "(declare-const in0x20 Int)",
            "(declare-const in11x20 Int)",
            "(declare-const in11x22 Int)",
            "(declare-const in0x21 Int)",
            "(declare-const in0x22 Int)",
            "(declare-const in11x21 Int)",
            "(declare-const in2x19 Int)",
            "(declare-const in2x18 Int)",
            "(declare-const in2x17 Int)",
            "(declare-const in2x16 Int)",
            "(declare-const in9x6 Int)",
            "(declare-const in9x7 Int)",
            "(declare-const in9x4 Int)",
            "(declare-const in9x5 Int)",
            "(declare-const in22x20 Int)",
            "(declare-const in22x21 Int)",
            "(declare-const in9x8 Int)",
            "(declare-const in18x2 Int)",
            "(declare-const in11x17 Int)",
            "(declare-const in9x2 Int)",
            "(declare-const in18x3 Int)",
            "(declare-const in11x16 Int)",
            "(declare-const in9x3 Int)",
            "(declare-const in11x19 Int)",
            "(declare-const in18x0 Int)",
            "(declare-const in9x0 Int)",
            "(declare-const in11x18 Int)",
            "(declare-const in18x1 Int)",
            "(declare-const in9x1 Int)",
            "(declare-const in18x6 Int)",
            "(declare-const in11x13 Int)",
            "(declare-const in2x11 Int)",
            "(declare-const in18x7 Int)",
            "(declare-const in11x12 Int)",
            "(declare-const in2x10 Int)",
            "(declare-const in18x4 Int)",
            "(declare-const in11x15 Int)",
            "(declare-const in18x5 Int)",
            "(declare-const in11x14 Int)",
            "(declare-const in2x15 Int)",
            "(declare-const in2x14 Int)",
            "(declare-const in18x8 Int)",
            "(declare-const in2x13 Int)",
            "(declare-const in18x9 Int)",
            "(declare-const in2x12 Int)",
            "(declare-const in11x10 Int)",
            "(declare-const in22x16 Int)",
            "(declare-const in22x17 Int)",
            "(declare-const in22x18 Int)",
            "(declare-const in22x19 Int)",
            "(declare-const in22x12 Int)",
            "(declare-const in22x13 Int)",
            "(declare-const in22x14 Int)",
            "(declare-const in22x15 Int)",
            "(declare-const in22x10 Int)",
            "(declare-const in22x11 Int)",
            "(declare-const in2x22 Int)",
            "(declare-const in2x21 Int)",
            "(declare-const in2x20 Int)",
            "(declare-const in19x1 Int)",
            "(declare-const in19x2 Int)",
            "(declare-const in19x0 Int)",
            "(declare-const in1x21 Int)",
            "(declare-const in19x5 Int)",
            "(declare-const in10x22 Int)",
            "(declare-const in1x20 Int)",
            "(declare-const in19x6 Int)",
            "(declare-const in19x3 Int)",
            "(declare-const in19x4 Int)",
            "(declare-const in19x9 Int)",
            "(declare-const in10x21 Int)",
            "(declare-const in19x7 Int)",
            "(declare-const in1x22 Int)",
            "(declare-const in10x20 Int)",
            "(declare-const in19x8 Int)",
            "(declare-const in21x22 Int)",
            "(declare-const in21x20 Int)",
            "(declare-const in10x19 Int)",
            "(declare-const in10x16 Int)",
            "(declare-const in10x15 Int)",
            "(declare-const in10x18 Int)",
            "(declare-const in10x17 Int)",
            "(declare-const in10x12 Int)",
            "(declare-const in10x11 Int)",
            "(declare-const in10x14 Int)",
            "(declare-const in10x13 Int)",
            "(declare-const in15x11 Int)",
            "(declare-const in15x10 Int)",
            "(declare-const in15x19 Int)",
            "(declare-const in15x18 Int)",
            "(declare-const in15x17 Int)",
            "(declare-const in15x16 Int)",
            "(declare-const in15x14 Int)",
            "(declare-const in15x13 Int)",
            "(declare-const in15x12 Int)",
            "(declare-const in9x13 Int)",
            "(declare-const in9x14 Int)",
            "(declare-const in9x11 Int)",
            "(declare-const in9x12 Int)",
            "(declare-const in9x10 Int)",
            "(declare-const in9x19 Int)",
            "(declare-const in9x17 Int)",
            "(declare-const in9x18 Int)",
            "(declare-const in9x15 Int)",
            "(declare-const in9x16 Int)",
            "(declare-const in14x21 Int)",
            "(declare-const in14x20 Int)",
            "(declare-const in20x0 Int)",
            "(declare-const in20x3 Int)",
            "(declare-const in20x4 Int)",
            "(declare-const in20x1 Int)",
            "(declare-const in20x2 Int)",
            "(declare-const in8x12 Int)",
            "(declare-const in8x13 Int)",
            "(declare-const in8x10 Int)",
            "(declare-const in8x11 Int)",
            "(declare-const in8x18 Int)",
            "(declare-const in8x19 Int)",
            "(declare-const in8x16 Int)",
            "(declare-const in8x17 Int)",
            "(declare-const in8x14 Int)",
            "(declare-const in14x22 Int)",
            "(declare-const in8x15 Int)",
            "(declare-const in14x10 Int)",
            "(declare-const in20x7 Int)",
            "(declare-const in20x8 Int)",
            "(declare-const in8x21 Int)",
            "(declare-const in20x5 Int)",
            "(declare-const in8x22 Int)",
            "(declare-const in20x6 Int)",
            "(declare-const in8x20 Int)",
            "(declare-const in20x9 Int)",
            "(declare-const in14x19 Int)",
            "(declare-const in14x18 Int)",
            "(declare-const in14x17 Int)",
            "(declare-const in14x16 Int)",
            "(declare-const in14x15 Int)",
            "(declare-const in14x13 Int)",
            "(declare-const in14x12 Int)",
            "(declare-const in14x11 Int)",
            "(declare-const in13x20 Int)",
            "(declare-const in13x21 Int)",
            "(declare-const in13x22 Int)",
            "(declare-const in9x22 Int)",
            "(declare-const in9x20 Int)",
            "(declare-const in9x21 Int)",
            "(declare-const in13x18 Int)",
            "(declare-const in13x19 Int)",
            "(declare-const in13x16 Int)",
            "(declare-const in13x17 Int)",
            "(declare-const in13x14 Int)",
            "(declare-const in13x15 Int)",
            "(declare-const in13x12 Int)",
            "(declare-const in13x10 Int)",
            "(declare-const in13x11 Int)",
            "(declare-const in12x4 Int)",
            "(declare-const in12x5 Int)",
            "(declare-const in12x2 Int)",
            "(declare-const in6x11 Int)",
            "(declare-const in12x3 Int)",
            "(declare-const in6x10 Int)",
            "(declare-const in12x8 Int)",
            "(declare-const in12x9 Int)",
            "(declare-const in12x6 Int)",
            "(declare-const in12x7 Int)",
            "(declare-const in6x17 Int)",
            "(declare-const in6x16 Int)",
            "(declare-const in6x19 Int)",
            "(declare-const in6x18 Int)",
            "(declare-const in6x13 Int)",
            "(declare-const in6x12 Int)",
            "(declare-const in6x15 Int)",
            "(declare-const in6x14 Int)",
            "(declare-const in11x0 Int)",
            "(declare-const in11x2 Int)",
            "(declare-const in11x1 Int)",
            "(declare-const in6x20 Int)",
            "(declare-const in6x22 Int)",
            "(declare-const in6x21 Int)",
            "(declare-const in17x20 Int)",
            "(declare-const in17x21 Int)",
            "(declare-const in17x22 Int)",
            "(declare-const in17x14 Int)",
            "(declare-const in17x15 Int)",
            "(declare-const in17x16 Int)",
            "(declare-const in17x18 Int)",
            "(declare-const in17x19 Int)",
            "(declare-const in13x3 Int)",
            "(declare-const in0x7 Int)",
            "(declare-const in13x4 Int)",
            "(declare-const in0x8 Int)",
            "(declare-const in5x20 Int)",
            "(declare-const in13x1 Int)",
            "(declare-const in0x5 Int)",
            "(declare-const in5x21 Int)",
            "(declare-const in13x2 Int)",
            "(declare-const in0x6 Int)",
            "(declare-const in13x7 Int)",
            "(declare-const in13x8 Int)",
            "(declare-const in13x5 Int)",
            "(declare-const in0x9 Int)",
            "(declare-const in13x6 Int)",
            "(declare-const in13x9 Int)",
            "(declare-const in5x22 Int)",
            "(declare-const in17x10 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in17x11 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in17x12 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in17x13 Int)",
            "(declare-const in0x2 Int)",
            "(declare-const in12x0 Int)",
            "(declare-const in12x1 Int)",
            "(declare-const in21x2 Int)",
            "(declare-const in21x3 Int)",
            "(declare-const in21x0 Int)",
            "(declare-const in21x1 Int)",
            "(declare-const in7x21 Int)",
            "(declare-const in10x5 Int)",
            "(declare-const in1x6 Int)",
            "(declare-const in7x20 Int)",
            "(declare-const in10x4 Int)",
            "(declare-const in1x7 Int)",
            "(declare-const in10x7 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in7x22 Int)",
            "(declare-const in10x6 Int)",
            "(declare-const in1x5 Int)",
            "(declare-const in10x9 Int)",
            "(declare-const in10x8 Int)",
            "(declare-const in1x8 Int)",
            "(declare-const in1x9 Int)",
            "(declare-const in16x20 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in16x21 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in16x22 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in16x13 Int)",
            "(declare-const in16x14 Int)",
            "(declare-const in16x15 Int)",
            "(declare-const in16x17 Int)",
            "(declare-const in16x18 Int)",
            "(declare-const in16x19 Int)",
            "(declare-const in21x6 Int)",
            "(declare-const in21x7 Int)",
            "(declare-const in21x4 Int)",
            "(declare-const in21x5 Int)",
            "(declare-const in21x8 Int)",
            "(declare-const in21x9 Int)",
            "(declare-const in16x10 Int)",
            "(declare-const in16x11 Int)",
            "(declare-const in16x12 Int)",
            "(declare-const in22x1 Int)",
            "(declare-const in22x2 Int)",
            "(declare-const in22x0 Int)",
            "(declare-const in11x4 Int)",
            "(declare-const in2x5 Int)",
            "(declare-const in11x3 Int)",
            "(declare-const in2x6 Int)",
            "(declare-const in11x6 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in11x5 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in11x8 Int)",
            "(declare-const in2x9 Int)",
            "(declare-const in11x7 Int)",
            "(declare-const in2x7 Int)",
            "(declare-const in11x9 Int)",
            "(declare-const in2x8 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in15x22 Int)",
            "(declare-const in15x21 Int)",
            "(declare-const in15x20 Int)",
            "(declare-const in10x1 Int)",
            "(declare-const in10x0 Int)",
            "(declare-const in10x3 Int)",
            "(declare-const in10x2 Int)",
            "(declare-const in22x5 Int)",
            "(declare-const in7x10 Int)",
            "(declare-const in22x6 Int)",
            "(declare-const in22x3 Int)",
            "(declare-const in7x12 Int)",
            "(declare-const in22x4 Int)",
            "(declare-const in7x11 Int)",
            "(declare-const in22x9 Int)",
            "(declare-const in22x7 Int)",
            "(declare-const in22x8 Int)",
            "(declare-const in7x18 Int)",
            "(declare-const in7x17 Int)",
            "(declare-const in7x19 Int)",
            "(declare-const in7x14 Int)",
            "(declare-const in7x13 Int)",
            "(declare-const in7x16 Int)",
            "(declare-const in7x15 Int)",
            "(declare-const in21x19 Int)",
            "(declare-const in21x15 Int)",
            "(declare-const in21x16 Int)",
            "(declare-const in21x17 Int)",
            "(declare-const in21x18 Int)",
            "(declare-const in21x11 Int)",
            "(declare-const in21x12 Int)",
            "(declare-const in21x13 Int)",
            "(declare-const in21x14 Int)",
            "(declare-const in21x10 Int)",
            "(declare-const in16x0 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in16x1 Int)",
            "(declare-const in3x5 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in16x4 Int)",
            "(declare-const in3x8 Int)",
            "(declare-const in16x5 Int)",
            "(declare-const in3x9 Int)",
            "(declare-const in16x2 Int)",
            "(declare-const in3x6 Int)",
            "(declare-const in16x3 Int)",
            "(declare-const in3x7 Int)",
            "(declare-const in16x8 Int)",
            "(declare-const in3x22 Int)",
            "(declare-const in16x9 Int)",
            "(declare-const in3x21 Int)",
            "(declare-const in16x6 Int)",
            "(declare-const in3x20 Int)",
            "(declare-const in16x7 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in4x9 Int)",
            "(declare-const in20x22 Int)",
            "(declare-const in20x21 Int)",
            "(declare-const in4x3 Int)",
            "(declare-const in17x0 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in17x3 Int)",
            "(declare-const in4x7 Int)",
            "(declare-const in17x4 Int)",
            "(declare-const in4x8 Int)",
            "(declare-const in17x1 Int)",
            "(declare-const in4x5 Int)",
            "(declare-const in17x2 Int)",
            "(declare-const in4x6 Int)",
            "(declare-const in17x7 Int)",
            "(declare-const in17x8 Int)",
            "(declare-const in17x5 Int)",
            "(declare-const in17x6 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in17x9 Int)",
            "(declare-const in20x17 Int)",
            "(declare-const in20x16 Int)",
            "(declare-const in3x19 Int)",
            "(declare-const in20x15 Int)",
            "(declare-const in3x18 Int)",
            "(declare-const in20x14 Int)",
            "(declare-const in3x17 Int)",
            "(declare-const in20x19 Int)",
            "(declare-const in20x18 Int)",
            "(declare-const in20x13 Int)",
            "(declare-const in20x12 Int)",
            "(declare-const in20x11 Int)",
            "(declare-const in20x10 Int)",
            "(declare-const in19x20 Int)",
            "(declare-const in3x12 Int)",
            "(declare-const in3x11 Int)",
            "(declare-const in19x22 Int)",
            "(declare-const in3x10 Int)",
            "(declare-const in19x21 Int)",
            "(declare-const in3x16 Int)",
            "(declare-const in3x15 Int)",
            "(declare-const in3x14 Int)",
            "(declare-const in3x13 Int)",
            "(declare-const in19x17 Int)",
            "(declare-const in19x16 Int)",
            "(declare-const in19x18 Int)",
            "(declare-const in5x8 Int)",
            "(declare-const in5x9 Int)",
            "(declare-const in14x2 Int)",
            "(declare-const in5x2 Int)",
            "(declare-const in14x3 Int)",
            "(declare-const in5x3 Int)",
            "(declare-const in14x0 Int)",
            "(declare-const in5x0 Int)",
            "(declare-const in14x1 Int)",
            "(declare-const in5x1 Int)",
            "(declare-const in14x6 Int)",
            "(declare-const in5x6 Int)",
            "(declare-const in14x7 Int)",
            "(declare-const in5x7 Int)",
            "(declare-const in14x4 Int)",
            "(declare-const in5x4 Int)",
            "(declare-const in14x5 Int)",
            "(declare-const in19x11 Int)",
            "(declare-const in14x8 Int)",
            "(declare-const in19x10 Int)",
            "(declare-const in14x9 Int)",
            "(declare-const in19x13 Int)",
            "(declare-const in19x12 Int)",
            "(declare-const in19x15 Int)",
            "(declare-const in19x14 Int)",
            "(declare-const in5x19 Int)",
            "(declare-const in13x0 Int)",
            "(declare-const in5x10 Int)",
            "(declare-const in5x15 Int)",
            "(declare-const in5x16 Int)",
            "(declare-const in5x17 Int)",
            "(declare-const in5x18 Int)",
            "(declare-const in5x11 Int)",
            "(declare-const in5x12 Int)",
            "(declare-const in5x13 Int)",
            "(declare-const in5x14 Int)",
            "(declare-const in4x18 Int)",
            "(declare-const in4x19 Int)",
            "(declare-const in6x9 Int)",
            "(declare-const in6x7 Int)",
            "(declare-const in6x8 Int)",
            "(declare-const in15x1 Int)",
            "(declare-const in6x1 Int)",
            "(declare-const in15x2 Int)",
            "(declare-const in6x2 Int)",
            "(declare-const in15x0 Int)",
            "(declare-const in6x0 Int)",
            "(declare-const in15x5 Int)",
            "(declare-const in6x5 Int)",
            "(declare-const in15x6 Int)",
            "(declare-const in15x3 Int)",
            "(declare-const in6x3 Int)",
            "(declare-const in15x4 Int)",
            "(declare-const in6x4 Int)",
            "(declare-const in15x9 Int)",
            "(declare-const in4x14 Int)",
            "(declare-const in4x15 Int)",
            "(declare-const in18x21 Int)",
            "(declare-const in4x16 Int)",
            "(declare-const in15x7 Int)",
            "(declare-const in18x20 Int)",
            "(declare-const in4x17 Int)",
            "(declare-const in15x8 Int)",
            "(declare-const in4x10 Int)",
            "(declare-const in18x22 Int)",
            "(declare-const in4x11 Int)",
            "(declare-const in4x12 Int)",
            "(declare-const in4x13 Int)",
            "(declare-const in18x16 Int)",
            "(declare-const in18x15 Int)",
            "(declare-const in18x17 Int)",
            "(declare-const in18x19 Int)",
            "(declare-const in4x20 Int)",
            "(declare-const in18x10 Int)",
            "(declare-const in4x21 Int)",
            "(declare-const in18x12 Int)",
            "(declare-const in4x22 Int)",
            "(declare-const in18x11 Int)",
            "(declare-const in18x14 Int)",
            "(declare-const in18x13 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6))  ( =  in7x0 in0x7))  ( =  in7x1 in1x7))  ( =  in7x2 in2x7))  ( =  in7x3 in3x7))  ( =  in7x4 in4x7))  ( =  in7x5 in5x7))  ( =  in7x6 in6x7))  ( =  in8x0 in0x8))  ( =  in8x1 in1x8))  ( =  in8x2 in2x8))  ( =  in8x3 in3x8))  ( =  in8x4 in4x8))  ( =  in8x5 in5x8))  ( =  in8x6 in6x8))  ( =  in8x7 in7x8))  ( =  in9x0 in0x9))  ( =  in9x1 in1x9))  ( =  in9x2 in2x9))  ( =  in9x3 in3x9))  ( =  in9x4 in4x9))  ( =  in9x5 in5x9))  ( =  in9x6 in6x9))  ( =  in9x7 in7x9))  ( =  in9x8 in8x9))  ( =  in10x0 in0x10))  ( =  in10x1 in1x10))  ( =  in10x2 in2x10))  ( =  in10x3 in3x10))  ( =  in10x4 in4x10))  ( =  in10x5 in5x10))  ( =  in10x6 in6x10))  ( =  in10x7 in7x10))  ( =  in10x8 in8x10))  ( =  in10x9 in9x10))  ( =  in11x0 in0x11))  ( =  in11x1 in1x11))  ( =  in11x2 in2x11))  ( =  in11x3 in3x11))  ( =  in11x4 in4x11))  ( =  in11x5 in5x11))  ( =  in11x6 in6x11))  ( =  in11x7 in7x11))  ( =  in11x8 in8x11))  ( =  in11x9 in9x11))  ( =  in11x10 in10x11))  ( =  in12x0 in0x12))  ( =  in12x1 in1x12))  ( =  in12x2 in2x12))  ( =  in12x3 in3x12))  ( =  in12x4 in4x12))  ( =  in12x5 in5x12))  ( =  in12x6 in6x12))  ( =  in12x7 in7x12))  ( =  in12x8 in8x12))  ( =  in12x9 in9x12))  ( =  in12x10 in10x12))  ( =  in12x11 in11x12))  ( =  in13x0 in0x13))  ( =  in13x1 in1x13))  ( =  in13x2 in2x13))  ( =  in13x3 in3x13))  ( =  in13x4 in4x13))  ( =  in13x5 in5x13))  ( =  in13x6 in6x13))  ( =  in13x7 in7x13))  ( =  in13x8 in8x13))  ( =  in13x9 in9x13))  ( =  in13x10 in10x13))  ( =  in13x11 in11x13))  ( =  in13x12 in12x13))  ( =  in14x0 in0x14))  ( =  in14x1 in1x14))  ( =  in14x2 in2x14))  ( =  in14x3 in3x14))  ( =  in14x4 in4x14))  ( =  in14x5 in5x14))  ( =  in14x6 in6x14))  ( =  in14x7 in7x14))  ( =  in14x8 in8x14))  ( =  in14x9 in9x14))  ( =  in14x10 in10x14))  ( =  in14x11 in11x14))  ( =  in14x12 in12x14))  ( =  in14x13 in13x14))  ( =  in15x0 in0x15))  ( =  in15x1 in1x15))  ( =  in15x2 in2x15))  ( =  in15x3 in3x15))  ( =  in15x4 in4x15))  ( =  in15x5 in5x15))  ( =  in15x6 in6x15))  ( =  in15x7 in7x15))  ( =  in15x8 in8x15))  ( =  in15x9 in9x15))  ( =  in15x10 in10x15))  ( =  in15x11 in11x15))  ( =  in15x12 in12x15))  ( =  in15x13 in13x15))  ( =  in15x14 in14x15))  ( =  in16x0 in0x16))  ( =  in16x1 in1x16))  ( =  in16x2 in2x16))  ( =  in16x3 in3x16))  ( =  in16x4 in4x16))  ( =  in16x5 in5x16))  ( =  in16x6 in6x16))  ( =  in16x7 in7x16))  ( =  in16x8 in8x16))  ( =  in16x9 in9x16))  ( =  in16x10 in10x16))  ( =  in16x11 in11x16))  ( =  in16x12 in12x16))  ( =  in16x13 in13x16))  ( =  in16x14 in14x16))  ( =  in16x15 in15x16))  ( =  in17x0 in0x17))  ( =  in17x1 in1x17))  ( =  in17x2 in2x17))  ( =  in17x3 in3x17))  ( =  in17x4 in4x17))  ( =  in17x5 in5x17))  ( =  in17x6 in6x17))  ( =  in17x7 in7x17))  ( =  in17x8 in8x17))  ( =  in17x9 in9x17))  ( =  in17x10 in10x17))  ( =  in17x11 in11x17))  ( =  in17x12 in12x17))  ( =  in17x13 in13x17))  ( =  in17x14 in14x17))  ( =  in17x15 in15x17))  ( =  in17x16 in16x17))  ( =  in18x0 in0x18))  ( =  in18x1 in1x18))  ( =  in18x2 in2x18))  ( =  in18x3 in3x18))  ( =  in18x4 in4x18))  ( =  in18x5 in5x18))  ( =  in18x6 in6x18))  ( =  in18x7 in7x18))  ( =  in18x8 in8x18))  ( =  in18x9 in9x18))  ( =  in18x10 in10x18))  ( =  in18x11 in11x18))  ( =  in18x12 in12x18))  ( =  in18x13 in13x18))  ( =  in18x14 in14x18))  ( =  in18x15 in15x18))  ( =  in18x16 in16x18))  ( =  in18x17 in17x18))  ( =  in19x0 in0x19))  ( =  in19x1 in1x19))  ( =  in19x2 in2x19))  ( =  in19x3 in3x19))  ( =  in19x4 in4x19))  ( =  in19x5 in5x19))  ( =  in19x6 in6x19))  ( =  in19x7 in7x19))  ( =  in19x8 in8x19))  ( =  in19x9 in9x19))  ( =  in19x10 in10x19))  ( =  in19x11 in11x19))  ( =  in19x12 in12x19))  ( =  in19x13 in13x19))  ( =  in19x14 in14x19))  ( =  in19x15 in15x19))  ( =  in19x16 in16x19))  ( =  in19x17 in17x19))  ( =  in19x18 in18x19))  ( =  in20x0 in0x20))  ( =  in20x1 in1x20))  ( =  in20x2 in2x20))  ( =  in20x3 in3x20))  ( =  in20x4 in4x20))  ( =  in20x5 in5x20))  ( =  in20x6 in6x20))  ( =  in20x7 in7x20))  ( =  in20x8 in8x20))  ( =  in20x9 in9x20))  ( =  in20x10 in10x20))  ( =  in20x11 in11x20))  ( =  in20x12 in12x20))  ( =  in20x13 in13x20))  ( =  in20x14 in14x20))  ( =  in20x15 in15x20))  ( =  in20x16 in16x20))  ( =  in20x17 in17x20))  ( =  in20x18 in18x20))  ( =  in20x19 in19x20))  ( =  in21x0 in0x21))  ( =  in21x1 in1x21))  ( =  in21x2 in2x21))  ( =  in21x3 in3x21))  ( =  in21x4 in4x21))  ( =  in21x5 in5x21))  ( =  in21x6 in6x21))  ( =  in21x7 in7x21))  ( =  in21x8 in8x21))  ( =  in21x9 in9x21))  ( =  in21x10 in10x21))  ( =  in21x11 in11x21))  ( =  in21x12 in12x21))  ( =  in21x13 in13x21))  ( =  in21x14 in14x21))  ( =  in21x15 in15x21))  ( =  in21x16 in16x21))  ( =  in21x17 in17x21))  ( =  in21x18 in18x21))  ( =  in21x19 in19x21))  ( =  in21x20 in20x21))  ( =  in22x0 in0x22))  ( =  in22x1 in1x22))  ( =  in22x2 in2x22))  ( =  in22x3 in3x22))  ( =  in22x4 in4x22))  ( =  in22x5 in5x22))  ( =  in22x6 in6x22))  ( =  in22x7 in7x22))  ( =  in22x8 in8x22))  ( =  in22x9 in9x22))  ( =  in22x10 in10x22))  ( =  in22x11 in11x22))  ( =  in22x12 in12x22))  ( =  in22x13 in13x22))  ( =  in22x14 in14x22))  ( =  in22x15 in15x22))  ( =  in22x16 in16x22))  ( =  in22x17 in17x22))  ( =  in22x18 in18x22))  ( =  in22x19 in19x22))  ( =  in22x20 in20x22))  ( =  in22x21 in21x22)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4) ( = in5x0 in0x5) ( = in5x1 in1x5) ( = in5x2 in2x5) ( = in5x3 in3x5) ( = in5x4 in4x5) ( = in6x0 in0x6) ( = in6x1 in1x6) ( = in6x2 in2x6) ( = in6x3 in3x6) ( = in6x4 in4x6) ( = in6x5 in5x6) ( = in7x0 in0x7) ( = in7x1 in1x7) ( = in7x2 in2x7) ( = in7x3 in3x7) ( = in7x4 in4x7) ( = in7x5 in5x7) ( = in7x6 in6x7) ( = in8x0 in0x8) ( = in8x1 in1x8) ( = in8x2 in2x8) ( = in8x3 in3x8) ( = in8x4 in4x8) ( = in8x5 in5x8) ( = in8x6 in6x8) ( = in8x7 in7x8) ( = in9x0 in0x9) ( = in9x1 in1x9) ( = in9x2 in2x9) ( = in9x3 in3x9) ( = in9x4 in4x9) ( = in9x5 in5x9) ( = in9x6 in6x9) ( = in9x7 in7x9) ( = in9x8 in8x9) ( = in10x0 in0x10) ( = in10x1 in1x10) ( = in10x2 in2x10) ( = in10x3 in3x10) ( = in10x4 in4x10) ( = in10x5 in5x10) ( = in10x6 in6x10) ( = in10x7 in7x10) ( = in10x8 in8x10) ( = in10x9 in9x10) ( = in11x0 in0x11) ( = in11x1 in1x11) ( = in11x2 in2x11) ( = in11x3 in3x11) ( = in11x4 in4x11) ( = in11x5 in5x11) ( = in11x6 in6x11) ( = in11x7 in7x11) ( = in11x8 in8x11) ( = in11x9 in9x11) ( = in11x10 in10x11) ( = in12x0 in0x12) ( = in12x1 in1x12) ( = in12x2 in2x12) ( = in12x3 in3x12) ( = in12x4 in4x12) ( = in12x5 in5x12) ( = in12x6 in6x12) ( = in12x7 in7x12) ( = in12x8 in8x12) ( = in12x9 in9x12) ( = in12x10 in10x12) ( = in12x11 in11x12) ( = in13x0 in0x13) ( = in13x1 in1x13) ( = in13x2 in2x13) ( = in13x3 in3x13) ( = in13x4 in4x13) ( = in13x5 in5x13) ( = in13x6 in6x13) ( = in13x7 in7x13) ( = in13x8 in8x13) ( = in13x9 in9x13) ( = in13x10 in10x13) ( = in13x11 in11x13) ( = in13x12 in12x13) ( = in14x0 in0x14) ( = in14x1 in1x14) ( = in14x2 in2x14) ( = in14x3 in3x14) ( = in14x4 in4x14) ( = in14x5 in5x14) ( = in14x6 in6x14) ( = in14x7 in7x14) ( = in14x8 in8x14) ( = in14x9 in9x14) ( = in14x10 in10x14) ( = in14x11 in11x14) ( = in14x12 in12x14) ( = in14x13 in13x14) ( = in15x0 in0x15) ( = in15x1 in1x15) ( = in15x2 in2x15) ( = in15x3 in3x15) ( = in15x4 in4x15) ( = in15x5 in5x15) ( = in15x6 in6x15) ( = in15x7 in7x15) ( = in15x8 in8x15) ( = in15x9 in9x15) ( = in15x10 in10x15) ( = in15x11 in11x15) ( = in15x12 in12x15) ( = in15x13 in13x15) ( = in15x14 in14x15) ( = in16x0 in0x16) ( = in16x1 in1x16) ( = in16x2 in2x16) ( = in16x3 in3x16) ( = in16x4 in4x16) ( = in16x5 in5x16) ( = in16x6 in6x16) ( = in16x7 in7x16) ( = in16x8 in8x16) ( = in16x9 in9x16) ( = in16x10 in10x16) ( = in16x11 in11x16) ( = in16x12 in12x16) ( = in16x13 in13x16) ( = in16x14 in14x16) ( = in16x15 in15x16) ( = in17x0 in0x17) ( = in17x1 in1x17) ( = in17x2 in2x17) ( = in17x3 in3x17) ( = in17x4 in4x17) ( = in17x5 in5x17) ( = in17x6 in6x17) ( = in17x7 in7x17) ( = in17x8 in8x17) ( = in17x9 in9x17) ( = in17x10 in10x17) ( = in17x11 in11x17) ( = in17x12 in12x17) ( = in17x13 in13x17) ( = in17x14 in14x17) ( = in17x15 in15x17) ( = in17x16 in16x17) ( = in18x0 in0x18) ( = in18x1 in1x18) ( = in18x2 in2x18) ( = in18x3 in3x18) ( = in18x4 in4x18) ( = in18x5 in5x18) ( = in18x6 in6x18) ( = in18x7 in7x18) ( = in18x8 in8x18) ( = in18x9 in9x18) ( = in18x10 in10x18) ( = in18x11 in11x18) ( = in18x12 in12x18) ( = in18x13 in13x18) ( = in18x14 in14x18) ( = in18x15 in15x18) ( = in18x16 in16x18) ( = in18x17 in17x18) ( = in19x0 in0x19) ( = in19x1 in1x19) ( = in19x2 in2x19) ( = in19x3 in3x19) ( = in19x4 in4x19) ( = in19x5 in5x19) ( = in19x6 in6x19) ( = in19x7 in7x19) ( = in19x8 in8x19) ( = in19x9 in9x19) ( = in19x10 in10x19) ( = in19x11 in11x19) ( = in19x12 in12x19) ( = in19x13 in13x19) ( = in19x14 in14x19) ( = in19x15 in15x19) ( = in19x16 in16x19) ( = in19x17 in17x19) ( = in19x18 in18x19) ( = in20x0 in0x20) ( = in20x1 in1x20) ( = in20x2 in2x20) ( = in20x3 in3x20) ( = in20x4 in4x20) ( = in20x5 in5x20) ( = in20x6 in6x20) ( = in20x7 in7x20) ( = in20x8 in8x20) ( = in20x9 in9x20) ( = in20x10 in10x20) ( = in20x11 in11x20) ( = in20x12 in12x20) ( = in20x13 in13x20) ( = in20x14 in14x20) ( = in20x15 in15x20) ( = in20x16 in16x20) ( = in20x17 in17x20) ( = in20x18 in18x20) ( = in20x19 in19x20) ( = in21x0 in0x21) ( = in21x1 in1x21) ( = in21x2 in2x21) ( = in21x3 in3x21) ( = in21x4 in4x21) ( = in21x5 in5x21) ( = in21x6 in6x21) ( = in21x7 in7x21) ( = in21x8 in8x21) ( = in21x9 in9x21) ( = in21x10 in10x21) ( = in21x11 in11x21) ( = in21x12 in12x21) ( = in21x13 in13x21) ( = in21x14 in14x21) ( = in21x15 in15x21) ( = in21x16 in16x21) ( = in21x17 in17x21) ( = in21x18 in18x21) ( = in21x19 in19x21) ( = in21x20 in20x21) ( = in22x0 in0x22) ( = in22x1 in1x22) ( = in22x2 in2x22) ( = in22x3 in3x22) ( = in22x4 in4x22) ( = in22x5 in5x22) ( = in22x6 in6x22) ( = in22x7 in7x22) ( = in22x8 in8x22) ( = in22x9 in9x22) ( = in22x10 in10x22) ( = in22x11 in11x22) ( = in22x12 in12x22) ( = in22x13 in13x22) ( = in22x14 in14x22) ( = in22x15 in15x22) ( = in22x16 in16x22) ( = in22x17 in17x22) ( = in22x18 in18x22) ( = in22x19 in19x22) ( = in22x20 in20x22) ( = in22x21 in21x22)))",
        "equivalent": true
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in7x8 Int)",
            "(declare-const in7x9 Int)",
            "(declare-const in7x6 Int)",
            "(declare-const in7x0 Int)",
            "(declare-const in7x1 Int)",
            "(declare-const in7x4 Int)",
            "(declare-const in7x5 Int)",
            "(declare-const in7x2 Int)",
            "(declare-const in7x3 Int)",
            "(declare-const in12x22 Int)",
            "(declare-const in12x23 Int)",
            "(declare-const in12x20 Int)",
            "(declare-const in12x21 Int)",
            "(declare-const in1x18 Int)",
            "(declare-const in1x17 Int)",
            "(declare-const in1x16 Int)",
            "(declare-const in1x15 Int)",
            "(declare-const in1x19 Int)",
            "(declare-const in23x20 Int)",
            "(declare-const in23x21 Int)",
            "(declare-const in23x22 Int)",
            "(declare-const in12x19 Int)",
            "(declare-const in12x17 Int)",
            "(declare-const in12x18 Int)",
            "(declare-const in12x15 Int)",
            "(declare-const in1x10 Int)",
            "(declare-const in12x16 Int)",
            "(declare-const in12x13 Int)",
            "(declare-const in12x14 Int)",
            "(declare-const in1x14 Int)",
            "(declare-const in12x11 Int)",
            "(declare-const in1x13 Int)",
            "(declare-const in1x12 Int)",
            "(declare-const in12x10 Int)",
            "(declare-const in1x11 Int)",
            "(declare-const in0x16 Int)",
            "(declare-const in0x17 Int)",
            "(declare-const in0x14 Int)",
            "(declare-const in0x15 Int)",
            "(declare-const in23x17 Int)",
            "(declare-const in23x18 Int)",
            "(declare-const in23x19 Int)",
            "(declare-const in0x18 Int)",
            "(declare-const in0x19 Int)",
            "(declare-const in23x13 Int)",
            "(declare-const in8x7 Int)",
            "(declare-const in23x14 Int)",
            "(declare-const in23x15 Int)",
            "(declare-const in8x5 Int)",
            "(declare-const in23x16 Int)",
            "(declare-const in8x6 Int)",
            "(declare-const in23x10 Int)",
            "(declare-const in23x11 Int)",
            "(declare-const in8x9 Int)",
            "(declare-const in23x12 Int)",
            "(declare-const in8x0 Int)",
            "(declare-const in8x3 Int)",
            "(declare-const in8x4 Int)",
            "(declare-const in8x1 Int)",
            "(declare-const in8x2 Int)",
            "(declare-const in0x12 Int)",
            "(declare-const in0x13 Int)",
            "(declare-const in0x10 Int)",
            "(declare-const in0x11 Int)",
            "(declare-const in11x23 Int)",
            "(declare-const in0x20 Int)",
            "(declare-const in0x23 Int)",
            "(declare-const in11x20 Int)",
            "(declare-const in11x22 Int)",
            "(declare-const in0x21 Int)",
            "(declare-const in0x22 Int)",
            "(declare-const in11x21 Int)",
            "(declare-const in2x19 Int)",
            "(declare-const in2x18 Int)",
            "(declare-const in2x17 Int)",
            "(declare-const in2x16 Int)",
            "(declare-const in22x23 Int)",
            "(declare-const in9x6 Int)",
            "(declare-const in9x7 Int)",
            "(declare-const in9x4 Int)",
            "(declare-const in9x5 Int)",
            "(declare-const in22x20 Int)",
            "(declare-const in22x21 Int)",
            "(declare-const in9x8 Int)",
            "(declare-const in18x2 Int)",
            "(declare-const in11x17 Int)",
            "(declare-const in9x2 Int)",
            "(declare-const in18x3 Int)",
            "(declare-const in11x16 Int)",
            "(declare-const in9x3 Int)",
            "(declare-const in11x19 Int)",
            "(declare-const in18x0 Int)",
            "(declare-const in9x0 Int)",
            "(declare-const in11x18 Int)",
            "(declare-const in18x1 Int)",
            "(declare-const in9x1 Int)",
            "(declare-const in18x6 Int)",
            "(declare-const in11x13 Int)",
            "(declare-const in2x11 Int)",
            "(declare-const in18x7 Int)",
            "(declare-const in11x12 Int)",
            "(declare-const in2x10 Int)",
            "(declare-const in18x4 Int)",
            "(declare-const in11x15 Int)",
            "(declare-const in18x5 Int)",
            "(declare-const in11x14 Int)",
            "(declare-const in2x15 Int)",
            "(declare-const in2x14 Int)",
            "(declare-const in18x8 Int)",
            "(declare-const in2x13 Int)",
            "(declare-const in18x9 Int)",
            "(declare-const in2x12 Int)",
            "(declare-const in11x10 Int)",
            "(declare-const in22x16 Int)",
            "(declare-const in22x17 Int)",
            "(declare-const in22x18 Int)",
            "(declare-const in22x19 Int)",
            "(declare-const in22x12 Int)",
            "(declare-const in22x13 Int)",
            "(declare-const in22x14 Int)",
            "(declare-const in22x15 Int)",
            "(declare-const in22x10 Int)",
            "(declare-const in22x11 Int)",
            "(declare-const in2x22 Int)",
            "(declare-const in2x21 Int)",
            "(declare-const in2x20 Int)",
            "(declare-const in2x23 Int)",
            "(declare-const in19x1 Int)",
            "(declare-const in19x2 Int)",
            "(declare-const in19x0 Int)",
            "(declare-const in10x23 Int)",
            "(declare-const in1x21 Int)",
            "(declare-const in19x5 Int)",
            "(declare-const in10x22 Int)",
            "(declare-const in1x20 Int)",
            "(declare-const in19x6 Int)",
            "(declare-const in19x3 Int)",
            "(declare-const in19x4 Int)",
            "(declare-const in19x9 Int)",
            "(declare-const in1x23 Int)",
            "(declare-const in10x21 Int)",
            "(declare-const in19x7 Int)",
            "(declare-const in1x22 Int)",
            "(declare-const in10x20 Int)",
            "(declare-const in19x8 Int)",
            "(declare-const in21x22 Int)",
            "(declare-const in21x23 Int)",
            "(declare-const in21x20 Int)",
            "(declare-const in10x19 Int)",
            "(declare-const in10x16 Int)",
            "(declare-const in10x15 Int)",
            "(declare-const in10x18 Int)",
            "(declare-const in10x17 Int)",
            "(declare-const in10x12 Int)",
            "(declare-const in10x11 Int)",
            "(declare-const in10x14 Int)",
            "(declare-const in10x13 Int)",
            "(declare-const in15x11 Int)",
            "(declare-const in15x10 Int)",
            "(declare-const in15x19 Int)",
            "(declare-const in15x18 Int)",
            "(declare-const in15x17 Int)",
            "(declare-const in15x16 Int)",
            "(declare-const in15x14 Int)",
            "(declare-const in15x13 Int)",
            "(declare-const in15x12 Int)",
            "(declare-const in9x13 Int)",
            "(declare-const in9x14 Int)",
            "(declare-const in9x11 Int)",
            "(declare-const in9x12 Int)",
            "(declare-const in9x10 Int)",
            "(declare-const in9x19 Int)",
            "(declare-const in9x17 Int)",
            "(declare-const in9x18 Int)",
            "(declare-const in9x15 Int)",
            "(declare-const in9x16 Int)",
            "(declare-const in14x21 Int)",
            "(declare-const in14x20 Int)",
            "(declare-const in20x0 Int)",
            "(declare-const in20x3 Int)",
            "(declare-const in20x4 Int)",
            "(declare-const in20x1 Int)",
            "(declare-const in20x2 Int)",
            "(declare-const in8x12 Int)",
            "(declare-const in8x13 Int)",
            "(declare-const in8x10 Int)",
            "(declare-const in8x11 Int)",
            "(declare-const in8x18 Int)",
            "(declare-const in8x19 Int)",
            "(declare-const in8x16 Int)",
            "(declare-const in8x17 Int)",
            "(declare-const in14x23 Int)",
            "(declare-const in8x14 Int)",
            "(declare-const in14x22 Int)",
            "(declare-const in8x15 Int)",
            "(declare-const in14x10 Int)",
            "(declare-const in8x23 Int)",
            "(declare-const in20x7 Int)",
            "(declare-const in20x8 Int)",
            "(declare-const in8x21 Int)",
            "(declare-const in20x5 Int)",
            "(declare-const in8x22 Int)",
            "(declare-const in20x6 Int)",
            "(declare-const in8x20 Int)",
            "(declare-const in20x9 Int)",
            "(declare-const in14x19 Int)",
            "(declare-const in14x18 Int)",
            "(declare-const in14x17 Int)",
            "(declare-const in14x16 Int)",
            "(declare-const in14x15 Int)",
            "(declare-const in14x13 Int)",
            "(declare-const in14x12 Int)",
            "(declare-const in14x11 Int)",
            "(declare-const in13x20 Int)",
            "(declare-const in13x23 Int)",
            "(declare-const in13x21 Int)",
            "(declare-const in13x22 Int)",
            "(declare-const in9x22 Int)",
            "(declare-const in9x23 Int)",
            "(declare-const in9x20 Int)",
            "(declare-const in9x21 Int)",
            "(declare-const in13x18 Int)",
            "(declare-const in13x19 Int)",
            "(declare-const in13x16 Int)",
            "(declare-const in13x17 Int)",
            "(declare-const in13x14 Int)",
            "(declare-const in13x15 Int)",
            "(declare-const in13x12 Int)",
            "(declare-const in13x10 Int)",
            "(declare-const in13x11 Int)",
            "(declare-const in23x0 Int)",
            "(declare-const in23x1 Int)",
            "(declare-const in12x4 Int)",
            "(declare-const in12x5 Int)",
            "(declare-const in12x2 Int)",
            "(declare-const in6x11 Int)",
            "(declare-const in12x3 Int)",
            "(declare-const in6x10 Int)",
            "(declare-const in12x8 Int)",
            "(declare-const in12x9 Int)",
            "(declare-const in12x6 Int)",
            "(declare-const in12x7 Int)",
            "(declare-const in6x17 Int)",
            "(declare-const in6x16 Int)",
            "(declare-const in6x19 Int)",
            "(declare-const in6x18 Int)",
            "(declare-const in6x13 Int)",
            "(declare-const in6x12 Int)",
            "(declare-const in6x15 Int)",
            "(declare-const in6x14 Int)",
            "(declare-const in11x0 Int)",
            "(declare-const in11x2 Int)",
            "(declare-const in11x1 Int)",
            "(declare-const in23x4 Int)",
            "(declare-const in6x20 Int)",
            "(declare-const in23x5 Int)",
            "(declare-const in23x2 Int)",
            "(declare-const in6x22 Int)",
            "(declare-const in23x3 Int)",
            "(declare-const in6x21 Int)",
            "(declare-const in23x8 Int)",
            "(declare-const in23x9 Int)",
            "(declare-const in23x6 Int)",
            "(declare-const in23x7 Int)",
            "(declare-const in17x20 Int)",
            "(declare-const in17x21 Int)",
            "(declare-const in6x23 Int)",
            "(declare-const in17x22 Int)",
            "(declare-const in17x23 Int)",
            "(declare-const in17x14 Int)",
            "(declare-const in17x15 Int)",
            "(declare-const in17x16 Int)",
            "(declare-const in17x18 Int)",
            "(declare-const in17x19 Int)",
            "(declare-const in13x3 Int)",
            "(declare-const in0x7 Int)",
            "(declare-const in13x4 Int)",
            "(declare-const in0x8 Int)",
            "(declare-const in5x20 Int)",
            "(declare-const in13x1 Int)",
            "(declare-const in0x5 Int)",
            "(declare-const in5x21 Int)",
            "(declare-const in13x2 Int)",
            "(declare-const in0x6 Int)",
            "(declare-const in13x7 Int)",
            "(declare-const in13x8 Int)",
            "(declare-const in13x5 Int)",
            "(declare-const in0x9 Int)",
            "(declare-const in13x6 Int)",
            "(declare-const in13x9 Int)",
            "(declare-const in5x22 Int)",
            "(declare-const in17x10 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in5x23 Int)",
            "(declare-const in17x11 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in17x12 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in17x13 Int)",
            "(declare-const in0x2 Int)",
            "(declare-const in12x0 Int)",
            "(declare-const in12x1 Int)",
            "(declare-const in21x2 Int)",
            "(declare-const in21x3 Int)",
            "(declare-const in21x0 Int)",
            "(declare-const in21x1 Int)",
            "(declare-const in7x21 Int)",
            "(declare-const in10x5 Int)",
            "(declare-const in1x6 Int)",
            "(declare-const in7x20 Int)",
            "(declare-const in10x4 Int)",
            "(declare-const in1x7 Int)",
            "(declare-const in7x23 Int)",
            "(declare-const in10x7 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in7x22 Int)",
            "(declare-const in10x6 Int)",
            "(declare-const in1x5 Int)",
            "(declare-const in10x9 Int)",
            "(declare-const in10x8 Int)",
            "(declare-const in1x8 Int)",
            "(declare-const in1x9 Int)",
            "(declare-const in16x20 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in16x21 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in16x22 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in16x23 Int)",
            "(declare-const in16x13 Int)",
            "(declare-const in16x14 Int)",
            "(declare-const in16x15 Int)",
            "(declare-const in16x17 Int)",
            "(declare-const in16x18 Int)",
            "(declare-const in16x19 Int)",
            "(declare-const in21x6 Int)",
            "(declare-const in21x7 Int)",
            "(declare-const in21x4 Int)",
            "(declare-const in21x5 Int)",
            "(declare-const in21x8 Int)",
            "(declare-const in21x9 Int)",
            "(declare-const in16x10 Int)",
            "(declare-const in16x11 Int)",
            "(declare-const in16x12 Int)",
            "(declare-const in22x1 Int)",
            "(declare-const in22x2 Int)",
            "(declare-const in22x0 Int)",
            "(declare-const in11x4 Int)",
            "(declare-const in2x5 Int)",
            "(declare-const in11x3 Int)",
            "(declare-const in2x6 Int)",
            "(declare-const in11x6 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in11x5 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in11x8 Int)",
            "(declare-const in2x9 Int)",
            "(declare-const in11x7 Int)",
            "(declare-const in2x7 Int)",
            "(declare-const in11x9 Int)",
            "(declare-const in2x8 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in15x22 Int)",
            "(declare-const in15x21 Int)",
            "(declare-const in15x20 Int)",
            "(declare-const in10x1 Int)",
            "(declare-const in10x0 Int)",
            "(declare-const in10x3 Int)",
            "(declare-const in10x2 Int)",
            "(declare-const in22x5 Int)",
            "(declare-const in7x10 Int)",
            "(declare-const in22x6 Int)",
            "(declare-const in22x3 Int)",
            "(declare-const in7x12 Int)",
            "(declare-const in22x4 Int)",
            "(declare-const in7x11 Int)",
            "(declare-const in22x9 Int)",
            "(declare-const in22x7 Int)",
            "(declare-const in22x8 Int)",
            "(declare-const in7x18 Int)",
            "(declare-const in7x17 Int)",
            "(declare-const in7x19 Int)",
            "(declare-const in7x14 Int)",
            "(declare-const in7x13 Int)",
            "(declare-const in7x16 Int)",
            "(declare-const in15x23 Int)",
            "(declare-const in7x15 Int)",
            "(declare-const in21x19 Int)",
            "(declare-const in21x15 Int)",
            "(declare-const in21x16 Int)",
            "(declare-const in21x17 Int)",
            "(declare-const in21x18 Int)",
            "(declare-const in21x11 Int)",
            "(declare-const in21x12 Int)",
            "(declare-const in21x13 Int)",
            "(declare-const in21x14 Int)",
            "(declare-const in21x10 Int)",
            "(declare-const in16x0 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in16x1 Int)",
            "(declare-const in3x5 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in16x4 Int)",
            "(declare-const in3x8 Int)",
            "(declare-const in16x5 Int)",
            "(declare-const in3x9 Int)",
            "(declare-const in16x2 Int)",
            "(declare-const in3x6 Int)",
            "(declare-const in16x3 Int)",
            "(declare-const in3x7 Int)",
            "(declare-const in3x23 Int)",
            "(declare-const in16x8 Int)",
            "(declare-const in3x22 Int)",
            "(declare-const in16x9 Int)",
            "(declare-const in3x21 Int)",
            "(declare-const in16x6 Int)",
            "(declare-const in3x20 Int)",
            "(declare-const in16x7 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in4x9 Int)",
            "(declare-const in20x23 Int)",
            "(declare-const in20x22 Int)",
            "(declare-const in20x21 Int)",
            "(declare-const in4x3 Int)",
            "(declare-const in17x0 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in17x3 Int)",
            "(declare-const in4x7 Int)",
            "(declare-const in17x4 Int)",
            "(declare-const in4x8 Int)",
            "(declare-const in17x1 Int)",
            "(declare-const in4x5 Int)",
            "(declare-const in17x2 Int)",
            "(declare-const in4x6 Int)",
            "(declare-const in17x7 Int)",
            "(declare-const in17x8 Int)",
            "(declare-const in17x5 Int)",
            "(declare-const in17x6 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in17x9 Int)",
            "(declare-const in20x17 Int)",
            "(declare-const in20x16 Int)",
            "(declare-const in3x19 Int)",
            "(declare-const in20x15 Int)",
            "(declare-const in3x18 Int)",
            "(declare-const in20x14 Int)",
            "(declare-const in3x17 Int)",
            "(declare-const in20x19 Int)",
            "(declare-const in20x18 Int)",
            "(declare-const in20x13 Int)",
            "(declare-const in20x12 Int)",
            "(declare-const in20x11 Int)",
            "(declare-const in20x10 Int)",
            "(declare-const in19x20 Int)",
            "(declare-const in3x12 Int)",
            "(declare-const in3x11 Int)",
            "(declare-const in19x22 Int)",
            "(declare-const in3x10 Int)",
            "(declare-const in19x21 Int)",
            "(declare-const in3x16 Int)",
            "(declare-const in19x23 Int)",
            "(declare-const in3x15 Int)",
            "(declare-const in3x14 Int)",
            "(declare-const in3x13 Int)",
            "(declare-const in19x17 Int)",
            "(declare-const in19x16 Int)",
            "(declare-const in19x18 Int)",
            "(declare-const in5x8 Int)",
            "(declare-const in5x9 Int)",
            "(declare-const in14x2 Int)",
            "(declare-const in5x2 Int)",
            "(declare-const in14x3 Int)",
            "(declare-const in5x3 Int)",
            "(declare-const in14x0 Int)",
            "(declare-const in5x0 Int)",
            "(declare-const in14x1 Int)",
            "(declare-const in5x1 Int)",
            "(declare-const in14x6 Int)",
            "(declare-const in5x6 Int)",
            "(declare-const in14x7 Int)",
            "(declare-const in5x7 Int)",
            "(declare-const in14x4 Int)",
            "(declare-const in5x4 Int)",
            "(declare-const in14x5 Int)",
            "(declare-const in19x11 Int)",
            "(declare-const in14x8 Int)",
            "(declare-const in19x10 Int)",
            "(declare-const in14x9 Int)",
            "(declare-const in19x13 Int)",
            "(declare-const in19x12 Int)",
            "(declare-const in19x15 Int)",
            "(declare-const in19x14 Int)",
            "(declare-const in5x19 Int)",
            "(declare-const in13x0 Int)",
            "(declare-const in5x10 Int)",
            "(declare-const in5x15 Int)",
            "(declare-const in5x16 Int)",
            "(declare-const in5x17 Int)",
            "(declare-const in5x18 Int)",
            "(declare-const in5x11 Int)",
            "(declare-const in5x12 Int)",
            "(declare-const in5x13 Int)",
            "(declare-const in5x14 Int)",
            "(declare-const in4x18 Int)",
            "(declare-const in4x19 Int)",
            "(declare-const in6x9 Int)",
            "(declare-const in6x7 Int)",
            "(declare-const in6x8 Int)",
            "(declare-const in15x1 Int)",
            "(declare-const in6x1 Int)",
            "(declare-const in15x2 Int)",
            "(declare-const in6x2 Int)",
            "(declare-const in15x0 Int)",
            "(declare-const in6x0 Int)",
            "(declare-const in15x5 Int)",
            "(declare-const in6x5 Int)",
            "(declare-const in15x6 Int)",
            "(declare-const in15x3 Int)",
            "(declare-const in6x3 Int)",
            "(declare-const in15x4 Int)",
            "(declare-const in6x4 Int)",
            "(declare-const in15x9 Int)",
            "(declare-const in4x14 Int)",
            "(declare-const in4x15 Int)",
            "(declare-const in18x21 Int)",
            "(declare-const in4x16 Int)",
            "(declare-const in15x7 Int)",
            "(declare-const in18x20 Int)",
            "(declare-const in4x17 Int)",
            "(declare-const in15x8 Int)",
            "(declare-const in18x23 Int)",
            "(declare-const in4x10 Int)",
            "(declare-const in18x22 Int)",
            "(declare-const in4x11 Int)",
            "(declare-const in4x12 Int)",
            "(declare-const in4x13 Int)",
            "(declare-const in18x16 Int)",
            "(declare-const in18x15 Int)",
            "(declare-const in18x17 Int)",
            "(declare-const in18x19 Int)",
            "(declare-const in4x20 Int)",
            "(declare-const in18x10 Int)",
            "(declare-const in4x21 Int)",
            "(declare-const in18x12 Int)",
            "(declare-const in4x22 Int)",
            "(declare-const in18x11 Int)",
            "(declare-const in4x23 Int)",
            "(declare-const in18x14 Int)",
            "(declare-const in18x13 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6))  ( =  in7x0 in0x7))  ( =  in7x1 in1x7))  ( =  in7x2 in2x7))  ( =  in7x3 in3x7))  ( =  in7x4 in4x7))  ( =  in7x5 in5x7))  ( =  in7x6 in6x7))  ( =  in8x0 in0x8))  ( =  in8x1 in1x8))  ( =  in8x2 in2x8))  ( =  in8x3 in3x8))  ( =  in8x4 in4x8))  ( =  in8x5 in5x8))  ( =  in8x6 in6x8))  ( =  in8x7 in7x8))  ( =  in9x0 in0x9))  ( =  in9x1 in1x9))  ( =  in9x2 in2x9))  ( =  in9x3 in3x9))  ( =  in9x4 in4x9))  ( =  in9x5 in5x9))  ( =  in9x6 in6x9))  ( =  in9x7 in7x9))  ( =  in9x8 in8x9))  ( =  in10x0 in0x10))  ( =  in10x1 in1x10))  ( =  in10x2 in2x10))  ( =  in10x3 in3x10))  ( =  in10x4 in4x10))  ( =  in10x5 in5x10))  ( =  in10x6 in6x10))  ( =  in10x7 in7x10))  ( =  in10x8 in8x10))  ( =  in10x9 in9x10))  ( =  in11x0 in0x11))  ( =  in11x1 in1x11))  ( =  in11x2 in2x11))  ( =  in11x3 in3x11))  ( =  in11x4 in4x11))  ( =  in11x5 in5x11))  ( =  in11x6 in6x11))  ( =  in11x7 in7x11))  ( =  in11x8 in8x11))  ( =  in11x9 in9x11))  ( =  in11x10 in10x11))  ( =  in12x0 in0x12))  ( =  in12x1 in1x12))  ( =  in12x2 in2x12))  ( =  in12x3 in3x12))  ( =  in12x4 in4x12))  ( =  in12x5 in5x12))  ( =  in12x6 in6x12))  ( =  in12x7 in7x12))  ( =  in12x8 in8x12))  ( =  in12x9 in9x12))  ( =  in12x10 in10x12))  ( =  in12x11 in11x12))  ( =  in13x0 in0x13))  ( =  in13x1 in1x13))  ( =  in13x2 in2x13))  ( =  in13x3 in3x13))  ( =  in13x4 in4x13))  ( =  in13x5 in5x13))  ( =  in13x6 in6x13))  ( =  in13x7 in7x13))  ( =  in13x8 in8x13))  ( =  in13x9 in9x13))  ( =  in13x10 in10x13))  ( =  in13x11 in11x13))  ( =  in13x12 in12x13))  ( =  in14x0 in0x14))  ( =  in14x1 in1x14))  ( =  in14x2 in2x14))  ( =  in14x3 in3x14))  ( =  in14x4 in4x14))  ( =  in14x5 in5x14))  ( =  in14x6 in6x14))  ( =  in14x7 in7x14))  ( =  in14x8 in8x14))  ( =  in14x9 in9x14))  ( =  in14x10 in10x14))  ( =  in14x11 in11x14))  ( =  in14x12 in12x14))  ( =  in14x13 in13x14))  ( =  in15x0 in0x15))  ( =  in15x1 in1x15))  ( =  in15x2 in2x15))  ( =  in15x3 in3x15))  ( =  in15x4 in4x15))  ( =  in15x5 in5x15))  ( =  in15x6 in6x15))  ( =  in15x7 in7x15))  ( =  in15x8 in8x15))  ( =  in15x9 in9x15))  ( =  in15x10 in10x15))  ( =  in15x11 in11x15))  ( =  in15x12 in12x15))  ( =  in15x13 in13x15))  ( =  in15x14 in14x15))  ( =  in16x0 in0x16))  ( =  in16x1 in1x16))  ( =  in16x2 in2x16))  ( =  in16x3 in3x16))  ( =  in16x4 in4x16))  ( =  in16x5 in5x16))  ( =  in16x6 in6x16))  ( =  in16x7 in7x16))  ( =  in16x8 in8x16))  ( =  in16x9 in9x16))  ( =  in16x10 in10x16))  ( =  in16x11 in11x16))  ( =  in16x12 in12x16))  ( =  in16x13 in13x16))  ( =  in16x14 in14x16))  ( =  in16x15 in15x16))  ( =  in17x0 in0x17))  ( =  in17x1 in1x17))  ( =  in17x2 in2x17))  ( =  in17x3 in3x17))  ( =  in17x4 in4x17))  ( =  in17x5 in5x17))  ( =  in17x6 in6x17))  ( =  in17x7 in7x17))  ( =  in17x8 in8x17))  ( =  in17x9 in9x17))  ( =  in17x10 in10x17))  ( =  in17x11 in11x17))  ( =  in17x12 in12x17))  ( =  in17x13 in13x17))  ( =  in17x14 in14x17))  ( =  in17x15 in15x17))  ( =  in17x16 in16x17))  ( =  in18x0 in0x18))  ( =  in18x1 in1x18))  ( =  in18x2 in2x18))  ( =  in18x3 in3x18))  ( =  in18x4 in4x18))  ( =  in18x5 in5x18))  ( =  in18x6 in6x18))  ( =  in18x7 in7x18))  ( =  in18x8 in8x18))  ( =  in18x9 in9x18))  ( =  in18x10 in10x18))  ( =  in18x11 in11x18))  ( =  in18x12 in12x18))  ( =  in18x13 in13x18))  ( =  in18x14 in14x18))  ( =  in18x15 in15x18))  ( =  in18x16 in16x18))  ( =  in18x17 in17x18))  ( =  in19x0 in0x19))  ( =  in19x1 in1x19))  ( =  in19x2 in2x19))  ( =  in19x3 in3x19))  ( =  in19x4 in4x19))  ( =  in19x5 in5x19))  ( =  in19x6 in6x19))  ( =  in19x7 in7x19))  ( =  in19x8 in8x19))  ( =  in19x9 in9x19))  ( =  in19x10 in10x19))  ( =  in19x11 in11x19))  ( =  in19x12 in12x19))  ( =  in19x13 in13x19))  ( =  in19x14 in14x19))  ( =  in19x15 in15x19))  ( =  in19x16 in16x19))  ( =  in19x17 in17x19))  ( =  in19x18 in18x19))  ( =  in20x0 in0x20))  ( =  in20x1 in1x20))  ( =  in20x2 in2x20))  ( =  in20x3 in3x20))  ( =  in20x4 in4x20))  ( =  in20x5 in5x20))  ( =  in20x6 in6x20))  ( =  in20x7 in7x20))  ( =  in20x8 in8x20))  ( =  in20x9 in9x20))  ( =  in20x10 in10x20))  ( =  in20x11 in11x20))  ( =  in20x12 in12x20))  ( =  in20x13 in13x20))  ( =  in20x14 in14x20))  ( =  in20x15 in15x20))  ( =  in20x16 in16x20))  ( =  in20x17 in17x20))  ( =  in20x18 in18x20))  ( =  in20x19 in19x20))  ( =  in21x0 in0x21))  ( =  in21x1 in1x21))  ( =  in21x2 in2x21))  ( =  in21x3 in3x21))  ( =  in21x4 in4x21))  ( =  in21x5 in5x21))  ( =  in21x6 in6x21))  ( =  in21x7 in7x21))  ( =  in21x8 in8x21))  ( =  in21x9 in9x21))  ( =  in21x10 in10x21))  ( =  in21x11 in11x21))  ( =  in21x12 in12x21))  ( =  in21x13 in13x21))  ( =  in21x14 in14x21))  ( =  in21x15 in15x21))  ( =  in21x16 in16x21))  ( =  in21x17 in17x21))  ( =  in21x18 in18x21))  ( =  in21x19 in19x21))  ( =  in21x20 in20x21))  ( =  in22x0 in0x22))  ( =  in22x1 in1x22))  ( =  in22x2 in2x22))  ( =  in22x3 in3x22))  ( =  in22x4 in4x22))  ( =  in22x5 in5x22))  ( =  in22x6 in6x22))  ( =  in22x7 in7x22))  ( =  in22x8 in8x22))  ( =  in22x9 in9x22))  ( =  in22x10 in10x22))  ( =  in22x11 in11x22))  ( =  in22x12 in12x22))  ( =  in22x13 in13x22))  ( =  in22x14 in14x22))  ( =  in22x15 in15x22))  ( =  in22x16 in16x22))  ( =  in22x17 in17x22))  ( =  in22x18 in18x22))  ( =  in22x19 in19x22))  ( =  in22x20 in20x22))  ( =  in22x21 in21x22))  ( =  in23x0 in0x23))  ( =  in23x1 in1x23))  ( =  in23x2 in2x23))  ( =  in23x3 in3x23))  ( =  in23x4 in4x23))  ( =  in23x5 in5x23))  ( =  in23x6 in6x23))  ( =  in23x7 in7x23))  ( =  in23x8 in8x23))  ( =  in23x9 in9x23))  ( =  in23x10 in10x23))  ( =  in23x11 in11x23))  ( =  in23x12 in12x23))  ( =  in23x13 in13x23))  ( =  in23x14 in14x23))  ( =  in23x15 in15x23))  ( =  in23x16 in16x23))  ( =  in23x17 in17x23))  ( =  in23x18 in18x23))  ( =  in23x19 in19x23))  ( =  in23x20 in20x23))  ( =  in23x21 in21x23))  ( =  in23x22 in22x23)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4) ( = in5x0 in0x5) ( = in5x1 in1x5) ( = in5x2 in2x5) ( = in5x3 in3x5) ( = in5x4 in4x5) ( = in6x0 in0x6) ( = in6x1 in1x6) ( = in6x2 in2x6) ( = in6x3 in3x6) ( = in6x4 in4x6) ( = in6x5 in5x6) ( = in7x0 in0x7) ( = in7x1 in1x7) ( = in7x2 in2x7) ( = in7x3 in3x7) ( = in7x4 in4x7) ( = in7x5 in5x7) ( = in7x6 in6x7) ( = in8x0 in0x8) ( = in8x1 in1x8) ( = in8x2 in2x8) ( = in8x3 in3x8) ( = in8x4 in4x8) ( = in8x5 in5x8) ( = in8x6 in6x8) ( = in8x7 in7x8) ( = in9x0 in0x9) ( = in9x1 in1x9) ( = in9x2 in2x9) ( = in9x3 in3x9) ( = in9x4 in4x9) ( = in9x5 in5x9) ( = in9x6 in6x9) ( = in9x7 in7x9) ( = in9x8 in8x9) ( = in10x0 in0x10) ( = in10x1 in1x10) ( = in10x2 in2x10) ( = in10x3 in3x10) ( = in10x4 in4x10) ( = in10x5 in5x10) ( = in10x6 in6x10) ( = in10x7 in7x10) ( = in10x8 in8x10) ( = in10x9 in9x10) ( = in11x0 in0x11) ( = in11x1 in1x11) ( = in11x2 in2x11) ( = in11x3 in3x11) ( = in11x4 in4x11) ( = in11x5 in5x11) ( = in11x6 in6x11) ( = in11x7 in7x11) ( = in11x8 in8x11) ( = in11x9 in9x11) ( = in11x10 in10x11) ( = in12x0 in0x12) ( = in12x1 in1x12) ( = in12x2 in2x12) ( = in12x3 in3x12) ( = in12x4 in4x12) ( = in12x5 in5x12) ( = in12x6 in6x12) ( = in12x7 in7x12) ( = in12x8 in8x12) ( = in12x9 in9x12) ( = in12x10 in10x12) ( = in12x11 in11x12) ( = in13x0 in0x13) ( = in13x1 in1x13) ( = in13x2 in2x13) ( = in13x3 in3x13) ( = in13x4 in4x13) ( = in13x5 in5x13) ( = in13x6 in6x13) ( = in13x7 in7x13) ( = in13x8 in8x13) ( = in13x9 in9x13) ( = in13x10 in10x13) ( = in13x11 in11x13) ( = in13x12 in12x13) ( = in14x0 in0x14) ( = in14x1 in1x14) ( = in14x2 in2x14) ( = in14x3 in3x14) ( = in14x4 in4x14) ( = in14x5 in5x14) ( = in14x6 in6x14) ( = in14x7 in7x14) ( = in14x8 in8x14) ( = in14x9 in9x14) ( = in14x10 in10x14) ( = in14x11 in11x14) ( = in14x12 in12x14) ( = in14x13 in13x14) ( = in15x0 in0x15) ( = in15x1 in1x15) ( = in15x2 in2x15) ( = in15x3 in3x15) ( = in15x4 in4x15) ( = in15x5 in5x15) ( = in15x6 in6x15) ( = in15x7 in7x15) ( = in15x8 in8x15) ( = in15x9 in9x15) ( = in15x10 in10x15) ( = in15x11 in11x15) ( = in15x12 in12x15) ( = in15x13 in13x15) ( = in15x14 in14x15) ( = in16x0 in0x16) ( = in16x1 in1x16) ( = in16x2 in2x16) ( = in16x3 in3x16) ( = in16x4 in4x16) ( = in16x5 in5x16) ( = in16x6 in6x16) ( = in16x7 in7x16) ( = in16x8 in8x16) ( = in16x9 in9x16) ( = in16x10 in10x16) ( = in16x11 in11x16) ( = in16x12 in12x16) ( = in16x13 in13x16) ( = in16x14 in14x16) ( = in16x15 in15x16) ( = in17x0 in0x17) ( = in17x1 in1x17) ( = in17x2 in2x17) ( = in17x3 in3x17) ( = in17x4 in4x17) ( = in17x5 in5x17) ( = in17x6 in6x17) ( = in17x7 in7x17) ( = in17x8 in8x17) ( = in17x9 in9x17) ( = in17x10 in10x17) ( = in17x11 in11x17) ( = in17x12 in12x17) ( = in17x13 in13x17) ( = in17x14 in14x17) ( = in17x15 in15x17) ( = in17x16 in16x17) ( = in18x0 in0x18) ( = in18x1 in1x18) ( = in18x2 in2x18) ( = in18x3 in3x18) ( = in18x4 in4x18) ( = in18x5 in5x18) ( = in18x6 in6x18) ( = in18x7 in7x18) ( = in18x8 in8x18) ( = in18x9 in9x18) ( = in18x10 in10x18) ( = in18x11 in11x18) ( = in18x12 in12x18) ( = in18x13 in13x18) ( = in18x14 in14x18) ( = in18x15 in15x18) ( = in18x16 in16x18) ( = in18x17 in17x18) ( = in19x0 in0x19) ( = in19x1 in1x19) ( = in19x2 in2x19) ( = in19x3 in3x19) ( = in19x4 in4x19) ( = in19x5 in5x19) ( = in19x6 in6x19) ( = in19x7 in7x19) ( = in19x8 in8x19) ( = in19x9 in9x19) ( = in19x10 in10x19) ( = in19x11 in11x19) ( = in19x12 in12x19) ( = in19x13 in13x19) ( = in19x14 in14x19) ( = in19x15 in15x19) ( = in19x16 in16x19) ( = in19x17 in17x19) ( = in19x18 in18x19) ( = in20x0 in0x20) ( = in20x1 in1x20) ( = in20x2 in2x20) ( = in20x3 in3x20) ( = in20x4 in4x20) ( = in20x5 in5x20) ( = in20x6 in6x20) ( = in20x7 in7x20) ( = in20x8 in8x20) ( = in20x9 in9x20) ( = in20x10 in10x20) ( = in20x11 in11x20) ( = in20x12 in12x20) ( = in20x13 in13x20) ( = in20x14 in14x20) ( = in20x15 in15x20) ( = in20x16 in16x20) ( = in20x17 in17x20) ( = in20x18 in18x20) ( = in20x19 in19x20) ( = in21x0 in0x21) ( = in21x1 in1x21) ( = in21x2 in2x21) ( = in21x3 in3x21) ( = in21x4 in4x21) ( = in21x5 in5x21) ( = in21x6 in6x21) ( = in21x7 in7x21) ( = in21x8 in8x21) ( = in21x9 in9x21) ( = in21x10 in10x21) ( = in21x11 in11x21) ( = in21x12 in12x21) ( = in21x13 in13x21) ( = in21x14 in14x21) ( = in21x15 in15x21) ( = in21x16 in16x21) ( = in21x17 in17x21) ( = in21x18 in18x21) ( = in21x19 in19x21) ( = in21x20 in20x21) ( = in22x0 in0x22) ( = in22x1 in1x22) ( = in22x2 in2x22) ( = in22x3 in3x22) ( = in22x4 in4x22) ( = in22x5 in5x22) ( = in22x6 in6x22) ( = in22x7 in7x22) ( = in22x8 in8x22) ( = in22x9 in9x22) ( = in22x10 in10x22) ( = in22x11 in11x22) ( = in22x12 in12x22) ( = in22x13 in13x22) ( = in22x14 in14x22) ( = in22x15 in15x22) ( = in22x16 in16x22) ( = in22x17 in17x22) ( = in22x18 in18x22) ( = in22x19 in19x22) ( = in22x20 in20x22) ( = in22x21 in21x22) ( = in23x0 in0x23) ( = in23x1 in1x23) ( = in23x2 in2x23) ( = in23x3 in3x23) ( = in23x4 in4x23) ( = in23x5 in5x23) ( = in23x6 in6x23) ( = in23x7 in7x23) ( = in23x8 in8x23) ( = in23x9 in9x23) ( = in23x10 in10x23) ( = in23x11 in11x23) ( = in23x12 in12x23) ( = in23x13 in13x23) ( = in23x14 in14x23) ( = in23x15 in15x23) ( = in23x16 in16x23) ( = in23x17 in17x23) ( = in23x18 in18x23) ( = in23x19 in19x23) ( = in23x20 in20x23) ( = in23x21 in21x23) ( = in23x22 in22x23)))",
        "equivalent": true
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in7x8 Int)",
            "(declare-const in7x9 Int)",
            "(declare-const in7x6 Int)",
            "(declare-const in7x0 Int)",
            "(declare-const in7x1 Int)",
            "(declare-const in7x4 Int)",
            "(declare-const in7x5 Int)",
            "(declare-const in7x2 Int)",
            "(declare-const in7x3 Int)",
            "(declare-const in12x24 Int)",
            "(declare-const in12x22 Int)",
            "(declare-const in12x23 Int)",
            "(declare-const in12x20 Int)",
            "(declare-const in12x21 Int)",
            "(declare-const in1x18 Int)",
            "(declare-const in1x17 Int)",
            "(declare-const in1x16 Int)",
            "(declare-const in1x15 Int)",
            "(declare-const in1x19 Int)",
            "(declare-const in23x24 Int)",
            "(declare-const in23x20 Int)",
            "(declare-const in23x21 Int)",
            "(declare-const in23x22 Int)",
            "(declare-const in12x19 Int)",
            "(declare-const in12x17 Int)",
            "(declare-const in12x18 Int)",
            "(declare-const in12x15 Int)",
            "(declare-const in1x10 Int)",
            "(declare-const in12x16 Int)",
            "(declare-const in12x13 Int)",
            "(declare-const in12x14 Int)",
            "(declare-const in1x14 Int)",
            "(declare-const in12x11 Int)",
            "(declare-const in1x13 Int)",
            "(declare-const in1x12 Int)",
            "(declare-const in12x10 Int)",
            "(declare-const in1x11 Int)",
            "(declare-const in0x16 Int)",
            "(declare-const in0x17 Int)",
            "(declare-const in0x14 Int)",
            "(declare-const in0x15 Int)",
            "(declare-const in23x17 Int)",
            "(declare-const in23x18 Int)",
            "(declare-const in23x19 Int)",
            "(declare-const in0x18 Int)",
            "(declare-const in0x19 Int)",
            "(declare-const in23x13 Int)",
            "(declare-const in8x7 Int)",
            "(declare-const in23x14 Int)",
            "(declare-const in23x15 Int)",
            "(declare-const in8x5 Int)",
            "(declare-const in23x16 Int)",
            "(declare-const in8x6 Int)",
            "(declare-const in23x10 Int)",
            "(declare-const in23x11 Int)",
            "(declare-const in8x9 Int)",
            "(declare-const in23x12 Int)",
            "(declare-const in8x0 Int)",
            "(declare-const in8x3 Int)",
            "(declare-const in8x4 Int)",
            "(declare-const in8x1 Int)",
            "(declare-const in8x2 Int)",
            "(declare-const in0x12 Int)",
            "(declare-const in0x13 Int)",
            "(declare-const in0x10 Int)",
            "(declare-const in0x11 Int)",
            "(declare-const in11x24 Int)",
            "(declare-const in11x23 Int)",
            "(declare-const in0x20 Int)",
            "(declare-const in0x23 Int)",
            "(declare-const in11x20 Int)",
            "(declare-const in0x24 Int)",
            "(declare-const in11x22 Int)",
            "(declare-const in0x21 Int)",
            "(declare-const in0x22 Int)",
            "(declare-const in11x21 Int)",
            "(declare-const in2x19 Int)",
            "(declare-const in2x18 Int)",
            "(declare-const in2x17 Int)",
            "(declare-const in2x16 Int)",
            "(declare-const in22x23 Int)",
            "(declare-const in9x6 Int)",
            "(declare-const in22x24 Int)",
            "(declare-const in9x7 Int)",
            "(declare-const in9x4 Int)",
            "(declare-const in9x5 Int)",
            "(declare-const in22x20 Int)",
            "(declare-const in22x21 Int)",
            "(declare-const in9x8 Int)",
            "(declare-const in18x2 Int)",
            "(declare-const in11x17 Int)",
            "(declare-const in9x2 Int)",
            "(declare-const in18x3 Int)",
            "(declare-const in11x16 Int)",
            "(declare-const in9x3 Int)",
            "(declare-const in11x19 Int)",
            "(declare-const in18x0 Int)",
            "(declare-const in9x0 Int)",
            "(declare-const in11x18 Int)",
            "(declare-const in18x1 Int)",
            "(declare-const in9x1 Int)",
            "(declare-const in18x6 Int)",
            "(declare-const in11x13 Int)",
            "(declare-const in2x11 Int)",
            "(declare-const in18x7 Int)",
            "(declare-const in11x12 Int)",
            "(declare-const in2x10 Int)",
            "(declare-const in18x4 Int)",
            "(declare-const in11x15 Int)",
            "(declare-const in18x5 Int)",
            "(declare-const in11x14 Int)",
            "(declare-const in2x15 Int)",
            "(declare-const in2x14 Int)",
            "(declare-const in18x8 Int)",
            "(declare-const in2x13 Int)",
            "(declare-const in18x9 Int)",
            "(declare-const in2x12 Int)",
            "(declare-const in11x10 Int)",
            "(declare-const in22x16 Int)",
            "(declare-const in22x17 Int)",
            "(declare-const in22x18 Int)",
            "(declare-const in22x19 Int)",
            "(declare-const in22x12 Int)",
            "(declare-const in22x13 Int)",
            "(declare-const in22x14 Int)",
            "(declare-const in22x15 Int)",
            "(declare-const in22x10 Int)",
            "(declare-const in22x11 Int)",
            "(declare-const in2x22 Int)",
            "(declare-const in2x21 Int)",
            "(declare-const in2x20 Int)",
            "(declare-const in2x24 Int)",
            "(declare-const in2x23 Int)",
            "(declare-const in19x1 Int)",
            "(declare-const in19x2 Int)",
            "(declare-const in19x0 Int)",
            "(declare-const in10x23 Int)",
            "(declare-const in1x21 Int)",
            "(declare-const in19x5 Int)",
            "(declare-const in10x22 Int)",
            "(declare-const in1x20 Int)",
            "(declare-const in19x6 Int)",
            "(declare-const in19x3 Int)",
            "(declare-const in10x24 Int)",
            "(declare-const in19x4 Int)",
            "(declare-const in19x9 Int)",
            "(declare-const in1x24 Int)",
            "(declare-const in1x23 Int)",
            "(declare-const in10x21 Int)",
            "(declare-const in19x7 Int)",
            "(declare-const in1x22 Int)",
            "(declare-const in10x20 Int)",
            "(declare-const in19x8 Int)",
            "(declare-const in21x22 Int)",
            "(declare-const in21x23 Int)",
            "(declare-const in21x24 Int)",
            "(declare-const in21x20 Int)",
            "(declare-const in10x19 Int)",
            "(declare-const in10x16 Int)",
            "(declare-const in10x15 Int)",
            "(declare-const in10x18 Int)",
            "(declare-const in10x17 Int)",
            "(declare-const in10x12 Int)",
            "(declare-const in10x11 Int)",
            "(declare-const in10x14 Int)",
            "(declare-const in10x13 Int)",
            "(declare-const in15x11 Int)",
            "(declare-const in15x10 Int)",
            "(declare-const in15x19 Int)",
            "(declare-const in15x18 Int)",
            "(declare-const in15x17 Int)",
            "(declare-const in15x16 Int)",
            "(declare-const in15x14 Int)",
            "(declare-const in15x13 Int)",
            "(declare-const in15x12 Int)",
            "(declare-const in9x13 Int)",
            "(declare-const in9x14 Int)",
            "(declare-const in9x11 Int)",
            "(declare-const in9x12 Int)",
            "(declare-const in9x10 Int)",
            "(declare-const in9x19 Int)",
            "(declare-const in9x17 Int)",
            "(declare-const in9x18 Int)",
            "(declare-const in9x15 Int)",
            "(declare-const in9x16 Int)",
            "(declare-const in14x21 Int)",
            "(declare-const in14x20 Int)",
            "(declare-const in20x0 Int)",
            "(declare-const in20x3 Int)",
            "(declare-const in20x4 Int)",
            "(declare-const in20x1 Int)",
            "(declare-const in20x2 Int)",
            "(declare-const in8x12 Int)",
            "(declare-const in8x13 Int)",
            "(declare-const in8x10 Int)",
            "(declare-const in8x11 Int)",
            "(declare-const in8x18 Int)",
            "(declare-const in8x19 Int)",
            "(declare-const in8x16 Int)",
            "(declare-const in14x24 Int)",
            "(declare-const in8x17 Int)",
            "(declare-const in14x23 Int)",
            "(declare-const in8x14 Int)",
            "(declare-const in14x22 Int)",
            "(declare-const in8x15 Int)",
            "(declare-const in14x10 Int)",
            "(declare-const in8x23 Int)",
            "(declare-const in20x7 Int)",
            "(declare-const in8x24 Int)",
            "(declare-const in20x8 Int)",
            "(declare-const in8x21 Int)",
            "(declare-const in20x5 Int)",
            "(declare-const in8x22 Int)",
            "(declare-const in20x6 Int)",
            "(declare-const in8x20 Int)",
            "(declare-const in20x9 Int)",
            "(declare-const in14x19 Int)",
            "(declare-const in14x18 Int)",
            "(declare-const in14x17 Int)",
            "(declare-const in14x16 Int)",
            "(declare-const in14x15 Int)",
            "(declare-const in14x13 Int)",
            "(declare-const in14x12 Int)",
            "(declare-const in14x11 Int)",
            "(declare-const in13x20 Int)",
            "(declare-const in13x23 Int)",
            "(declare-const in13x24 Int)",
            "(declare-const in13x21 Int)",
            "(declare-const in13x22 Int)",
            "(declare-const in24x22 Int)",
            "(declare-const in24x21 Int)",
            "(declare-const in24x23 Int)",
            "(declare-const in9x24 Int)",
            "(declare-const in24x20 Int)",
            "(declare-const in9x22 Int)",
            "(declare-const in9x23 Int)",
            "(declare-const in9x20 Int)",
            "(declare-const in9x21 Int)",
            "(declare-const in13x18 Int)",
            "(declare-const in13x19 Int)",
            "(declare-const in13x16 Int)",
            "(declare-const in13x17 Int)",
            "(declare-const in13x14 Int)",
            "(declare-const in13x15 Int)",
            "(declare-const in13x12 Int)",
            "(declare-const in13x10 Int)",
            "(declare-const in13x11 Int)",
            "(declare-const in24x19 Int)",
            "(declare-const in24x18 Int)",
            "(declare-const in24x15 Int)",
            "(declare-const in24x14 Int)",
            "(declare-const in24x17 Int)",
            "(declare-const in24x16 Int)",
            "(declare-const in24x11 Int)",
            "(declare-const in24x10 Int)",
            "(declare-const in24x13 Int)",
            "(declare-const in24x12 Int)",
            "(declare-const in23x0 Int)",
            "(declare-const in23x1 Int)",
            "(declare-const in12x4 Int)",
            "(declare-const in12x5 Int)",
            "(declare-const in12x2 Int)",
            "(declare-const in6x11 Int)",
            "(declare-const in12x3 Int)",
            "(declare-const in6x10 Int)",
            "(declare-const in12x8 Int)",
            "(declare-const in12x9 Int)",
            "(declare-const in12x6 Int)",
            "(declare-const in12x7 Int)",
            "(declare-const in6x17 Int)",
            "(declare-const in6x16 Int)",
            "(declare-const in6x19 Int)",
            "(declare-const in6x18 Int)",
            "(declare-const in6x13 Int)",
            "(declare-const in6x12 Int)",
            "(declare-const in6x15 Int)",
            "(declare-const in6x14 Int)",
            "(declare-const in11x0 Int)",
            "(declare-const in11x2 Int)",
            "(declare-const in11x1 Int)",
            "(declare-const in23x4 Int)",
            "(declare-const in6x20 Int)",
            "(declare-const in23x5 Int)",
            "(declare-const in23x2 Int)",
            "(declare-const in6x22 Int)",
            "(declare-const in23x3 Int)",
            "(declare-const in6x21 Int)",
            "(declare-const in23x8 Int)",
            "(declare-const in23x9 Int)",
            "(declare-const in23x6 Int)",
            "(declare-const in23x7 Int)",
            "(declare-const in17x20 Int)",
            "(declare-const in6x24 Int)",
            "(declare-const in17x21 Int)",
            "(declare-const in6x23 Int)",
            "(declare-const in17x22 Int)",
            "(declare-const in17x23 Int)",
            "(declare-const in17x24 Int)",
            "(declare-const in17x14 Int)",
            "(declare-const in17x15 Int)",
            "(declare-const in17x16 Int)",
            "(declare-const in17x18 Int)",
            "(declare-const in17x19 Int)",
            "(declare-const in24x0 Int)",
            "(declare-const in13x3 Int)",
            "(declare-const in0x7 Int)",
            "(declare-const in13x4 Int)",
            "(declare-const in0x8 Int)",
            "(declare-const in5x20 Int)",
            "(declare-const in13x1 Int)",
            "(declare-const in0x5 Int)",
            "(declare-const in5x21 Int)",
            "(declare-const in13x2 Int)",
            "(declare-const in0x6 Int)",
            "(declare-const in13x7 Int)",
            "(declare-const in13x8 Int)",
            "(declare-const in13x5 Int)",
            "(declare-const in0x9 Int)",
            "(declare-const in13x6 Int)",
            "(declare-const in13x9 Int)",
            "(declare-const in5x22 Int)",
            "(declare-const in17x10 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in5x23 Int)",
            "(declare-const in17x11 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in5x24 Int)",
            "(declare-const in17x12 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in17x13 Int)",
            "(declare-const in0x2 Int)",
            "(declare-const in12x0 Int)",
            "(declare-const in12x1 Int)",
            "(declare-const in24x3 Int)",
            "(declare-const in24x4 Int)",
            "(declare-const in24x1 Int)",
            "(declare-const in24x2 Int)",
            "(declare-const in24x7 Int)",
            "(declare-const in24x8 Int)",
            "(declare-const in24x5 Int)",
            "(declare-const in24x6 Int)",
            "(declare-const in24x9 Int)",
            "(declare-const in16x24 Int)",
            "(declare-const in21x2 Int)",
            "(declare-const in21x3 Int)",
            "(declare-const in21x0 Int)",
            "(declare-const in21x1 Int)",
            "(declare-const in7x21 Int)",
            "(declare-const in10x5 Int)",
            "(declare-const in1x6 Int)",
            "(declare-const in7x20 Int)",
            "(declare-const in10x4 Int)",
            "(declare-const in1x7 Int)",
            "(declare-const in7x23 Int)",
            "(declare-const in10x7 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in7x22 Int)",
            "(declare-const in10x6 Int)",
            "(declare-const in1x5 Int)",
            "(declare-const in10x9 Int)",
            "(declare-const in10x8 Int)",
            "(declare-const in1x8 Int)",
            "(declare-const in1x9 Int)",
            "(declare-const in16x20 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in7x24 Int)",
            "(declare-const in16x21 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in16x22 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in16x23 Int)",
            "(declare-const in16x13 Int)",
            "(declare-const in16x14 Int)",
            "(declare-const in16x15 Int)",
            "(declare-const in16x17 Int)",
            "(declare-const in16x18 Int)",
            "(declare-const in16x19 Int)",
            "(declare-const in21x6 Int)",
            "(declare-const in21x7 Int)",
            "(declare-const in21x4 Int)",
            "(declare-const in21x5 Int)",
            "(declare-const in21x8 Int)",
            "(declare-const in21x9 Int)",
            "(declare-const in16x10 Int)",
            "(declare-const in16x11 Int)",
            "(declare-const in16x12 Int)",
            "(declare-const in22x1 Int)",
            "(declare-const in22x2 Int)",
            "(declare-const in22x0 Int)",
            "(declare-const in11x4 Int)",
            "(declare-const in2x5 Int)",
            "(declare-const in11x3 Int)",
            "(declare-const in2x6 Int)",
            "(declare-const in11x6 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in11x5 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in11x8 Int)",
            "(declare-const in2x9 Int)",
            "(declare-const in11x7 Int)",
            "(declare-const in2x7 Int)",
            "(declare-const in11x9 Int)",
            "(declare-const in2x8 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in15x22 Int)",
            "(declare-const in15x21 Int)",
            "(declare-const in15x20 Int)",
            "(declare-const in10x1 Int)",
            "(declare-const in10x0 Int)",
            "(declare-const in10x3 Int)",
            "(declare-const in10x2 Int)",
            "(declare-const in22x5 Int)",
            "(declare-const in7x10 Int)",
            "(declare-const in22x6 Int)",
            "(declare-const in22x3 Int)",
            "(declare-const in7x12 Int)",
            "(declare-const in22x4 Int)",
            "(declare-const in7x11 Int)",
            "(declare-const in22x9 Int)",
            "(declare-const in22x7 Int)",
            "(declare-const in22x8 Int)",
            "(declare-const in7x18 Int)",
            "(declare-const in7x17 Int)",
            "(declare-const in7x19 Int)",
            "(declare-const in7x14 Int)",
            "(declare-const in7x13 Int)",
            "(declare-const in15x24 Int)",
            "(declare-const in7x16 Int)",
            "(declare-const in15x23 Int)",
            "(declare-const in7x15 Int)",
            "(declare-const in21x19 Int)",
            "(declare-const in21x15 Int)",
            "(declare-const in21x16 Int)",
            "(declare-const in21x17 Int)",
            "(declare-const in21x18 Int)",
            "(declare-const in21x11 Int)",
            "(declare-const in21x12 Int)",
            "(declare-const in21x13 Int)",
            "(declare-const in21x14 Int)",
            "(declare-const in21x10 Int)",
            "(declare-const in16x0 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in16x1 Int)",
            "(declare-const in3x5 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in16x4 Int)",
            "(declare-const in3x8 Int)",
            "(declare-const in16x5 Int)",
            "(declare-const in3x9 Int)",
            "(declare-const in16x2 Int)",
            "(declare-const in3x6 Int)",
            "(declare-const in16x3 Int)",
            "(declare-const in3x7 Int)",
            "(declare-const in3x23 Int)",
            "(declare-const in16x8 Int)",
            "(declare-const in3x22 Int)",
            "(declare-const in16x9 Int)",
            "(declare-const in3x21 Int)",
            "(declare-const in16x6 Int)",
            "(declare-const in3x20 Int)",
            "(declare-const in16x7 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in3x24 Int)",
            "(declare-const in4x9 Int)",
            "(declare-const in20x24 Int)",
            "(declare-const in20x23 Int)",
            "(declare-const in20x22 Int)",
            "(declare-const in20x21 Int)",
            "(declare-const in4x3 Int)",
            "(declare-const in17x0 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in17x3 Int)",
            "(declare-const in4x7 Int)",
            "(declare-const in17x4 Int)",
            "(declare-const in4x8 Int)",
            "(declare-const in17x1 Int)",
            "(declare-const in4x5 Int)",
            "(declare-const in17x2 Int)",
            "(declare-const in4x6 Int)",
            "(declare-const in17x7 Int)",
            "(declare-const in17x8 Int)",
            "(declare-const in17x5 Int)",
            "(declare-const in17x6 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in17x9 Int)",
            "(declare-const in20x17 Int)",
            "(declare-const in20x16 Int)",
            "(declare-const in3x19 Int)",
            "(declare-const in20x15 Int)",
            "(declare-const in3x18 Int)",
            "(declare-const in20x14 Int)",
            "(declare-const in3x17 Int)",
            "(declare-const in20x19 Int)",
            "(declare-const in20x18 Int)",
            "(declare-const in20x13 Int)",
            "(declare-const in20x12 Int)",
            "(declare-const in20x11 Int)",
            "(declare-const in20x10 Int)",
            "(declare-const in19x20 Int)",
            "(declare-const in3x12 Int)",
            "(declare-const in3x11 Int)",
            "(declare-const in19x22 Int)",
            "(declare-const in3x10 Int)",
            "(declare-const in19x21 Int)",
            "(declare-const in19x24 Int)",
            "(declare-const in3x16 Int)",
            "(declare-const in19x23 Int)",
            "(declare-const in3x15 Int)",
            "(declare-const in3x14 Int)",
            "(declare-const in3x13 Int)",
            "(declare-const in19x17 Int)",
            "(declare-const in19x16 Int)",
            "(declare-const in19x18 Int)",
            "(declare-const in5x8 Int)",
            "(declare-const in5x9 Int)",
            "(declare-const in14x2 Int)",
            "(declare-const in5x2 Int)",
            "(declare-const in14x3 Int)",
            "(declare-const in5x3 Int)",
            "(declare-const in14x0 Int)",
            "(declare-const in5x0 Int)",
            "(declare-const in14x1 Int)",
            "(declare-const in5x1 Int)",
            "(declare-const in14x6 Int)",
            "(declare-const in5x6 Int)",
            "(declare-const in14x7 Int)",
            "(declare-const in5x7 Int)",
            "(declare-const in14x4 Int)",
            "(declare-const in5x4 Int)",
            "(declare-const in14x5 Int)",
            "(declare-const in19x11 Int)",
            "(declare-const in14x8 Int)",
            "(declare-const in19x10 Int)",
            "(declare-const in14x9 Int)",
            "(declare-const in19x13 Int)",
            "(declare-const in19x12 Int)",
            "(declare-const in19x15 Int)",
            "(declare-const in19x14 Int)",
            "(declare-const in5x19 Int)",
            "(declare-const in13x0 Int)",
            "(declare-const in5x10 Int)",
            "(declare-const in5x15 Int)",
            "(declare-const in5x16 Int)",
            "(declare-const in5x17 Int)",
            "(declare-const in5x18 Int)",
            "(declare-const in5x11 Int)",
            "(declare-const in5x12 Int)",
            "(declare-const in5x13 Int)",
            "(declare-const in5x14 Int)",
            "(declare-const in4x18 Int)",
            "(declare-const in4x19 Int)",
            "(declare-const in6x9 Int)",
            "(declare-const in6x7 Int)",
            "(declare-const in6x8 Int)",
            "(declare-const in15x1 Int)",
            "(declare-const in6x1 Int)",
            "(declare-const in15x2 Int)",
            "(declare-const in6x2 Int)",
            "(declare-const in15x0 Int)",
            "(declare-const in6x0 Int)",
            "(declare-const in15x5 Int)",
            "(declare-const in6x5 Int)",
            "(declare-const in15x6 Int)",
            "(declare-const in15x3 Int)",
            "(declare-const in6x3 Int)",
            "(declare-const in15x4 Int)",
            "(declare-const in6x4 Int)",
            "(declare-const in15x9 Int)",
            "(declare-const in4x14 Int)",
            "(declare-const in4x15 Int)",
            "(declare-const in18x21 Int)",
            "(declare-const in4x16 Int)",
            "(declare-const in15x7 Int)",
            "(declare-const in18x20 Int)",
            "(declare-const in4x17 Int)",
            "(declare-const in15x8 Int)",
            "(declare-const in18x23 Int)",
            "(declare-const in4x10 Int)",
            "(declare-const in18x22 Int)",
            "(declare-const in4x11 Int)",
            "(declare-const in4x12 Int)",
            "(declare-const in18x24 Int)",
            "(declare-const in4x13 Int)",
            "(declare-const in18x16 Int)",
            "(declare-const in18x15 Int)",
            "(declare-const in18x17 Int)",
            "(declare-const in18x19 Int)",
            "(declare-const in4x20 Int)",
            "(declare-const in18x10 Int)",
            "(declare-const in4x21 Int)",
            "(declare-const in18x12 Int)",
            "(declare-const in4x22 Int)",
            "(declare-const in18x11 Int)",
            "(declare-const in4x23 Int)",
            "(declare-const in18x14 Int)",
            "(declare-const in4x24 Int)",
            "(declare-const in18x13 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6))  ( =  in7x0 in0x7))  ( =  in7x1 in1x7))  ( =  in7x2 in2x7))  ( =  in7x3 in3x7))  ( =  in7x4 in4x7))  ( =  in7x5 in5x7))  ( =  in7x6 in6x7))  ( =  in8x0 in0x8))  ( =  in8x1 in1x8))  ( =  in8x2 in2x8))  ( =  in8x3 in3x8))  ( =  in8x4 in4x8))  ( =  in8x5 in5x8))  ( =  in8x6 in6x8))  ( =  in8x7 in7x8))  ( =  in9x0 in0x9))  ( =  in9x1 in1x9))  ( =  in9x2 in2x9))  ( =  in9x3 in3x9))  ( =  in9x4 in4x9))  ( =  in9x5 in5x9))  ( =  in9x6 in6x9))  ( =  in9x7 in7x9))  ( =  in9x8 in8x9))  ( =  in10x0 in0x10))  ( =  in10x1 in1x10))  ( =  in10x2 in2x10))  ( =  in10x3 in3x10))  ( =  in10x4 in4x10))  ( =  in10x5 in5x10))  ( =  in10x6 in6x10))  ( =  in10x7 in7x10))  ( =  in10x8 in8x10))  ( =  in10x9 in9x10))  ( =  in11x0 in0x11))  ( =  in11x1 in1x11))  ( =  in11x2 in2x11))  ( =  in11x3 in3x11))  ( =  in11x4 in4x11))  ( =  in11x5 in5x11))  ( =  in11x6 in6x11))  ( =  in11x7 in7x11))  ( =  in11x8 in8x11))  ( =  in11x9 in9x11))  ( =  in11x10 in10x11))  ( =  in12x0 in0x12))  ( =  in12x1 in1x12))  ( =  in12x2 in2x12))  ( =  in12x3 in3x12))  ( =  in12x4 in4x12))  ( =  in12x5 in5x12))  ( =  in12x6 in6x12))  ( =  in12x7 in7x12))  ( =  in12x8 in8x12))  ( =  in12x9 in9x12))  ( =  in12x10 in10x12))  ( =  in12x11 in11x12))  ( =  in13x0 in0x13))  ( =  in13x1 in1x13))  ( =  in13x2 in2x13))  ( =  in13x3 in3x13))  ( =  in13x4 in4x13))  ( =  in13x5 in5x13))  ( =  in13x6 in6x13))  ( =  in13x7 in7x13))  ( =  in13x8 in8x13))  ( =  in13x9 in9x13))  ( =  in13x10 in10x13))  ( =  in13x11 in11x13))  ( =  in13x12 in12x13))  ( =  in14x0 in0x14))  ( =  in14x1 in1x14))  ( =  in14x2 in2x14))  ( =  in14x3 in3x14))  ( =  in14x4 in4x14))  ( =  in14x5 in5x14))  ( =  in14x6 in6x14))  ( =  in14x7 in7x14))  ( =  in14x8 in8x14))  ( =  in14x9 in9x14))  ( =  in14x10 in10x14))  ( =  in14x11 in11x14))  ( =  in14x12 in12x14))  ( =  in14x13 in13x14))  ( =  in15x0 in0x15))  ( =  in15x1 in1x15))  ( =  in15x2 in2x15))  ( =  in15x3 in3x15))  ( =  in15x4 in4x15))  ( =  in15x5 in5x15))  ( =  in15x6 in6x15))  ( =  in15x7 in7x15))  ( =  in15x8 in8x15))  ( =  in15x9 in9x15))  ( =  in15x10 in10x15))  ( =  in15x11 in11x15))  ( =  in15x12 in12x15))  ( =  in15x13 in13x15))  ( =  in15x14 in14x15))  ( =  in16x0 in0x16))  ( =  in16x1 in1x16))  ( =  in16x2 in2x16))  ( =  in16x3 in3x16))  ( =  in16x4 in4x16))  ( =  in16x5 in5x16))  ( =  in16x6 in6x16))  ( =  in16x7 in7x16))  ( =  in16x8 in8x16))  ( =  in16x9 in9x16))  ( =  in16x10 in10x16))  ( =  in16x11 in11x16))  ( =  in16x12 in12x16))  ( =  in16x13 in13x16))  ( =  in16x14 in14x16))  ( =  in16x15 in15x16))  ( =  in17x0 in0x17))  ( =  in17x1 in1x17))  ( =  in17x2 in2x17))  ( =  in17x3 in3x17))  ( =  in17x4 in4x17))  ( =  in17x5 in5x17))  ( =  in17x6 in6x17))  ( =  in17x7 in7x17))  ( =  in17x8 in8x17))  ( =  in17x9 in9x17))  ( =  in17x10 in10x17))  ( =  in17x11 in11x17))  ( =  in17x12 in12x17))  ( =  in17x13 in13x17))  ( =  in17x14 in14x17))  ( =  in17x15 in15x17))  ( =  in17x16 in16x17))  ( =  in18x0 in0x18))  ( =  in18x1 in1x18))  ( =  in18x2 in2x18))  ( =  in18x3 in3x18))  ( =  in18x4 in4x18))  ( =  in18x5 in5x18))  ( =  in18x6 in6x18))  ( =  in18x7 in7x18))  ( =  in18x8 in8x18))  ( =  in18x9 in9x18))  ( =  in18x10 in10x18))  ( =  in18x11 in11x18))  ( =  in18x12 in12x18))  ( =  in18x13 in13x18))  ( =  in18x14 in14x18))  ( =  in18x15 in15x18))  ( =  in18x16 in16x18))  ( =  in18x17 in17x18))  ( =  in19x0 in0x19))  ( =  in19x1 in1x19))  ( =  in19x2 in2x19))  ( =  in19x3 in3x19))  ( =  in19x4 in4x19))  ( =  in19x5 in5x19))  ( =  in19x6 in6x19))  ( =  in19x7 in7x19))  ( =  in19x8 in8x19))  ( =  in19x9 in9x19))  ( =  in19x10 in10x19))  ( =  in19x11 in11x19))  ( =  in19x12 in12x19))  ( =  in19x13 in13x19))  ( =  in19x14 in14x19))  ( =  in19x15 in15x19))  ( =  in19x16 in16x19))  ( =  in19x17 in17x19))  ( =  in19x18 in18x19))  ( =  in20x0 in0x20))  ( =  in20x1 in1x20))  ( =  in20x2 in2x20))  ( =  in20x3 in3x20))  ( =  in20x4 in4x20))  ( =  in20x5 in5x20))  ( =  in20x6 in6x20))  ( =  in20x7 in7x20))  ( =  in20x8 in8x20))  ( =  in20x9 in9x20))  ( =  in20x10 in10x20))  ( =  in20x11 in11x20))  ( =  in20x12 in12x20))  ( =  in20x13 in13x20))  ( =  in20x14 in14x20))  ( =  in20x15 in15x20))  ( =  in20x16 in16x20))  ( =  in20x17 in17x20))  ( =  in20x18 in18x20))  ( =  in20x19 in19x20))  ( =  in21x0 in0x21))  ( =  in21x1 in1x21))  ( =  in21x2 in2x21))  ( =  in21x3 in3x21))  ( =  in21x4 in4x21))  ( =  in21x5 in5x21))  ( =  in21x6 in6x21))  ( =  in21x7 in7x21))  ( =  in21x8 in8x21))  ( =  in21x9 in9x21))  ( =  in21x10 in10x21))  ( =  in21x11 in11x21))  ( =  in21x12 in12x21))  ( =  in21x13 in13x21))  ( =  in21x14 in14x21))  ( =  in21x15 in15x21))  ( =  in21x16 in16x21))  ( =  in21x17 in17x21))  ( =  in21x18 in18x21))  ( =  in21x19 in19x21))  ( =  in21x20 in20x21))  ( =  in22x0 in0x22))  ( =  in22x1 in1x22))  ( =  in22x2 in2x22))  ( =  in22x3 in3x22))  ( =  in22x4 in4x22))  ( =  in22x5 in5x22))  ( =  in22x6 in6x22))  ( =  in22x7 in7x22))  ( =  in22x8 in8x22))  ( =  in22x9 in9x22))  ( =  in22x10 in10x22))  ( =  in22x11 in11x22))  ( =  in22x12 in12x22))  ( =  in22x13 in13x22))  ( =  in22x14 in14x22))  ( =  in22x15 in15x22))  ( =  in22x16 in16x22))  ( =  in22x17 in17x22))  ( =  in22x18 in18x22))  ( =  in22x19 in19x22))  ( =  in22x20 in20x22))  ( =  in22x21 in21x22))  ( =  in23x0 in0x23))  ( =  in23x1 in1x23))  ( =  in23x2 in2x23))  ( =  in23x3 in3x23))  ( =  in23x4 in4x23))  ( =  in23x5 in5x23))  ( =  in23x6 in6x23))  ( =  in23x7 in7x23))  ( =  in23x8 in8x23))  ( =  in23x9 in9x23))  ( =  in23x10 in10x23))  ( =  in23x11 in11x23))  ( =  in23x12 in12x23))  ( =  in23x13 in13x23))  ( =  in23x14 in14x23))  ( =  in23x15 in15x23))  ( =  in23x16 in16x23))  ( =  in23x17 in17x23))  ( =  in23x18 in18x23))  ( =  in23x19 in19x23))  ( =  in23x20 in20x23))  ( =  in23x21 in21x23))  ( =  in23x22 in22x23))  ( =  in24x0 in0x24))  ( =  in24x1 in1x24))  ( =  in24x2 in2x24))  ( =  in24x3 in3x24))  ( =  in24x4 in4x24))  ( =  in24x5 in5x24))  ( =  in24x6 in6x24))  ( =  in24x7 in7x24))  ( =  in24x8 in8x24))  ( =  in24x9 in9x24))  ( =  in24x10 in10x24))  ( =  in24x11 in11x24))  ( =  in24x12 in12x24))  ( =  in24x13 in13x24))  ( =  in24x14 in14x24))  ( =  in24x15 in15x24))  ( =  in24x16 in16x24))  ( =  in24x17 in17x24))  ( =  in24x18 in18x24))  ( =  in24x19 in19x24))  ( =  in24x20 in20x24))  ( =  in24x21 in21x24))  ( =  in24x22 in22x24))  ( =  in24x23 in23x24)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4) ( = in5x0 in0x5) ( = in5x1 in1x5) ( = in5x2 in2x5) ( = in5x3 in3x5) ( = in5x4 in4x5) ( = in6x0 in0x6) ( = in6x1 in1x6) ( = in6x2 in2x6) ( = in6x3 in3x6) ( = in6x4 in4x6) ( = in6x5 in5x6) ( = in7x0 in0x7) ( = in7x1 in1x7) ( = in7x2 in2x7) ( = in7x3 in3x7) ( = in7x4 in4x7) ( = in7x5 in5x7) ( = in7x6 in6x7) ( = in8x0 in0x8) ( = in8x1 in1x8) ( = in8x2 in2x8) ( = in8x3 in3x8) ( = in8x4 in4x8) ( = in8x5 in5x8) ( = in8x6 in6x8) ( = in8x7 in7x8) ( = in9x0 in0x9) ( = in9x1 in1x9) ( = in9x2 in2x9) ( = in9x3 in3x9) ( = in9x4 in4x9) ( = in9x5 in5x9) ( = in9x6 in6x9) ( = in9x7 in7x9) ( = in9x8 in8x9) ( = in10x0 in0x10) ( = in10x1 in1x10) ( = in10x2 in2x10) ( = in10x3 in3x10) ( = in10x4 in4x10) ( = in10x5 in5x10) ( = in10x6 in6x10) ( = in10x7 in7x10) ( = in10x8 in8x10) ( = in10x9 in9x10) ( = in11x0 in0x11) ( = in11x1 in1x11) ( = in11x2 in2x11) ( = in11x3 in3x11) ( = in11x4 in4x11) ( = in11x5 in5x11) ( = in11x6 in6x11) ( = in11x7 in7x11) ( = in11x8 in8x11) ( = in11x9 in9x11) ( = in11x10 in10x11) ( = in12x0 in0x12) ( = in12x1 in1x12) ( = in12x2 in2x12) ( = in12x3 in3x12) ( = in12x4 in4x12) ( = in12x5 in5x12) ( = in12x6 in6x12) ( = in12x7 in7x12) ( = in12x8 in8x12) ( = in12x9 in9x12) ( = in12x10 in10x12) ( = in12x11 in11x12) ( = in13x0 in0x13) ( = in13x1 in1x13) ( = in13x2 in2x13) ( = in13x3 in3x13) ( = in13x4 in4x13) ( = in13x5 in5x13) ( = in13x6 in6x13) ( = in13x7 in7x13) ( = in13x8 in8x13) ( = in13x9 in9x13) ( = in13x10 in10x13) ( = in13x11 in11x13) ( = in13x12 in12x13) ( = in14x0 in0x14) ( = in14x1 in1x14) ( = in14x2 in2x14) ( = in14x3 in3x14) ( = in14x4 in4x14) ( = in14x5 in5x14) ( = in14x6 in6x14) ( = in14x7 in7x14) ( = in14x8 in8x14) ( = in14x9 in9x14) ( = in14x10 in10x14) ( = in14x11 in11x14) ( = in14x12 in12x14) ( = in14x13 in13x14) ( = in15x0 in0x15) ( = in15x1 in1x15) ( = in15x2 in2x15) ( = in15x3 in3x15) ( = in15x4 in4x15) ( = in15x5 in5x15) ( = in15x6 in6x15) ( = in15x7 in7x15) ( = in15x8 in8x15) ( = in15x9 in9x15) ( = in15x10 in10x15) ( = in15x11 in11x15) ( = in15x12 in12x15) ( = in15x13 in13x15) ( = in15x14 in14x15) ( = in16x0 in0x16) ( = in16x1 in1x16) ( = in16x2 in2x16) ( = in16x3 in3x16) ( = in16x4 in4x16) ( = in16x5 in5x16) ( = in16x6 in6x16) ( = in16x7 in7x16) ( = in16x8 in8x16) ( = in16x9 in9x16) ( = in16x10 in10x16) ( = in16x11 in11x16) ( = in16x12 in12x16) ( = in16x13 in13x16) ( = in16x14 in14x16) ( = in16x15 in15x16) ( = in17x0 in0x17) ( = in17x1 in1x17) ( = in17x2 in2x17) ( = in17x3 in3x17) ( = in17x4 in4x17) ( = in17x5 in5x17) ( = in17x6 in6x17) ( = in17x7 in7x17) ( = in17x8 in8x17) ( = in17x9 in9x17) ( = in17x10 in10x17) ( = in17x11 in11x17) ( = in17x12 in12x17) ( = in17x13 in13x17) ( = in17x14 in14x17) ( = in17x15 in15x17) ( = in17x16 in16x17) ( = in18x0 in0x18) ( = in18x1 in1x18) ( = in18x2 in2x18) ( = in18x3 in3x18) ( = in18x4 in4x18) ( = in18x5 in5x18) ( = in18x6 in6x18) ( = in18x7 in7x18) ( = in18x8 in8x18) ( = in18x9 in9x18) ( = in18x10 in10x18) ( = in18x11 in11x18) ( = in18x12 in12x18) ( = in18x13 in13x18) ( = in18x14 in14x18) ( = in18x15 in15x18) ( = in18x16 in16x18) ( = in18x17 in17x18) ( = in19x0 in0x19) ( = in19x1 in1x19) ( = in19x2 in2x19) ( = in19x3 in3x19) ( = in19x4 in4x19) ( = in19x5 in5x19) ( = in19x6 in6x19) ( = in19x7 in7x19) ( = in19x8 in8x19) ( = in19x9 in9x19) ( = in19x10 in10x19) ( = in19x11 in11x19) ( = in19x12 in12x19) ( = in19x13 in13x19) ( = in19x14 in14x19) ( = in19x15 in15x19) ( = in19x16 in16x19) ( = in19x17 in17x19) ( = in19x18 in18x19) ( = in20x0 in0x20) ( = in20x1 in1x20) ( = in20x2 in2x20) ( = in20x3 in3x20) ( = in20x4 in4x20) ( = in20x5 in5x20) ( = in20x6 in6x20) ( = in20x7 in7x20) ( = in20x8 in8x20) ( = in20x9 in9x20) ( = in20x10 in10x20) ( = in20x11 in11x20) ( = in20x12 in12x20) ( = in20x13 in13x20) ( = in20x14 in14x20) ( = in20x15 in15x20) ( = in20x16 in16x20) ( = in20x17 in17x20) ( = in20x18 in18x20) ( = in20x19 in19x20) ( = in21x0 in0x21) ( = in21x1 in1x21) ( = in21x2 in2x21) ( = in21x3 in3x21) ( = in21x4 in4x21) ( = in21x5 in5x21) ( = in21x6 in6x21) ( = in21x7 in7x21) ( = in21x8 in8x21) ( = in21x9 in9x21) ( = in21x10 in10x21) ( = in21x11 in11x21) ( = in21x12 in12x21) ( = in21x13 in13x21) ( = in21x14 in14x21) ( = in21x15 in15x21) ( = in21x16 in16x21) ( = in21x17 in17x21) ( = in21x18 in18x21) ( = in21x19 in19x21) ( = in21x20 in20x21) ( = in22x0 in0x22) ( = in22x1 in1x22) ( = in22x2 in2x22) ( = in22x3 in3x22) ( = in22x4 in4x22) ( = in22x5 in5x22) ( = in22x6 in6x22) ( = in22x7 in7x22) ( = in22x8 in8x22) ( = in22x9 in9x22) ( = in22x10 in10x22) ( = in22x11 in11x22) ( = in22x12 in12x22) ( = in22x13 in13x22) ( = in22x14 in14x22) ( = in22x15 in15x22) ( = in22x16 in16x22) ( = in22x17 in17x22) ( = in22x18 in18x22) ( = in22x19 in19x22) ( = in22x20 in20x22) ( = in22x21 in21x22) ( = in23x0 in0x23) ( = in23x1 in1x23) ( = in23x2 in2x23) ( = in23x3 in3x23) ( = in23x4 in4x23) ( = in23x5 in5x23) ( = in23x6 in6x23) ( = in23x7 in7x23) ( = in23x8 in8x23) ( = in23x9 in9x23) ( = in23x10 in10x23) ( = in23x11 in11x23) ( = in23x12 in12x23) ( = in23x13 in13x23) ( = in23x14 in14x23) ( = in23x15 in15x23) ( = in23x16 in16x23) ( = in23x17 in17x23) ( = in23x18 in18x23) ( = in23x19 in19x23) ( = in23x20 in20x23) ( = in23x21 in21x23) ( = in23x22 in22x23) ( = in24x0 in0x24) ( = in24x1 in1x24) ( = in24x2 in2x24) ( = in24x3 in3x24) ( = in24x4 in4x24) ( = in24x5 in5x24) ( = in24x6 in6x24) ( = in24x7 in7x24) ( = in24x8 in8x24) ( = in24x9 in9x24) ( = in24x10 in10x24) ( = in24x11 in11x24) ( = in24x12 in12x24) ( = in24x13 in13x24) ( = in24x14 in14x24) ( = in24x15 in15x24) ( = in24x16 in16x24) ( = in24x17 in17x24) ( = in24x18 in18x24) ( = in24x19 in19x24) ( = in24x20 in20x24) ( = in24x21 in21x24) ( = in24x22 in22x24) ( = in24x23 in23x24)))",
        "equivalent": true
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in7x8 Int)",
            "(declare-const in7x9 Int)",
            "(declare-const in7x6 Int)",
            "(declare-const in7x0 Int)",
            "(declare-const in7x1 Int)",
            "(declare-const in7x4 Int)",
            "(declare-const in7x5 Int)",
            "(declare-const in7x2 Int)",
            "(declare-const in7x3 Int)",
            "(declare-const in12x24 Int)",
            "(declare-const in12x25 Int)",
            "(declare-const in12x22 Int)",
            "(declare-const in12x23 Int)",
            "(declare-const in12x20 Int)",
            "(declare-const in12x21 Int)",
            "(declare-const in1x18 Int)",
            "(declare-const in1x17 Int)",
            "(declare-const in1x16 Int)",
            "(declare-const in1x15 Int)",
            "(declare-const in1x19 Int)",
            "(declare-const in23x24 Int)",
            "(declare-const in23x25 Int)",
            "(declare-const in23x20 Int)",
            "(declare-const in23x21 Int)",
            "(declare-const in23x22 Int)",
            "(declare-const in12x19 Int)",
            "(declare-const in12x17 Int)",
            "(declare-const in12x18 Int)",
            "(declare-const in12x15 Int)",
            "(declare-const in1x10 Int)",
            "(declare-const in12x16 Int)",
            "(declare-const in12x13 Int)",
            "(declare-const in12x14 Int)",
            "(declare-const in1x14 Int)",
            "(declare-const in12x11 Int)",
            "(declare-const in1x13 Int)",
            "(declare-const in1x12 Int)",
            "(declare-const in12x10 Int)",
            "(declare-const in1x11 Int)",
            "(declare-const in0x16 Int)",
            "(declare-const in0x17 Int)",
            "(declare-const in0x14 Int)",
            "(declare-const in0x15 Int)",
            "(declare-const in23x17 Int)",
            "(declare-const in23x18 Int)",
            "(declare-const in23x19 Int)",
            "(declare-const in0x18 Int)",
            "(declare-const in0x19 Int)",
            "(declare-const in23x13 Int)",
            "(declare-const in8x7 Int)",
            "(declare-const in23x14 Int)",
            "(declare-const in23x15 Int)",
            "(declare-const in8x5 Int)",
            "(declare-const in23x16 Int)",
            "(declare-const in8x6 Int)",
            "(declare-const in23x10 Int)",
            "(declare-const in23x11 Int)",
            "(declare-const in8x9 Int)",
            "(declare-const in23x12 Int)",
            "(declare-const in8x0 Int)",
            "(declare-const in8x3 Int)",
            "(declare-const in8x4 Int)",
            "(declare-const in8x1 Int)",
            "(declare-const in8x2 Int)",
            "(declare-const in0x12 Int)",
            "(declare-const in0x13 Int)",
            "(declare-const in0x10 Int)",
            "(declare-const in0x11 Int)",
            "(declare-const in0x25 Int)",
            "(declare-const in11x24 Int)",
            "(declare-const in11x23 Int)",
            "(declare-const in0x20 Int)",
            "(declare-const in11x25 Int)",
            "(declare-const in0x23 Int)",
            "(declare-const in11x20 Int)",
            "(declare-const in0x24 Int)",
            "(declare-const in11x22 Int)",
            "(declare-const in0x21 Int)",
            "(declare-const in0x22 Int)",
            "(declare-const in11x21 Int)",
            "(declare-const in2x19 Int)",
            "(declare-const in2x18 Int)",
            "(declare-const in2x17 Int)",
            "(declare-const in2x16 Int)",
            "(declare-const in22x23 Int)",
            "(declare-const in9x6 Int)",
            "(declare-const in22x24 Int)",
            "(declare-const in9x7 Int)",
            "(declare-const in22x25 Int)",
            "(declare-const in9x4 Int)",
            "(declare-const in9x5 Int)",
            "(declare-const in22x20 Int)",
            "(declare-const in22x21 Int)",
            "(declare-const in9x8 Int)",
            "(declare-const in18x2 Int)",
            "(declare-const in11x17 Int)",
            "(declare-const in9x2 Int)",
            "(declare-const in18x3 Int)",
            "(declare-const in11x16 Int)",
            "(declare-const in9x3 Int)",
            "(declare-const in11x19 Int)",
            "(declare-const in18x0 Int)",
            "(declare-const in9x0 Int)",
            "(declare-const in11x18 Int)",
            "(declare-const in18x1 Int)",
            "(declare-const in9x1 Int)",
            "(declare-const in18x6 Int)",
            "(declare-const in11x13 Int)",
            "(declare-const in2x11 Int)",
            "(declare-const in18x7 Int)",
            "(declare-const in11x12 Int)",
            "(declare-const in2x10 Int)",
            "(declare-const in18x4 Int)",
            "(declare-const in11x15 Int)",
            "(declare-const in18x5 Int)",
            "(declare-const in11x14 Int)",
            "(declare-const in2x15 Int)",
            "(declare-const in2x14 Int)",
            "(declare-const in18x8 Int)",
            "(declare-const in2x13 Int)",
            "(declare-const in18x9 Int)",
            "(declare-const in2x12 Int)",
            "(declare-const in11x10 Int)",
            "(declare-const in22x16 Int)",
            "(declare-const in22x17 Int)",
            "(declare-const in22x18 Int)",
            "(declare-const in22x19 Int)",
            "(declare-const in22x12 Int)",
            "(declare-const in22x13 Int)",
            "(declare-const in22x14 Int)",
            "(declare-const in22x15 Int)",
            "(declare-const in22x10 Int)",
            "(declare-const in22x11 Int)",
            "(declare-const in2x22 Int)",
            "(declare-const in2x21 Int)",
            "(declare-const in2x20 Int)",
            "(declare-const in2x25 Int)",
            "(declare-const in2x24 Int)",
            "(declare-const in2x23 Int)",
            "(declare-const in19x1 Int)",
            "(declare-const in19x2 Int)",
            "(declare-const in19x0 Int)",
            "(declare-const in10x23 Int)",
            "(declare-const in1x21 Int)",
            "(declare-const in19x5 Int)",
            "(declare-const in10x22 Int)",
            "(declare-const in1x20 Int)",
            "(declare-const in19x6 Int)",
            "(declare-const in10x25 Int)",
            "(declare-const in19x3 Int)",
            "(declare-const in10x24 Int)",
            "(declare-const in19x4 Int)",
            "(declare-const in1x25 Int)",
            "(declare-const in19x9 Int)",
            "(declare-const in1x24 Int)",
            "(declare-const in1x23 Int)",
            "(declare-const in10x21 Int)",
            "(declare-const in19x7 Int)",
            "(declare-const in1x22 Int)",
            "(declare-const in10x20 Int)",
            "(declare-const in19x8 Int)",
            "(declare-const in21x22 Int)",
            "(declare-const in21x23 Int)",
            "(declare-const in21x24 Int)",
            "(declare-const in21x25 Int)",
            "(declare-const in21x20 Int)",
            "(declare-const in10x19 Int)",
            "(declare-const in10x16 Int)",
            "(declare-const in10x15 Int)",
            "(declare-const in10x18 Int)",
            "(declare-const in10x17 Int)",
            "(declare-const in10x12 Int)",
            "(declare-const in10x11 Int)",
            "(declare-const in10x14 Int)",
            "(declare-const in10x13 Int)",
            "(declare-const in15x11 Int)",
            "(declare-const in15x10 Int)",
            "(declare-const in15x19 Int)",
            "(declare-const in15x18 Int)",
            "(declare-const in15x17 Int)",
            "(declare-const in15x16 Int)",
            "(declare-const in15x14 Int)",
            "(declare-const in15x13 Int)",
            "(declare-const in15x12 Int)",
            "(declare-const in9x13 Int)",
            "(declare-const in9x14 Int)",
            "(declare-const in9x11 Int)",
            "(declare-const in9x12 Int)",
            "(declare-const in9x10 Int)",
            "(declare-const in9x19 Int)",
            "(declare-const in9x17 Int)",
            "(declare-const in9x18 Int)",
            "(declare-const in9x15 Int)",
            "(declare-const in9x16 Int)",
            "(declare-const in14x21 Int)",
            "(declare-const in14x20 Int)",
            "(declare-const in20x0 Int)",
            "(declare-const in20x3 Int)",
            "(declare-const in20x4 Int)",
            "(declare-const in20x1 Int)",
            "(declare-const in20x2 Int)",
            "(declare-const in8x12 Int)",
            "(declare-const in8x13 Int)",
            "(declare-const in8x10 Int)",
            "(declare-const in8x11 Int)",
            "(declare-const in8x18 Int)",
            "(declare-const in8x19 Int)",
            "(declare-const in14x25 Int)",
            "(declare-const in8x16 Int)",
            "(declare-const in14x24 Int)",
            "(declare-const in8x17 Int)",
            "(declare-const in14x23 Int)",
            "(declare-const in8x14 Int)",
            "(declare-const in14x22 Int)",
            "(declare-const in8x15 Int)",
            "(declare-const in14x10 Int)",
            "(declare-const in25x23 Int)",
            "(declare-const in25x22 Int)",
            "(declare-const in25x24 Int)",
            "(declare-const in8x23 Int)",
            "(declare-const in20x7 Int)",
            "(declare-const in8x24 Int)",
            "(declare-const in20x8 Int)",
            "(declare-const in25x21 Int)",
            "(declare-const in8x21 Int)",
            "(declare-const in20x5 Int)",
            "(declare-const in25x20 Int)",
            "(declare-const in8x22 Int)",
            "(declare-const in20x6 Int)",
            "(declare-const in8x20 Int)",
            "(declare-const in20x9 Int)",
            "(declare-const in14x19 Int)",
            "(declare-const in14x18 Int)",
            "(declare-const in14x17 Int)",
            "(declare-const in14x16 Int)",
            "(declare-const in14x15 Int)",
            "(declare-const in14x13 Int)",
            "(declare-const in8x25 Int)",
            "(declare-const in14x12 Int)",
            "(declare-const in14x11 Int)",
            "(declare-const in25x19 Int)",
            "(declare-const in25x16 Int)",
            "(declare-const in25x15 Int)",
            "(declare-const in25x18 Int)",
            "(declare-const in25x17 Int)",
            "(declare-const in25x12 Int)",
            "(declare-const in25x11 Int)",
            "(declare-const in25x14 Int)",
            "(declare-const in25x13 Int)",
            "(declare-const in25x10 Int)",
            "(declare-const in13x20 Int)",
            "(declare-const in13x25 Int)",
            "(declare-const in13x23 Int)",
            "(declare-const in13x24 Int)",
            "(declare-const in13x21 Int)",
            "(declare-const in13x22 Int)",
            "(declare-const in24x25 Int)",
            "(declare-const in24x22 Int)",
            "(declare-const in24x21 Int)",
            "(declare-const in24x23 Int)",
            "(declare-const in9x24 Int)",
            "(declare-const in9x25 Int)",
            "(declare-const in24x20 Int)",
            "(declare-const in9x22 Int)",
            "(declare-const in9x23 Int)",
            "(declare-const in9x20 Int)",
            "(declare-const in9x21 Int)",
            "(declare-const in13x18 Int)",
            "(declare-const in13x19 Int)",
            "(declare-const in13x16 Int)",
            "(declare-const in13x17 Int)",
            "(declare-const in13x14 Int)",
            "(declare-const in13x15 Int)",
            "(declare-const in13x12 Int)",
            "(declare-const in13x10 Int)",
            "(declare-const in13x11 Int)",
            "(declare-const in24x19 Int)",
            "(declare-const in24x18 Int)",
            "(declare-const in24x15 Int)",
            "(declare-const in24x14 Int)",
            "(declare-const in24x17 Int)",
            "(declare-const in24x16 Int)",
            "(declare-const in24x11 Int)",
            "(declare-const in24x10 Int)",
            "(declare-const in24x13 Int)",
            "(declare-const in24x12 Int)",
            "(declare-const in23x0 Int)",
            "(declare-const in23x1 Int)",
            "(declare-const in12x4 Int)",
            "(declare-const in12x5 Int)",
            "(declare-const in12x2 Int)",
            "(declare-const in6x11 Int)",
            "(declare-const in12x3 Int)",
            "(declare-const in6x10 Int)",
            "(declare-const in12x8 Int)",
            "(declare-const in12x9 Int)",
            "(declare-const in12x6 Int)",
            "(declare-const in12x7 Int)",
            "(declare-const in6x17 Int)",
            "(declare-const in6x16 Int)",
            "(declare-const in6x19 Int)",
            "(declare-const in6x18 Int)",
            "(declare-const in6x13 Int)",
            "(declare-const in6x12 Int)",
            "(declare-const in6x15 Int)",
            "(declare-const in6x14 Int)",
            "(declare-const in17x25 Int)",
            "(declare-const in11x0 Int)",
            "(declare-const in11x2 Int)",
            "(declare-const in11x1 Int)",
            "(declare-const in23x4 Int)",
            "(declare-const in6x20 Int)",
            "(declare-const in23x5 Int)",
            "(declare-const in23x2 Int)",
            "(declare-const in6x22 Int)",
            "(declare-const in23x3 Int)",
            "(declare-const in6x21 Int)",
            "(declare-const in23x8 Int)",
            "(declare-const in23x9 Int)",
            "(declare-const in23x6 Int)",
            "(declare-const in23x7 Int)",
            "(declare-const in17x20 Int)",
            "(declare-const in6x24 Int)",
            "(declare-const in17x21 Int)",
            "(declare-const in6x23 Int)",
            "(declare-const in17x22 Int)",
            "(declare-const in17x23 Int)",
            "(declare-const in6x25 Int)",
            "(declare-const in17x24 Int)",
            "(declare-const in17x14 Int)",
            "(declare-const in17x15 Int)",
            "(declare-const in17x16 Int)",
            "(declare-const in17x18 Int)",
            "(declare-const in17x19 Int)",
            "(declare-const in24x0 Int)",
            "(declare-const in13x3 Int)",
            "(declare-const in0x7 Int)",
            "(declare-const in13x4 Int)",
            "(declare-const in0x8 Int)",
            "(declare-const in5x20 Int)",
            "(declare-const in13x1 Int)",
            "(declare-const in0x5 Int)",
            "(declare-const in5x21 Int)",
            "(declare-const in13x2 Int)",
            "(declare-const in0x6 Int)",
            "(declare-const in13x7 Int)",
            "(declare-const in13x8 Int)",
            "(declare-const in13x5 Int)",
            "(declare-const in0x9 Int)",
            "(declare-const in13x6 Int)",
            "(declare-const in13x9 Int)",
            "(declare-const in5x22 Int)",
            "(declare-const in17x10 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in5x23 Int)",
            "(declare-const in17x11 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in5x24 Int)",
            "(declare-const in17x12 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in5x25 Int)",
            "(declare-const in17x13 Int)",
            "(declare-const in0x2 Int)",
            "(declare-const in12x0 Int)",
            "(declare-const in12x1 Int)",
            "(declare-const in24x3 Int)",
            "(declare-const in24x4 Int)",
            "(declare-const in24x1 Int)",
            "(declare-const in24x2 Int)",
            "(declare-const in24x7 Int)",
            "(declare-const in24x8 Int)",
            "(declare-const in24x5 Int)",
            "(declare-const in24x6 Int)",
            "(declare-const in24x9 Int)",
            "(declare-const in16x24 Int)",
            "(declare-const in16x25 Int)",
            "(declare-const in21x2 Int)",
            "(declare-const in21x3 Int)",
            "(declare-const in21x0 Int)",
            "(declare-const in21x1 Int)",
            "(declare-const in7x21 Int)",
            "(declare-const in10x5 Int)",
            "(declare-const in1x6 Int)",
            "(declare-const in7x20 Int)",
            "(declare-const in10x4 Int)",
            "(declare-const in1x7 Int)",
            "(declare-const in7x23 Int)",
            "(declare-const in10x7 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in7x22 Int)",
            "(declare-const in10x6 Int)",
            "(declare-const in1x5 Int)",
            "(declare-const in10x9 Int)",
            "(declare-const in10x8 Int)",
            "(declare-const in1x8 Int)",
            "(declare-const in1x9 Int)",
            "(declare-const in7x25 Int)",
            "(declare-const in16x20 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in7x24 Int)",
            "(declare-const in16x21 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in16x22 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in16x23 Int)",
            "(declare-const in16x13 Int)",
            "(declare-const in16x14 Int)",
            "(declare-const in16x15 Int)",
            "(declare-const in16x17 Int)",
            "(declare-const in16x18 Int)",
            "(declare-const in16x19 Int)",
            "(declare-const in21x6 Int)",
            "(declare-const in21x7 Int)",
            "(declare-const in21x4 Int)",
            "(declare-const in21x5 Int)",
            "(declare-const in21x8 Int)",
            "(declare-const in21x9 Int)",
            "(declare-const in16x10 Int)",
            "(declare-const in16x11 Int)",
            "(declare-const in16x12 Int)",
            "(declare-const in22x1 Int)",
            "(declare-const in22x2 Int)",
            "(declare-const in22x0 Int)",
            "(declare-const in11x4 Int)",
            "(declare-const in2x5 Int)",
            "(declare-const in11x3 Int)",
            "(declare-const in2x6 Int)",
            "(declare-const in11x6 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in11x5 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in11x8 Int)",
            "(declare-const in2x9 Int)",
            "(declare-const in11x7 Int)",
            "(declare-const in2x7 Int)",
            "(declare-const in11x9 Int)",
            "(declare-const in2x8 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in15x22 Int)",
            "(declare-const in15x21 Int)",
            "(declare-const in15x20 Int)",
            "(declare-const in10x1 Int)",
            "(declare-const in10x0 Int)",
            "(declare-const in10x3 Int)",
            "(declare-const in10x2 Int)",
            "(declare-const in22x5 Int)",
            "(declare-const in7x10 Int)",
            "(declare-const in22x6 Int)",
            "(declare-const in22x3 Int)",
            "(declare-const in7x12 Int)",
            "(declare-const in22x4 Int)",
            "(declare-const in7x11 Int)",
            "(declare-const in22x9 Int)",
            "(declare-const in22x7 Int)",
            "(declare-const in22x8 Int)",
            "(declare-const in7x18 Int)",
            "(declare-const in7x17 Int)",
            "(declare-const in7x19 Int)",
            "(declare-const in7x14 Int)",
            "(declare-const in15x25 Int)",
            "(declare-const in7x13 Int)",
            "(declare-const in15x24 Int)",
            "(declare-const in7x16 Int)",
            "(declare-const in15x23 Int)",
            "(declare-const in7x15 Int)",
            "(declare-const in21x19 Int)",
            "(declare-const in21x15 Int)",
            "(declare-const in21x16 Int)",
            "(declare-const in21x17 Int)",
            "(declare-const in21x18 Int)",
            "(declare-const in21x11 Int)",
            "(declare-const in21x12 Int)",
            "(declare-const in21x13 Int)",
            "(declare-const in21x14 Int)",
            "(declare-const in21x10 Int)",
            "(declare-const in16x0 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in16x1 Int)",
            "(declare-const in3x5 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in16x4 Int)",
            "(declare-const in3x8 Int)",
            "(declare-const in16x5 Int)",
            "(declare-const in3x9 Int)",
            "(declare-const in16x2 Int)",
            "(declare-const in3x6 Int)",
            "(declare-const in16x3 Int)",
            "(declare-const in3x7 Int)",
            "(declare-const in3x23 Int)",
            "(declare-const in16x8 Int)",
            "(declare-const in3x22 Int)",
            "(declare-const in16x9 Int)",
            "(declare-const in3x21 Int)",
            "(declare-const in16x6 Int)",
            "(declare-const in3x20 Int)",
            "(declare-const in16x7 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in3x25 Int)",
            "(declare-const in3x24 Int)",
            "(declare-const in20x25 Int)",
            "(declare-const in4x9 Int)",
            "(declare-const in20x24 Int)",
            "(declare-const in20x23 Int)",
            "(declare-const in20x22 Int)",
            "(declare-const in20x21 Int)",
            "(declare-const in4x3 Int)",
            "(declare-const in17x0 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in17x3 Int)",
            "(declare-const in4x7 Int)",
            "(declare-const in17x4 Int)",
            "(declare-const in4x8 Int)",
            "(declare-const in17x1 Int)",
            "(declare-const in4x5 Int)",
            "(declare-const in17x2 Int)",
            "(declare-const in4x6 Int)",
            "(declare-const in17x7 Int)",
            "(declare-const in17x8 Int)",
            "(declare-const in17x5 Int)",
            "(declare-const in17x6 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in17x9 Int)",
            "(declare-const in20x17 Int)",
            "(declare-const in20x16 Int)",
            "(declare-const in3x19 Int)",
            "(declare-const in20x15 Int)",
            "(declare-const in3x18 Int)",
            "(declare-const in20x14 Int)",
            "(declare-const in3x17 Int)",
            "(declare-const in20x19 Int)",
            "(declare-const in20x18 Int)",
            "(declare-const in20x13 Int)",
            "(declare-const in20x12 Int)",
            "(declare-const in20x11 Int)",
            "(declare-const in20x10 Int)",
            "(declare-const in19x20 Int)",
            "(declare-const in3x12 Int)",
            "(declare-const in3x11 Int)",
            "(declare-const in19x22 Int)",
            "(declare-const in3x10 Int)",
            "(declare-const in19x21 Int)",
            "(declare-const in19x24 Int)",
            "(declare-const in3x16 Int)",
            "(declare-const in19x23 Int)",
            "(declare-const in3x15 Int)",
            "(declare-const in3x14 Int)",
            "(declare-const in19x25 Int)",
            "(declare-const in3x13 Int)",
            "(declare-const in19x17 Int)",
            "(declare-const in19x16 Int)",
            "(declare-const in19x18 Int)",
            "(declare-const in5x8 Int)",
            "(declare-const in5x9 Int)",
            "(declare-const in14x2 Int)",
            "(declare-const in5x2 Int)",
            "(declare-const in14x3 Int)",
            "(declare-const in5x3 Int)",
            "(declare-const in14x0 Int)",
            "(declare-const in5x0 Int)",
            "(declare-const in14x1 Int)",
            "(declare-const in5x1 Int)",
            "(declare-const in14x6 Int)",
            "(declare-const in5x6 Int)",
            "(declare-const in14x7 Int)",
            "(declare-const in5x7 Int)",
            "(declare-const in14x4 Int)",
            "(declare-const in5x4 Int)",
            "(declare-const in14x5 Int)",
            "(declare-const in19x11 Int)",
            "(declare-const in14x8 Int)",
            "(declare-const in19x10 Int)",
            "(declare-const in14x9 Int)",
            "(declare-const in19x13 Int)",
            "(declare-const in19x12 Int)",
            "(declare-const in19x15 Int)",
            "(declare-const in19x14 Int)",
            "(declare-const in5x19 Int)",
            "(declare-const in13x0 Int)",
            "(declare-const in25x2 Int)",
            "(declare-const in25x3 Int)",
            "(declare-const in25x0 Int)",
            "(declare-const in25x1 Int)",
            "(declare-const in5x10 Int)",
            "(declare-const in25x6 Int)",
            "(declare-const in25x7 Int)",
            "(declare-const in25x4 Int)",
            "(declare-const in25x5 Int)",
            "(declare-const in5x15 Int)",
            "(declare-const in5x16 Int)",
            "(declare-const in25x8 Int)",
            "(declare-const in5x17 Int)",
            "(declare-const in25x9 Int)",
            "(declare-const in5x18 Int)",
            "(declare-const in5x11 Int)",
            "(declare-const in5x12 Int)",
            "(declare-const in5x13 Int)",
            "(declare-const in5x14 Int)",
            "(declare-const in4x18 Int)",
            "(declare-const in4x19 Int)",
            "(declare-const in6x9 Int)",
            "(declare-const in6x7 Int)",
            "(declare-const in6x8 Int)",
            "(declare-const in15x1 Int)",
            "(declare-const in6x1 Int)",
            "(declare-const in15x2 Int)",
            "(declare-const in6x2 Int)",
            "(declare-const in15x0 Int)",
            "(declare-const in6x0 Int)",
            "(declare-const in15x5 Int)",
            "(declare-const in6x5 Int)",
            "(declare-const in15x6 Int)",
            "(declare-const in15x3 Int)",
            "(declare-const in6x3 Int)",
            "(declare-const in15x4 Int)",
            "(declare-const in6x4 Int)",
            "(declare-const in15x9 Int)",
            "(declare-const in4x14 Int)",
            "(declare-const in4x15 Int)",
            "(declare-const in18x21 Int)",
            "(declare-const in4x16 Int)",
            "(declare-const in15x7 Int)",
            "(declare-const in18x20 Int)",
            "(declare-const in4x17 Int)",
            "(declare-const in15x8 Int)",
            "(declare-const in18x23 Int)",
            "(declare-const in4x10 Int)",
            "(declare-const in18x22 Int)",
            "(declare-const in4x11 Int)",
            "(declare-const in18x25 Int)",
            "(declare-const in4x12 Int)",
            "(declare-const in18x24 Int)",
            "(declare-const in4x13 Int)",
            "(declare-const in18x16 Int)",
            "(declare-const in18x15 Int)",
            "(declare-const in18x17 Int)",
            "(declare-const in18x19 Int)",
            "(declare-const in4x20 Int)",
            "(declare-const in4x25 Int)",
            "(declare-const in18x10 Int)",
            "(declare-const in4x21 Int)",
            "(declare-const in18x12 Int)",
            "(declare-const in4x22 Int)",
            "(declare-const in18x11 Int)",
            "(declare-const in4x23 Int)",
            "(declare-const in18x14 Int)",
            "(declare-const in4x24 Int)",
            "(declare-const in18x13 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6))  ( =  in7x0 in0x7))  ( =  in7x1 in1x7))  ( =  in7x2 in2x7))  ( =  in7x3 in3x7))  ( =  in7x4 in4x7))  ( =  in7x5 in5x7))  ( =  in7x6 in6x7))  ( =  in8x0 in0x8))  ( =  in8x1 in1x8))  ( =  in8x2 in2x8))  ( =  in8x3 in3x8))  ( =  in8x4 in4x8))  ( =  in8x5 in5x8))  ( =  in8x6 in6x8))  ( =  in8x7 in7x8))  ( =  in9x0 in0x9))  ( =  in9x1 in1x9))  ( =  in9x2 in2x9))  ( =  in9x3 in3x9))  ( =  in9x4 in4x9))  ( =  in9x5 in5x9))  ( =  in9x6 in6x9))  ( =  in9x7 in7x9))  ( =  in9x8 in8x9))  ( =  in10x0 in0x10))  ( =  in10x1 in1x10))  ( =  in10x2 in2x10))  ( =  in10x3 in3x10))  ( =  in10x4 in4x10))  ( =  in10x5 in5x10))  ( =  in10x6 in6x10))  ( =  in10x7 in7x10))  ( =  in10x8 in8x10))  ( =  in10x9 in9x10))  ( =  in11x0 in0x11))  ( =  in11x1 in1x11))  ( =  in11x2 in2x11))  ( =  in11x3 in3x11))  ( =  in11x4 in4x11))  ( =  in11x5 in5x11))  ( =  in11x6 in6x11))  ( =  in11x7 in7x11))  ( =  in11x8 in8x11))  ( =  in11x9 in9x11))  ( =  in11x10 in10x11))  ( =  in12x0 in0x12))  ( =  in12x1 in1x12))  ( =  in12x2 in2x12))  ( =  in12x3 in3x12))  ( =  in12x4 in4x12))  ( =  in12x5 in5x12))  ( =  in12x6 in6x12))  ( =  in12x7 in7x12))  ( =  in12x8 in8x12))  ( =  in12x9 in9x12))  ( =  in12x10 in10x12))  ( =  in12x11 in11x12))  ( =  in13x0 in0x13))  ( =  in13x1 in1x13))  ( =  in13x2 in2x13))  ( =  in13x3 in3x13))  ( =  in13x4 in4x13))  ( =  in13x5 in5x13))  ( =  in13x6 in6x13))  ( =  in13x7 in7x13))  ( =  in13x8 in8x13))  ( =  in13x9 in9x13))  ( =  in13x10 in10x13))  ( =  in13x11 in11x13))  ( =  in13x12 in12x13))  ( =  in14x0 in0x14))  ( =  in14x1 in1x14))  ( =  in14x2 in2x14))  ( =  in14x3 in3x14))  ( =  in14x4 in4x14))  ( =  in14x5 in5x14))  ( =  in14x6 in6x14))  ( =  in14x7 in7x14))  ( =  in14x8 in8x14))  ( =  in14x9 in9x14))  ( =  in14x10 in10x14))  ( =  in14x11 in11x14))  ( =  in14x12 in12x14))  ( =  in14x13 in13x14))  ( =  in15x0 in0x15))  ( =  in15x1 in1x15))  ( =  in15x2 in2x15))  ( =  in15x3 in3x15))  ( =  in15x4 in4x15))  ( =  in15x5 in5x15))  ( =  in15x6 in6x15))  ( =  in15x7 in7x15))  ( =  in15x8 in8x15))  ( =  in15x9 in9x15))  ( =  in15x10 in10x15))  ( =  in15x11 in11x15))  ( =  in15x12 in12x15))  ( =  in15x13 in13x15))  ( =  in15x14 in14x15))  ( =  in16x0 in0x16))  ( =  in16x1 in1x16))  ( =  in16x2 in2x16))  ( =  in16x3 in3x16))  ( =  in16x4 in4x16))  ( =  in16x5 in5x16))  ( =  in16x6 in6x16))  ( =  in16x7 in7x16))  ( =  in16x8 in8x16))  ( =  in16x9 in9x16))  ( =  in16x10 in10x16))  ( =  in16x11 in11x16))  ( =  in16x12 in12x16))  ( =  in16x13 in13x16))  ( =  in16x14 in14x16))  ( =  in16x15 in15x16))  ( =  in17x0 in0x17))  ( =  in17x1 in1x17))  ( =  in17x2 in2x17))  ( =  in17x3 in3x17))  ( =  in17x4 in4x17))  ( =  in17x5 in5x17))  ( =  in17x6 in6x17))  ( =  in17x7 in7x17))  ( =  in17x8 in8x17))  ( =  in17x9 in9x17))  ( =  in17x10 in10x17))  ( =  in17x11 in11x17))  ( =  in17x12 in12x17))  ( =  in17x13 in13x17))  ( =  in17x14 in14x17))  ( =  in17x15 in15x17))  ( =  in17x16 in16x17))  ( =  in18x0 in0x18))  ( =  in18x1 in1x18))  ( =  in18x2 in2x18))  ( =  in18x3 in3x18))  ( =  in18x4 in4x18))  ( =  in18x5 in5x18))  ( =  in18x6 in6x18))  ( =  in18x7 in7x18))  ( =  in18x8 in8x18))  ( =  in18x9 in9x18))  ( =  in18x10 in10x18))  ( =  in18x11 in11x18))  ( =  in18x12 in12x18))  ( =  in18x13 in13x18))  ( =  in18x14 in14x18))  ( =  in18x15 in15x18))  ( =  in18x16 in16x18))  ( =  in18x17 in17x18))  ( =  in19x0 in0x19))  ( =  in19x1 in1x19))  ( =  in19x2 in2x19))  ( =  in19x3 in3x19))  ( =  in19x4 in4x19))  ( =  in19x5 in5x19))  ( =  in19x6 in6x19))  ( =  in19x7 in7x19))  ( =  in19x8 in8x19))  ( =  in19x9 in9x19))  ( =  in19x10 in10x19))  ( =  in19x11 in11x19))  ( =  in19x12 in12x19))  ( =  in19x13 in13x19))  ( =  in19x14 in14x19))  ( =  in19x15 in15x19))  ( =  in19x16 in16x19))  ( =  in19x17 in17x19))  ( =  in19x18 in18x19))  ( =  in20x0 in0x20))  ( =  in20x1 in1x20))  ( =  in20x2 in2x20))  ( =  in20x3 in3x20))  ( =  in20x4 in4x20))  ( =  in20x5 in5x20))  ( =  in20x6 in6x20))  ( =  in20x7 in7x20))  ( =  in20x8 in8x20))  ( =  in20x9 in9x20))  ( =  in20x10 in10x20))  ( =  in20x11 in11x20))  ( =  in20x12 in12x20))  ( =  in20x13 in13x20))  ( =  in20x14 in14x20))  ( =  in20x15 in15x20))  ( =  in20x16 in16x20))  ( =  in20x17 in17x20))  ( =  in20x18 in18x20))  ( =  in20x19 in19x20))  ( =  in21x0 in0x21))  ( =  in21x1 in1x21))  ( =  in21x2 in2x21))  ( =  in21x3 in3x21))  ( =  in21x4 in4x21))  ( =  in21x5 in5x21))  ( =  in21x6 in6x21))  ( =  in21x7 in7x21))  ( =  in21x8 in8x21))  ( =  in21x9 in9x21))  ( =  in21x10 in10x21))  ( =  in21x11 in11x21))  ( =  in21x12 in12x21))  ( =  in21x13 in13x21))  ( =  in21x14 in14x21))  ( =  in21x15 in15x21))  ( =  in21x16 in16x21))  ( =  in21x17 in17x21))  ( =  in21x18 in18x21))  ( =  in21x19 in19x21))  ( =  in21x20 in20x21))  ( =  in22x0 in0x22))  ( =  in22x1 in1x22))  ( =  in22x2 in2x22))  ( =  in22x3 in3x22))  ( =  in22x4 in4x22))  ( =  in22x5 in5x22))  ( =  in22x6 in6x22))  ( =  in22x7 in7x22))  ( =  in22x8 in8x22))  ( =  in22x9 in9x22))  ( =  in22x10 in10x22))  ( =  in22x11 in11x22))  ( =  in22x12 in12x22))  ( =  in22x13 in13x22))  ( =  in22x14 in14x22))  ( =  in22x15 in15x22))  ( =  in22x16 in16x22))  ( =  in22x17 in17x22))  ( =  in22x18 in18x22))  ( =  in22x19 in19x22))  ( =  in22x20 in20x22))  ( =  in22x21 in21x22))  ( =  in23x0 in0x23))  ( =  in23x1 in1x23))  ( =  in23x2 in2x23))  ( =  in23x3 in3x23))  ( =  in23x4 in4x23))  ( =  in23x5 in5x23))  ( =  in23x6 in6x23))  ( =  in23x7 in7x23))  ( =  in23x8 in8x23))  ( =  in23x9 in9x23))  ( =  in23x10 in10x23))  ( =  in23x11 in11x23))  ( =  in23x12 in12x23))  ( =  in23x13 in13x23))  ( =  in23x14 in14x23))  ( =  in23x15 in15x23))  ( =  in23x16 in16x23))  ( =  in23x17 in17x23))  ( =  in23x18 in18x23))  ( =  in23x19 in19x23))  ( =  in23x20 in20x23))  ( =  in23x21 in21x23))  ( =  in23x22 in22x23))  ( =  in24x0 in0x24))  ( =  in24x1 in1x24))  ( =  in24x2 in2x24))  ( =  in24x3 in3x24))  ( =  in24x4 in4x24))  ( =  in24x5 in5x24))  ( =  in24x6 in6x24))  ( =  in24x7 in7x24))  ( =  in24x8 in8x24))  ( =  in24x9 in9x24))  ( =  in24x10 in10x24))  ( =  in24x11 in11x24))  ( =  in24x12 in12x24))  ( =  in24x13 in13x24))  ( =  in24x14 in14x24))  ( =  in24x15 in15x24))  ( =  in24x16 in16x24))  ( =  in24x17 in17x24))  ( =  in24x18 in18x24))  ( =  in24x19 in19x24))  ( =  in24x20 in20x24))  ( =  in24x21 in21x24))  ( =  in24x22 in22x24))  ( =  in24x23 in23x24))  ( =  in25x0 in0x25))  ( =  in25x1 in1x25))  ( =  in25x2 in2x25))  ( =  in25x3 in3x25))  ( =  in25x4 in4x25))  ( =  in25x5 in5x25))  ( =  in25x6 in6x25))  ( =  in25x7 in7x25))  ( =  in25x8 in8x25))  ( =  in25x9 in9x25))  ( =  in25x10 in10x25))  ( =  in25x11 in11x25))  ( =  in25x12 in12x25))  ( =  in25x13 in13x25))  ( =  in25x14 in14x25))  ( =  in25x15 in15x25))  ( =  in25x16 in16x25))  ( =  in25x17 in17x25))  ( =  in25x18 in18x25))  ( =  in25x19 in19x25))  ( =  in25x20 in20x25))  ( =  in25x21 in21x25))  ( =  in25x22 in22x25))  ( =  in25x23 in23x25))  ( =  in25x24 in24x25)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4) ( = in5x0 in0x5) ( = in5x1 in1x5) ( = in5x2 in2x5) ( = in5x3 in3x5) ( = in5x4 in4x5) ( = in6x0 in0x6) ( = in6x1 in1x6) ( = in6x2 in2x6) ( = in6x3 in3x6) ( = in6x4 in4x6) ( = in6x5 in5x6) ( = in7x0 in0x7) ( = in7x1 in1x7) ( = in7x2 in2x7) ( = in7x3 in3x7) ( = in7x4 in4x7) ( = in7x5 in5x7) ( = in7x6 in6x7) ( = in8x0 in0x8) ( = in8x1 in1x8) ( = in8x2 in2x8) ( = in8x3 in3x8) ( = in8x4 in4x8) ( = in8x5 in5x8) ( = in8x6 in6x8) ( = in8x7 in7x8) ( = in9x0 in0x9) ( = in9x1 in1x9) ( = in9x2 in2x9) ( = in9x3 in3x9) ( = in9x4 in4x9) ( = in9x5 in5x9) ( = in9x6 in6x9) ( = in9x7 in7x9) ( = in9x8 in8x9) ( = in10x0 in0x10) ( = in10x1 in1x10) ( = in10x2 in2x10) ( = in10x3 in3x10) ( = in10x4 in4x10) ( = in10x5 in5x10) ( = in10x6 in6x10) ( = in10x7 in7x10) ( = in10x8 in8x10) ( = in10x9 in9x10) ( = in11x0 in0x11) ( = in11x1 in1x11) ( = in11x2 in2x11) ( = in11x3 in3x11) ( = in11x4 in4x11) ( = in11x5 in5x11) ( = in11x6 in6x11) ( = in11x7 in7x11) ( = in11x8 in8x11) ( = in11x9 in9x11) ( = in11x10 in10x11) ( = in12x0 in0x12) ( = in12x1 in1x12) ( = in12x2 in2x12) ( = in12x3 in3x12) ( = in12x4 in4x12) ( = in12x5 in5x12) ( = in12x6 in6x12) ( = in12x7 in7x12) ( = in12x8 in8x12) ( = in12x9 in9x12) ( = in12x10 in10x12) ( = in12x11 in11x12) ( = in13x0 in0x13) ( = in13x1 in1x13) ( = in13x2 in2x13) ( = in13x3 in3x13) ( = in13x4 in4x13) ( = in13x5 in5x13) ( = in13x6 in6x13) ( = in13x7 in7x13) ( = in13x8 in8x13) ( = in13x9 in9x13) ( = in13x10 in10x13) ( = in13x11 in11x13) ( = in13x12 in12x13) ( = in14x0 in0x14) ( = in14x1 in1x14) ( = in14x2 in2x14) ( = in14x3 in3x14) ( = in14x4 in4x14) ( = in14x5 in5x14) ( = in14x6 in6x14) ( = in14x7 in7x14) ( = in14x8 in8x14) ( = in14x9 in9x14) ( = in14x10 in10x14) ( = in14x11 in11x14) ( = in14x12 in12x14) ( = in14x13 in13x14) ( = in15x0 in0x15) ( = in15x1 in1x15) ( = in15x2 in2x15) ( = in15x3 in3x15) ( = in15x4 in4x15) ( = in15x5 in5x15) ( = in15x6 in6x15) ( = in15x7 in7x15) ( = in15x8 in8x15) ( = in15x9 in9x15) ( = in15x10 in10x15) ( = in15x11 in11x15) ( = in15x12 in12x15) ( = in15x13 in13x15) ( = in15x14 in14x15) ( = in16x0 in0x16) ( = in16x1 in1x16) ( = in16x2 in2x16) ( = in16x3 in3x16) ( = in16x4 in4x16) ( = in16x5 in5x16) ( = in16x6 in6x16) ( = in16x7 in7x16) ( = in16x8 in8x16) ( = in16x9 in9x16) ( = in16x10 in10x16) ( = in16x11 in11x16) ( = in16x12 in12x16) ( = in16x13 in13x16) ( = in16x14 in14x16) ( = in16x15 in15x16) ( = in17x0 in0x17) ( = in17x1 in1x17) ( = in17x2 in2x17) ( = in17x3 in3x17) ( = in17x4 in4x17) ( = in17x5 in5x17) ( = in17x6 in6x17) ( = in17x7 in7x17) ( = in17x8 in8x17) ( = in17x9 in9x17) ( = in17x10 in10x17) ( = in17x11 in11x17) ( = in17x12 in12x17) ( = in17x13 in13x17) ( = in17x14 in14x17) ( = in17x15 in15x17) ( = in17x16 in16x17) ( = in18x0 in0x18) ( = in18x1 in1x18) ( = in18x2 in2x18) ( = in18x3 in3x18) ( = in18x4 in4x18) ( = in18x5 in5x18) ( = in18x6 in6x18) ( = in18x7 in7x18) ( = in18x8 in8x18) ( = in18x9 in9x18) ( = in18x10 in10x18) ( = in18x11 in11x18) ( = in18x12 in12x18) ( = in18x13 in13x18) ( = in18x14 in14x18) ( = in18x15 in15x18) ( = in18x16 in16x18) ( = in18x17 in17x18) ( = in19x0 in0x19) ( = in19x1 in1x19) ( = in19x2 in2x19) ( = in19x3 in3x19) ( = in19x4 in4x19) ( = in19x5 in5x19) ( = in19x6 in6x19) ( = in19x7 in7x19) ( = in19x8 in8x19) ( = in19x9 in9x19) ( = in19x10 in10x19) ( = in19x11 in11x19) ( = in19x12 in12x19) ( = in19x13 in13x19) ( = in19x14 in14x19) ( = in19x15 in15x19) ( = in19x16 in16x19) ( = in19x17 in17x19) ( = in19x18 in18x19) ( = in20x0 in0x20) ( = in20x1 in1x20) ( = in20x2 in2x20) ( = in20x3 in3x20) ( = in20x4 in4x20) ( = in20x5 in5x20) ( = in20x6 in6x20) ( = in20x7 in7x20) ( = in20x8 in8x20) ( = in20x9 in9x20) ( = in20x10 in10x20) ( = in20x11 in11x20) ( = in20x12 in12x20) ( = in20x13 in13x20) ( = in20x14 in14x20) ( = in20x15 in15x20) ( = in20x16 in16x20) ( = in20x17 in17x20) ( = in20x18 in18x20) ( = in20x19 in19x20) ( = in21x0 in0x21) ( = in21x1 in1x21) ( = in21x2 in2x21) ( = in21x3 in3x21) ( = in21x4 in4x21) ( = in21x5 in5x21) ( = in21x6 in6x21) ( = in21x7 in7x21) ( = in21x8 in8x21) ( = in21x9 in9x21) ( = in21x10 in10x21) ( = in21x11 in11x21) ( = in21x12 in12x21) ( = in21x13 in13x21) ( = in21x14 in14x21) ( = in21x15 in15x21) ( = in21x16 in16x21) ( = in21x17 in17x21) ( = in21x18 in18x21) ( = in21x19 in19x21) ( = in21x20 in20x21) ( = in22x0 in0x22) ( = in22x1 in1x22) ( = in22x2 in2x22) ( = in22x3 in3x22) ( = in22x4 in4x22) ( = in22x5 in5x22) ( = in22x6 in6x22) ( = in22x7 in7x22) ( = in22x8 in8x22) ( = in22x9 in9x22) ( = in22x10 in10x22) ( = in22x11 in11x22) ( = in22x12 in12x22) ( = in22x13 in13x22) ( = in22x14 in14x22) ( = in22x15 in15x22) ( = in22x16 in16x22) ( = in22x17 in17x22) ( = in22x18 in18x22) ( = in22x19 in19x22) ( = in22x20 in20x22) ( = in22x21 in21x22) ( = in23x0 in0x23) ( = in23x1 in1x23) ( = in23x2 in2x23) ( = in23x3 in3x23) ( = in23x4 in4x23) ( = in23x5 in5x23) ( = in23x6 in6x23) ( = in23x7 in7x23) ( = in23x8 in8x23) ( = in23x9 in9x23) ( = in23x10 in10x23) ( = in23x11 in11x23) ( = in23x12 in12x23) ( = in23x13 in13x23) ( = in23x14 in14x23) ( = in23x15 in15x23) ( = in23x16 in16x23) ( = in23x17 in17x23) ( = in23x18 in18x23) ( = in23x19 in19x23) ( = in23x20 in20x23) ( = in23x21 in21x23) ( = in23x22 in22x23) ( = in24x0 in0x24) ( = in24x1 in1x24) ( = in24x2 in2x24) ( = in24x3 in3x24) ( = in24x4 in4x24) ( = in24x5 in5x24) ( = in24x6 in6x24) ( = in24x7 in7x24) ( = in24x8 in8x24) ( = in24x9 in9x24) ( = in24x10 in10x24) ( = in24x11 in11x24) ( = in24x12 in12x24) ( = in24x13 in13x24) ( = in24x14 in14x24) ( = in24x15 in15x24) ( = in24x16 in16x24) ( = in24x17 in17x24) ( = in24x18 in18x24) ( = in24x19 in19x24) ( = in24x20 in20x24) ( = in24x21 in21x24) ( = in24x22 in22x24) ( = in24x23 in23x24) ( = in25x0 in0x25) ( = in25x1 in1x25) ( = in25x2 in2x25) ( = in25x3 in3x25) ( = in25x4 in4x25) ( = in25x5 in5x25) ( = in25x6 in6x25) ( = in25x7 in7x25) ( = in25x8 in8x25) ( = in25x9 in9x25) ( = in25x10 in10x25) ( = in25x11 in11x25) ( = in25x12 in12x25) ( = in25x13 in13x25) ( = in25x14 in14x25) ( = in25x15 in15x25) ( = in25x16 in16x25) ( = in25x17 in17x25) ( = in25x18 in18x25) ( = in25x19 in19x25) ( = in25x20 in20x25) ( = in25x21 in21x25) ( = in25x22 in22x25) ( = in25x23 in23x25) ( = in25x24 in24x25)))",
        "equivalent": true
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in7x8 Int)",
            "(declare-const in7x9 Int)",
            "(declare-const in7x6 Int)",
            "(declare-const in7x0 Int)",
            "(declare-const in7x1 Int)",
            "(declare-const in7x4 Int)",
            "(declare-const in7x5 Int)",
            "(declare-const in7x2 Int)",
            "(declare-const in7x3 Int)",
            "(declare-const in12x26 Int)",
            "(declare-const in12x24 Int)",
            "(declare-const in12x25 Int)",
            "(declare-const in12x22 Int)",
            "(declare-const in12x23 Int)",
            "(declare-const in12x20 Int)",
            "(declare-const in12x21 Int)",
            "(declare-const in1x18 Int)",
            "(declare-const in1x17 Int)",
            "(declare-const in1x16 Int)",
            "(declare-const in1x15 Int)",
            "(declare-const in1x19 Int)",
            "(declare-const in23x24 Int)",
            "(declare-const in23x25 Int)",
            "(declare-const in23x26 Int)",
            "(declare-const in23x20 Int)",
            "(declare-const in23x21 Int)",
            "(declare-const in23x22 Int)",
            "(declare-const in12x19 Int)",
            "(declare-const in12x17 Int)",
            "(declare-const in12x18 Int)",
            "(declare-const in12x15 Int)",
            "(declare-const in1x10 Int)",
            "(declare-const in12x16 Int)",
            "(declare-const in12x13 Int)",
            "(declare-const in12x14 Int)",
            "(declare-const in1x14 Int)",
            "(declare-const in12x11 Int)",
            "(declare-const in1x13 Int)",
            "(declare-const in1x12 Int)",
            "(declare-const in12x10 Int)",
            "(declare-const in1x11 Int)",
            "(declare-const in0x16 Int)",
            "(declare-const in0x17 Int)",
            "(declare-const in0x14 Int)",
            "(declare-const in0x15 Int)",
            "(declare-const in23x17 Int)",
            "(declare-const in23x18 Int)",
            "(declare-const in23x19 Int)",
            "(declare-const in0x18 Int)",
            "(declare-const in0x19 Int)",
            "(declare-const in23x13 Int)",
            "(declare-const in8x7 Int)",
            "(declare-const in23x14 Int)",
            "(declare-const in23x15 Int)",
            "(declare-const in8x5 Int)",
            "(declare-const in23x16 Int)",
            "(declare-const in8x6 Int)",
            "(declare-const in23x10 Int)",
            "(declare-const in23x11 Int)",
            "(declare-const in8x9 Int)",
            "(declare-const in23x12 Int)",
            "(declare-const in8x0 Int)",
            "(declare-const in8x3 Int)",
            "(declare-const in8x4 Int)",
            "(declare-const in8x1 Int)",
            "(declare-const in8x2 Int)",
            "(declare-const in0x12 Int)",
            "(declare-const in0x13 Int)",
            "(declare-const in0x10 Int)",
            "(declare-const in0x11 Int)",
            "(declare-const in0x25 Int)",
            "(declare-const in0x26 Int)",
            "(declare-const in11x24 Int)",
            "(declare-const in11x23 Int)",
            "(declare-const in0x20 Int)",
            "(declare-const in11x26 Int)",
            "(declare-const in11x25 Int)",
            "(declare-const in0x23 Int)",
            "(declare-const in11x20 Int)",
            "(declare-const in0x24 Int)",
            "(declare-const in11x22 Int)",
            "(declare-const in0x21 Int)",
            "(declare-const in0x22 Int)",
            "(declare-const in11x21 Int)",
            "(declare-const in2x19 Int)",
            "(declare-const in2x18 Int)",
            "(declare-const in2x17 Int)",
            "(declare-const in2x16 Int)",
            "(declare-const in22x23 Int)",
            "(declare-const in9x6 Int)",
            "(declare-const in22x24 Int)",
            "(declare-const in9x7 Int)",
            "(declare-const in22x25 Int)",
            "(declare-const in9x4 Int)",
            "(declare-const in22x26 Int)",
            "(declare-const in9x5 Int)",
            "(declare-const in22x20 Int)",
            "(declare-const in22x21 Int)",
            "(declare-const in9x8 Int)",
            "(declare-const in18x2 Int)",
            "(declare-const in11x17 Int)",
            "(declare-const in9x2 Int)",
            "(declare-const in18x3 Int)",
            "(declare-const in11x16 Int)",
            "(declare-const in9x3 Int)",
            "(declare-const in11x19 Int)",
            "(declare-const in18x0 Int)",
            "(declare-const in9x0 Int)",
            "(declare-const in11x18 Int)",
            "(declare-const in18x1 Int)",
            "(declare-const in9x1 Int)",
            "(declare-const in18x6 Int)",
            "(declare-const in11x13 Int)",
            "(declare-const in2x11 Int)",
            "(declare-const in18x7 Int)",
            "(declare-const in11x12 Int)",
            "(declare-const in2x10 Int)",
            "(declare-const in18x4 Int)",
            "(declare-const in11x15 Int)",
            "(declare-const in18x5 Int)",
            "(declare-const in11x14 Int)",
            "(declare-const in2x15 Int)",
            "(declare-const in2x14 Int)",
            "(declare-const in18x8 Int)",
            "(declare-const in2x13 Int)",
            "(declare-const in18x9 Int)",
            "(declare-const in2x12 Int)",
            "(declare-const in11x10 Int)",
            "(declare-const in22x16 Int)",
            "(declare-const in22x17 Int)",
            "(declare-const in22x18 Int)",
            "(declare-const in22x19 Int)",
            "(declare-const in22x12 Int)",
            "(declare-const in22x13 Int)",
            "(declare-const in22x14 Int)",
            "(declare-const in22x15 Int)",
            "(declare-const in22x10 Int)",
            "(declare-const in22x11 Int)",
            "(declare-const in2x22 Int)",
            "(declare-const in2x21 Int)",
            "(declare-const in2x20 Int)",
            "(declare-const in2x26 Int)",
            "(declare-const in2x25 Int)",
            "(declare-const in2x24 Int)",
            "(declare-const in2x23 Int)",
            "(declare-const in1x26 Int)",
            "(declare-const in19x1 Int)",
            "(declare-const in10x26 Int)",
            "(declare-const in19x2 Int)",
            "(declare-const in19x0 Int)",
            "(declare-const in10x23 Int)",
            "(declare-const in1x21 Int)",
            "(declare-const in19x5 Int)",
            "(declare-const in10x22 Int)",
            "(declare-const in1x20 Int)",
            "(declare-const in19x6 Int)",
            "(declare-const in10x25 Int)",
            "(declare-const in19x3 Int)",
            "(declare-const in10x24 Int)",
            "(declare-const in19x4 Int)",
            "(declare-const in1x25 Int)",
            "(declare-const in19x9 Int)",
            "(declare-const in1x24 Int)",
            "(declare-const in1x23 Int)",
            "(declare-const in10x21 Int)",
            "(declare-const in19x7 Int)",
            "(declare-const in1x22 Int)",
            "(declare-const in10x20 Int)",
            "(declare-const in19x8 Int)",
            "(declare-const in21x26 Int)",
            "(declare-const in21x22 Int)",
            "(declare-const in21x23 Int)",
            "(declare-const in21x24 Int)",
            "(declare-const in21x25 Int)",
            "(declare-const in21x20 Int)",
            "(declare-const in10x19 Int)",
            "(declare-const in10x16 Int)",
            "(declare-const in10x15 Int)",
            "(declare-const in10x18 Int)",
            "(declare-const in10x17 Int)",
            "(declare-const in10x12 Int)",
            "(declare-const in10x11 Int)",
            "(declare-const in10x14 Int)",
            "(declare-const in10x13 Int)",
            "(declare-const in15x11 Int)",
            "(declare-const in15x10 Int)",
            "(declare-const in26x25 Int)",
            "(declare-const in26x23 Int)",
            "(declare-const in26x24 Int)",
            "(declare-const in26x21 Int)",
            "(declare-const in26x22 Int)",
            "(declare-const in26x20 Int)",
            "(declare-const in15x19 Int)",
            "(declare-const in15x18 Int)",
            "(declare-const in15x17 Int)",
            "(declare-const in15x16 Int)",
            "(declare-const in15x14 Int)",
            "(declare-const in15x13 Int)",
            "(declare-const in15x12 Int)",
            "(declare-const in26x18 Int)",
            "(declare-const in26x19 Int)",
            "(declare-const in26x16 Int)",
            "(declare-const in26x17 Int)",
            "(declare-const in26x14 Int)",
            "(declare-const in26x15 Int)",
            "(declare-const in26x12 Int)",
            "(declare-const in26x13 Int)",
            "(declare-const in26x10 Int)",
            "(declare-const in9x13 Int)",
            "(declare-const in26x11 Int)",
            "(declare-const in9x14 Int)",
            "(declare-const in9x11 Int)",
            "(declare-const in9x12 Int)",
            "(declare-const in9x10 Int)",
            "(declare-const in9x19 Int)",
            "(declare-const in9x17 Int)",
            "(declare-const in9x18 Int)",
            "(declare-const in9x15 Int)",
            "(declare-const in9x16 Int)",
            "(declare-const in14x21 Int)",
            "(declare-const in14x20 Int)",
            "(declare-const in20x0 Int)",
            "(declare-const in20x3 Int)",
            "(declare-const in20x4 Int)",
            "(declare-const in20x1 Int)",
            "(declare-const in20x2 Int)",
            "(declare-const in8x12 Int)",
            "(declare-const in8x13 Int)",
            "(declare-const in8x10 Int)",
            "(declare-const in8x11 Int)",
            "(declare-const in8x18 Int)",
            "(declare-const in14x26 Int)",
            "(declare-const in8x19 Int)",
            "(declare-const in14x25 Int)",
            "(declare-const in8x16 Int)",
            "(declare-const in14x24 Int)",
            "(declare-const in8x17 Int)",
            "(declare-const in14x23 Int)",
            "(declare-const in8x14 Int)",
            "(declare-const in14x22 Int)",
            "(declare-const in8x15 Int)",
            "(declare-const in14x10 Int)",
            "(declare-const in25x26 Int)",
            "(declare-const in25x23 Int)",
            "(declare-const in25x22 Int)",
            "(declare-const in25x24 Int)",
            "(declare-const in8x23 Int)",
            "(declare-const in20x7 Int)",
            "(declare-const in8x24 Int)",
            "(declare-const in20x8 Int)",
            "(declare-const in25x21 Int)",
            "(declare-const in8x21 Int)",
            "(declare-const in20x5 Int)",
            "(declare-const in25x20 Int)",
            "(declare-const in8x22 Int)",
            "(declare-const in20x6 Int)",
            "(declare-const in8x20 Int)",
            "(declare-const in20x9 Int)",
            "(declare-const in14x19 Int)",
            "(declare-const in14x18 Int)",
            "(declare-const in14x17 Int)",
            "(declare-const in14x16 Int)",
            "(declare-const in14x15 Int)",
            "(declare-const in14x13 Int)",
            "(declare-const in8x25 Int)",
            "(declare-const in14x12 Int)",
            "(declare-const in8x26 Int)",
            "(declare-const in14x11 Int)",
            "(declare-const in25x19 Int)",
            "(declare-const in25x16 Int)",
            "(declare-const in25x15 Int)",
            "(declare-const in25x18 Int)",
            "(declare-const in25x17 Int)",
            "(declare-const in25x12 Int)",
            "(declare-const in25x11 Int)",
            "(declare-const in25x14 Int)",
            "(declare-const in25x13 Int)",
            "(declare-const in25x10 Int)",
            "(declare-const in13x20 Int)",
            "(declare-const in13x25 Int)",
            "(declare-const in13x26 Int)",
            "(declare-const in13x23 Int)",
            "(declare-const in13x24 Int)",
            "(declare-const in13x21 Int)",
            "(declare-const in13x22 Int)",
            "(declare-const in24x26 Int)",
            "(declare-const in24x25 Int)",
            "(declare-const in24x22 Int)",
            "(declare-const in24x21 Int)",
            "(declare-const in24x23 Int)",
            "(declare-const in9x24 Int)",
            "(declare-const in9x25 Int)",
            "(declare-const in24x20 Int)",
            "(declare-const in9x22 Int)",
            "(declare-const in9x23 Int)",
            "(declare-const in9x20 Int)",
            "(declare-const in9x21 Int)",
            "(declare-const in13x18 Int)",
            "(declare-const in13x19 Int)",
            "(declare-const in13x16 Int)",
            "(declare-const in13x17 Int)",
            "(declare-const in13x14 Int)",
            "(declare-const in13x15 Int)",
            "(declare-const in13x12 Int)",
            "(declare-const in9x26 Int)",
            "(declare-const in13x10 Int)",
            "(declare-const in13x11 Int)",
            "(declare-const in24x19 Int)",
            "(declare-const in24x18 Int)",
            "(declare-const in24x15 Int)",
            "(declare-const in24x14 Int)",
            "(declare-const in24x17 Int)",
            "(declare-const in24x16 Int)",
            "(declare-const in24x11 Int)",
            "(declare-const in24x10 Int)",
            "(declare-const in24x13 Int)",
            "(declare-const in24x12 Int)",
            "(declare-const in23x0 Int)",
            "(declare-const in23x1 Int)",
            "(declare-const in12x4 Int)",
            "(declare-const in12x5 Int)",
            "(declare-const in12x2 Int)",
            "(declare-const in6x11 Int)",
            "(declare-const in12x3 Int)",
            "(declare-const in6x10 Int)",
            "(declare-const in12x8 Int)",
            "(declare-const in12x9 Int)",
            "(declare-const in12x6 Int)",
            "(declare-const in12x7 Int)",
            "(declare-const in6x17 Int)",
            "(declare-const in6x16 Int)",
            "(declare-const in6x19 Int)",
            "(declare-const in6x18 Int)",
            "(declare-const in6x13 Int)",
            "(declare-const in6x12 Int)",
            "(declare-const in6x15 Int)",
            "(declare-const in6x14 Int)",
            "(declare-const in17x25 Int)",
            "(declare-const in17x26 Int)",
            "(declare-const in11x0 Int)",
            "(declare-const in11x2 Int)",
            "(declare-const in11x1 Int)",
            "(declare-const in23x4 Int)",
            "(declare-const in6x20 Int)",
            "(declare-const in23x5 Int)",
            "(declare-const in23x2 Int)",
            "(declare-const in6x22 Int)",
            "(declare-const in23x3 Int)",
            "(declare-const in6x21 Int)",
            "(declare-const in23x8 Int)",
            "(declare-const in23x9 Int)",
            "(declare-const in23x6 Int)",
            "(declare-const in23x7 Int)",
            "(declare-const in17x20 Int)",
            "(declare-const in6x24 Int)",
            "(declare-const in17x21 Int)",
            "(declare-const in6x23 Int)",
            "(declare-const in17x22 Int)",
            "(declare-const in6x26 Int)",
            "(declare-const in17x23 Int)",
            "(declare-const in6x25 Int)",
            "(declare-const in17x24 Int)",
            "(declare-const in17x14 Int)",
            "(declare-const in17x15 Int)",
            "(declare-const in17x16 Int)",
            "(declare-const in17x18 Int)",
            "(declare-const in17x19 Int)",
            "(declare-const in24x0 Int)",
            "(declare-const in13x3 Int)",
            "(declare-const in0x7 Int)",
            "(declare-const in13x4 Int)",
            "(declare-const in0x8 Int)",
            "(declare-const in5x20 Int)",
            "(declare-const in13x1 Int)",
            "(declare-const in0x5 Int)",
            "(declare-const in5x21 Int)",
            "(declare-const in13x2 Int)",
            "(declare-const in0x6 Int)",
            "(declare-const in13x7 Int)",
            "(declare-const in13x8 Int)",
            "(declare-const in13x5 Int)",
            "(declare-const in0x9 Int)",
            "(declare-const in13x6 Int)",
            "(declare-const in5x26 Int)",
            "(declare-const in13x9 Int)",
            "(declare-const in5x22 Int)",
            "(declare-const in17x10 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in5x23 Int)",
            "(declare-const in17x11 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in5x24 Int)",
            "(declare-const in17x12 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in5x25 Int)",
            "(declare-const in17x13 Int)",
            "(declare-const in0x2 Int)",
            "(declare-const in12x0 Int)",
            "(declare-const in12x1 Int)",
            "(declare-const in24x3 Int)",
            "(declare-const in24x4 Int)",
            "(declare-const in24x1 Int)",
            "(declare-const in24x2 Int)",
            "(declare-const in24x7 Int)",
            "(declare-const in24x8 Int)",
            "(declare-const in24x5 Int)",
            "(declare-const in24x6 Int)",
            "(declare-const in24x9 Int)",
            "(declare-const in16x24 Int)",
            "(declare-const in16x25 Int)",
            "(declare-const in16x26 Int)",
            "(declare-const in21x2 Int)",
            "(declare-const in21x3 Int)",
            "(declare-const in21x0 Int)",
            "(declare-const in21x1 Int)",
            "(declare-const in7x21 Int)",
            "(declare-const in10x5 Int)",
            "(declare-const in1x6 Int)",
            "(declare-const in7x20 Int)",
            "(declare-const in10x4 Int)",
            "(declare-const in1x7 Int)",
            "(declare-const in7x23 Int)",
            "(declare-const in10x7 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in7x22 Int)",
            "(declare-const in10x6 Int)",
            "(declare-const in1x5 Int)",
            "(declare-const in10x9 Int)",
            "(declare-const in10x8 Int)",
            "(declare-const in1x8 Int)",
            "(declare-const in1x9 Int)",
            "(declare-const in7x25 Int)",
            "(declare-const in16x20 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in7x24 Int)",
            "(declare-const in16x21 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in16x22 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in7x26 Int)",
            "(declare-const in16x23 Int)",
            "(declare-const in16x13 Int)",
            "(declare-const in16x14 Int)",
            "(declare-const in16x15 Int)",
            "(declare-const in16x17 Int)",
            "(declare-const in16x18 Int)",
            "(declare-const in16x19 Int)",
            "(declare-const in21x6 Int)",
            "(declare-const in21x7 Int)",
            "(declare-const in21x4 Int)",
            "(declare-const in21x5 Int)",
            "(declare-const in21x8 Int)",
            "(declare-const in21x9 Int)",
            "(declare-const in16x10 Int)",
            "(declare-const in16x11 Int)",
            "(declare-const in16x12 Int)",
            "(declare-const in22x1 Int)",
            "(declare-const in22x2 Int)",
            "(declare-const in22x0 Int)",
            "(declare-const in11x4 Int)",
            "(declare-const in2x5 Int)",
            "(declare-const in11x3 Int)",
            "(declare-const in2x6 Int)",
            "(declare-const in11x6 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in11x5 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in11x8 Int)",
            "(declare-const in2x9 Int)",
            "(declare-const in11x7 Int)",
            "(declare-const in2x7 Int)",
            "(declare-const in11x9 Int)",
            "(declare-const in2x8 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in15x22 Int)",
            "(declare-const in15x21 Int)",
            "(declare-const in15x20 Int)",
            "(declare-const in10x1 Int)",
            "(declare-const in10x0 Int)",
            "(declare-const in10x3 Int)",
            "(declare-const in10x2 Int)",
            "(declare-const in22x5 Int)",
            "(declare-const in7x10 Int)",
            "(declare-const in22x6 Int)",
            "(declare-const in22x3 Int)",
            "(declare-const in7x12 Int)",
            "(declare-const in22x4 Int)",
            "(declare-const in7x11 Int)",
            "(declare-const in22x9 Int)",
            "(declare-const in22x7 Int)",
            "(declare-const in22x8 Int)",
            "(declare-const in7x18 Int)",
            "(declare-const in7x17 Int)",
            "(declare-const in7x19 Int)",
            "(declare-const in15x26 Int)",
            "(declare-const in7x14 Int)",
            "(declare-const in15x25 Int)",
            "(declare-const in7x13 Int)",
            "(declare-const in15x24 Int)",
            "(declare-const in7x16 Int)",
            "(declare-const in15x23 Int)",
            "(declare-const in7x15 Int)",
            "(declare-const in21x19 Int)",
            "(declare-const in21x15 Int)",
            "(declare-const in21x16 Int)",
            "(declare-const in21x17 Int)",
            "(declare-const in21x18 Int)",
            "(declare-const in21x11 Int)",
            "(declare-const in21x12 Int)",
            "(declare-const in21x13 Int)",
            "(declare-const in21x14 Int)",
            "(declare-const in21x10 Int)",
            "(declare-const in16x0 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in16x1 Int)",
            "(declare-const in3x5 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in16x4 Int)",
            "(declare-const in3x8 Int)",
            "(declare-const in16x5 Int)",
            "(declare-const in3x9 Int)",
            "(declare-const in16x2 Int)",
            "(declare-const in3x6 Int)",
            "(declare-const in16x3 Int)",
            "(declare-const in3x7 Int)",
            "(declare-const in3x23 Int)",
            "(declare-const in16x8 Int)",
            "(declare-const in3x22 Int)",
            "(declare-const in16x9 Int)",
            "(declare-const in3x21 Int)",
            "(declare-const in16x6 Int)",
            "(declare-const in3x20 Int)",
            "(declare-const in16x7 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in3x26 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in3x25 Int)",
            "(declare-const in3x24 Int)",
            "(declare-const in20x26 Int)",
            "(declare-const in20x25 Int)",
            "(declare-const in4x9 Int)",
            "(declare-const in20x24 Int)",
            "(declare-const in20x23 Int)",
            "(declare-const in20x22 Int)",
            "(declare-const in20x21 Int)",
            "(declare-const in4x3 Int)",
            "(declare-const in17x0 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in17x3 Int)",
            "(declare-const in4x7 Int)",
            "(declare-const in17x4 Int)",
            "(declare-const in4x8 Int)",
            "(declare-const in17x1 Int)",
            "(declare-const in4x5 Int)",
            "(declare-const in17x2 Int)",
            "(declare-const in4x6 Int)",
            "(declare-const in17x7 Int)",
            "(declare-const in17x8 Int)",
            "(declare-const in17x5 Int)",
            "(declare-const in17x6 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in17x9 Int)",
            "(declare-const in20x17 Int)",
            "(declare-const in20x16 Int)",
            "(declare-const in3x19 Int)",
            "(declare-const in20x15 Int)",
            "(declare-const in3x18 Int)",
            "(declare-const in20x14 Int)",
            "(declare-const in3x17 Int)",
            "(declare-const in20x19 Int)",
            "(declare-const in20x18 Int)",
            "(declare-const in20x13 Int)",
            "(declare-const in20x12 Int)",
            "(declare-const in20x11 Int)",
            "(declare-const in20x10 Int)",
            "(declare-const in19x20 Int)",
            "(declare-const in3x12 Int)",
            "(declare-const in3x11 Int)",
            "(declare-const in19x22 Int)",
            "(declare-const in3x10 Int)",
            "(declare-const in19x21 Int)",
            "(declare-const in19x24 Int)",
            "(declare-const in3x16 Int)",
            "(declare-const in19x23 Int)",
            "(declare-const in3x15 Int)",
            "(declare-const in19x26 Int)",
            "(declare-const in3x14 Int)",
            "(declare-const in19x25 Int)",
            "(declare-const in3x13 Int)",
            "(declare-const in19x17 Int)",
            "(declare-const in19x16 Int)",
            "(declare-const in19x18 Int)",
            "(declare-const in5x8 Int)",
            "(declare-const in5x9 Int)",
            "(declare-const in14x2 Int)",
            "(declare-const in5x2 Int)",
            "(declare-const in14x3 Int)",
            "(declare-const in5x3 Int)",
            "(declare-const in14x0 Int)",
            "(declare-const in5x0 Int)",
            "(declare-const in14x1 Int)",
            "(declare-const in5x1 Int)",
            "(declare-const in14x6 Int)",
            "(declare-const in5x6 Int)",
            "(declare-const in14x7 Int)",
            "(declare-const in5x7 Int)",
            "(declare-const in14x4 Int)",
            "(declare-const in5x4 Int)",
            "(declare-const in14x5 Int)",
            "(declare-const in19x11 Int)",
            "(declare-const in14x8 Int)",
            "(declare-const in19x10 Int)",
            "(declare-const in14x9 Int)",
            "(declare-const in19x13 Int)",
            "(declare-const in19x12 Int)",
            "(declare-const in19x15 Int)",
            "(declare-const in19x14 Int)",
            "(declare-const in5x19 Int)",
            "(declare-const in13x0 Int)",
            "(declare-const in25x2 Int)",
            "(declare-const in25x3 Int)",
            "(declare-const in25x0 Int)",
            "(declare-const in25x1 Int)",
            "(declare-const in5x10 Int)",
            "(declare-const in25x6 Int)",
            "(declare-const in25x7 Int)",
            "(declare-const in25x4 Int)",
            "(declare-const in25x5 Int)",
            "(declare-const in5x15 Int)",
            "(declare-const in5x16 Int)",
            "(declare-const in25x8 Int)",
            "(declare-const in5x17 Int)",
            "(declare-const in25x9 Int)",
            "(declare-const in5x18 Int)",
            "(declare-const in5x11 Int)",
            "(declare-const in5x12 Int)",
            "(declare-const in5x13 Int)",
            "(declare-const in5x14 Int)",
            "(declare-const in18x26 Int)",
            "(declare-const in4x18 Int)",
            "(declare-const in4x19 Int)",
            "(declare-const in6x9 Int)",
            "(declare-const in6x7 Int)",
            "(declare-const in6x8 Int)",
            "(declare-const in15x1 Int)",
            "(declare-const in6x1 Int)",
            "(declare-const in15x2 Int)",
            "(declare-const in6x2 Int)",
            "(declare-const in15x0 Int)",
            "(declare-const in6x0 Int)",
            "(declare-const in15x5 Int)",
            "(declare-const in6x5 Int)",
            "(declare-const in15x6 Int)",
            "(declare-const in15x3 Int)",
            "(declare-const in6x3 Int)",
            "(declare-const in15x4 Int)",
            "(declare-const in6x4 Int)",
            "(declare-const in15x9 Int)",
            "(declare-const in4x14 Int)",
            "(declare-const in4x15 Int)",
            "(declare-const in18x21 Int)",
            "(declare-const in4x16 Int)",
            "(declare-const in15x7 Int)",
            "(declare-const in18x20 Int)",
            "(declare-const in4x17 Int)",
            "(declare-const in15x8 Int)",
            "(declare-const in18x23 Int)",
            "(declare-const in4x10 Int)",
            "(declare-const in18x22 Int)",
            "(declare-const in4x11 Int)",
            "(declare-const in18x25 Int)",
            "(declare-const in4x12 Int)",
            "(declare-const in18x24 Int)",
            "(declare-const in4x13 Int)",
            "(declare-const in18x16 Int)",
            "(declare-const in18x15 Int)",
            "(declare-const in18x17 Int)",
            "(declare-const in18x19 Int)",
            "(declare-const in26x1 Int)",
            "(declare-const in26x2 Int)",
            "(declare-const in26x0 Int)",
            "(declare-const in4x20 Int)",
            "(declare-const in26x5 Int)",
            "(declare-const in26x6 Int)",
            "(declare-const in26x3 Int)",
            "(declare-const in26x4 Int)",
            "(declare-const in26x9 Int)",
            "(declare-const in4x25 Int)",
            "(declare-const in4x26 Int)",
            "(declare-const in26x7 Int)",
            "(declare-const in18x10 Int)",
            "(declare-const in26x8 Int)",
            "(declare-const in4x21 Int)",
            "(declare-const in18x12 Int)",
            "(declare-const in4x22 Int)",
            "(declare-const in18x11 Int)",
            "(declare-const in4x23 Int)",
            "(declare-const in18x14 Int)",
            "(declare-const in4x24 Int)",
            "(declare-const in18x13 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6))  ( =  in7x0 in0x7))  ( =  in7x1 in1x7))  ( =  in7x2 in2x7))  ( =  in7x3 in3x7))  ( =  in7x4 in4x7))  ( =  in7x5 in5x7))  ( =  in7x6 in6x7))  ( =  in8x0 in0x8))  ( =  in8x1 in1x8))  ( =  in8x2 in2x8))  ( =  in8x3 in3x8))  ( =  in8x4 in4x8))  ( =  in8x5 in5x8))  ( =  in8x6 in6x8))  ( =  in8x7 in7x8))  ( =  in9x0 in0x9))  ( =  in9x1 in1x9))  ( =  in9x2 in2x9))  ( =  in9x3 in3x9))  ( =  in9x4 in4x9))  ( =  in9x5 in5x9))  ( =  in9x6 in6x9))  ( =  in9x7 in7x9))  ( =  in9x8 in8x9))  ( =  in10x0 in0x10))  ( =  in10x1 in1x10))  ( =  in10x2 in2x10))  ( =  in10x3 in3x10))  ( =  in10x4 in4x10))  ( =  in10x5 in5x10))  ( =  in10x6 in6x10))  ( =  in10x7 in7x10))  ( =  in10x8 in8x10))  ( =  in10x9 in9x10))  ( =  in11x0 in0x11))  ( =  in11x1 in1x11))  ( =  in11x2 in2x11))  ( =  in11x3 in3x11))  ( =  in11x4 in4x11))  ( =  in11x5 in5x11))  ( =  in11x6 in6x11))  ( =  in11x7 in7x11))  ( =  in11x8 in8x11))  ( =  in11x9 in9x11))  ( =  in11x10 in10x11))  ( =  in12x0 in0x12))  ( =  in12x1 in1x12))  ( =  in12x2 in2x12))  ( =  in12x3 in3x12))  ( =  in12x4 in4x12))  ( =  in12x5 in5x12))  ( =  in12x6 in6x12))  ( =  in12x7 in7x12))  ( =  in12x8 in8x12))  ( =  in12x9 in9x12))  ( =  in12x10 in10x12))  ( =  in12x11 in11x12))  ( =  in13x0 in0x13))  ( =  in13x1 in1x13))  ( =  in13x2 in2x13))  ( =  in13x3 in3x13))  ( =  in13x4 in4x13))  ( =  in13x5 in5x13))  ( =  in13x6 in6x13))  ( =  in13x7 in7x13))  ( =  in13x8 in8x13))  ( =  in13x9 in9x13))  ( =  in13x10 in10x13))  ( =  in13x11 in11x13))  ( =  in13x12 in12x13))  ( =  in14x0 in0x14))  ( =  in14x1 in1x14))  ( =  in14x2 in2x14))  ( =  in14x3 in3x14))  ( =  in14x4 in4x14))  ( =  in14x5 in5x14))  ( =  in14x6 in6x14))  ( =  in14x7 in7x14))  ( =  in14x8 in8x14))  ( =  in14x9 in9x14))  ( =  in14x10 in10x14))  ( =  in14x11 in11x14))  ( =  in14x12 in12x14))  ( =  in14x13 in13x14))  ( =  in15x0 in0x15))  ( =  in15x1 in1x15))  ( =  in15x2 in2x15))  ( =  in15x3 in3x15))  ( =  in15x4 in4x15))  ( =  in15x5 in5x15))  ( =  in15x6 in6x15))  ( =  in15x7 in7x15))  ( =  in15x8 in8x15))  ( =  in15x9 in9x15))  ( =  in15x10 in10x15))  ( =  in15x11 in11x15))  ( =  in15x12 in12x15))  ( =  in15x13 in13x15))  ( =  in15x14 in14x15))  ( =  in16x0 in0x16))  ( =  in16x1 in1x16))  ( =  in16x2 in2x16))  ( =  in16x3 in3x16))  ( =  in16x4 in4x16))  ( =  in16x5 in5x16))  ( =  in16x6 in6x16))  ( =  in16x7 in7x16))  ( =  in16x8 in8x16))  ( =  in16x9 in9x16))  ( =  in16x10 in10x16))  ( =  in16x11 in11x16))  ( =  in16x12 in12x16))  ( =  in16x13 in13x16))  ( =  in16x14 in14x16))  ( =  in16x15 in15x16))  ( =  in17x0 in0x17))  ( =  in17x1 in1x17))  ( =  in17x2 in2x17))  ( =  in17x3 in3x17))  ( =  in17x4 in4x17))  ( =  in17x5 in5x17))  ( =  in17x6 in6x17))  ( =  in17x7 in7x17))  ( =  in17x8 in8x17))  ( =  in17x9 in9x17))  ( =  in17x10 in10x17))  ( =  in17x11 in11x17))  ( =  in17x12 in12x17))  ( =  in17x13 in13x17))  ( =  in17x14 in14x17))  ( =  in17x15 in15x17))  ( =  in17x16 in16x17))  ( =  in18x0 in0x18))  ( =  in18x1 in1x18))  ( =  in18x2 in2x18))  ( =  in18x3 in3x18))  ( =  in18x4 in4x18))  ( =  in18x5 in5x18))  ( =  in18x6 in6x18))  ( =  in18x7 in7x18))  ( =  in18x8 in8x18))  ( =  in18x9 in9x18))  ( =  in18x10 in10x18))  ( =  in18x11 in11x18))  ( =  in18x12 in12x18))  ( =  in18x13 in13x18))  ( =  in18x14 in14x18))  ( =  in18x15 in15x18))  ( =  in18x16 in16x18))  ( =  in18x17 in17x18))  ( =  in19x0 in0x19))  ( =  in19x1 in1x19))  ( =  in19x2 in2x19))  ( =  in19x3 in3x19))  ( =  in19x4 in4x19))  ( =  in19x5 in5x19))  ( =  in19x6 in6x19))  ( =  in19x7 in7x19))  ( =  in19x8 in8x19))  ( =  in19x9 in9x19))  ( =  in19x10 in10x19))  ( =  in19x11 in11x19))  ( =  in19x12 in12x19))  ( =  in19x13 in13x19))  ( =  in19x14 in14x19))  ( =  in19x15 in15x19))  ( =  in19x16 in16x19))  ( =  in19x17 in17x19))  ( =  in19x18 in18x19))  ( =  in20x0 in0x20))  ( =  in20x1 in1x20))  ( =  in20x2 in2x20))  ( =  in20x3 in3x20))  ( =  in20x4 in4x20))  ( =  in20x5 in5x20))  ( =  in20x6 in6x20))  ( =  in20x7 in7x20))  ( =  in20x8 in8x20))  ( =  in20x9 in9x20))  ( =  in20x10 in10x20))  ( =  in20x11 in11x20))  ( =  in20x12 in12x20))  ( =  in20x13 in13x20))  ( =  in20x14 in14x20))  ( =  in20x15 in15x20))  ( =  in20x16 in16x20))  ( =  in20x17 in17x20))  ( =  in20x18 in18x20))  ( =  in20x19 in19x20))  ( =  in21x0 in0x21))  ( =  in21x1 in1x21))  ( =  in21x2 in2x21))  ( =  in21x3 in3x21))  ( =  in21x4 in4x21))  ( =  in21x5 in5x21))  ( =  in21x6 in6x21))  ( =  in21x7 in7x21))  ( =  in21x8 in8x21))  ( =  in21x9 in9x21))  ( =  in21x10 in10x21))  ( =  in21x11 in11x21))  ( =  in21x12 in12x21))  ( =  in21x13 in13x21))  ( =  in21x14 in14x21))  ( =  in21x15 in15x21))  ( =  in21x16 in16x21))  ( =  in21x17 in17x21))  ( =  in21x18 in18x21))  ( =  in21x19 in19x21))  ( =  in21x20 in20x21))  ( =  in22x0 in0x22))  ( =  in22x1 in1x22))  ( =  in22x2 in2x22))  ( =  in22x3 in3x22))  ( =  in22x4 in4x22))  ( =  in22x5 in5x22))  ( =  in22x6 in6x22))  ( =  in22x7 in7x22))  ( =  in22x8 in8x22))  ( =  in22x9 in9x22))  ( =  in22x10 in10x22))  ( =  in22x11 in11x22))  ( =  in22x12 in12x22))  ( =  in22x13 in13x22))  ( =  in22x14 in14x22))  ( =  in22x15 in15x22))  ( =  in22x16 in16x22))  ( =  in22x17 in17x22))  ( =  in22x18 in18x22))  ( =  in22x19 in19x22))  ( =  in22x20 in20x22))  ( =  in22x21 in21x22))  ( =  in23x0 in0x23))  ( =  in23x1 in1x23))  ( =  in23x2 in2x23))  ( =  in23x3 in3x23))  ( =  in23x4 in4x23))  ( =  in23x5 in5x23))  ( =  in23x6 in6x23))  ( =  in23x7 in7x23))  ( =  in23x8 in8x23))  ( =  in23x9 in9x23))  ( =  in23x10 in10x23))  ( =  in23x11 in11x23))  ( =  in23x12 in12x23))  ( =  in23x13 in13x23))  ( =  in23x14 in14x23))  ( =  in23x15 in15x23))  ( =  in23x16 in16x23))  ( =  in23x17 in17x23))  ( =  in23x18 in18x23))  ( =  in23x19 in19x23))  ( =  in23x20 in20x23))  ( =  in23x21 in21x23))  ( =  in23x22 in22x23))  ( =  in24x0 in0x24))  ( =  in24x1 in1x24))  ( =  in24x2 in2x24))  ( =  in24x3 in3x24))  ( =  in24x4 in4x24))  ( =  in24x5 in5x24))  ( =  in24x6 in6x24))  ( =  in24x7 in7x24))  ( =  in24x8 in8x24))  ( =  in24x9 in9x24))  ( =  in24x10 in10x24))  ( =  in24x11 in11x24))  ( =  in24x12 in12x24))  ( =  in24x13 in13x24))  ( =  in24x14 in14x24))  ( =  in24x15 in15x24))  ( =  in24x16 in16x24))  ( =  in24x17 in17x24))  ( =  in24x18 in18x24))  ( =  in24x19 in19x24))  ( =  in24x20 in20x24))  ( =  in24x21 in21x24))  ( =  in24x22 in22x24))  ( =  in24x23 in23x24))  ( =  in25x0 in0x25))  ( =  in25x1 in1x25))  ( =  in25x2 in2x25))  ( =  in25x3 in3x25))  ( =  in25x4 in4x25))  ( =  in25x5 in5x25))  ( =  in25x6 in6x25))  ( =  in25x7 in7x25))  ( =  in25x8 in8x25))  ( =  in25x9 in9x25))  ( =  in25x10 in10x25))  ( =  in25x11 in11x25))  ( =  in25x12 in12x25))  ( =  in25x13 in13x25))  ( =  in25x14 in14x25))  ( =  in25x15 in15x25))  ( =  in25x16 in16x25))  ( =  in25x17 in17x25))  ( =  in25x18 in18x25))  ( =  in25x19 in19x25))  ( =  in25x20 in20x25))  ( =  in25x21 in21x25))  ( =  in25x22 in22x25))  ( =  in25x23 in23x25))  ( =  in25x24 in24x25))  ( =  in26x0 in0x26))  ( =  in26x1 in1x26))  ( =  in26x2 in2x26))  ( =  in26x3 in3x26))  ( =  in26x4 in4x26))  ( =  in26x5 in5x26))  ( =  in26x6 in6x26))  ( =  in26x7 in7x26))  ( =  in26x8 in8x26))  ( =  in26x9 in9x26))  ( =  in26x10 in10x26))  ( =  in26x11 in11x26))  ( =  in26x12 in12x26))  ( =  in26x13 in13x26))  ( =  in26x14 in14x26))  ( =  in26x15 in15x26))  ( =  in26x16 in16x26))  ( =  in26x17 in17x26))  ( =  in26x18 in18x26))  ( =  in26x19 in19x26))  ( =  in26x20 in20x26))  ( =  in26x21 in21x26))  ( =  in26x22 in22x26))  ( =  in26x23 in23x26))  ( =  in26x24 in24x26))  ( =  in26x25 in25x26)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4) ( = in5x0 in0x5) ( = in5x1 in1x5) ( = in5x2 in2x5) ( = in5x3 in3x5) ( = in5x4 in4x5) ( = in6x0 in0x6) ( = in6x1 in1x6) ( = in6x2 in2x6) ( = in6x3 in3x6) ( = in6x4 in4x6) ( = in6x5 in5x6) ( = in7x0 in0x7) ( = in7x1 in1x7) ( = in7x2 in2x7) ( = in7x3 in3x7) ( = in7x4 in4x7) ( = in7x5 in5x7) ( = in7x6 in6x7) ( = in8x0 in0x8) ( = in8x1 in1x8) ( = in8x2 in2x8) ( = in8x3 in3x8) ( = in8x4 in4x8) ( = in8x5 in5x8) ( = in8x6 in6x8) ( = in8x7 in7x8) ( = in9x0 in0x9) ( = in9x1 in1x9) ( = in9x2 in2x9) ( = in9x3 in3x9) ( = in9x4 in4x9) ( = in9x5 in5x9) ( = in9x6 in6x9) ( = in9x7 in7x9) ( = in9x8 in8x9) ( = in10x0 in0x10) ( = in10x1 in1x10) ( = in10x2 in2x10) ( = in10x3 in3x10) ( = in10x4 in4x10) ( = in10x5 in5x10) ( = in10x6 in6x10) ( = in10x7 in7x10) ( = in10x8 in8x10) ( = in10x9 in9x10) ( = in11x0 in0x11) ( = in11x1 in1x11) ( = in11x2 in2x11) ( = in11x3 in3x11) ( = in11x4 in4x11) ( = in11x5 in5x11) ( = in11x6 in6x11) ( = in11x7 in7x11) ( = in11x8 in8x11) ( = in11x9 in9x11) ( = in11x10 in10x11) ( = in12x0 in0x12) ( = in12x1 in1x12) ( = in12x2 in2x12) ( = in12x3 in3x12) ( = in12x4 in4x12) ( = in12x5 in5x12) ( = in12x6 in6x12) ( = in12x7 in7x12) ( = in12x8 in8x12) ( = in12x9 in9x12) ( = in12x10 in10x12) ( = in12x11 in11x12) ( = in13x0 in0x13) ( = in13x1 in1x13) ( = in13x2 in2x13) ( = in13x3 in3x13) ( = in13x4 in4x13) ( = in13x5 in5x13) ( = in13x6 in6x13) ( = in13x7 in7x13) ( = in13x8 in8x13) ( = in13x9 in9x13) ( = in13x10 in10x13) ( = in13x11 in11x13) ( = in13x12 in12x13) ( = in14x0 in0x14) ( = in14x1 in1x14) ( = in14x2 in2x14) ( = in14x3 in3x14) ( = in14x4 in4x14) ( = in14x5 in5x14) ( = in14x6 in6x14) ( = in14x7 in7x14) ( = in14x8 in8x14) ( = in14x9 in9x14) ( = in14x10 in10x14) ( = in14x11 in11x14) ( = in14x12 in12x14) ( = in14x13 in13x14) ( = in15x0 in0x15) ( = in15x1 in1x15) ( = in15x2 in2x15) ( = in15x3 in3x15) ( = in15x4 in4x15) ( = in15x5 in5x15) ( = in15x6 in6x15) ( = in15x7 in7x15) ( = in15x8 in8x15) ( = in15x9 in9x15) ( = in15x10 in10x15) ( = in15x11 in11x15) ( = in15x12 in12x15) ( = in15x13 in13x15) ( = in15x14 in14x15) ( = in16x0 in0x16) ( = in16x1 in1x16) ( = in16x2 in2x16) ( = in16x3 in3x16) ( = in16x4 in4x16) ( = in16x5 in5x16) ( = in16x6 in6x16) ( = in16x7 in7x16) ( = in16x8 in8x16) ( = in16x9 in9x16) ( = in16x10 in10x16) ( = in16x11 in11x16) ( = in16x12 in12x16) ( = in16x13 in13x16) ( = in16x14 in14x16) ( = in16x15 in15x16) ( = in17x0 in0x17) ( = in17x1 in1x17) ( = in17x2 in2x17) ( = in17x3 in3x17) ( = in17x4 in4x17) ( = in17x5 in5x17) ( = in17x6 in6x17) ( = in17x7 in7x17) ( = in17x8 in8x17) ( = in17x9 in9x17) ( = in17x10 in10x17) ( = in17x11 in11x17) ( = in17x12 in12x17) ( = in17x13 in13x17) ( = in17x14 in14x17) ( = in17x15 in15x17) ( = in17x16 in16x17) ( = in18x0 in0x18) ( = in18x1 in1x18) ( = in18x2 in2x18) ( = in18x3 in3x18) ( = in18x4 in4x18) ( = in18x5 in5x18) ( = in18x6 in6x18) ( = in18x7 in7x18) ( = in18x8 in8x18) ( = in18x9 in9x18) ( = in18x10 in10x18) ( = in18x11 in11x18) ( = in18x12 in12x18) ( = in18x13 in13x18) ( = in18x14 in14x18) ( = in18x15 in15x18) ( = in18x16 in16x18) ( = in18x17 in17x18) ( = in19x0 in0x19) ( = in19x1 in1x19) ( = in19x2 in2x19) ( = in19x3 in3x19) ( = in19x4 in4x19) ( = in19x5 in5x19) ( = in19x6 in6x19) ( = in19x7 in7x19) ( = in19x8 in8x19) ( = in19x9 in9x19) ( = in19x10 in10x19) ( = in19x11 in11x19) ( = in19x12 in12x19) ( = in19x13 in13x19) ( = in19x14 in14x19) ( = in19x15 in15x19) ( = in19x16 in16x19) ( = in19x17 in17x19) ( = in19x18 in18x19) ( = in20x0 in0x20) ( = in20x1 in1x20) ( = in20x2 in2x20) ( = in20x3 in3x20) ( = in20x4 in4x20) ( = in20x5 in5x20) ( = in20x6 in6x20) ( = in20x7 in7x20) ( = in20x8 in8x20) ( = in20x9 in9x20) ( = in20x10 in10x20) ( = in20x11 in11x20) ( = in20x12 in12x20) ( = in20x13 in13x20) ( = in20x14 in14x20) ( = in20x15 in15x20) ( = in20x16 in16x20) ( = in20x17 in17x20) ( = in20x18 in18x20) ( = in20x19 in19x20) ( = in21x0 in0x21) ( = in21x1 in1x21) ( = in21x2 in2x21) ( = in21x3 in3x21) ( = in21x4 in4x21) ( = in21x5 in5x21) ( = in21x6 in6x21) ( = in21x7 in7x21) ( = in21x8 in8x21) ( = in21x9 in9x21) ( = in21x10 in10x21) ( = in21x11 in11x21) ( = in21x12 in12x21) ( = in21x13 in13x21) ( = in21x14 in14x21) ( = in21x15 in15x21) ( = in21x16 in16x21) ( = in21x17 in17x21) ( = in21x18 in18x21) ( = in21x19 in19x21) ( = in21x20 in20x21) ( = in22x0 in0x22) ( = in22x1 in1x22) ( = in22x2 in2x22) ( = in22x3 in3x22) ( = in22x4 in4x22) ( = in22x5 in5x22) ( = in22x6 in6x22) ( = in22x7 in7x22) ( = in22x8 in8x22) ( = in22x9 in9x22) ( = in22x10 in10x22) ( = in22x11 in11x22) ( = in22x12 in12x22) ( = in22x13 in13x22) ( = in22x14 in14x22) ( = in22x15 in15x22) ( = in22x16 in16x22) ( = in22x17 in17x22) ( = in22x18 in18x22) ( = in22x19 in19x22) ( = in22x20 in20x22) ( = in22x21 in21x22) ( = in23x0 in0x23) ( = in23x1 in1x23) ( = in23x2 in2x23) ( = in23x3 in3x23) ( = in23x4 in4x23) ( = in23x5 in5x23) ( = in23x6 in6x23) ( = in23x7 in7x23) ( = in23x8 in8x23) ( = in23x9 in9x23) ( = in23x10 in10x23) ( = in23x11 in11x23) ( = in23x12 in12x23) ( = in23x13 in13x23) ( = in23x14 in14x23) ( = in23x15 in15x23) ( = in23x16 in16x23) ( = in23x17 in17x23) ( = in23x18 in18x23) ( = in23x19 in19x23) ( = in23x20 in20x23) ( = in23x21 in21x23) ( = in23x22 in22x23) ( = in24x0 in0x24) ( = in24x1 in1x24) ( = in24x2 in2x24) ( = in24x3 in3x24) ( = in24x4 in4x24) ( = in24x5 in5x24) ( = in24x6 in6x24) ( = in24x7 in7x24) ( = in24x8 in8x24) ( = in24x9 in9x24) ( = in24x10 in10x24) ( = in24x11 in11x24) ( = in24x12 in12x24) ( = in24x13 in13x24) ( = in24x14 in14x24) ( = in24x15 in15x24) ( = in24x16 in16x24) ( = in24x17 in17x24) ( = in24x18 in18x24) ( = in24x19 in19x24) ( = in24x20 in20x24) ( = in24x21 in21x24) ( = in24x22 in22x24) ( = in24x23 in23x24) ( = in25x0 in0x25) ( = in25x1 in1x25) ( = in25x2 in2x25) ( = in25x3 in3x25) ( = in25x4 in4x25) ( = in25x5 in5x25) ( = in25x6 in6x25) ( = in25x7 in7x25) ( = in25x8 in8x25) ( = in25x9 in9x25) ( = in25x10 in10x25) ( = in25x11 in11x25) ( = in25x12 in12x25) ( = in25x13 in13x25) ( = in25x14 in14x25) ( = in25x15 in15x25) ( = in25x16 in16x25) ( = in25x17 in17x25) ( = in25x18 in18x25) ( = in25x19 in19x25) ( = in25x20 in20x25) ( = in25x21 in21x25) ( = in25x22 in22x25) ( = in25x23 in23x25) ( = in25x24 in24x25) ( = in26x0 in0x26) ( = in26x1 in1x26) ( = in26x2 in2x26) ( = in26x3 in3x26) ( = in26x4 in4x26) ( = in26x5 in5x26) ( = in26x6 in6x26) ( = in26x7 in7x26) ( = in26x8 in8x26) ( = in26x9 in9x26) ( = in26x10 in10x26) ( = in26x11 in11x26) ( = in26x12 in12x26) ( = in26x13 in13x26) ( = in26x14 in14x26) ( = in26x15 in15x26) ( = in26x16 in16x26) ( = in26x17 in17x26) ( = in26x18 in18x26) ( = in26x19 in19x26) ( = in26x20 in20x26) ( = in26x21 in21x26) ( = in26x22 in22x26) ( = in26x23 in23x26) ( = in26x24 in24x26) ( = in26x25 in25x26)))",
        "equivalent": true
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in7x8 Int)",
            "(declare-const in7x9 Int)",
            "(declare-const in7x6 Int)",
            "(declare-const in7x0 Int)",
            "(declare-const in7x1 Int)",
            "(declare-const in7x4 Int)",
            "(declare-const in7x5 Int)",
            "(declare-const in7x2 Int)",
            "(declare-const in7x3 Int)",
            "(declare-const in12x26 Int)",
            "(declare-const in12x27 Int)",
            "(declare-const in12x24 Int)",
            "(declare-const in12x25 Int)",
            "(declare-const in12x22 Int)",
            "(declare-const in12x23 Int)",
            "(declare-const in12x20 Int)",
            "(declare-const in12x21 Int)",
            "(declare-const in1x18 Int)",
            "(declare-const in1x17 Int)",
            "(declare-const in1x16 Int)",
            "(declare-const in1x15 Int)",
            "(declare-const in1x19 Int)",
            "(declare-const in23x24 Int)",
            "(declare-const in23x25 Int)",
            "(declare-const in23x26 Int)",
            "(declare-const in23x27 Int)",
            "(declare-const in23x20 Int)",
            "(declare-const in23x21 Int)",
            "(declare-const in23x22 Int)",
            "(declare-const in12x19 Int)",
            "(declare-const in12x17 Int)",
            "(declare-const in12x18 Int)",
            "(declare-const in12x15 Int)",
            "(declare-const in1x10 Int)",
            "(declare-const in12x16 Int)",
            "(declare-const in12x13 Int)",
            "(declare-const in12x14 Int)",
            "(declare-const in1x14 Int)",
            "(declare-const in12x11 Int)",
            "(declare-const in1x13 Int)",
            "(declare-const in1x12 Int)",
            "(declare-const in12x10 Int)",
            "(declare-const in1x11 Int)",
            "(declare-const in0x16 Int)",
            "(declare-const in0x17 Int)",
            "(declare-const in0x14 Int)",
            "(declare-const in0x15 Int)",
            "(declare-const in23x17 Int)",
            "(declare-const in23x18 Int)",
            "(declare-const in23x19 Int)",
            "(declare-const in0x18 Int)",
            "(declare-const in0x19 Int)",
            "(declare-const in23x13 Int)",
            "(declare-const in8x7 Int)",
            "(declare-const in23x14 Int)",
            "(declare-const in23x15 Int)",
            "(declare-const in8x5 Int)",
            "(declare-const in23x16 Int)",
            "(declare-const in8x6 Int)",
            "(declare-const in23x10 Int)",
            "(declare-const in23x11 Int)",
            "(declare-const in8x9 Int)",
            "(declare-const in23x12 Int)",
            "(declare-const in8x0 Int)",
            "(declare-const in8x3 Int)",
            "(declare-const in8x4 Int)",
            "(declare-const in8x1 Int)",
            "(declare-const in8x2 Int)",
            "(declare-const in0x12 Int)",
            "(declare-const in0x13 Int)",
            "(declare-const in0x10 Int)",
            "(declare-const in0x11 Int)",
            "(declare-const in0x27 Int)",
            "(declare-const in0x25 Int)",
            "(declare-const in0x26 Int)",
            "(declare-const in11x27 Int)",
            "(declare-const in11x24 Int)",
            "(declare-const in11x23 Int)",
            "(declare-const in0x20 Int)",
            "(declare-const in11x26 Int)",
            "(declare-const in11x25 Int)",
            "(declare-const in0x23 Int)",
            "(declare-const in11x20 Int)",
            "(declare-const in0x24 Int)",
            "(declare-const in11x22 Int)",
            "(declare-const in0x21 Int)",
            "(declare-const in0x22 Int)",
            "(declare-const in11x21 Int)",
            "(declare-const in2x19 Int)",
            "(declare-const in2x18 Int)",
            "(declare-const in2x17 Int)",
            "(declare-const in2x16 Int)",
            "(declare-const in22x27 Int)",
            "(declare-const in22x23 Int)",
            "(declare-const in9x6 Int)",
            "(declare-const in22x24 Int)",
            "(declare-const in9x7 Int)",
            "(declare-const in22x25 Int)",
            "(declare-const in9x4 Int)",
            "(declare-const in22x26 Int)",
            "(declare-const in9x5 Int)",
            "(declare-const in22x20 Int)",
            "(declare-const in22x21 Int)",
            "(declare-const in9x8 Int)",
            "(declare-const in18x2 Int)",
            "(declare-const in11x17 Int)",
            "(declare-const in9x2 Int)",
            "(declare-const in18x3 Int)",
            "(declare-const in11x16 Int)",
            "(declare-const in9x3 Int)",
            "(declare-const in11x19 Int)",
            "(declare-const in18x0 Int)",
            "(declare-const in9x0 Int)",
            "(declare-const in11x18 Int)",
            "(declare-const in18x1 Int)",
            "(declare-const in9x1 Int)",
            "(declare-const in18x6 Int)",
            "(declare-const in11x13 Int)",
            "(declare-const in2x11 Int)",
            "(declare-const in18x7 Int)",
            "(declare-const in11x12 Int)",
            "(declare-const in2x10 Int)",
            "(declare-const in18x4 Int)",
            "(declare-const in11x15 Int)",
            "(declare-const in18x5 Int)",
            "(declare-const in11x14 Int)",
            "(declare-const in2x15 Int)",
            "(declare-const in2x14 Int)",
            "(declare-const in18x8 Int)",
            "(declare-const in2x13 Int)",
            "(declare-const in18x9 Int)",
            "(declare-const in2x12 Int)",
            "(declare-const in11x10 Int)",
            "(declare-const in2x27 Int)",
            "(declare-const in22x16 Int)",
            "(declare-const in22x17 Int)",
            "(declare-const in22x18 Int)",
            "(declare-const in22x19 Int)",
            "(declare-const in22x12 Int)",
            "(declare-const in22x13 Int)",
            "(declare-const in22x14 Int)",
            "(declare-const in22x15 Int)",
            "(declare-const in22x10 Int)",
            "(declare-const in22x11 Int)",
            "(declare-const in2x22 Int)",
            "(declare-const in2x21 Int)",
            "(declare-const in2x20 Int)",
            "(declare-const in2x26 Int)",
            "(declare-const in2x25 Int)",
            "(declare-const in2x24 Int)",
            "(declare-const in2x23 Int)",
            "(declare-const in1x27 Int)",
            "(declare-const in1x26 Int)",
            "(declare-const in10x27 Int)",
            "(declare-const in19x1 Int)",
            "(declare-const in10x26 Int)",
            "(declare-const in19x2 Int)",
            "(declare-const in19x0 Int)",
            "(declare-const in10x23 Int)",
            "(declare-const in1x21 Int)",
            "(declare-const in19x5 Int)",
            "(declare-const in10x22 Int)",
            "(declare-const in1x20 Int)",
            "(declare-const in19x6 Int)",
            "(declare-const in10x25 Int)",
            "(declare-const in19x3 Int)",
            "(declare-const in10x24 Int)",
            "(declare-const in19x4 Int)",
            "(declare-const in1x25 Int)",
            "(declare-const in19x9 Int)",
            "(declare-const in1x24 Int)",
            "(declare-const in1x23 Int)",
            "(declare-const in10x21 Int)",
            "(declare-const in19x7 Int)",
            "(declare-const in1x22 Int)",
            "(declare-const in10x20 Int)",
            "(declare-const in19x8 Int)",
            "(declare-const in21x26 Int)",
            "(declare-const in21x27 Int)",
            "(declare-const in21x22 Int)",
            "(declare-const in21x23 Int)",
            "(declare-const in21x24 Int)",
            "(declare-const in21x25 Int)",
            "(declare-const in21x20 Int)",
            "(declare-const in10x19 Int)",
            "(declare-const in10x16 Int)",
            "(declare-const in10x15 Int)",
            "(declare-const in10x18 Int)",
            "(declare-const in10x17 Int)",
            "(declare-const in10x12 Int)",
            "(declare-const in10x11 Int)",
            "(declare-const in10x14 Int)",
            "(declare-const in10x13 Int)",
            "(declare-const in15x11 Int)",
            "(declare-const in15x10 Int)",
            "(declare-const in26x27 Int)",
            "(declare-const in26x25 Int)",
            "(declare-const in26x23 Int)",
            "(declare-const in26x24 Int)",
            "(declare-const in26x21 Int)",
            "(declare-const in26x22 Int)",
            "(declare-const in26x20 Int)",
            "(declare-const in15x19 Int)",
            "(declare-const in15x18 Int)",
            "(declare-const in15x17 Int)",
            "(declare-const in15x16 Int)",
            "(declare-const in15x14 Int)",
            "(declare-const in15x13 Int)",
            "(declare-const in15x12 Int)",
            "(declare-const in26x18 Int)",
            "(declare-const in26x19 Int)",
            "(declare-const in26x16 Int)",
            "(declare-const in26x17 Int)",
            "(declare-const in26x14 Int)",
            "(declare-const in26x15 Int)",
            "(declare-const in26x12 Int)",
            "(declare-const in26x13 Int)",
            "(declare-const in26x10 Int)",
            "(declare-const in9x13 Int)",
            "(declare-const in26x11 Int)",
            "(declare-const in9x14 Int)",
            "(declare-const in9x11 Int)",
            "(declare-const in9x12 Int)",
            "(declare-const in9x10 Int)",
            "(declare-const in9x19 Int)",
            "(declare-const in9x17 Int)",
            "(declare-const in9x18 Int)",
            "(declare-const in9x15 Int)",
            "(declare-const in9x16 Int)",
            "(declare-const in14x21 Int)",
            "(declare-const in14x20 Int)",
            "(declare-const in20x0 Int)",
            "(declare-const in20x3 Int)",
            "(declare-const in20x4 Int)",
            "(declare-const in20x1 Int)",
            "(declare-const in20x2 Int)",
            "(declare-const in8x12 Int)",
            "(declare-const in8x13 Int)",
            "(declare-const in8x10 Int)",
            "(declare-const in8x11 Int)",
            "(declare-const in14x27 Int)",
            "(declare-const in8x18 Int)",
            "(declare-const in14x26 Int)",
            "(declare-const in8x19 Int)",
            "(declare-const in14x25 Int)",
            "(declare-const in8x16 Int)",
            "(declare-const in14x24 Int)",
            "(declare-const in8x17 Int)",
            "(declare-const in14x23 Int)",
            "(declare-const in8x14 Int)",
            "(declare-const in14x22 Int)",
            "(declare-const in8x15 Int)",
            "(declare-const in14x10 Int)",
            "(declare-const in25x27 Int)",
            "(declare-const in25x26 Int)",
            "(declare-const in25x23 Int)",
            "(declare-const in25x22 Int)",
            "(declare-const in25x24 Int)",
            "(declare-const in8x23 Int)",
            "(declare-const in20x7 Int)",
            "(declare-const in8x24 Int)",
            "(declare-const in20x8 Int)",
            "(declare-const in25x21 Int)",
            "(declare-const in8x21 Int)",
            "(declare-const in20x5 Int)",
            "(declare-const in25x20 Int)",
            "(declare-const in8x22 Int)",
            "(declare-const in20x6 Int)",
            "(declare-const in8x20 Int)",
            "(declare-const in20x9 Int)",
            "(declare-const in14x19 Int)",
            "(declare-const in14x18 Int)",
            "(declare-const in14x17 Int)",
            "(declare-const in14x16 Int)",
            "(declare-const in14x15 Int)",
            "(declare-const in8x27 Int)",
            "(declare-const in14x13 Int)",
            "(declare-const in8x25 Int)",
            "(declare-const in14x12 Int)",
            "(declare-const in8x26 Int)",
            "(declare-const in14x11 Int)",
            "(declare-const in25x19 Int)",
            "(declare-const in25x16 Int)",
            "(declare-const in25x15 Int)",
            "(declare-const in25x18 Int)",
            "(declare-const in25x17 Int)",
            "(declare-const in25x12 Int)",
            "(declare-const in25x11 Int)",
            "(declare-const in25x14 Int)",
            "(declare-const in25x13 Int)",
            "(declare-const in25x10 Int)",
            "(declare-const in13x20 Int)",
            "(declare-const in13x27 Int)",
            "(declare-const in13x25 Int)",
            "(declare-const in13x26 Int)",
            "(declare-const in13x23 Int)",
            "(declare-const in13x24 Int)",
            "(declare-const in13x21 Int)",
            "(declare-const in13x22 Int)",
            "(declare-const in24x26 Int)",
            "(declare-const in24x25 Int)",
            "(declare-const in24x27 Int)",
            "(declare-const in24x22 Int)",
            "(declare-const in24x21 Int)",
            "(declare-const in24x23 Int)",
            "(declare-const in9x24 Int)",
            "(declare-const in9x25 Int)",
            "(declare-const in24x20 Int)",
            "(declare-const in9x22 Int)",
            "(declare-const in9x23 Int)",
            "(declare-const in9x20 Int)",
            "(declare-const in9x21 Int)",
            "(declare-const in13x18 Int)",
            "(declare-const in13x19 Int)",
            "(declare-const in13x16 Int)",
            "(declare-const in13x17 Int)",
            "(declare-const in13x14 Int)",
            "(declare-const in13x15 Int)",
            "(declare-const in13x12 Int)",
            "(declare-const in9x26 Int)",
            "(declare-const in13x10 Int)",
            "(declare-const in9x27 Int)",
            "(declare-const in13x11 Int)",
            "(declare-const in24x19 Int)",
            "(declare-const in24x18 Int)",
            "(declare-const in24x15 Int)",
            "(declare-const in24x14 Int)",
            "(declare-const in24x17 Int)",
            "(declare-const in24x16 Int)",
            "(declare-const in24x11 Int)",
            "(declare-const in24x10 Int)",
            "(declare-const in24x13 Int)",
            "(declare-const in24x12 Int)",
            "(declare-const in23x0 Int)",
            "(declare-const in23x1 Int)",
            "(declare-const in12x4 Int)",
            "(declare-const in12x5 Int)",
            "(declare-const in12x2 Int)",
            "(declare-const in6x11 Int)",
            "(declare-const in12x3 Int)",
            "(declare-const in6x10 Int)",
            "(declare-const in12x8 Int)",
            "(declare-const in12x9 Int)",
            "(declare-const in12x6 Int)",
            "(declare-const in12x7 Int)",
            "(declare-const in6x17 Int)",
            "(declare-const in6x16 Int)",
            "(declare-const in6x19 Int)",
            "(declare-const in6x18 Int)",
            "(declare-const in6x13 Int)",
            "(declare-const in6x12 Int)",
            "(declare-const in6x15 Int)",
            "(declare-const in6x14 Int)",
            "(declare-const in17x25 Int)",
            "(declare-const in17x26 Int)",
            "(declare-const in17x27 Int)",
            "(declare-const in11x0 Int)",
            "(declare-const in11x2 Int)",
            "(declare-const in11x1 Int)",
            "(declare-const in23x4 Int)",
            "(declare-const in6x20 Int)",
            "(declare-const in23x5 Int)",
            "(declare-const in23x2 Int)",
            "(declare-const in6x22 Int)",
            "(declare-const in23x3 Int)",
            "(declare-const in6x21 Int)",
            "(declare-const in23x8 Int)",
            "(declare-const in23x9 Int)",
            "(declare-const in23x6 Int)",
            "(declare-const in23x7 Int)",
            "(declare-const in6x27 Int)",
            "(declare-const in17x20 Int)",
            "(declare-const in6x24 Int)",
            "(declare-const in17x21 Int)",
            "(declare-const in6x23 Int)",
            "(declare-const in17x22 Int)",
            "(declare-const in6x26 Int)",
            "(declare-const in17x23 Int)",
            "(declare-const in6x25 Int)",
            "(declare-const in17x24 Int)",
            "(declare-const in17x14 Int)",
            "(declare-const in17x15 Int)",
            "(declare-const in17x16 Int)",
            "(declare-const in17x18 Int)",
            "(declare-const in17x19 Int)",
            "(declare-const in24x0 Int)",
            "(declare-const in13x3 Int)",
            "(declare-const in0x7 Int)",
            "(declare-const in13x4 Int)",
            "(declare-const in0x8 Int)",
            "(declare-const in5x20 Int)",
            "(declare-const in13x1 Int)",
            "(declare-const in0x5 Int)",
            "(declare-const in5x21 Int)",
            "(declare-const in13x2 Int)",
            "(declare-const in0x6 Int)",
            "(declare-const in13x7 Int)",
            "(declare-const in13x8 Int)",
            "(declare-const in13x5 Int)",
            "(declare-const in0x9 Int)",
            "(declare-const in13x6 Int)",
            "(declare-const in5x26 Int)",
            "(declare-const in5x27 Int)",
            "(declare-const in13x9 Int)",
            "(declare-const in5x22 Int)",
            "(declare-const in17x10 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in5x23 Int)",
            "(declare-const in17x11 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in5x24 Int)",
            "(declare-const in17x12 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in5x25 Int)",
            "(declare-const in17x13 Int)",
            "(declare-const in0x2 Int)",
            "(declare-const in12x0 Int)",
            "(declare-const in12x1 Int)",
            "(declare-const in24x3 Int)",
            "(declare-const in24x4 Int)",
            "(declare-const in24x1 Int)",
            "(declare-const in24x2 Int)",
            "(declare-const in24x7 Int)",
            "(declare-const in24x8 Int)",
            "(declare-const in24x5 Int)",
            "(declare-const in24x6 Int)",
            "(declare-const in24x9 Int)",
            "(declare-const in16x24 Int)",
            "(declare-const in16x25 Int)",
            "(declare-const in16x26 Int)",
            "(declare-const in16x27 Int)",
            "(declare-const in21x2 Int)",
            "(declare-const in21x3 Int)",
            "(declare-const in21x0 Int)",
            "(declare-const in21x1 Int)",
            "(declare-const in7x21 Int)",
            "(declare-const in10x5 Int)",
            "(declare-const in1x6 Int)",
            "(declare-const in7x20 Int)",
            "(declare-const in10x4 Int)",
            "(declare-const in1x7 Int)",
            "(declare-const in7x23 Int)",
            "(declare-const in10x7 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in7x22 Int)",
            "(declare-const in10x6 Int)",
            "(declare-const in1x5 Int)",
            "(declare-const in10x9 Int)",
            "(declare-const in10x8 Int)",
            "(declare-const in1x8 Int)",
            "(declare-const in1x9 Int)",
            "(declare-const in7x25 Int)",
            "(declare-const in16x20 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in7x24 Int)",
            "(declare-const in16x21 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in7x27 Int)",
            "(declare-const in16x22 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in7x26 Int)",
            "(declare-const in16x23 Int)",
            "(declare-const in16x13 Int)",
            "(declare-const in16x14 Int)",
            "(declare-const in16x15 Int)",
            "(declare-const in16x17 Int)",
            "(declare-const in16x18 Int)",
            "(declare-const in16x19 Int)",
            "(declare-const in27x26 Int)",
            "(declare-const in27x24 Int)",
            "(declare-const in27x25 Int)",
            "(declare-const in27x22 Int)",
            "(declare-const in21x6 Int)",
            "(declare-const in27x23 Int)",
            "(declare-const in21x7 Int)",
            "(declare-const in27x20 Int)",
            "(declare-const in21x4 Int)",
            "(declare-const in27x21 Int)",
            "(declare-const in21x5 Int)",
            "(declare-const in21x8 Int)",
            "(declare-const in21x9 Int)",
            "(declare-const in16x10 Int)",
            "(declare-const in16x11 Int)",
            "(declare-const in16x12 Int)",
            "(declare-const in27x19 Int)",
            "(declare-const in27x17 Int)",
            "(declare-const in27x18 Int)",
            "(declare-const in27x15 Int)",
            "(declare-const in22x1 Int)",
            "(declare-const in27x16 Int)",
            "(declare-const in22x2 Int)",
            "(declare-const in27x13 Int)",
            "(declare-const in27x14 Int)",
            "(declare-const in22x0 Int)",
            "(declare-const in27x11 Int)",
            "(declare-const in11x4 Int)",
            "(declare-const in2x5 Int)",
            "(declare-const in27x12 Int)",
            "(declare-const in11x3 Int)",
            "(declare-const in2x6 Int)",
            "(declare-const in11x6 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in27x10 Int)",
            "(declare-const in11x5 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in11x8 Int)",
            "(declare-const in2x9 Int)",
            "(declare-const in11x7 Int)",
            "(declare-const in2x7 Int)",
            "(declare-const in11x9 Int)",
            "(declare-const in2x8 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in15x22 Int)",
            "(declare-const in15x21 Int)",
            "(declare-const in15x20 Int)",
            "(declare-const in10x1 Int)",
            "(declare-const in10x0 Int)",
            "(declare-const in10x3 Int)",
            "(declare-const in10x2 Int)",
            "(declare-const in22x5 Int)",
            "(declare-const in7x10 Int)",
            "(declare-const in22x6 Int)",
            "(declare-const in22x3 Int)",
            "(declare-const in7x12 Int)",
            "(declare-const in22x4 Int)",
            "(declare-const in7x11 Int)",
            "(declare-const in22x9 Int)",
            "(declare-const in22x7 Int)",
            "(declare-const in22x8 Int)",
            "(declare-const in7x18 Int)",
            "(declare-const in7x17 Int)",
            "(declare-const in15x27 Int)",
            "(declare-const in7x19 Int)",
            "(declare-const in15x26 Int)",
            "(declare-const in7x14 Int)",
            "(declare-const in15x25 Int)",
            "(declare-const in7x13 Int)",
            "(declare-const in15x24 Int)",
            "(declare-const in7x16 Int)",
            "(declare-const in15x23 Int)",
            "(declare-const in7x15 Int)",
            "(declare-const in21x19 Int)",
            "(declare-const in21x15 Int)",
            "(declare-const in21x16 Int)",
            "(declare-const in21x17 Int)",
            "(declare-const in21x18 Int)",
            "(declare-const in21x11 Int)",
            "(declare-const in21x12 Int)",
            "(declare-const in21x13 Int)",
            "(declare-const in21x14 Int)",
            "(declare-const in21x10 Int)",
            "(declare-const in16x0 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in16x1 Int)",
            "(declare-const in3x5 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in16x4 Int)",
            "(declare-const in3x8 Int)",
            "(declare-const in16x5 Int)",
            "(declare-const in3x9 Int)",
            "(declare-const in16x2 Int)",
            "(declare-const in3x6 Int)",
            "(declare-const in16x3 Int)",
            "(declare-const in3x7 Int)",
            "(declare-const in3x23 Int)",
            "(declare-const in16x8 Int)",
            "(declare-const in3x22 Int)",
            "(declare-const in16x9 Int)",
            "(declare-const in3x21 Int)",
            "(declare-const in16x6 Int)",
            "(declare-const in3x20 Int)",
            "(declare-const in16x7 Int)",
            "(declare-const in3x27 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in3x26 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in3x25 Int)",
            "(declare-const in3x24 Int)",
            "(declare-const in27x0 Int)",
            "(declare-const in27x1 Int)",
            "(declare-const in27x4 Int)",
            "(declare-const in27x5 Int)",
            "(declare-const in27x2 Int)",
            "(declare-const in27x3 Int)",
            "(declare-const in27x8 Int)",
            "(declare-const in27x9 Int)",
            "(declare-const in27x6 Int)",
            "(declare-const in27x7 Int)",
            "(declare-const in20x27 Int)",
            "(declare-const in20x26 Int)",
            "(declare-const in20x25 Int)",
            "(declare-const in4x9 Int)",
            "(declare-const in20x24 Int)",
            "(declare-const in20x23 Int)",
            "(declare-const in20x22 Int)",
            "(declare-const in20x21 Int)",
            "(declare-const in4x3 Int)",
            "(declare-const in17x0 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in17x3 Int)",
            "(declare-const in4x7 Int)",
            "(declare-const in17x4 Int)",
            "(declare-const in4x8 Int)",
            "(declare-const in17x1 Int)",
            "(declare-const in4x5 Int)",
            "(declare-const in17x2 Int)",
            "(declare-const in4x6 Int)",
            "(declare-const in17x7 Int)",
            "(declare-const in17x8 Int)",
            "(declare-const in17x5 Int)",
            "(declare-const in17x6 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in17x9 Int)",
            "(declare-const in20x17 Int)",
            "(declare-const in19x27 Int)",
            "(declare-const in20x16 Int)",
            "(declare-const in3x19 Int)",
            "(declare-const in20x15 Int)",
            "(declare-const in3x18 Int)",
            "(declare-const in20x14 Int)",
            "(declare-const in3x17 Int)",
            "(declare-const in20x19 Int)",
            "(declare-const in20x18 Int)",
            "(declare-const in20x13 Int)",
            "(declare-const in20x12 Int)",
            "(declare-const in20x11 Int)",
            "(declare-const in20x10 Int)",
            "(declare-const in19x20 Int)",
            "(declare-const in3x12 Int)",
            "(declare-const in3x11 Int)",
            "(declare-const in19x22 Int)",
            "(declare-const in3x10 Int)",
            "(declare-const in19x21 Int)",
            "(declare-const in19x24 Int)",
            "(declare-const in3x16 Int)",
            "(declare-const in19x23 Int)",
            "(declare-const in3x15 Int)",
            "(declare-const in19x26 Int)",
            "(declare-const in3x14 Int)",
            "(declare-const in19x25 Int)",
            "(declare-const in3x13 Int)",
            "(declare-const in19x17 Int)",
            "(declare-const in19x16 Int)",
            "(declare-const in19x18 Int)",
            "(declare-const in5x8 Int)",
            "(declare-const in5x9 Int)",
            "(declare-const in14x2 Int)",
            "(declare-const in5x2 Int)",
            "(declare-const in14x3 Int)",
            "(declare-const in5x3 Int)",
            "(declare-const in14x0 Int)",
            "(declare-const in5x0 Int)",
            "(declare-const in14x1 Int)",
            "(declare-const in5x1 Int)",
            "(declare-const in14x6 Int)",
            "(declare-const in5x6 Int)",
            "(declare-const in14x7 Int)",
            "(declare-const in5x7 Int)",
            "(declare-const in14x4 Int)",
            "(declare-const in5x4 Int)",
            "(declare-const in14x5 Int)",
            "(declare-const in19x11 Int)",
            "(declare-const in14x8 Int)",
            "(declare-const in19x10 Int)",
            "(declare-const in14x9 Int)",
            "(declare-const in19x13 Int)",
            "(declare-const in19x12 Int)",
            "(declare-const in19x15 Int)",
            "(declare-const in19x14 Int)",
            "(declare-const in5x19 Int)",
            "(declare-const in13x0 Int)",
            "(declare-const in25x2 Int)",
            "(declare-const in25x3 Int)",
            "(declare-const in25x0 Int)",
            "(declare-const in25x1 Int)",
            "(declare-const in5x10 Int)",
            "(declare-const in25x6 Int)",
            "(declare-const in25x7 Int)",
            "(declare-const in25x4 Int)",
            "(declare-const in25x5 Int)",
            "(declare-const in5x15 Int)",
            "(declare-const in5x16 Int)",
            "(declare-const in25x8 Int)",
            "(declare-const in5x17 Int)",
            "(declare-const in25x9 Int)",
            "(declare-const in5x18 Int)",
            "(declare-const in5x11 Int)",
            "(declare-const in5x12 Int)",
            "(declare-const in5x13 Int)",
            "(declare-const in5x14 Int)",
            "(declare-const in18x27 Int)",
            "(declare-const in18x26 Int)",
            "(declare-const in4x18 Int)",
            "(declare-const in4x19 Int)",
            "(declare-const in6x9 Int)",
            "(declare-const in6x7 Int)",
            "(declare-const in6x8 Int)",
            "(declare-const in15x1 Int)",
            "(declare-const in6x1 Int)",
            "(declare-const in15x2 Int)",
            "(declare-const in6x2 Int)",
            "(declare-const in15x0 Int)",
            "(declare-const in6x0 Int)",
            "(declare-const in15x5 Int)",
            "(declare-const in6x5 Int)",
            "(declare-const in15x6 Int)",
            "(declare-const in15x3 Int)",
            "(declare-const in6x3 Int)",
            "(declare-const in15x4 Int)",
            "(declare-const in6x4 Int)",
            "(declare-const in15x9 Int)",
            "(declare-const in4x14 Int)",
            "(declare-const in4x15 Int)",
            "(declare-const in18x21 Int)",
            "(declare-const in4x16 Int)",
            "(declare-const in15x7 Int)",
            "(declare-const in18x20 Int)",
            "(declare-const in4x17 Int)",
            "(declare-const in15x8 Int)",
            "(declare-const in18x23 Int)",
            "(declare-const in4x10 Int)",
            "(declare-const in18x22 Int)",
            "(declare-const in4x11 Int)",
            "(declare-const in18x25 Int)",
            "(declare-const in4x12 Int)",
            "(declare-const in18x24 Int)",
            "(declare-const in4x13 Int)",
            "(declare-const in18x16 Int)",
            "(declare-const in18x15 Int)",
            "(declare-const in18x17 Int)",
            "(declare-const in18x19 Int)",
            "(declare-const in26x1 Int)",
            "(declare-const in26x2 Int)",
            "(declare-const in26x0 Int)",
            "(declare-const in4x20 Int)",
            "(declare-const in26x5 Int)",
            "(declare-const in26x6 Int)",
            "(declare-const in26x3 Int)",
            "(declare-const in26x4 Int)",
            "(declare-const in26x9 Int)",
            "(declare-const in4x25 Int)",
            "(declare-const in4x26 Int)",
            "(declare-const in4x27 Int)",
            "(declare-const in26x7 Int)",
            "(declare-const in18x10 Int)",
            "(declare-const in26x8 Int)",
            "(declare-const in4x21 Int)",
            "(declare-const in18x12 Int)",
            "(declare-const in4x22 Int)",
            "(declare-const in18x11 Int)",
            "(declare-const in4x23 Int)",
            "(declare-const in18x14 Int)",
            "(declare-const in4x24 Int)",
            "(declare-const in18x13 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6))  ( =  in7x0 in0x7))  ( =  in7x1 in1x7))  ( =  in7x2 in2x7))  ( =  in7x3 in3x7))  ( =  in7x4 in4x7))  ( =  in7x5 in5x7))  ( =  in7x6 in6x7))  ( =  in8x0 in0x8))  ( =  in8x1 in1x8))  ( =  in8x2 in2x8))  ( =  in8x3 in3x8))  ( =  in8x4 in4x8))  ( =  in8x5 in5x8))  ( =  in8x6 in6x8))  ( =  in8x7 in7x8))  ( =  in9x0 in0x9))  ( =  in9x1 in1x9))  ( =  in9x2 in2x9))  ( =  in9x3 in3x9))  ( =  in9x4 in4x9))  ( =  in9x5 in5x9))  ( =  in9x6 in6x9))  ( =  in9x7 in7x9))  ( =  in9x8 in8x9))  ( =  in10x0 in0x10))  ( =  in10x1 in1x10))  ( =  in10x2 in2x10))  ( =  in10x3 in3x10))  ( =  in10x4 in4x10))  ( =  in10x5 in5x10))  ( =  in10x6 in6x10))  ( =  in10x7 in7x10))  ( =  in10x8 in8x10))  ( =  in10x9 in9x10))  ( =  in11x0 in0x11))  ( =  in11x1 in1x11))  ( =  in11x2 in2x11))  ( =  in11x3 in3x11))  ( =  in11x4 in4x11))  ( =  in11x5 in5x11))  ( =  in11x6 in6x11))  ( =  in11x7 in7x11))  ( =  in11x8 in8x11))  ( =  in11x9 in9x11))  ( =  in11x10 in10x11))  ( =  in12x0 in0x12))  ( =  in12x1 in1x12))  ( =  in12x2 in2x12))  ( =  in12x3 in3x12))  ( =  in12x4 in4x12))  ( =  in12x5 in5x12))  ( =  in12x6 in6x12))  ( =  in12x7 in7x12))  ( =  in12x8 in8x12))  ( =  in12x9 in9x12))  ( =  in12x10 in10x12))  ( =  in12x11 in11x12))  ( =  in13x0 in0x13))  ( =  in13x1 in1x13))  ( =  in13x2 in2x13))  ( =  in13x3 in3x13))  ( =  in13x4 in4x13))  ( =  in13x5 in5x13))  ( =  in13x6 in6x13))  ( =  in13x7 in7x13))  ( =  in13x8 in8x13))  ( =  in13x9 in9x13))  ( =  in13x10 in10x13))  ( =  in13x11 in11x13))  ( =  in13x12 in12x13))  ( =  in14x0 in0x14))  ( =  in14x1 in1x14))  ( =  in14x2 in2x14))  ( =  in14x3 in3x14))  ( =  in14x4 in4x14))  ( =  in14x5 in5x14))  ( =  in14x6 in6x14))  ( =  in14x7 in7x14))  ( =  in14x8 in8x14))  ( =  in14x9 in9x14))  ( =  in14x10 in10x14))  ( =  in14x11 in11x14))  ( =  in14x12 in12x14))  ( =  in14x13 in13x14))  ( =  in15x0 in0x15))  ( =  in15x1 in1x15))  ( =  in15x2 in2x15))  ( =  in15x3 in3x15))  ( =  in15x4 in4x15))  ( =  in15x5 in5x15))  ( =  in15x6 in6x15))  ( =  in15x7 in7x15))  ( =  in15x8 in8x15))  ( =  in15x9 in9x15))  ( =  in15x10 in10x15))  ( =  in15x11 in11x15))  ( =  in15x12 in12x15))  ( =  in15x13 in13x15))  ( =  in15x14 in14x15))  ( =  in16x0 in0x16))  ( =  in16x1 in1x16))  ( =  in16x2 in2x16))  ( =  in16x3 in3x16))  ( =  in16x4 in4x16))  ( =  in16x5 in5x16))  ( =  in16x6 in6x16))  ( =  in16x7 in7x16))  ( =  in16x8 in8x16))  ( =  in16x9 in9x16))  ( =  in16x10 in10x16))  ( =  in16x11 in11x16))  ( =  in16x12 in12x16))  ( =  in16x13 in13x16))  ( =  in16x14 in14x16))  ( =  in16x15 in15x16))  ( =  in17x0 in0x17))  ( =  in17x1 in1x17))  ( =  in17x2 in2x17))  ( =  in17x3 in3x17))  ( =  in17x4 in4x17))  ( =  in17x5 in5x17))  ( =  in17x6 in6x17))  ( =  in17x7 in7x17))  ( =  in17x8 in8x17))  ( =  in17x9 in9x17))  ( =  in17x10 in10x17))  ( =  in17x11 in11x17))  ( =  in17x12 in12x17))  ( =  in17x13 in13x17))  ( =  in17x14 in14x17))  ( =  in17x15 in15x17))  ( =  in17x16 in16x17))  ( =  in18x0 in0x18))  ( =  in18x1 in1x18))  ( =  in18x2 in2x18))  ( =  in18x3 in3x18))  ( =  in18x4 in4x18))  ( =  in18x5 in5x18))  ( =  in18x6 in6x18))  ( =  in18x7 in7x18))  ( =  in18x8 in8x18))  ( =  in18x9 in9x18))  ( =  in18x10 in10x18))  ( =  in18x11 in11x18))  ( =  in18x12 in12x18))  ( =  in18x13 in13x18))  ( =  in18x14 in14x18))  ( =  in18x15 in15x18))  ( =  in18x16 in16x18))  ( =  in18x17 in17x18))  ( =  in19x0 in0x19))  ( =  in19x1 in1x19))  ( =  in19x2 in2x19))  ( =  in19x3 in3x19))  ( =  in19x4 in4x19))  ( =  in19x5 in5x19))  ( =  in19x6 in6x19))  ( =  in19x7 in7x19))  ( =  in19x8 in8x19))  ( =  in19x9 in9x19))  ( =  in19x10 in10x19))  ( =  in19x11 in11x19))  ( =  in19x12 in12x19))  ( =  in19x13 in13x19))  ( =  in19x14 in14x19))  ( =  in19x15 in15x19))  ( =  in19x16 in16x19))  ( =  in19x17 in17x19))  ( =  in19x18 in18x19))  ( =  in20x0 in0x20))  ( =  in20x1 in1x20))  ( =  in20x2 in2x20))  ( =  in20x3 in3x20))  ( =  in20x4 in4x20))  ( =  in20x5 in5x20))  ( =  in20x6 in6x20))  ( =  in20x7 in7x20))  ( =  in20x8 in8x20))  ( =  in20x9 in9x20))  ( =  in20x10 in10x20))  ( =  in20x11 in11x20))  ( =  in20x12 in12x20))  ( =  in20x13 in13x20))  ( =  in20x14 in14x20))  ( =  in20x15 in15x20))  ( =  in20x16 in16x20))  ( =  in20x17 in17x20))  ( =  in20x18 in18x20))  ( =  in20x19 in19x20))  ( =  in21x0 in0x21))  ( =  in21x1 in1x21))  ( =  in21x2 in2x21))  ( =  in21x3 in3x21))  ( =  in21x4 in4x21))  ( =  in21x5 in5x21))  ( =  in21x6 in6x21))  ( =  in21x7 in7x21))  ( =  in21x8 in8x21))  ( =  in21x9 in9x21))  ( =  in21x10 in10x21))  ( =  in21x11 in11x21))  ( =  in21x12 in12x21))  ( =  in21x13 in13x21))  ( =  in21x14 in14x21))  ( =  in21x15 in15x21))  ( =  in21x16 in16x21))  ( =  in21x17 in17x21))  ( =  in21x18 in18x21))  ( =  in21x19 in19x21))  ( =  in21x20 in20x21))  ( =  in22x0 in0x22))  ( =  in22x1 in1x22))  ( =  in22x2 in2x22))  ( =  in22x3 in3x22))  ( =  in22x4 in4x22))  ( =  in22x5 in5x22))  ( =  in22x6 in6x22))  ( =  in22x7 in7x22))  ( =  in22x8 in8x22))  ( =  in22x9 in9x22))  ( =  in22x10 in10x22))  ( =  in22x11 in11x22))  ( =  in22x12 in12x22))  ( =  in22x13 in13x22))  ( =  in22x14 in14x22))  ( =  in22x15 in15x22))  ( =  in22x16 in16x22))  ( =  in22x17 in17x22))  ( =  in22x18 in18x22))  ( =  in22x19 in19x22))  ( =  in22x20 in20x22))  ( =  in22x21 in21x22))  ( =  in23x0 in0x23))  ( =  in23x1 in1x23))  ( =  in23x2 in2x23))  ( =  in23x3 in3x23))  ( =  in23x4 in4x23))  ( =  in23x5 in5x23))  ( =  in23x6 in6x23))  ( =  in23x7 in7x23))  ( =  in23x8 in8x23))  ( =  in23x9 in9x23))  ( =  in23x10 in10x23))  ( =  in23x11 in11x23))  ( =  in23x12 in12x23))  ( =  in23x13 in13x23))  ( =  in23x14 in14x23))  ( =  in23x15 in15x23))  ( =  in23x16 in16x23))  ( =  in23x17 in17x23))  ( =  in23x18 in18x23))  ( =  in23x19 in19x23))  ( =  in23x20 in20x23))  ( =  in23x21 in21x23))  ( =  in23x22 in22x23))  ( =  in24x0 in0x24))  ( =  in24x1 in1x24))  ( =  in24x2 in2x24))  ( =  in24x3 in3x24))  ( =  in24x4 in4x24))  ( =  in24x5 in5x24))  ( =  in24x6 in6x24))  ( =  in24x7 in7x24))  ( =  in24x8 in8x24))  ( =  in24x9 in9x24))  ( =  in24x10 in10x24))  ( =  in24x11 in11x24))  ( =  in24x12 in12x24))  ( =  in24x13 in13x24))  ( =  in24x14 in14x24))  ( =  in24x15 in15x24))  ( =  in24x16 in16x24))  ( =  in24x17 in17x24))  ( =  in24x18 in18x24))  ( =  in24x19 in19x24))  ( =  in24x20 in20x24))  ( =  in24x21 in21x24))  ( =  in24x22 in22x24))  ( =  in24x23 in23x24))  ( =  in25x0 in0x25))  ( =  in25x1 in1x25))  ( =  in25x2 in2x25))  ( =  in25x3 in3x25))  ( =  in25x4 in4x25))  ( =  in25x5 in5x25))  ( =  in25x6 in6x25))  ( =  in25x7 in7x25))  ( =  in25x8 in8x25))  ( =  in25x9 in9x25))  ( =  in25x10 in10x25))  ( =  in25x11 in11x25))  ( =  in25x12 in12x25))  ( =  in25x13 in13x25))  ( =  in25x14 in14x25))  ( =  in25x15 in15x25))  ( =  in25x16 in16x25))  ( =  in25x17 in17x25))  ( =  in25x18 in18x25))  ( =  in25x19 in19x25))  ( =  in25x20 in20x25))  ( =  in25x21 in21x25))  ( =  in25x22 in22x25))  ( =  in25x23 in23x25))  ( =  in25x24 in24x25))  ( =  in26x0 in0x26))  ( =  in26x1 in1x26))  ( =  in26x2 in2x26))  ( =  in26x3 in3x26))  ( =  in26x4 in4x26))  ( =  in26x5 in5x26))  ( =  in26x6 in6x26))  ( =  in26x7 in7x26))  ( =  in26x8 in8x26))  ( =  in26x9 in9x26))  ( =  in26x10 in10x26))  ( =  in26x11 in11x26))  ( =  in26x12 in12x26))  ( =  in26x13 in13x26))  ( =  in26x14 in14x26))  ( =  in26x15 in15x26))  ( =  in26x16 in16x26))  ( =  in26x17 in17x26))  ( =  in26x18 in18x26))  ( =  in26x19 in19x26))  ( =  in26x20 in20x26))  ( =  in26x21 in21x26))  ( =  in26x22 in22x26))  ( =  in26x23 in23x26))  ( =  in26x24 in24x26))  ( =  in26x25 in25x26))  ( =  in27x0 in0x27))  ( =  in27x1 in1x27))  ( =  in27x2 in2x27))  ( =  in27x3 in3x27))  ( =  in27x4 in4x27))  ( =  in27x5 in5x27))  ( =  in27x6 in6x27))  ( =  in27x7 in7x27))  ( =  in27x8 in8x27))  ( =  in27x9 in9x27))  ( =  in27x10 in10x27))  ( =  in27x11 in11x27))  ( =  in27x12 in12x27))  ( =  in27x13 in13x27))  ( =  in27x14 in14x27))  ( =  in27x15 in15x27))  ( =  in27x16 in16x27))  ( =  in27x17 in17x27))  ( =  in27x18 in18x27))  ( =  in27x19 in19x27))  ( =  in27x20 in20x27))  ( =  in27x21 in21x27))  ( =  in27x22 in22x27))  ( =  in27x23 in23x27))  ( =  in27x24 in24x27))  ( =  in27x25 in25x27))  ( =  in27x26 in26x27)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4) ( = in5x0 in0x5) ( = in5x1 in1x5) ( = in5x2 in2x5) ( = in5x3 in3x5) ( = in5x4 in4x5) ( = in6x0 in0x6) ( = in6x1 in1x6) ( = in6x2 in2x6) ( = in6x3 in3x6) ( = in6x4 in4x6) ( = in6x5 in5x6) ( = in7x0 in0x7) ( = in7x1 in1x7) ( = in7x2 in2x7) ( = in7x3 in3x7) ( = in7x4 in4x7) ( = in7x5 in5x7) ( = in7x6 in6x7) ( = in8x0 in0x8) ( = in8x1 in1x8) ( = in8x2 in2x8) ( = in8x3 in3x8) ( = in8x4 in4x8) ( = in8x5 in5x8) ( = in8x6 in6x8) ( = in8x7 in7x8) ( = in9x0 in0x9) ( = in9x1 in1x9) ( = in9x2 in2x9) ( = in9x3 in3x9) ( = in9x4 in4x9) ( = in9x5 in5x9) ( = in9x6 in6x9) ( = in9x7 in7x9) ( = in9x8 in8x9) ( = in10x0 in0x10) ( = in10x1 in1x10) ( = in10x2 in2x10) ( = in10x3 in3x10) ( = in10x4 in4x10) ( = in10x5 in5x10) ( = in10x6 in6x10) ( = in10x7 in7x10) ( = in10x8 in8x10) ( = in10x9 in9x10) ( = in11x0 in0x11) ( = in11x1 in1x11) ( = in11x2 in2x11) ( = in11x3 in3x11) ( = in11x4 in4x11) ( = in11x5 in5x11) ( = in11x6 in6x11) ( = in11x7 in7x11) ( = in11x8 in8x11) ( = in11x9 in9x11) ( = in11x10 in10x11) ( = in12x0 in0x12) ( = in12x1 in1x12) ( = in12x2 in2x12) ( = in12x3 in3x12) ( = in12x4 in4x12) ( = in12x5 in5x12) ( = in12x6 in6x12) ( = in12x7 in7x12) ( = in12x8 in8x12) ( = in12x9 in9x12) ( = in12x10 in10x12) ( = in12x11 in11x12) ( = in13x0 in0x13) ( = in13x1 in1x13) ( = in13x2 in2x13) ( = in13x3 in3x13) ( = in13x4 in4x13) ( = in13x5 in5x13) ( = in13x6 in6x13) ( = in13x7 in7x13) ( = in13x8 in8x13) ( = in13x9 in9x13) ( = in13x10 in10x13) ( = in13x11 in11x13) ( = in13x12 in12x13) ( = in14x0 in0x14) ( = in14x1 in1x14) ( = in14x2 in2x14) ( = in14x3 in3x14) ( = in14x4 in4x14) ( = in14x5 in5x14) ( = in14x6 in6x14) ( = in14x7 in7x14) ( = in14x8 in8x14) ( = in14x9 in9x14) ( = in14x10 in10x14) ( = in14x11 in11x14) ( = in14x12 in12x14) ( = in14x13 in13x14) ( = in15x0 in0x15) ( = in15x1 in1x15) ( = in15x2 in2x15) ( = in15x3 in3x15) ( = in15x4 in4x15) ( = in15x5 in5x15) ( = in15x6 in6x15) ( = in15x7 in7x15) ( = in15x8 in8x15) ( = in15x9 in9x15) ( = in15x10 in10x15) ( = in15x11 in11x15) ( = in15x12 in12x15) ( = in15x13 in13x15) ( = in15x14 in14x15) ( = in16x0 in0x16) ( = in16x1 in1x16) ( = in16x2 in2x16) ( = in16x3 in3x16) ( = in16x4 in4x16) ( = in16x5 in5x16) ( = in16x6 in6x16) ( = in16x7 in7x16) ( = in16x8 in8x16) ( = in16x9 in9x16) ( = in16x10 in10x16) ( = in16x11 in11x16) ( = in16x12 in12x16) ( = in16x13 in13x16) ( = in16x14 in14x16) ( = in16x15 in15x16) ( = in17x0 in0x17) ( = in17x1 in1x17) ( = in17x2 in2x17) ( = in17x3 in3x17) ( = in17x4 in4x17) ( = in17x5 in5x17) ( = in17x6 in6x17) ( = in17x7 in7x17) ( = in17x8 in8x17) ( = in17x9 in9x17) ( = in17x10 in10x17) ( = in17x11 in11x17) ( = in17x12 in12x17) ( = in17x13 in13x17) ( = in17x14 in14x17) ( = in17x15 in15x17) ( = in17x16 in16x17) ( = in18x0 in0x18) ( = in18x1 in1x18) ( = in18x2 in2x18) ( = in18x3 in3x18) ( = in18x4 in4x18) ( = in18x5 in5x18) ( = in18x6 in6x18) ( = in18x7 in7x18) ( = in18x8 in8x18) ( = in18x9 in9x18) ( = in18x10 in10x18) ( = in18x11 in11x18) ( = in18x12 in12x18) ( = in18x13 in13x18) ( = in18x14 in14x18) ( = in18x15 in15x18) ( = in18x16 in16x18) ( = in18x17 in17x18) ( = in19x0 in0x19) ( = in19x1 in1x19) ( = in19x2 in2x19) ( = in19x3 in3x19) ( = in19x4 in4x19) ( = in19x5 in5x19) ( = in19x6 in6x19) ( = in19x7 in7x19) ( = in19x8 in8x19) ( = in19x9 in9x19) ( = in19x10 in10x19) ( = in19x11 in11x19) ( = in19x12 in12x19) ( = in19x13 in13x19) ( = in19x14 in14x19) ( = in19x15 in15x19) ( = in19x16 in16x19) ( = in19x17 in17x19) ( = in19x18 in18x19) ( = in20x0 in0x20) ( = in20x1 in1x20) ( = in20x2 in2x20) ( = in20x3 in3x20) ( = in20x4 in4x20) ( = in20x5 in5x20) ( = in20x6 in6x20) ( = in20x7 in7x20) ( = in20x8 in8x20) ( = in20x9 in9x20) ( = in20x10 in10x20) ( = in20x11 in11x20) ( = in20x12 in12x20) ( = in20x13 in13x20) ( = in20x14 in14x20) ( = in20x15 in15x20) ( = in20x16 in16x20) ( = in20x17 in17x20) ( = in20x18 in18x20) ( = in20x19 in19x20) ( = in21x0 in0x21) ( = in21x1 in1x21) ( = in21x2 in2x21) ( = in21x3 in3x21) ( = in21x4 in4x21) ( = in21x5 in5x21) ( = in21x6 in6x21) ( = in21x7 in7x21) ( = in21x8 in8x21) ( = in21x9 in9x21) ( = in21x10 in10x21) ( = in21x11 in11x21) ( = in21x12 in12x21) ( = in21x13 in13x21) ( = in21x14 in14x21) ( = in21x15 in15x21) ( = in21x16 in16x21) ( = in21x17 in17x21) ( = in21x18 in18x21) ( = in21x19 in19x21) ( = in21x20 in20x21) ( = in22x0 in0x22) ( = in22x1 in1x22) ( = in22x2 in2x22) ( = in22x3 in3x22) ( = in22x4 in4x22) ( = in22x5 in5x22) ( = in22x6 in6x22) ( = in22x7 in7x22) ( = in22x8 in8x22) ( = in22x9 in9x22) ( = in22x10 in10x22) ( = in22x11 in11x22) ( = in22x12 in12x22) ( = in22x13 in13x22) ( = in22x14 in14x22) ( = in22x15 in15x22) ( = in22x16 in16x22) ( = in22x17 in17x22) ( = in22x18 in18x22) ( = in22x19 in19x22) ( = in22x20 in20x22) ( = in22x21 in21x22) ( = in23x0 in0x23) ( = in23x1 in1x23) ( = in23x2 in2x23) ( = in23x3 in3x23) ( = in23x4 in4x23) ( = in23x5 in5x23) ( = in23x6 in6x23) ( = in23x7 in7x23) ( = in23x8 in8x23) ( = in23x9 in9x23) ( = in23x10 in10x23) ( = in23x11 in11x23) ( = in23x12 in12x23) ( = in23x13 in13x23) ( = in23x14 in14x23) ( = in23x15 in15x23) ( = in23x16 in16x23) ( = in23x17 in17x23) ( = in23x18 in18x23) ( = in23x19 in19x23) ( = in23x20 in20x23) ( = in23x21 in21x23) ( = in23x22 in22x23) ( = in24x0 in0x24) ( = in24x1 in1x24) ( = in24x2 in2x24) ( = in24x3 in3x24) ( = in24x4 in4x24) ( = in24x5 in5x24) ( = in24x6 in6x24) ( = in24x7 in7x24) ( = in24x8 in8x24) ( = in24x9 in9x24) ( = in24x10 in10x24) ( = in24x11 in11x24) ( = in24x12 in12x24) ( = in24x13 in13x24) ( = in24x14 in14x24) ( = in24x15 in15x24) ( = in24x16 in16x24) ( = in24x17 in17x24) ( = in24x18 in18x24) ( = in24x19 in19x24) ( = in24x20 in20x24) ( = in24x21 in21x24) ( = in24x22 in22x24) ( = in24x23 in23x24) ( = in25x0 in0x25) ( = in25x1 in1x25) ( = in25x2 in2x25) ( = in25x3 in3x25) ( = in25x4 in4x25) ( = in25x5 in5x25) ( = in25x6 in6x25) ( = in25x7 in7x25) ( = in25x8 in8x25) ( = in25x9 in9x25) ( = in25x10 in10x25) ( = in25x11 in11x25) ( = in25x12 in12x25) ( = in25x13 in13x25) ( = in25x14 in14x25) ( = in25x15 in15x25) ( = in25x16 in16x25) ( = in25x17 in17x25) ( = in25x18 in18x25) ( = in25x19 in19x25) ( = in25x20 in20x25) ( = in25x21 in21x25) ( = in25x22 in22x25) ( = in25x23 in23x25) ( = in25x24 in24x25) ( = in26x0 in0x26) ( = in26x1 in1x26) ( = in26x2 in2x26) ( = in26x3 in3x26) ( = in26x4 in4x26) ( = in26x5 in5x26) ( = in26x6 in6x26) ( = in26x7 in7x26) ( = in26x8 in8x26) ( = in26x9 in9x26) ( = in26x10 in10x26) ( = in26x11 in11x26) ( = in26x12 in12x26) ( = in26x13 in13x26) ( = in26x14 in14x26) ( = in26x15 in15x26) ( = in26x16 in16x26) ( = in26x17 in17x26) ( = in26x18 in18x26) ( = in26x19 in19x26) ( = in26x20 in20x26) ( = in26x21 in21x26) ( = in26x22 in22x26) ( = in26x23 in23x26) ( = in26x24 in24x26) ( = in26x25 in25x26) ( = in27x0 in0x27) ( = in27x1 in1x27) ( = in27x2 in2x27) ( = in27x3 in3x27) ( = in27x4 in4x27) ( = in27x5 in5x27) ( = in27x6 in6x27) ( = in27x7 in7x27) ( = in27x8 in8x27) ( = in27x9 in9x27) ( = in27x10 in10x27) ( = in27x11 in11x27) ( = in27x12 in12x27) ( = in27x13 in13x27) ( = in27x14 in14x27) ( = in27x15 in15x27) ( = in27x16 in16x27) ( = in27x17 in17x27) ( = in27x18 in18x27) ( = in27x19 in19x27) ( = in27x20 in20x27) ( = in27x21 in21x27) ( = in27x22 in22x27) ( = in27x23 in23x27) ( = in27x24 in24x27) ( = in27x25 in25x27) ( = in27x26 in26x27)))",
        "equivalent": true
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in1x18 Int)",
            "(declare-const in1x17 Int)",
            "(declare-const in1x16 Int)",
            "(declare-const in1x15 Int)",
            "(declare-const in23x28 Int)",
            "(declare-const in1x19 Int)",
            "(declare-const in23x24 Int)",
            "(declare-const in23x25 Int)",
            "(declare-const in23x26 Int)",
            "(declare-const in23x27 Int)",
            "(declare-const in23x20 Int)",
            "(declare-const in23x21 Int)",
            "(declare-const in23x22 Int)",
            "(declare-const in1x10 Int)",
            "(declare-const in1x14 Int)",
            "(declare-const in1x13 Int)",
            "(declare-const in1x12 Int)",
            "(declare-const in1x11 Int)",
            "(declare-const in23x17 Int)",
            "(declare-const in23x18 Int)",
            "(declare-const in23x19 Int)",
            "(declare-const in23x13 Int)",
            "(declare-const in8x7 Int)",
            "(declare-const in23x14 Int)",
            "(declare-const in23x15 Int)",
            "(declare-const in8x5 Int)",
            "(declare-const in23x16 Int)",
            "(declare-const in8x6 Int)",
            "(declare-const in23x10 Int)",
            "(declare-const in23x11 Int)",
            "(declare-const in8x9 Int)",
            "(declare-const in23x12 Int)",
            "(declare-const in8x0 Int)",
            "(declare-const in8x3 Int)",
            "(declare-const in8x4 Int)",
            "(declare-const in8x1 Int)",
            "(declare-const in8x2 Int)",
            "(declare-const in11x28 Int)",
            "(declare-const in11x27 Int)",
            "(declare-const in11x24 Int)",
            "(declare-const in11x23 Int)",
            "(declare-const in11x26 Int)",
            "(declare-const in11x25 Int)",
            "(declare-const in11x20 Int)",
            "(declare-const in11x22 Int)",
            "(declare-const in11x21 Int)",
            "(declare-const in18x2 Int)",
            "(declare-const in11x17 Int)",
            "(declare-const in18x3 Int)",
            "(declare-const in11x16 Int)",
            "(declare-const in11x19 Int)",
            "(declare-const in18x0 Int)",
            "(declare-const in11x18 Int)",
            "(declare-const in18x1 Int)",
            "(declare-const in18x6 Int)",
            "(declare-const in11x13 Int)",
            "(declare-const in18x7 Int)",
            "(declare-const in11x12 Int)",
            "(declare-const in18x4 Int)",
            "(declare-const in11x15 Int)",
            "(declare-const in18x5 Int)",
            "(declare-const in11x14 Int)",
            "(declare-const in18x8 Int)",
            "(declare-const in18x9 Int)",
            "(declare-const in11x10 Int)",
            "(declare-const in1x28 Int)",
            "(declare-const in1x27 Int)",
            "(declare-const in1x26 Int)",
            "(declare-const in1x21 Int)",
            "(declare-const in1x20 Int)",
            "(declare-const in1x25 Int)",
            "(declare-const in1x24 Int)",
            "(declare-const in1x23 Int)",
            "(declare-const in1x22 Int)",
            "(declare-const in21x26 Int)",
            "(declare-const in21x27 Int)",
            "(declare-const in21x28 Int)",
            "(declare-const in21x22 Int)",
            "(declare-const in21x23 Int)",
            "(declare-const in21x24 Int)",
            "(declare-const in21x25 Int)",
            "(declare-const in21x20 Int)",
            "(declare-const in15x11 Int)",
            "(declare-const in15x10 Int)",
            "(declare-const in15x19 Int)",
            "(declare-const in15x18 Int)",
            "(declare-const in15x17 Int)",
            "(declare-const in15x16 Int)",
            "(declare-const in15x14 Int)",
            "(declare-const in15x13 Int)",
            "(declare-const in15x12 Int)",
            "(declare-const in20x0 Int)",
            "(declare-const in20x3 Int)",
            "(declare-const in20x4 Int)",
            "(declare-const in20x1 Int)",
            "(declare-const in20x2 Int)",
            "(declare-const in8x12 Int)",
            "(declare-const in8x13 Int)",
            "(declare-const in8x10 Int)",
            "(declare-const in8x11 Int)",
            "(declare-const in8x18 Int)",
            "(declare-const in8x19 Int)",
            "(declare-const in8x16 Int)",
            "(declare-const in8x17 Int)",
            "(declare-const in8x14 Int)",
            "(declare-const in8x15 Int)",
            "(declare-const in25x27 Int)",
            "(declare-const in25x26 Int)",
            "(declare-const in25x28 Int)",
            "(declare-const in25x23 Int)",
            "(declare-const in25x22 Int)",
            "(declare-const in25x24 Int)",
            "(declare-const in8x23 Int)",
            "(declare-const in20x7 Int)",
            "(declare-const in8x24 Int)",
            "(declare-const in20x8 Int)",
            "(declare-const in25x21 Int)",
            "(declare-const in8x21 Int)",
            "(declare-const in20x5 Int)",
            "(declare-const in25x20 Int)",
            "(declare-const in8x22 Int)",
            "(declare-const in20x6 Int)",
            "(declare-const in8x20 Int)",
            "(declare-const in20x9 Int)",
            "(declare-const in8x27 Int)",
            "(declare-const in8x28 Int)",
            "(declare-const in8x25 Int)",
            "(declare-const in8x26 Int)",
            "(declare-const in25x19 Int)",
            "(declare-const in25x16 Int)",
            "(declare-const in25x15 Int)",
            "(declare-const in25x18 Int)",
            "(declare-const in25x17 Int)",
            "(declare-const in25x12 Int)",
            "(declare-const in25x11 Int)",
            "(declare-const in25x14 Int)",
            "(declare-const in25x13 Int)",
            "(declare-const in25x10 Int)",
            "(declare-const in13x20 Int)",
            "(declare-const in13x27 Int)",
            "(declare-const in13x28 Int)",
            "(declare-const in13x25 Int)",
            "(declare-const in13x26 Int)",
            "(declare-const in13x23 Int)",
            "(declare-const in13x24 Int)",
            "(declare-const in13x21 Int)",
            "(declare-const in13x22 Int)",
            "(declare-const in13x18 Int)",
            "(declare-const in13x19 Int)",
            "(declare-const in13x16 Int)",
            "(declare-const in13x17 Int)",
            "(declare-const in13x14 Int)",
            "(declare-const in13x15 Int)",
            "(declare-const in13x12 Int)",
            "(declare-const in13x10 Int)",
            "(declare-const in13x11 Int)",
            "(declare-const in23x0 Int)",
            "(declare-const in23x1 Int)",
            "(declare-const in12x4 Int)",
            "(declare-const in12x5 Int)",
            "(declare-const in12x2 Int)",
            "(declare-const in12x3 Int)",
            "(declare-const in12x8 Int)",
            "(declare-const in12x9 Int)",
            "(declare-const in12x6 Int)",
            "(declare-const in12x7 Int)",
            "(declare-const in17x25 Int)",
            "(declare-const in17x26 Int)",
            "(declare-const in17x27 Int)",
            "(declare-const in17x28 Int)",
            "(declare-const in23x4 Int)",
            "(declare-const in23x5 Int)",
            "(declare-const in23x2 Int)",
            "(declare-const in23x3 Int)",
            "(declare-const in23x8 Int)",
            "(declare-const in23x9 Int)",
            "(declare-const in23x6 Int)",
            "(declare-const in23x7 Int)",
            "(declare-const in17x20 Int)",
            "(declare-const in17x21 Int)",
            "(declare-const in17x22 Int)",
            "(declare-const in17x23 Int)",
            "(declare-const in17x24 Int)",
            "(declare-const in17x14 Int)",
            "(declare-const in17x15 Int)",
            "(declare-const in17x16 Int)",
            "(declare-const in17x18 Int)",
            "(declare-const in17x19 Int)",
            "(declare-const in0x7 Int)",
            "(declare-const in0x8 Int)",
            "(declare-const in5x20 Int)",
            "(declare-const in0x5 Int)",
            "(declare-const in5x21 Int)",
            "(declare-const in0x6 Int)",
            "(declare-const in0x9 Int)",
            "(declare-const in5x26 Int)",
            "(declare-const in5x27 Int)",
            "(declare-const in5x28 Int)",
            "(declare-const in5x22 Int)",
            "(declare-const in17x10 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in5x23 Int)",
            "(declare-const in17x11 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in5x24 Int)",
            "(declare-const in17x12 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in5x25 Int)",
            "(declare-const in17x13 Int)",
            "(declare-const in0x2 Int)",
            "(declare-const in12x0 Int)",
            "(declare-const in12x1 Int)",
            "(declare-const in21x2 Int)",
            "(declare-const in21x3 Int)",
            "(declare-const in21x0 Int)",
            "(declare-const in21x1 Int)",
            "(declare-const in7x21 Int)",
            "(declare-const in10x5 Int)",
            "(declare-const in7x20 Int)",
            "(declare-const in10x4 Int)",
            "(declare-const in7x23 Int)",
            "(declare-const in10x7 Int)",
            "(declare-const in7x22 Int)",
            "(declare-const in10x6 Int)",
            "(declare-const in10x9 Int)",
            "(declare-const in10x8 Int)",
            "(declare-const in7x28 Int)",
            "(declare-const in7x25 Int)",
            "(declare-const in7x24 Int)",
            "(declare-const in7x27 Int)",
            "(declare-const in7x26 Int)",
            "(declare-const in27x28 Int)",
            "(declare-const in27x26 Int)",
            "(declare-const in27x24 Int)",
            "(declare-const in27x25 Int)",
            "(declare-const in27x22 Int)",
            "(declare-const in21x6 Int)",
            "(declare-const in27x23 Int)",
            "(declare-const in21x7 Int)",
            "(declare-const in27x20 Int)",
            "(declare-const in21x4 Int)",
            "(declare-const in27x21 Int)",
            "(declare-const in21x5 Int)",
            "(declare-const in21x8 Int)",
            "(declare-const in21x9 Int)",
            "(declare-const in27x19 Int)",
            "(declare-const in27x17 Int)",
            "(declare-const in27x18 Int)",
            "(declare-const in27x15 Int)",
            "(declare-const in27x16 Int)",
            "(declare-const in27x13 Int)",
            "(declare-const in27x14 Int)",
            "(declare-const in27x11 Int)",
            "(declare-const in2x5 Int)",
            "(declare-const in27x12 Int)",
            "(declare-const in2x6 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in27x10 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in2x9 Int)",
            "(declare-const in2x7 Int)",
            "(declare-const in2x8 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in15x22 Int)",
            "(declare-const in15x21 Int)",
            "(declare-const in15x20 Int)",
            "(declare-const in10x1 Int)",
            "(declare-const in10x0 Int)",
            "(declare-const in10x3 Int)",
            "(declare-const in10x2 Int)",
            "(declare-const in7x10 Int)",
            "(declare-const in7x12 Int)",
            "(declare-const in7x11 Int)",
            "(declare-const in7x18 Int)",
            "(declare-const in7x17 Int)",
            "(declare-const in15x28 Int)",
            "(declare-const in15x27 Int)",
            "(declare-const in7x19 Int)",
            "(declare-const in15x26 Int)",
            "(declare-const in7x14 Int)",
            "(declare-const in15x25 Int)",
            "(declare-const in7x13 Int)",
            "(declare-const in15x24 Int)",
            "(declare-const in7x16 Int)",
            "(declare-const in15x23 Int)",
            "(declare-const in7x15 Int)",
            "(declare-const in3x28 Int)",
            "(declare-const in16x0 Int)",
            "(declare-const in16x1 Int)",
            "(declare-const in16x4 Int)",
            "(declare-const in16x5 Int)",
            "(declare-const in16x2 Int)",
            "(declare-const in16x3 Int)",
            "(declare-const in3x23 Int)",
            "(declare-const in16x8 Int)",
            "(declare-const in3x22 Int)",
            "(declare-const in16x9 Int)",
            "(declare-const in3x21 Int)",
            "(declare-const in16x6 Int)",
            "(declare-const in3x20 Int)",
            "(declare-const in16x7 Int)",
            "(declare-const in3x27 Int)",
            "(declare-const in3x26 Int)",
            "(declare-const in3x25 Int)",
            "(declare-const in3x24 Int)",
            "(declare-const in27x0 Int)",
            "(declare-const in27x1 Int)",
            "(declare-const in27x4 Int)",
            "(declare-const in27x5 Int)",
            "(declare-const in27x2 Int)",
            "(declare-const in27x3 Int)",
            "(declare-const in27x8 Int)",
            "(declare-const in27x9 Int)",
            "(declare-const in27x6 Int)",
            "(declare-const in27x7 Int)",
            "(declare-const in20x28 Int)",
            "(declare-const in20x27 Int)",
            "(declare-const in20x26 Int)",
            "(declare-const in20x25 Int)",
            "(declare-const in4x9 Int)",
            "(declare-const in20x24 Int)",
            "(declare-const in20x23 Int)",
            "(declare-const in20x22 Int)",
            "(declare-const in20x21 Int)",
            "(declare-const in4x3 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in4x7 Int)",
            "(declare-const in4x8 Int)",
            "(declare-const in4x5 Int)",
            "(declare-const in4x6 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in19x28 Int)",
            "(declare-const in20x17 Int)",
            "(declare-const in19x27 Int)",
            "(declare-const in20x16 Int)",
            "(declare-const in3x19 Int)",
            "(declare-const in20x15 Int)",
            "(declare-const in3x18 Int)",
            "(declare-const in20x14 Int)",
            "(declare-const in3x17 Int)",
            "(declare-const in20x19 Int)",
            "(declare-const in20x18 Int)",
            "(declare-const in20x13 Int)",
            "(declare-const in20x12 Int)",
            "(declare-const in20x11 Int)",
            "(declare-const in20x10 Int)",
            "(declare-const in19x20 Int)",
            "(declare-const in3x12 Int)",
            "(declare-const in3x11 Int)",
            "(declare-const in19x22 Int)",
            "(declare-const in3x10 Int)",
            "(declare-const in19x21 Int)",
            "(declare-const in19x24 Int)",
            "(declare-const in3x16 Int)",
            "(declare-const in19x23 Int)",
            "(declare-const in3x15 Int)",
            "(declare-const in19x26 Int)",
            "(declare-const in3x14 Int)",
            "(declare-const in19x25 Int)",
            "(declare-const in3x13 Int)",
            "(declare-const in19x17 Int)",
            "(declare-const in19x16 Int)",
            "(declare-const in19x18 Int)",
            "(declare-const in14x2 Int)",
            "(declare-const in14x3 Int)",
            "(declare-const in14x0 Int)",
            "(declare-const in14x1 Int)",
            "(declare-const in14x6 Int)",
            "(declare-const in14x7 Int)",
            "(declare-const in14x4 Int)",
            "(declare-const in14x5 Int)",
            "(declare-const in19x11 Int)",
            "(declare-const in14x8 Int)",
            "(declare-const in19x10 Int)",
            "(declare-const in14x9 Int)",
            "(declare-const in19x13 Int)",
            "(declare-const in19x12 Int)",
            "(declare-const in19x15 Int)",
            "(declare-const in19x14 Int)",
            "(declare-const in5x19 Int)",
            "(declare-const in25x2 Int)",
            "(declare-const in25x3 Int)",
            "(declare-const in25x0 Int)",
            "(declare-const in25x1 Int)",
            "(declare-const in5x10 Int)",
            "(declare-const in25x6 Int)",
            "(declare-const in25x7 Int)",
            "(declare-const in25x4 Int)",
            "(declare-const in25x5 Int)",
            "(declare-const in5x15 Int)",
            "(declare-const in5x16 Int)",
            "(declare-const in25x8 Int)",
            "(declare-const in5x17 Int)",
            "(declare-const in25x9 Int)",
            "(declare-const in5x18 Int)",
            "(declare-const in5x11 Int)",
            "(declare-const in5x12 Int)",
            "(declare-const in5x13 Int)",
            "(declare-const in5x14 Int)",
            "(declare-const in6x9 Int)",
            "(declare-const in6x7 Int)",
            "(declare-const in6x8 Int)",
            "(declare-const in6x1 Int)",
            "(declare-const in6x2 Int)",
            "(declare-const in6x0 Int)",
            "(declare-const in6x5 Int)",
            "(declare-const in6x3 Int)",
            "(declare-const in6x4 Int)",
            "(declare-const in7x8 Int)",
            "(declare-const in7x9 Int)",
            "(declare-const in7x6 Int)",
            "(declare-const in7x0 Int)",
            "(declare-const in7x1 Int)",
            "(declare-const in7x4 Int)",
            "(declare-const in7x5 Int)",
            "(declare-const in12x28 Int)",
            "(declare-const in7x2 Int)",
            "(declare-const in7x3 Int)",
            "(declare-const in12x26 Int)",
            "(declare-const in12x27 Int)",
            "(declare-const in12x24 Int)",
            "(declare-const in12x25 Int)",
            "(declare-const in12x22 Int)",
            "(declare-const in12x23 Int)",
            "(declare-const in12x20 Int)",
            "(declare-const in12x21 Int)",
            "(declare-const in12x19 Int)",
            "(declare-const in12x17 Int)",
            "(declare-const in12x18 Int)",
            "(declare-const in12x15 Int)",
            "(declare-const in12x16 Int)",
            "(declare-const in12x13 Int)",
            "(declare-const in12x14 Int)",
            "(declare-const in12x11 Int)",
            "(declare-const in12x10 Int)",
            "(declare-const in0x16 Int)",
            "(declare-const in0x17 Int)",
            "(declare-const in0x14 Int)",
            "(declare-const in0x15 Int)",
            "(declare-const in0x18 Int)",
            "(declare-const in0x19 Int)",
            "(declare-const in0x12 Int)",
            "(declare-const in0x13 Int)",
            "(declare-const in0x10 Int)",
            "(declare-const in0x11 Int)",
            "(declare-const in0x27 Int)",
            "(declare-const in0x28 Int)",
            "(declare-const in0x25 Int)",
            "(declare-const in0x26 Int)",
            "(declare-const in0x20 Int)",
            "(declare-const in0x23 Int)",
            "(declare-const in0x24 Int)",
            "(declare-const in0x21 Int)",
            "(declare-const in0x22 Int)",
            "(declare-const in2x19 Int)",
            "(declare-const in2x18 Int)",
            "(declare-const in2x17 Int)",
            "(declare-const in2x16 Int)",
            "(declare-const in22x27 Int)",
            "(declare-const in22x28 Int)",
            "(declare-const in22x23 Int)",
            "(declare-const in9x6 Int)",
            "(declare-const in22x24 Int)",
            "(declare-const in9x7 Int)",
            "(declare-const in22x25 Int)",
            "(declare-const in9x4 Int)",
            "(declare-const in22x26 Int)",
            "(declare-const in9x5 Int)",
            "(declare-const in22x20 Int)",
            "(declare-const in22x21 Int)",
            "(declare-const in9x8 Int)",
            "(declare-const in9x2 Int)",
            "(declare-const in9x3 Int)",
            "(declare-const in9x0 Int)",
            "(declare-const in9x1 Int)",
            "(declare-const in2x11 Int)",
            "(declare-const in2x10 Int)",
            "(declare-const in2x15 Int)",
            "(declare-const in2x14 Int)",
            "(declare-const in2x13 Int)",
            "(declare-const in2x12 Int)",
            "(declare-const in2x28 Int)",
            "(declare-const in2x27 Int)",
            "(declare-const in22x16 Int)",
            "(declare-const in22x17 Int)",
            "(declare-const in22x18 Int)",
            "(declare-const in22x19 Int)",
            "(declare-const in22x12 Int)",
            "(declare-const in22x13 Int)",
            "(declare-const in22x14 Int)",
            "(declare-const in22x15 Int)",
            "(declare-const in22x10 Int)",
            "(declare-const in22x11 Int)",
            "(declare-const in2x22 Int)",
            "(declare-const in2x21 Int)",
            "(declare-const in2x20 Int)",
            "(declare-const in2x26 Int)",
            "(declare-const in2x25 Int)",
            "(declare-const in2x24 Int)",
            "(declare-const in2x23 Int)",
            "(declare-const in10x27 Int)",
            "(declare-const in19x1 Int)",
            "(declare-const in10x26 Int)",
            "(declare-const in19x2 Int)",
            "(declare-const in10x28 Int)",
            "(declare-const in19x0 Int)",
            "(declare-const in10x23 Int)",
            "(declare-const in19x5 Int)",
            "(declare-const in10x22 Int)",
            "(declare-const in19x6 Int)",
            "(declare-const in10x25 Int)",
            "(declare-const in19x3 Int)",
            "(declare-const in10x24 Int)",
            "(declare-const in19x4 Int)",
            "(declare-const in19x9 Int)",
            "(declare-const in10x21 Int)",
            "(declare-const in19x7 Int)",
            "(declare-const in10x20 Int)",
            "(declare-const in19x8 Int)",
            "(declare-const in10x19 Int)",
            "(declare-const in10x16 Int)",
            "(declare-const in10x15 Int)",
            "(declare-const in10x18 Int)",
            "(declare-const in10x17 Int)",
            "(declare-const in10x12 Int)",
            "(declare-const in10x11 Int)",
            "(declare-const in10x14 Int)",
            "(declare-const in10x13 Int)",
            "(declare-const in26x27 Int)",
            "(declare-const in26x28 Int)",
            "(declare-const in26x25 Int)",
            "(declare-const in26x23 Int)",
            "(declare-const in26x24 Int)",
            "(declare-const in26x21 Int)",
            "(declare-const in26x22 Int)",
            "(declare-const in26x20 Int)",
            "(declare-const in26x18 Int)",
            "(declare-const in26x19 Int)",
            "(declare-const in26x16 Int)",
            "(declare-const in26x17 Int)",
            "(declare-const in26x14 Int)",
            "(declare-const in26x15 Int)",
            "(declare-const in26x12 Int)",
            "(declare-const in26x13 Int)",
            "(declare-const in26x10 Int)",
            "(declare-const in9x13 Int)",
            "(declare-const in26x11 Int)",
            "(declare-const in9x14 Int)",
            "(declare-const in9x11 Int)",
            "(declare-const in9x12 Int)",
            "(declare-const in9x10 Int)",
            "(declare-const in9x19 Int)",
            "(declare-const in9x17 Int)",
            "(declare-const in9x18 Int)",
            "(declare-const in9x15 Int)",
            "(declare-const in9x16 Int)",
            "(declare-const in14x21 Int)",
            "(declare-const in14x20 Int)",
            "(declare-const in14x28 Int)",
            "(declare-const in14x27 Int)",
            "(declare-const in14x26 Int)",
            "(declare-const in14x25 Int)",
            "(declare-const in14x24 Int)",
            "(declare-const in14x23 Int)",
            "(declare-const in14x22 Int)",
            "(declare-const in14x10 Int)",
            "(declare-const in14x19 Int)",
            "(declare-const in14x18 Int)",
            "(declare-const in14x17 Int)",
            "(declare-const in14x16 Int)",
            "(declare-const in14x15 Int)",
            "(declare-const in14x13 Int)",
            "(declare-const in14x12 Int)",
            "(declare-const in14x11 Int)",
            "(declare-const in24x26 Int)",
            "(declare-const in24x25 Int)",
            "(declare-const in24x28 Int)",
            "(declare-const in24x27 Int)",
            "(declare-const in24x22 Int)",
            "(declare-const in24x21 Int)",
            "(declare-const in24x23 Int)",
            "(declare-const in9x24 Int)",
            "(declare-const in9x25 Int)",
            "(declare-const in24x20 Int)",
            "(declare-const in9x22 Int)",
            "(declare-const in9x23 Int)",
            "(declare-const in9x20 Int)",
            "(declare-const in9x21 Int)",
            "(declare-const in9x28 Int)",
            "(declare-const in9x26 Int)",
            "(declare-const in9x27 Int)",
            "(declare-const in24x19 Int)",
            "(declare-const in24x18 Int)",
            "(declare-const in24x15 Int)",
            "(declare-const in24x14 Int)",
            "(declare-const in24x17 Int)",
            "(declare-const in24x16 Int)",
            "(declare-const in24x11 Int)",
            "(declare-const in24x10 Int)",
            "(declare-const in24x13 Int)",
            "(declare-const in24x12 Int)",
            "(declare-const in6x11 Int)",
            "(declare-const in6x10 Int)",
            "(declare-const in6x17 Int)",
            "(declare-const in6x16 Int)",
            "(declare-const in6x19 Int)",
            "(declare-const in6x18 Int)",
            "(declare-const in6x13 Int)",
            "(declare-const in6x12 Int)",
            "(declare-const in6x15 Int)",
            "(declare-const in6x14 Int)",
            "(declare-const in11x0 Int)",
            "(declare-const in11x2 Int)",
            "(declare-const in11x1 Int)",
            "(declare-const in6x20 Int)",
            "(declare-const in6x22 Int)",
            "(declare-const in6x21 Int)",
            "(declare-const in6x28 Int)",
            "(declare-const in6x27 Int)",
            "(declare-const in6x24 Int)",
            "(declare-const in6x23 Int)",
            "(declare-const in6x26 Int)",
            "(declare-const in6x25 Int)",
            "(declare-const in28x27 Int)",
            "(declare-const in24x0 Int)",
            "(declare-const in28x26 Int)",
            "(declare-const in28x25 Int)",
            "(declare-const in28x24 Int)",
            "(declare-const in13x3 Int)",
            "(declare-const in28x23 Int)",
            "(declare-const in13x4 Int)",
            "(declare-const in28x22 Int)",
            "(declare-const in13x1 Int)",
            "(declare-const in28x21 Int)",
            "(declare-const in13x2 Int)",
            "(declare-const in28x20 Int)",
            "(declare-const in13x7 Int)",
            "(declare-const in13x8 Int)",
            "(declare-const in13x5 Int)",
            "(declare-const in13x6 Int)",
            "(declare-const in13x9 Int)",
            "(declare-const in28x19 Int)",
            "(declare-const in28x18 Int)",
            "(declare-const in28x17 Int)",
            "(declare-const in28x16 Int)",
            "(declare-const in28x15 Int)",
            "(declare-const in28x14 Int)",
            "(declare-const in28x13 Int)",
            "(declare-const in24x3 Int)",
            "(declare-const in28x12 Int)",
            "(declare-const in24x4 Int)",
            "(declare-const in28x11 Int)",
            "(declare-const in24x1 Int)",
            "(declare-const in28x10 Int)",
            "(declare-const in24x2 Int)",
            "(declare-const in24x7 Int)",
            "(declare-const in24x8 Int)",
            "(declare-const in24x5 Int)",
            "(declare-const in24x6 Int)",
            "(declare-const in24x9 Int)",
            "(declare-const in16x24 Int)",
            "(declare-const in16x25 Int)",
            "(declare-const in16x26 Int)",
            "(declare-const in16x27 Int)",
            "(declare-const in16x28 Int)",
            "(declare-const in1x6 Int)",
            "(declare-const in1x7 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in1x5 Int)",
            "(declare-const in1x8 Int)",
            "(declare-const in1x9 Int)",
            "(declare-const in16x20 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in16x21 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in16x22 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in16x23 Int)",
            "(declare-const in16x13 Int)",
            "(declare-const in16x14 Int)",
            "(declare-const in16x15 Int)",
            "(declare-const in16x17 Int)",
            "(declare-const in16x18 Int)",
            "(declare-const in16x19 Int)",
            "(declare-const in16x10 Int)",
            "(declare-const in16x11 Int)",
            "(declare-const in16x12 Int)",
            "(declare-const in22x1 Int)",
            "(declare-const in22x2 Int)",
            "(declare-const in22x0 Int)",
            "(declare-const in11x4 Int)",
            "(declare-const in11x3 Int)",
            "(declare-const in11x6 Int)",
            "(declare-const in11x5 Int)",
            "(declare-const in11x8 Int)",
            "(declare-const in11x7 Int)",
            "(declare-const in11x9 Int)",
            "(declare-const in22x5 Int)",
            "(declare-const in22x6 Int)",
            "(declare-const in22x3 Int)",
            "(declare-const in22x4 Int)",
            "(declare-const in22x9 Int)",
            "(declare-const in22x7 Int)",
            "(declare-const in22x8 Int)",
            "(declare-const in21x19 Int)",
            "(declare-const in21x15 Int)",
            "(declare-const in21x16 Int)",
            "(declare-const in21x17 Int)",
            "(declare-const in21x18 Int)",
            "(declare-const in21x11 Int)",
            "(declare-const in21x12 Int)",
            "(declare-const in21x13 Int)",
            "(declare-const in21x14 Int)",
            "(declare-const in21x10 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in3x5 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in3x8 Int)",
            "(declare-const in3x9 Int)",
            "(declare-const in3x6 Int)",
            "(declare-const in3x7 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in17x0 Int)",
            "(declare-const in17x3 Int)",
            "(declare-const in17x4 Int)",
            "(declare-const in17x1 Int)",
            "(declare-const in17x2 Int)",
            "(declare-const in17x7 Int)",
            "(declare-const in17x8 Int)",
            "(declare-const in17x5 Int)",
            "(declare-const in17x6 Int)",
            "(declare-const in17x9 Int)",
            "(declare-const in28x0 Int)",
            "(declare-const in28x3 Int)",
            "(declare-const in28x4 Int)",
            "(declare-const in28x1 Int)",
            "(declare-const in28x2 Int)",
            "(declare-const in28x7 Int)",
            "(declare-const in28x8 Int)",
            "(declare-const in28x5 Int)",
            "(declare-const in28x6 Int)",
            "(declare-const in28x9 Int)",
            "(declare-const in5x8 Int)",
            "(declare-const in5x9 Int)",
            "(declare-const in5x2 Int)",
            "(declare-const in5x3 Int)",
            "(declare-const in5x0 Int)",
            "(declare-const in5x1 Int)",
            "(declare-const in5x6 Int)",
            "(declare-const in5x7 Int)",
            "(declare-const in5x4 Int)",
            "(declare-const in13x0 Int)",
            "(declare-const in18x27 Int)",
            "(declare-const in18x26 Int)",
            "(declare-const in18x28 Int)",
            "(declare-const in4x18 Int)",
            "(declare-const in4x19 Int)",
            "(declare-const in15x1 Int)",
            "(declare-const in15x2 Int)",
            "(declare-const in15x0 Int)",
            "(declare-const in15x5 Int)",
            "(declare-const in15x6 Int)",
            "(declare-const in15x3 Int)",
            "(declare-const in15x4 Int)",
            "(declare-const in15x9 Int)",
            "(declare-const in4x14 Int)",
            "(declare-const in4x15 Int)",
            "(declare-const in18x21 Int)",
            "(declare-const in4x16 Int)",
            "(declare-const in15x7 Int)",
            "(declare-const in18x20 Int)",
            "(declare-const in4x17 Int)",
            "(declare-const in15x8 Int)",
            "(declare-const in18x23 Int)",
            "(declare-const in4x10 Int)",
            "(declare-const in18x22 Int)",
            "(declare-const in4x11 Int)",
            "(declare-const in18x25 Int)",
            "(declare-const in4x12 Int)",
            "(declare-const in18x24 Int)",
            "(declare-const in4x13 Int)",
            "(declare-const in18x16 Int)",
            "(declare-const in18x15 Int)",
            "(declare-const in18x17 Int)",
            "(declare-const in18x19 Int)",
            "(declare-const in26x1 Int)",
            "(declare-const in26x2 Int)",
            "(declare-const in26x0 Int)",
            "(declare-const in4x20 Int)",
            "(declare-const in26x5 Int)",
            "(declare-const in26x6 Int)",
            "(declare-const in26x3 Int)",
            "(declare-const in26x4 Int)",
            "(declare-const in26x9 Int)",
            "(declare-const in4x25 Int)",
            "(declare-const in4x26 Int)",
            "(declare-const in4x27 Int)",
            "(declare-const in26x7 Int)",
            "(declare-const in18x10 Int)",
            "(declare-const in4x28 Int)",
            "(declare-const in26x8 Int)",
            "(declare-const in4x21 Int)",
            "(declare-const in18x12 Int)",
            "(declare-const in4x22 Int)",
            "(declare-const in18x11 Int)",
            "(declare-const in4x23 Int)",
            "(declare-const in18x14 Int)",
            "(declare-const in4x24 Int)",
            "(declare-const in18x13 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6))  ( =  in7x0 in0x7))  ( =  in7x1 in1x7))  ( =  in7x2 in2x7))  ( =  in7x3 in3x7))  ( =  in7x4 in4x7))  ( =  in7x5 in5x7))  ( =  in7x6 in6x7))  ( =  in8x0 in0x8))  ( =  in8x1 in1x8))  ( =  in8x2 in2x8))  ( =  in8x3 in3x8))  ( =  in8x4 in4x8))  ( =  in8x5 in5x8))  ( =  in8x6 in6x8))  ( =  in8x7 in7x8))  ( =  in9x0 in0x9))  ( =  in9x1 in1x9))  ( =  in9x2 in2x9))  ( =  in9x3 in3x9))  ( =  in9x4 in4x9))  ( =  in9x5 in5x9))  ( =  in9x6 in6x9))  ( =  in9x7 in7x9))  ( =  in9x8 in8x9))  ( =  in10x0 in0x10))  ( =  in10x1 in1x10))  ( =  in10x2 in2x10))  ( =  in10x3 in3x10))  ( =  in10x4 in4x10))  ( =  in10x5 in5x10))  ( =  in10x6 in6x10))  ( =  in10x7 in7x10))  ( =  in10x8 in8x10))  ( =  in10x9 in9x10))  ( =  in11x0 in0x11))  ( =  in11x1 in1x11))  ( =  in11x2 in2x11))  ( =  in11x3 in3x11))  ( =  in11x4 in4x11))  ( =  in11x5 in5x11))  ( =  in11x6 in6x11))  ( =  in11x7 in7x11))  ( =  in11x8 in8x11))  ( =  in11x9 in9x11))  ( =  in11x10 in10x11))  ( =  in12x0 in0x12))  ( =  in12x1 in1x12))  ( =  in12x2 in2x12))  ( =  in12x3 in3x12))  ( =  in12x4 in4x12))  ( =  in12x5 in5x12))  ( =  in12x6 in6x12))  ( =  in12x7 in7x12))  ( =  in12x8 in8x12))  ( =  in12x9 in9x12))  ( =  in12x10 in10x12))  ( =  in12x11 in11x12))  ( =  in13x0 in0x13))  ( =  in13x1 in1x13))  ( =  in13x2 in2x13))  ( =  in13x3 in3x13))  ( =  in13x4 in4x13))  ( =  in13x5 in5x13))  ( =  in13x6 in6x13))  ( =  in13x7 in7x13))  ( =  in13x8 in8x13))  ( =  in13x9 in9x13))  ( =  in13x10 in10x13))  ( =  in13x11 in11x13))  ( =  in13x12 in12x13))  ( =  in14x0 in0x14))  ( =  in14x1 in1x14))  ( =  in14x2 in2x14))  ( =  in14x3 in3x14))  ( =  in14x4 in4x14))  ( =  in14x5 in5x14))  ( =  in14x6 in6x14))  ( =  in14x7 in7x14))  ( =  in14x8 in8x14))  ( =  in14x9 in9x14))  ( =  in14x10 in10x14))  ( =  in14x11 in11x14))  ( =  in14x12 in12x14))  ( =  in14x13 in13x14))  ( =  in15x0 in0x15))  ( =  in15x1 in1x15))  ( =  in15x2 in2x15))  ( =  in15x3 in3x15))  ( =  in15x4 in4x15))  ( =  in15x5 in5x15))  ( =  in15x6 in6x15))  ( =  in15x7 in7x15))  ( =  in15x8 in8x15))  ( =  in15x9 in9x15))  ( =  in15x10 in10x15))  ( =  in15x11 in11x15))  ( =  in15x12 in12x15))  ( =  in15x13 in13x15))  ( =  in15x14 in14x15))  ( =  in16x0 in0x16))  ( =  in16x1 in1x16))  ( =  in16x2 in2x16))  ( =  in16x3 in3x16))  ( =  in16x4 in4x16))  ( =  in16x5 in5x16))  ( =  in16x6 in6x16))  ( =  in16x7 in7x16))  ( =  in16x8 in8x16))  ( =  in16x9 in9x16))  ( =  in16x10 in10x16))  ( =  in16x11 in11x16))  ( =  in16x12 in12x16))  ( =  in16x13 in13x16))  ( =  in16x14 in14x16))  ( =  in16x15 in15x16))  ( =  in17x0 in0x17))  ( =  in17x1 in1x17))  ( =  in17x2 in2x17))  ( =  in17x3 in3x17))  ( =  in17x4 in4x17))  ( =  in17x5 in5x17))  ( =  in17x6 in6x17))  ( =  in17x7 in7x17))  ( =  in17x8 in8x17))  ( =  in17x9 in9x17))  ( =  in17x10 in10x17))  ( =  in17x11 in11x17))  ( =  in17x12 in12x17))  ( =  in17x13 in13x17))  ( =  in17x14 in14x17))  ( =  in17x15 in15x17))  ( =  in17x16 in16x17))  ( =  in18x0 in0x18))  ( =  in18x1 in1x18))  ( =  in18x2 in2x18))  ( =  in18x3 in3x18))  ( =  in18x4 in4x18))  ( =  in18x5 in5x18))  ( =  in18x6 in6x18))  ( =  in18x7 in7x18))  ( =  in18x8 in8x18))  ( =  in18x9 in9x18))  ( =  in18x10 in10x18))  ( =  in18x11 in11x18))  ( =  in18x12 in12x18))  ( =  in18x13 in13x18))  ( =  in18x14 in14x18))  ( =  in18x15 in15x18))  ( =  in18x16 in16x18))  ( =  in18x17 in17x18))  ( =  in19x0 in0x19))  ( =  in19x1 in1x19))  ( =  in19x2 in2x19))  ( =  in19x3 in3x19))  ( =  in19x4 in4x19))  ( =  in19x5 in5x19))  ( =  in19x6 in6x19))  ( =  in19x7 in7x19))  ( =  in19x8 in8x19))  ( =  in19x9 in9x19))  ( =  in19x10 in10x19))  ( =  in19x11 in11x19))  ( =  in19x12 in12x19))  ( =  in19x13 in13x19))  ( =  in19x14 in14x19))  ( =  in19x15 in15x19))  ( =  in19x16 in16x19))  ( =  in19x17 in17x19))  ( =  in19x18 in18x19))  ( =  in20x0 in0x20))  ( =  in20x1 in1x20))  ( =  in20x2 in2x20))  ( =  in20x3 in3x20))  ( =  in20x4 in4x20))  ( =  in20x5 in5x20))  ( =  in20x6 in6x20))  ( =  in20x7 in7x20))  ( =  in20x8 in8x20))  ( =  in20x9 in9x20))  ( =  in20x10 in10x20))  ( =  in20x11 in11x20))  ( =  in20x12 in12x20))  ( =  in20x13 in13x20))  ( =  in20x14 in14x20))  ( =  in20x15 in15x20))  ( =  in20x16 in16x20))  ( =  in20x17 in17x20))  ( =  in20x18 in18x20))  ( =  in20x19 in19x20))  ( =  in21x0 in0x21))  ( =  in21x1 in1x21))  ( =  in21x2 in2x21))  ( =  in21x3 in3x21))  ( =  in21x4 in4x21))  ( =  in21x5 in5x21))  ( =  in21x6 in6x21))  ( =  in21x7 in7x21))  ( =  in21x8 in8x21))  ( =  in21x9 in9x21))  ( =  in21x10 in10x21))  ( =  in21x11 in11x21))  ( =  in21x12 in12x21))  ( =  in21x13 in13x21))  ( =  in21x14 in14x21))  ( =  in21x15 in15x21))  ( =  in21x16 in16x21))  ( =  in21x17 in17x21))  ( =  in21x18 in18x21))  ( =  in21x19 in19x21))  ( =  in21x20 in20x21))  ( =  in22x0 in0x22))  ( =  in22x1 in1x22))  ( =  in22x2 in2x22))  ( =  in22x3 in3x22))  ( =  in22x4 in4x22))  ( =  in22x5 in5x22))  ( =  in22x6 in6x22))  ( =  in22x7 in7x22))  ( =  in22x8 in8x22))  ( =  in22x9 in9x22))  ( =  in22x10 in10x22))  ( =  in22x11 in11x22))  ( =  in22x12 in12x22))  ( =  in22x13 in13x22))  ( =  in22x14 in14x22))  ( =  in22x15 in15x22))  ( =  in22x16 in16x22))  ( =  in22x17 in17x22))  ( =  in22x18 in18x22))  ( =  in22x19 in19x22))  ( =  in22x20 in20x22))  ( =  in22x21 in21x22))  ( =  in23x0 in0x23))  ( =  in23x1 in1x23))  ( =  in23x2 in2x23))  ( =  in23x3 in3x23))  ( =  in23x4 in4x23))  ( =  in23x5 in5x23))  ( =  in23x6 in6x23))  ( =  in23x7 in7x23))  ( =  in23x8 in8x23))  ( =  in23x9 in9x23))  ( =  in23x10 in10x23))  ( =  in23x11 in11x23))  ( =  in23x12 in12x23))  ( =  in23x13 in13x23))  ( =  in23x14 in14x23))  ( =  in23x15 in15x23))  ( =  in23x16 in16x23))  ( =  in23x17 in17x23))  ( =  in23x18 in18x23))  ( =  in23x19 in19x23))  ( =  in23x20 in20x23))  ( =  in23x21 in21x23))  ( =  in23x22 in22x23))  ( =  in24x0 in0x24))  ( =  in24x1 in1x24))  ( =  in24x2 in2x24))  ( =  in24x3 in3x24))  ( =  in24x4 in4x24))  ( =  in24x5 in5x24))  ( =  in24x6 in6x24))  ( =  in24x7 in7x24))  ( =  in24x8 in8x24))  ( =  in24x9 in9x24))  ( =  in24x10 in10x24))  ( =  in24x11 in11x24))  ( =  in24x12 in12x24))  ( =  in24x13 in13x24))  ( =  in24x14 in14x24))  ( =  in24x15 in15x24))  ( =  in24x16 in16x24))  ( =  in24x17 in17x24))  ( =  in24x18 in18x24))  ( =  in24x19 in19x24))  ( =  in24x20 in20x24))  ( =  in24x21 in21x24))  ( =  in24x22 in22x24))  ( =  in24x23 in23x24))  ( =  in25x0 in0x25))  ( =  in25x1 in1x25))  ( =  in25x2 in2x25))  ( =  in25x3 in3x25))  ( =  in25x4 in4x25))  ( =  in25x5 in5x25))  ( =  in25x6 in6x25))  ( =  in25x7 in7x25))  ( =  in25x8 in8x25))  ( =  in25x9 in9x25))  ( =  in25x10 in10x25))  ( =  in25x11 in11x25))  ( =  in25x12 in12x25))  ( =  in25x13 in13x25))  ( =  in25x14 in14x25))  ( =  in25x15 in15x25))  ( =  in25x16 in16x25))  ( =  in25x17 in17x25))  ( =  in25x18 in18x25))  ( =  in25x19 in19x25))  ( =  in25x20 in20x25))  ( =  in25x21 in21x25))  ( =  in25x22 in22x25))  ( =  in25x23 in23x25))  ( =  in25x24 in24x25))  ( =  in26x0 in0x26))  ( =  in26x1 in1x26))  ( =  in26x2 in2x26))  ( =  in26x3 in3x26))  ( =  in26x4 in4x26))  ( =  in26x5 in5x26))  ( =  in26x6 in6x26))  ( =  in26x7 in7x26))  ( =  in26x8 in8x26))  ( =  in26x9 in9x26))  ( =  in26x10 in10x26))  ( =  in26x11 in11x26))  ( =  in26x12 in12x26))  ( =  in26x13 in13x26))  ( =  in26x14 in14x26))  ( =  in26x15 in15x26))  ( =  in26x16 in16x26))  ( =  in26x17 in17x26))  ( =  in26x18 in18x26))  ( =  in26x19 in19x26))  ( =  in26x20 in20x26))  ( =  in26x21 in21x26))  ( =  in26x22 in22x26))  ( =  in26x23 in23x26))  ( =  in26x24 in24x26))  ( =  in26x25 in25x26))  ( =  in27x0 in0x27))  ( =  in27x1 in1x27))  ( =  in27x2 in2x27))  ( =  in27x3 in3x27))  ( =  in27x4 in4x27))  ( =  in27x5 in5x27))  ( =  in27x6 in6x27))  ( =  in27x7 in7x27))  ( =  in27x8 in8x27))  ( =  in27x9 in9x27))  ( =  in27x10 in10x27))  ( =  in27x11 in11x27))  ( =  in27x12 in12x27))  ( =  in27x13 in13x27))  ( =  in27x14 in14x27))  ( =  in27x15 in15x27))  ( =  in27x16 in16x27))  ( =  in27x17 in17x27))  ( =  in27x18 in18x27))  ( =  in27x19 in19x27))  ( =  in27x20 in20x27))  ( =  in27x21 in21x27))  ( =  in27x22 in22x27))  ( =  in27x23 in23x27))  ( =  in27x24 in24x27))  ( =  in27x25 in25x27))  ( =  in27x26 in26x27))  ( =  in28x0 in0x28))  ( =  in28x1 in1x28))  ( =  in28x2 in2x28))  ( =  in28x3 in3x28))  ( =  in28x4 in4x28))  ( =  in28x5 in5x28))  ( =  in28x6 in6x28))  ( =  in28x7 in7x28))  ( =  in28x8 in8x28))  ( =  in28x9 in9x28))  ( =  in28x10 in10x28))  ( =  in28x11 in11x28))  ( =  in28x12 in12x28))  ( =  in28x13 in13x28))  ( =  in28x14 in14x28))  ( =  in28x15 in15x28))  ( =  in28x16 in16x28))  ( =  in28x17 in17x28))  ( =  in28x18 in18x28))  ( =  in28x19 in19x28))  ( =  in28x20 in20x28))  ( =  in28x21 in21x28))  ( =  in28x22 in22x28))  ( =  in28x23 in23x28))  ( =  in28x24 in24x28))  ( =  in28x25 in25x28))  ( =  in28x26 in26x28))  ( =  in28x27 in27x28)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4) ( = in5x0 in0x5) ( = in5x1 in1x5) ( = in5x2 in2x5) ( = in5x3 in3x5) ( = in5x4 in4x5) ( = in6x0 in0x6) ( = in6x1 in1x6) ( = in6x2 in2x6) ( = in6x3 in3x6) ( = in6x4 in4x6) ( = in6x5 in5x6) ( = in7x0 in0x7) ( = in7x1 in1x7) ( = in7x2 in2x7) ( = in7x3 in3x7) ( = in7x4 in4x7) ( = in7x5 in5x7) ( = in7x6 in6x7) ( = in8x0 in0x8) ( = in8x1 in1x8) ( = in8x2 in2x8) ( = in8x3 in3x8) ( = in8x4 in4x8) ( = in8x5 in5x8) ( = in8x6 in6x8) ( = in8x7 in7x8) ( = in9x0 in0x9) ( = in9x1 in1x9) ( = in9x2 in2x9) ( = in9x3 in3x9) ( = in9x4 in4x9) ( = in9x5 in5x9) ( = in9x6 in6x9) ( = in9x7 in7x9) ( = in9x8 in8x9) ( = in10x0 in0x10) ( = in10x1 in1x10) ( = in10x2 in2x10) ( = in10x3 in3x10) ( = in10x4 in4x10) ( = in10x5 in5x10) ( = in10x6 in6x10) ( = in10x7 in7x10) ( = in10x8 in8x10) ( = in10x9 in9x10) ( = in11x0 in0x11) ( = in11x1 in1x11) ( = in11x2 in2x11) ( = in11x3 in3x11) ( = in11x4 in4x11) ( = in11x5 in5x11) ( = in11x6 in6x11) ( = in11x7 in7x11) ( = in11x8 in8x11) ( = in11x9 in9x11) ( = in11x10 in10x11) ( = in12x0 in0x12) ( = in12x1 in1x12) ( = in12x2 in2x12) ( = in12x3 in3x12) ( = in12x4 in4x12) ( = in12x5 in5x12) ( = in12x6 in6x12) ( = in12x7 in7x12) ( = in12x8 in8x12) ( = in12x9 in9x12) ( = in12x10 in10x12) ( = in12x11 in11x12) ( = in13x0 in0x13) ( = in13x1 in1x13) ( = in13x2 in2x13) ( = in13x3 in3x13) ( = in13x4 in4x13) ( = in13x5 in5x13) ( = in13x6 in6x13) ( = in13x7 in7x13) ( = in13x8 in8x13) ( = in13x9 in9x13) ( = in13x10 in10x13) ( = in13x11 in11x13) ( = in13x12 in12x13) ( = in14x0 in0x14) ( = in14x1 in1x14) ( = in14x2 in2x14) ( = in14x3 in3x14) ( = in14x4 in4x14) ( = in14x5 in5x14) ( = in14x6 in6x14) ( = in14x7 in7x14) ( = in14x8 in8x14) ( = in14x9 in9x14) ( = in14x10 in10x14) ( = in14x11 in11x14) ( = in14x12 in12x14) ( = in14x13 in13x14) ( = in15x0 in0x15) ( = in15x1 in1x15) ( = in15x2 in2x15) ( = in15x3 in3x15) ( = in15x4 in4x15) ( = in15x5 in5x15) ( = in15x6 in6x15) ( = in15x7 in7x15) ( = in15x8 in8x15) ( = in15x9 in9x15) ( = in15x10 in10x15) ( = in15x11 in11x15) ( = in15x12 in12x15) ( = in15x13 in13x15) ( = in15x14 in14x15) ( = in16x0 in0x16) ( = in16x1 in1x16) ( = in16x2 in2x16) ( = in16x3 in3x16) ( = in16x4 in4x16) ( = in16x5 in5x16) ( = in16x6 in6x16) ( = in16x7 in7x16) ( = in16x8 in8x16) ( = in16x9 in9x16) ( = in16x10 in10x16) ( = in16x11 in11x16) ( = in16x12 in12x16) ( = in16x13 in13x16) ( = in16x14 in14x16) ( = in16x15 in15x16) ( = in17x0 in0x17) ( = in17x1 in1x17) ( = in17x2 in2x17) ( = in17x3 in3x17) ( = in17x4 in4x17) ( = in17x5 in5x17) ( = in17x6 in6x17) ( = in17x7 in7x17) ( = in17x8 in8x17) ( = in17x9 in9x17) ( = in17x10 in10x17) ( = in17x11 in11x17) ( = in17x12 in12x17) ( = in17x13 in13x17) ( = in17x14 in14x17) ( = in17x15 in15x17) ( = in17x16 in16x17) ( = in18x0 in0x18) ( = in18x1 in1x18) ( = in18x2 in2x18) ( = in18x3 in3x18) ( = in18x4 in4x18) ( = in18x5 in5x18) ( = in18x6 in6x18) ( = in18x7 in7x18) ( = in18x8 in8x18) ( = in18x9 in9x18) ( = in18x10 in10x18) ( = in18x11 in11x18) ( = in18x12 in12x18) ( = in18x13 in13x18) ( = in18x14 in14x18) ( = in18x15 in15x18) ( = in18x16 in16x18) ( = in18x17 in17x18) ( = in19x0 in0x19) ( = in19x1 in1x19) ( = in19x2 in2x19) ( = in19x3 in3x19) ( = in19x4 in4x19) ( = in19x5 in5x19) ( = in19x6 in6x19) ( = in19x7 in7x19) ( = in19x8 in8x19) ( = in19x9 in9x19) ( = in19x10 in10x19) ( = in19x11 in11x19) ( = in19x12 in12x19) ( = in19x13 in13x19) ( = in19x14 in14x19) ( = in19x15 in15x19) ( = in19x16 in16x19) ( = in19x17 in17x19) ( = in19x18 in18x19) ( = in20x0 in0x20) ( = in20x1 in1x20) ( = in20x2 in2x20) ( = in20x3 in3x20) ( = in20x4 in4x20) ( = in20x5 in5x20) ( = in20x6 in6x20) ( = in20x7 in7x20) ( = in20x8 in8x20) ( = in20x9 in9x20) ( = in20x10 in10x20) ( = in20x11 in11x20) ( = in20x12 in12x20) ( = in20x13 in13x20) ( = in20x14 in14x20) ( = in20x15 in15x20) ( = in20x16 in16x20) ( = in20x17 in17x20) ( = in20x18 in18x20) ( = in20x19 in19x20) ( = in21x0 in0x21) ( = in21x1 in1x21) ( = in21x2 in2x21) ( = in21x3 in3x21) ( = in21x4 in4x21) ( = in21x5 in5x21) ( = in21x6 in6x21) ( = in21x7 in7x21) ( = in21x8 in8x21) ( = in21x9 in9x21) ( = in21x10 in10x21) ( = in21x11 in11x21) ( = in21x12 in12x21) ( = in21x13 in13x21) ( = in21x14 in14x21) ( = in21x15 in15x21) ( = in21x16 in16x21) ( = in21x17 in17x21) ( = in21x18 in18x21) ( = in21x19 in19x21) ( = in21x20 in20x21) ( = in22x0 in0x22) ( = in22x1 in1x22) ( = in22x2 in2x22) ( = in22x3 in3x22) ( = in22x4 in4x22) ( = in22x5 in5x22) ( = in22x6 in6x22) ( = in22x7 in7x22) ( = in22x8 in8x22) ( = in22x9 in9x22) ( = in22x10 in10x22) ( = in22x11 in11x22) ( = in22x12 in12x22) ( = in22x13 in13x22) ( = in22x14 in14x22) ( = in22x15 in15x22) ( = in22x16 in16x22) ( = in22x17 in17x22) ( = in22x18 in18x22) ( = in22x19 in19x22) ( = in22x20 in20x22) ( = in22x21 in21x22) ( = in23x0 in0x23) ( = in23x1 in1x23) ( = in23x2 in2x23) ( = in23x3 in3x23) ( = in23x4 in4x23) ( = in23x5 in5x23) ( = in23x6 in6x23) ( = in23x7 in7x23) ( = in23x8 in8x23) ( = in23x9 in9x23) ( = in23x10 in10x23) ( = in23x11 in11x23) ( = in23x12 in12x23) ( = in23x13 in13x23) ( = in23x14 in14x23) ( = in23x15 in15x23) ( = in23x16 in16x23) ( = in23x17 in17x23) ( = in23x18 in18x23) ( = in23x19 in19x23) ( = in23x20 in20x23) ( = in23x21 in21x23) ( = in23x22 in22x23) ( = in24x0 in0x24) ( = in24x1 in1x24) ( = in24x2 in2x24) ( = in24x3 in3x24) ( = in24x4 in4x24) ( = in24x5 in5x24) ( = in24x6 in6x24) ( = in24x7 in7x24) ( = in24x8 in8x24) ( = in24x9 in9x24) ( = in24x10 in10x24) ( = in24x11 in11x24) ( = in24x12 in12x24) ( = in24x13 in13x24) ( = in24x14 in14x24) ( = in24x15 in15x24) ( = in24x16 in16x24) ( = in24x17 in17x24) ( = in24x18 in18x24) ( = in24x19 in19x24) ( = in24x20 in20x24) ( = in24x21 in21x24) ( = in24x22 in22x24) ( = in24x23 in23x24) ( = in25x0 in0x25) ( = in25x1 in1x25) ( = in25x2 in2x25) ( = in25x3 in3x25) ( = in25x4 in4x25) ( = in25x5 in5x25) ( = in25x6 in6x25) ( = in25x7 in7x25) ( = in25x8 in8x25) ( = in25x9 in9x25) ( = in25x10 in10x25) ( = in25x11 in11x25) ( = in25x12 in12x25) ( = in25x13 in13x25) ( = in25x14 in14x25) ( = in25x15 in15x25) ( = in25x16 in16x25) ( = in25x17 in17x25) ( = in25x18 in18x25) ( = in25x19 in19x25) ( = in25x20 in20x25) ( = in25x21 in21x25) ( = in25x22 in22x25) ( = in25x23 in23x25) ( = in25x24 in24x25) ( = in26x0 in0x26) ( = in26x1 in1x26) ( = in26x2 in2x26) ( = in26x3 in3x26) ( = in26x4 in4x26) ( = in26x5 in5x26) ( = in26x6 in6x26) ( = in26x7 in7x26) ( = in26x8 in8x26) ( = in26x9 in9x26) ( = in26x10 in10x26) ( = in26x11 in11x26) ( = in26x12 in12x26) ( = in26x13 in13x26) ( = in26x14 in14x26) ( = in26x15 in15x26) ( = in26x16 in16x26) ( = in26x17 in17x26) ( = in26x18 in18x26) ( = in26x19 in19x26) ( = in26x20 in20x26) ( = in26x21 in21x26) ( = in26x22 in22x26) ( = in26x23 in23x26) ( = in26x24 in24x26) ( = in26x25 in25x26) ( = in27x0 in0x27) ( = in27x1 in1x27) ( = in27x2 in2x27) ( = in27x3 in3x27) ( = in27x4 in4x27) ( = in27x5 in5x27) ( = in27x6 in6x27) ( = in27x7 in7x27) ( = in27x8 in8x27) ( = in27x9 in9x27) ( = in27x10 in10x27) ( = in27x11 in11x27) ( = in27x12 in12x27) ( = in27x13 in13x27) ( = in27x14 in14x27) ( = in27x15 in15x27) ( = in27x16 in16x27) ( = in27x17 in17x27) ( = in27x18 in18x27) ( = in27x19 in19x27) ( = in27x20 in20x27) ( = in27x21 in21x27) ( = in27x22 in22x27) ( = in27x23 in23x27) ( = in27x24 in24x27) ( = in27x25 in25x27) ( = in27x26 in26x27) ( = in28x0 in0x28) ( = in28x1 in1x28) ( = in28x2 in2x28) ( = in28x3 in3x28) ( = in28x4 in4x28) ( = in28x5 in5x28) ( = in28x6 in6x28) ( = in28x7 in7x28) ( = in28x8 in8x28) ( = in28x9 in9x28) ( = in28x10 in10x28) ( = in28x11 in11x28) ( = in28x12 in12x28) ( = in28x13 in13x28) ( = in28x14 in14x28) ( = in28x15 in15x28) ( = in28x16 in16x28) ( = in28x17 in17x28) ( = in28x18 in18x28) ( = in28x19 in19x28) ( = in28x20 in20x28) ( = in28x21 in21x28) ( = in28x22 in22x28) ( = in28x23 in23x28) ( = in28x24 in24x28) ( = in28x25 in25x28) ( = in28x26 in26x28) ( = in28x27 in27x28)))",
        "equivalent": true
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in1x18 Int)",
            "(declare-const in1x17 Int)",
            "(declare-const in1x16 Int)",
            "(declare-const in1x15 Int)",
            "(declare-const in23x28 Int)",
            "(declare-const in23x29 Int)",
            "(declare-const in1x19 Int)",
            "(declare-const in23x24 Int)",
            "(declare-const in23x25 Int)",
            "(declare-const in23x26 Int)",
            "(declare-const in23x27 Int)",
            "(declare-const in23x20 Int)",
            "(declare-const in23x21 Int)",
            "(declare-const in23x22 Int)",
            "(declare-const in1x10 Int)",
            "(declare-const in1x14 Int)",
            "(declare-const in1x13 Int)",
            "(declare-const in1x12 Int)",
            "(declare-const in1x11 Int)",
            "(declare-const in23x17 Int)",
            "(declare-const in23x18 Int)",
            "(declare-const in23x19 Int)",
            "(declare-const in23x13 Int)",
            "(declare-const in8x7 Int)",
            "(declare-const in23x14 Int)",
            "(declare-const in23x15 Int)",
            "(declare-const in8x5 Int)",
            "(declare-const in23x16 Int)",
            "(declare-const in8x6 Int)",
            "(declare-const in23x10 Int)",
            "(declare-const in23x11 Int)",
            "(declare-const in8x9 Int)",
            "(declare-const in23x12 Int)",
            "(declare-const in8x0 Int)",
            "(declare-const in8x3 Int)",
            "(declare-const in8x4 Int)",
            "(declare-const in8x1 Int)",
            "(declare-const in8x2 Int)",
            "(declare-const in11x28 Int)",
            "(declare-const in11x27 Int)",
            "(declare-const in11x29 Int)",
            "(declare-const in11x24 Int)",
            "(declare-const in11x23 Int)",
            "(declare-const in11x26 Int)",
            "(declare-const in11x25 Int)",
            "(declare-const in11x20 Int)",
            "(declare-const in11x22 Int)",
            "(declare-const in11x21 Int)",
            "(declare-const in18x2 Int)",
            "(declare-const in11x17 Int)",
            "(declare-const in18x3 Int)",
            "(declare-const in11x16 Int)",
            "(declare-const in11x19 Int)",
            "(declare-const in18x0 Int)",
            "(declare-const in11x18 Int)",
            "(declare-const in18x1 Int)",
            "(declare-const in18x6 Int)",
            "(declare-const in11x13 Int)",
            "(declare-const in18x7 Int)",
            "(declare-const in11x12 Int)",
            "(declare-const in18x4 Int)",
            "(declare-const in11x15 Int)",
            "(declare-const in18x5 Int)",
            "(declare-const in11x14 Int)",
            "(declare-const in18x8 Int)",
            "(declare-const in18x9 Int)",
            "(declare-const in11x10 Int)",
            "(declare-const in29x2 Int)",
            "(declare-const in29x3 Int)",
            "(declare-const in29x0 Int)",
            "(declare-const in29x1 Int)",
            "(declare-const in29x6 Int)",
            "(declare-const in29x7 Int)",
            "(declare-const in29x4 Int)",
            "(declare-const in29x5 Int)",
            "(declare-const in29x8 Int)",
            "(declare-const in29x9 Int)",
            "(declare-const in1x29 Int)",
            "(declare-const in1x28 Int)",
            "(declare-const in1x27 Int)",
            "(declare-const in1x26 Int)",
            "(declare-const in1x21 Int)",
            "(declare-const in1x20 Int)",
            "(declare-const in1x25 Int)",
            "(declare-const in1x24 Int)",
            "(declare-const in1x23 Int)",
            "(declare-const in1x22 Int)",
            "(declare-const in21x26 Int)",
            "(declare-const in21x27 Int)",
            "(declare-const in21x28 Int)",
            "(declare-const in21x29 Int)",
            "(declare-const in21x22 Int)",
            "(declare-const in21x23 Int)",
            "(declare-const in21x24 Int)",
            "(declare-const in21x25 Int)",
            "(declare-const in21x20 Int)",
            "(declare-const in15x11 Int)",
            "(declare-const in15x10 Int)",
            "(declare-const in15x19 Int)",
            "(declare-const in15x18 Int)",
            "(declare-const in15x17 Int)",
            "(declare-const in15x16 Int)",
            "(declare-const in15x14 Int)",
            "(declare-const in15x13 Int)",
            "(declare-const in15x12 Int)",
            "(declare-const in20x0 Int)",
            "(declare-const in20x3 Int)",
            "(declare-const in20x4 Int)",
            "(declare-const in20x1 Int)",
            "(declare-const in20x2 Int)",
            "(declare-const in8x12 Int)",
            "(declare-const in8x13 Int)",
            "(declare-const in8x10 Int)",
            "(declare-const in8x11 Int)",
            "(declare-const in8x18 Int)",
            "(declare-const in8x19 Int)",
            "(declare-const in8x16 Int)",
            "(declare-const in8x17 Int)",
            "(declare-const in8x14 Int)",
            "(declare-const in8x15 Int)",
            "(declare-const in25x27 Int)",
            "(declare-const in25x26 Int)",
            "(declare-const in25x29 Int)",
            "(declare-const in25x28 Int)",
            "(declare-const in25x23 Int)",
            "(declare-const in25x22 Int)",
            "(declare-const in25x24 Int)",
            "(declare-const in8x23 Int)",
            "(declare-const in20x7 Int)",
            "(declare-const in8x24 Int)",
            "(declare-const in20x8 Int)",
            "(declare-const in25x21 Int)",
            "(declare-const in8x21 Int)",
            "(declare-const in20x5 Int)",
            "(declare-const in25x20 Int)",
            "(declare-const in8x22 Int)",
            "(declare-const in20x6 Int)",
            "(declare-const in8x20 Int)",
            "(declare-const in20x9 Int)",
            "(declare-const in8x29 Int)",
            "(declare-const in8x27 Int)",
            "(declare-const in8x28 Int)",
            "(declare-const in8x25 Int)",
            "(declare-const in8x26 Int)",
            "(declare-const in25x19 Int)",
            "(declare-const in25x16 Int)",
            "(declare-const in25x15 Int)",
            "(declare-const in25x18 Int)",
            "(declare-const in25x17 Int)",
            "(declare-const in25x12 Int)",
            "(declare-const in25x11 Int)",
            "(declare-const in25x14 Int)",
            "(declare-const in25x13 Int)",
            "(declare-const in25x10 Int)",
            "(declare-const in13x20 Int)",
            "(declare-const in13x29 Int)",
            "(declare-const in13x27 Int)",
            "(declare-const in13x28 Int)",
            "(declare-const in13x25 Int)",
            "(declare-const in13x26 Int)",
            "(declare-const in13x23 Int)",
            "(declare-const in13x24 Int)",
            "(declare-const in13x21 Int)",
            "(declare-const in13x22 Int)",
            "(declare-const in13x18 Int)",
            "(declare-const in13x19 Int)",
            "(declare-const in13x16 Int)",
            "(declare-const in13x17 Int)",
            "(declare-const in13x14 Int)",
            "(declare-const in13x15 Int)",
            "(declare-const in13x12 Int)",
            "(declare-const in13x10 Int)",
            "(declare-const in13x11 Int)",
            "(declare-const in29x19 Int)",
            "(declare-const in29x18 Int)",
            "(declare-const in23x0 Int)",
            "(declare-const in29x17 Int)",
            "(declare-const in23x1 Int)",
            "(declare-const in29x16 Int)",
            "(declare-const in29x15 Int)",
            "(declare-const in29x14 Int)",
            "(declare-const in12x4 Int)",
            "(declare-const in29x13 Int)",
            "(declare-const in12x5 Int)",
            "(declare-const in29x12 Int)",
            "(declare-const in12x2 Int)",
            "(declare-const in29x11 Int)",
            "(declare-const in12x3 Int)",
            "(declare-const in29x10 Int)",
            "(declare-const in12x8 Int)",
            "(declare-const in12x9 Int)",
            "(declare-const in12x6 Int)",
            "(declare-const in12x7 Int)",
            "(declare-const in17x25 Int)",
            "(declare-const in17x26 Int)",
            "(declare-const in17x27 Int)",
            "(declare-const in17x28 Int)",
            "(declare-const in17x29 Int)",
            "(declare-const in23x4 Int)",
            "(declare-const in23x5 Int)",
            "(declare-const in23x2 Int)",
            "(declare-const in23x3 Int)",
            "(declare-const in23x8 Int)",
            "(declare-const in23x9 Int)",
            "(declare-const in23x6 Int)",
            "(declare-const in23x7 Int)",
            "(declare-const in17x20 Int)",
            "(declare-const in17x21 Int)",
            "(declare-const in17x22 Int)",
            "(declare-const in17x23 Int)",
            "(declare-const in17x24 Int)",
            "(declare-const in17x14 Int)",
            "(declare-const in17x15 Int)",
            "(declare-const in17x16 Int)",
            "(declare-const in17x18 Int)",
            "(declare-const in17x19 Int)",
            "(declare-const in0x7 Int)",
            "(declare-const in0x8 Int)",
            "(declare-const in5x20 Int)",
            "(declare-const in0x5 Int)",
            "(declare-const in5x21 Int)",
            "(declare-const in0x6 Int)",
            "(declare-const in0x9 Int)",
            "(declare-const in5x26 Int)",
            "(declare-const in5x27 Int)",
            "(declare-const in5x28 Int)",
            "(declare-const in5x29 Int)",
            "(declare-const in5x22 Int)",
            "(declare-const in17x10 Int)",
            "(declare-const in0x3 Int)",
            "(declare-const in5x23 Int)",
            "(declare-const in17x11 Int)",
            "(declare-const in0x4 Int)",
            "(declare-const in5x24 Int)",
            "(declare-const in17x12 Int)",
            "(declare-const in0x1 Int)",
            "(declare-const in5x25 Int)",
            "(declare-const in17x13 Int)",
            "(declare-const in0x2 Int)",
            "(declare-const in12x0 Int)",
            "(declare-const in12x1 Int)",
            "(declare-const in21x2 Int)",
            "(declare-const in21x3 Int)",
            "(declare-const in21x0 Int)",
            "(declare-const in21x1 Int)",
            "(declare-const in7x21 Int)",
            "(declare-const in10x5 Int)",
            "(declare-const in7x20 Int)",
            "(declare-const in10x4 Int)",
            "(declare-const in7x23 Int)",
            "(declare-const in10x7 Int)",
            "(declare-const in7x22 Int)",
            "(declare-const in10x6 Int)",
            "(declare-const in10x9 Int)",
            "(declare-const in10x8 Int)",
            "(declare-const in7x29 Int)",
            "(declare-const in7x28 Int)",
            "(declare-const in7x25 Int)",
            "(declare-const in7x24 Int)",
            "(declare-const in7x27 Int)",
            "(declare-const in7x26 Int)",
            "(declare-const in27x28 Int)",
            "(declare-const in27x29 Int)",
            "(declare-const in27x26 Int)",
            "(declare-const in27x24 Int)",
            "(declare-const in27x25 Int)",
            "(declare-const in27x22 Int)",
            "(declare-const in21x6 Int)",
            "(declare-const in27x23 Int)",
            "(declare-const in21x7 Int)",
            "(declare-const in27x20 Int)",
            "(declare-const in21x4 Int)",
            "(declare-const in27x21 Int)",
            "(declare-const in21x5 Int)",
            "(declare-const in21x8 Int)",
            "(declare-const in21x9 Int)",
            "(declare-const in27x19 Int)",
            "(declare-const in27x17 Int)",
            "(declare-const in27x18 Int)",
            "(declare-const in27x15 Int)",
            "(declare-const in27x16 Int)",
            "(declare-const in27x13 Int)",
            "(declare-const in27x14 Int)",
            "(declare-const in27x11 Int)",
            "(declare-const in2x5 Int)",
            "(declare-const in27x12 Int)",
            "(declare-const in2x6 Int)",
            "(declare-const in2x3 Int)",
            "(declare-const in27x10 Int)",
            "(declare-const in2x4 Int)",
            "(declare-const in2x9 Int)",
            "(declare-const in2x7 Int)",
            "(declare-const in2x8 Int)",
            "(declare-const in2x1 Int)",
            "(declare-const in2x0 Int)",
            "(declare-const in15x22 Int)",
            "(declare-const in15x21 Int)",
            "(declare-const in15x20 Int)",
            "(declare-const in10x1 Int)",
            "(declare-const in10x0 Int)",
            "(declare-const in10x3 Int)",
            "(declare-const in10x2 Int)",
            "(declare-const in7x10 Int)",
            "(declare-const in7x12 Int)",
            "(declare-const in7x11 Int)",
            "(declare-const in7x18 Int)",
            "(declare-const in15x29 Int)",
            "(declare-const in7x17 Int)",
            "(declare-const in15x28 Int)",
            "(declare-const in15x27 Int)",
            "(declare-const in7x19 Int)",
            "(declare-const in15x26 Int)",
            "(declare-const in7x14 Int)",
            "(declare-const in15x25 Int)",
            "(declare-const in7x13 Int)",
            "(declare-const in15x24 Int)",
            "(declare-const in7x16 Int)",
            "(declare-const in15x23 Int)",
            "(declare-const in7x15 Int)",
            "(declare-const in3x29 Int)",
            "(declare-const in3x28 Int)",
            "(declare-const in16x0 Int)",
            "(declare-const in16x1 Int)",
            "(declare-const in16x4 Int)",
            "(declare-const in16x5 Int)",
            "(declare-const in16x2 Int)",
            "(declare-const in16x3 Int)",
            "(declare-const in3x23 Int)",
            "(declare-const in16x8 Int)",
            "(declare-const in3x22 Int)",
            "(declare-const in16x9 Int)",
            "(declare-const in3x21 Int)",
            "(declare-const in16x6 Int)",
            "(declare-const in3x20 Int)",
            "(declare-const in16x7 Int)",
            "(declare-const in3x27 Int)",
            "(declare-const in3x26 Int)",
            "(declare-const in3x25 Int)",
            "(declare-const in3x24 Int)",
            "(declare-const in27x0 Int)",
            "(declare-const in27x1 Int)",
            "(declare-const in27x4 Int)",
            "(declare-const in27x5 Int)",
            "(declare-const in27x2 Int)",
            "(declare-const in27x3 Int)",
            "(declare-const in27x8 Int)",
            "(declare-const in27x9 Int)",
            "(declare-const in27x6 Int)",
            "(declare-const in27x7 Int)",
            "(declare-const in20x28 Int)",
            "(declare-const in20x27 Int)",
            "(declare-const in20x26 Int)",
            "(declare-const in20x25 Int)",
            "(declare-const in20x29 Int)",
            "(declare-const in4x9 Int)",
            "(declare-const in20x24 Int)",
            "(declare-const in20x23 Int)",
            "(declare-const in20x22 Int)",
            "(declare-const in20x21 Int)",
            "(declare-const in4x3 Int)",
            "(declare-const in4x1 Int)",
            "(declare-const in4x2 Int)",
            "(declare-const in4x7 Int)",
            "(declare-const in4x8 Int)",
            "(declare-const in4x5 Int)",
            "(declare-const in4x6 Int)",
            "(declare-const in4x0 Int)",
            "(declare-const in19x28 Int)",
            "(declare-const in20x17 Int)",
            "(declare-const in19x27 Int)",
            "(declare-const in20x16 Int)",
            "(declare-const in3x19 Int)",
            "(declare-const in20x15 Int)",
            "(declare-const in3x18 Int)",
            "(declare-const in19x29 Int)",
            "(declare-const in20x14 Int)",
            "(declare-const in3x17 Int)",
            "(declare-const in20x19 Int)",
            "(declare-const in20x18 Int)",
            "(declare-const in20x13 Int)",
            "(declare-const in20x12 Int)",
            "(declare-const in20x11 Int)",
            "(declare-const in20x10 Int)",
            "(declare-const in19x20 Int)",
            "(declare-const in3x12 Int)",
            "(declare-const in3x11 Int)",
            "(declare-const in19x22 Int)",
            "(declare-const in3x10 Int)",
            "(declare-const in19x21 Int)",
            "(declare-const in19x24 Int)",
            "(declare-const in3x16 Int)",
            "(declare-const in19x23 Int)",
            "(declare-const in3x15 Int)",
            "(declare-const in19x26 Int)",
            "(declare-const in3x14 Int)",
            "(declare-const in19x25 Int)",
            "(declare-const in3x13 Int)",
            "(declare-const in19x17 Int)",
            "(declare-const in19x16 Int)",
            "(declare-const in19x18 Int)",
            "(declare-const in14x2 Int)",
            "(declare-const in14x3 Int)",
            "(declare-const in14x0 Int)",
            "(declare-const in14x1 Int)",
            "(declare-const in14x6 Int)",
            "(declare-const in14x7 Int)",
            "(declare-const in14x4 Int)",
            "(declare-const in14x5 Int)",
            "(declare-const in19x11 Int)",
            "(declare-const in14x8 Int)",
            "(declare-const in19x10 Int)",
            "(declare-const in14x9 Int)",
            "(declare-const in19x13 Int)",
            "(declare-const in19x12 Int)",
            "(declare-const in19x15 Int)",
            "(declare-const in19x14 Int)",
            "(declare-const in5x19 Int)",
            "(declare-const in25x2 Int)",
            "(declare-const in25x3 Int)",
            "(declare-const in25x0 Int)",
            "(declare-const in25x1 Int)",
            "(declare-const in5x10 Int)",
            "(declare-const in25x6 Int)",
            "(declare-const in25x7 Int)",
            "(declare-const in25x4 Int)",
            "(declare-const in25x5 Int)",
            "(declare-const in5x15 Int)",
            "(declare-const in5x16 Int)",
            "(declare-const in25x8 Int)",
            "(declare-const in5x17 Int)",
            "(declare-const in25x9 Int)",
            "(declare-const in5x18 Int)",
            "(declare-const in5x11 Int)",
            "(declare-const in5x12 Int)",
            "(declare-const in5x13 Int)",
            "(declare-const in5x14 Int)",
            "(declare-const in6x9 Int)",
            "(declare-const in6x7 Int)",
            "(declare-const in6x8 Int)",
            "(declare-const in6x1 Int)",
            "(declare-const in6x2 Int)",
            "(declare-const in6x0 Int)",
            "(declare-const in6x5 Int)",
            "(declare-const in6x3 Int)",
            "(declare-const in6x4 Int)",
            "(declare-const in29x28 Int)",
            "(declare-const in29x27 Int)",
            "(declare-const in29x26 Int)",
            "(declare-const in29x25 Int)",
            "(declare-const in29x24 Int)",
            "(declare-const in29x23 Int)",
            "(declare-const in29x22 Int)",
            "(declare-const in29x21 Int)",
            "(declare-const in29x20 Int)",
            "(declare-const in7x8 Int)",
            "(declare-const in7x9 Int)",
            "(declare-const in7x6 Int)",
            "(declare-const in7x0 Int)",
            "(declare-const in7x1 Int)",
            "(declare-const in7x4 Int)",
            "(declare-const in7x5 Int)",
            "(declare-const in12x28 Int)",
            "(declare-const in7x2 Int)",
            "(declare-const in12x29 Int)",
            "(declare-const in7x3 Int)",
            "(declare-const in12x26 Int)",
            "(declare-const in12x27 Int)",
            "(declare-const in12x24 Int)",
            "(declare-const in12x25 Int)",
            "(declare-const in12x22 Int)",
            "(declare-const in12x23 Int)",
            "(declare-const in12x20 Int)",
            "(declare-const in12x21 Int)",
            "(declare-const in12x19 Int)",
            "(declare-const in12x17 Int)",
            "(declare-const in12x18 Int)",
            "(declare-const in12x15 Int)",
            "(declare-const in12x16 Int)",
            "(declare-const in12x13 Int)",
            "(declare-const in12x14 Int)",
            "(declare-const in12x11 Int)",
            "(declare-const in12x10 Int)",
            "(declare-const in0x16 Int)",
            "(declare-const in0x17 Int)",
            "(declare-const in0x14 Int)",
            "(declare-const in0x15 Int)",
            "(declare-const in0x18 Int)",
            "(declare-const in0x19 Int)",
            "(declare-const in0x12 Int)",
            "(declare-const in0x13 Int)",
            "(declare-const in0x10 Int)",
            "(declare-const in0x11 Int)",
            "(declare-const in0x27 Int)",
            "(declare-const in0x28 Int)",
            "(declare-const in0x25 Int)",
            "(declare-const in0x26 Int)",
            "(declare-const in0x29 Int)",
            "(declare-const in0x20 Int)",
            "(declare-const in0x23 Int)",
            "(declare-const in0x24 Int)",
            "(declare-const in0x21 Int)",
            "(declare-const in0x22 Int)",
            "(declare-const in2x19 Int)",
            "(declare-const in2x18 Int)",
            "(declare-const in2x17 Int)",
            "(declare-const in2x16 Int)",
            "(declare-const in22x27 Int)",
            "(declare-const in22x28 Int)",
            "(declare-const in22x29 Int)",
            "(declare-const in22x23 Int)",
            "(declare-const in9x6 Int)",
            "(declare-const in22x24 Int)",
            "(declare-const in9x7 Int)",
            "(declare-const in22x25 Int)",
            "(declare-const in9x4 Int)",
            "(declare-const in22x26 Int)",
            "(declare-const in9x5 Int)",
            "(declare-const in22x20 Int)",
            "(declare-const in22x21 Int)",
            "(declare-const in9x8 Int)",
            "(declare-const in9x2 Int)",
            "(declare-const in9x3 Int)",
            "(declare-const in9x0 Int)",
            "(declare-const in9x1 Int)",
            "(declare-const in2x11 Int)",
            "(declare-const in2x10 Int)",
            "(declare-const in2x15 Int)",
            "(declare-const in2x14 Int)",
            "(declare-const in2x13 Int)",
            "(declare-const in2x12 Int)",
            "(declare-const in2x29 Int)",
            "(declare-const in2x28 Int)",
            "(declare-const in2x27 Int)",
            "(declare-const in22x16 Int)",
            "(declare-const in22x17 Int)",
            "(declare-const in22x18 Int)",
            "(declare-const in22x19 Int)",
            "(declare-const in22x12 Int)",
            "(declare-const in22x13 Int)",
            "(declare-const in22x14 Int)",
            "(declare-const in22x15 Int)",
            "(declare-const in22x10 Int)",
            "(declare-const in22x11 Int)",
            "(declare-const in2x22 Int)",
            "(declare-const in2x21 Int)",
            "(declare-const in2x20 Int)",
            "(declare-const in2x26 Int)",
            "(declare-const in2x25 Int)",
            "(declare-const in2x24 Int)",
            "(declare-const in2x23 Int)",
            "(declare-const in10x27 Int)",
            "(declare-const in19x1 Int)",
            "(declare-const in10x26 Int)",
            "(declare-const in19x2 Int)",
            "(declare-const in10x29 Int)",
            "(declare-const in10x28 Int)",
            "(declare-const in19x0 Int)",
            "(declare-const in10x23 Int)",
            "(declare-const in19x5 Int)",
            "(declare-const in10x22 Int)",
            "(declare-const in19x6 Int)",
            "(declare-const in10x25 Int)",
            "(declare-const in19x3 Int)",
            "(declare-const in10x24 Int)",
            "(declare-const in19x4 Int)",
            "(declare-const in19x9 Int)",
            "(declare-const in10x21 Int)",
            "(declare-const in19x7 Int)",
            "(declare-const in10x20 Int)",
            "(declare-const in19x8 Int)",
            "(declare-const in10x19 Int)",
            "(declare-const in10x16 Int)",
            "(declare-const in10x15 Int)",
            "(declare-const in10x18 Int)",
            "(declare-const in10x17 Int)",
            "(declare-const in10x12 Int)",
            "(declare-const in10x11 Int)",
            "(declare-const in10x14 Int)",
            "(declare-const in10x13 Int)",
            "(declare-const in26x29 Int)",
            "(declare-const in26x27 Int)",
            "(declare-const in26x28 Int)",
            "(declare-const in26x25 Int)",
            "(declare-const in26x23 Int)",
            "(declare-const in26x24 Int)",
            "(declare-const in26x21 Int)",
            "(declare-const in26x22 Int)",
            "(declare-const in26x20 Int)",
            "(declare-const in26x18 Int)",
            "(declare-const in26x19 Int)",
            "(declare-const in26x16 Int)",
            "(declare-const in26x17 Int)",
            "(declare-const in26x14 Int)",
            "(declare-const in26x15 Int)",
            "(declare-const in26x12 Int)",
            "(declare-const in26x13 Int)",
            "(declare-const in26x10 Int)",
            "(declare-const in9x13 Int)",
            "(declare-const in26x11 Int)",
            "(declare-const in9x14 Int)",
            "(declare-const in9x11 Int)",
            "(declare-const in9x12 Int)",
            "(declare-const in9x10 Int)",
            "(declare-const in9x19 Int)",
            "(declare-const in9x17 Int)",
            "(declare-const in9x18 Int)",
            "(declare-const in9x15 Int)",
            "(declare-const in9x16 Int)",
            "(declare-const in14x21 Int)",
            "(declare-const in14x20 Int)",
            "(declare-const in14x29 Int)",
            "(declare-const in14x28 Int)",
            "(declare-const in14x27 Int)",
            "(declare-const in14x26 Int)",
            "(declare-const in14x25 Int)",
            "(declare-const in14x24 Int)",
            "(declare-const in14x23 Int)",
            "(declare-const in14x22 Int)",
            "(declare-const in14x10 Int)",
            "(declare-const in14x19 Int)",
            "(declare-const in14x18 Int)",
            "(declare-const in14x17 Int)",
            "(declare-const in14x16 Int)",
            "(declare-const in14x15 Int)",
            "(declare-const in14x13 Int)",
            "(declare-const in14x12 Int)",
            "(declare-const in14x11 Int)",
            "(declare-const in24x29 Int)",
            "(declare-const in24x26 Int)",
            "(declare-const in24x25 Int)",
            "(declare-const in24x28 Int)",
            "(declare-const in24x27 Int)",
            "(declare-const in24x22 Int)",
            "(declare-const in24x21 Int)",
            "(declare-const in24x23 Int)",
            "(declare-const in9x24 Int)",
            "(declare-const in9x25 Int)",
            "(declare-const in24x20 Int)",
            "(declare-const in9x22 Int)",
            "(declare-const in9x23 Int)",
            "(declare-const in9x20 Int)",
            "(declare-const in9x21 Int)",
            "(declare-const in9x28 Int)",
            "(declare-const in9x29 Int)",
            "(declare-const in9x26 Int)",
            "(declare-const in9x27 Int)",
            "(declare-const in24x19 Int)",
            "(declare-const in24x18 Int)",
            "(declare-const in24x15 Int)",
            "(declare-const in24x14 Int)",
            "(declare-const in24x17 Int)",
            "(declare-const in24x16 Int)",
            "(declare-const in24x11 Int)",
            "(declare-const in24x10 Int)",
            "(declare-const in24x13 Int)",
            "(declare-const in24x12 Int)",
            "(declare-const in6x11 Int)",
            "(declare-const in6x10 Int)",
            "(declare-const in6x17 Int)",
            "(declare-const in6x16 Int)",
            "(declare-const in6x19 Int)",
            "(declare-const in6x18 Int)",
            "(declare-const in6x13 Int)",
            "(declare-const in6x12 Int)",
            "(declare-const in6x15 Int)",
            "(declare-const in6x14 Int)",
            "(declare-const in11x0 Int)",
            "(declare-const in11x2 Int)",
            "(declare-const in11x1 Int)",
            "(declare-const in6x20 Int)",
            "(declare-const in6x22 Int)",
            "(declare-const in6x21 Int)",
            "(declare-const in6x28 Int)",
            "(declare-const in6x27 Int)",
            "(declare-const in6x29 Int)",
            "(declare-const in6x24 Int)",
            "(declare-const in6x23 Int)",
            "(declare-const in6x26 Int)",
            "(declare-const in6x25 Int)",
            "(declare-const in28x29 Int)",
            "(declare-const in28x27 Int)",
            "(declare-const in24x0 Int)",
            "(declare-const in28x26 Int)",
            "(declare-const in28x25 Int)",
            "(declare-const in28x24 Int)",
            "(declare-const in13x3 Int)",
            "(declare-const in28x23 Int)",
            "(declare-const in13x4 Int)",
            "(declare-const in28x22 Int)",
            "(declare-const in13x1 Int)",
            "(declare-const in28x21 Int)",
            "(declare-const in13x2 Int)",
            "(declare-const in28x20 Int)",
            "(declare-const in13x7 Int)",
            "(declare-const in13x8 Int)",
            "(declare-const in13x5 Int)",
            "(declare-const in13x6 Int)",
            "(declare-const in13x9 Int)",
            "(declare-const in28x19 Int)",
            "(declare-const in28x18 Int)",
            "(declare-const in28x17 Int)",
            "(declare-const in28x16 Int)",
            "(declare-const in28x15 Int)",
            "(declare-const in28x14 Int)",
            "(declare-const in28x13 Int)",
            "(declare-const in24x3 Int)",
            "(declare-const in28x12 Int)",
            "(declare-const in24x4 Int)",
            "(declare-const in28x11 Int)",
            "(declare-const in24x1 Int)",
            "(declare-const in28x10 Int)",
            "(declare-const in24x2 Int)",
            "(declare-const in24x7 Int)",
            "(declare-const in24x8 Int)",
            "(declare-const in24x5 Int)",
            "(declare-const in24x6 Int)",
            "(declare-const in24x9 Int)",
            "(declare-const in16x24 Int)",
            "(declare-const in16x25 Int)",
            "(declare-const in16x26 Int)",
            "(declare-const in16x27 Int)",
            "(declare-const in16x28 Int)",
            "(declare-const in16x29 Int)",
            "(declare-const in1x6 Int)",
            "(declare-const in1x7 Int)",
            "(declare-const in1x4 Int)",
            "(declare-const in1x5 Int)",
            "(declare-const in1x8 Int)",
            "(declare-const in1x9 Int)",
            "(declare-const in16x20 Int)",
            "(declare-const in1x2 Int)",
            "(declare-const in16x21 Int)",
            "(declare-const in1x3 Int)",
            "(declare-const in16x22 Int)",
            "(declare-const in1x0 Int)",
            "(declare-const in16x23 Int)",
            "(declare-const in16x13 Int)",
            "(declare-const in16x14 Int)",
            "(declare-const in16x15 Int)",
            "(declare-const in16x17 Int)",
            "(declare-const in16x18 Int)",
            "(declare-const in16x19 Int)",
            "(declare-const in16x10 Int)",
            "(declare-const in16x11 Int)",
            "(declare-const in16x12 Int)",
            "(declare-const in22x1 Int)",
            "(declare-const in22x2 Int)",
            "(declare-const in22x0 Int)",
            "(declare-const in11x4 Int)",
            "(declare-const in11x3 Int)",
            "(declare-const in11x6 Int)",
            "(declare-const in11x5 Int)",
            "(declare-const in11x8 Int)",
            "(declare-const in11x7 Int)",
            "(declare-const in11x9 Int)",
            "(declare-const in22x5 Int)",
            "(declare-const in22x6 Int)",
            "(declare-const in22x3 Int)",
            "(declare-const in22x4 Int)",
            "(declare-const in22x9 Int)",
            "(declare-const in22x7 Int)",
            "(declare-const in22x8 Int)",
            "(declare-const in21x19 Int)",
            "(declare-const in21x15 Int)",
            "(declare-const in21x16 Int)",
            "(declare-const in21x17 Int)",
            "(declare-const in21x18 Int)",
            "(declare-const in21x11 Int)",
            "(declare-const in21x12 Int)",
            "(declare-const in21x13 Int)",
            "(declare-const in21x14 Int)",
            "(declare-const in21x10 Int)",
            "(declare-const in3x4 Int)",
            "(declare-const in3x5 Int)",
            "(declare-const in3x2 Int)",
            "(declare-const in3x8 Int)",
            "(declare-const in3x9 Int)",
            "(declare-const in3x6 Int)",
            "(declare-const in3x7 Int)",
            "(declare-const in3x0 Int)",
            "(declare-const in3x1 Int)",
            "(declare-const in17x0 Int)",
            "(declare-const in17x3 Int)",
            "(declare-const in17x4 Int)",
            "(declare-const in17x1 Int)",
            "(declare-const in17x2 Int)",
            "(declare-const in17x7 Int)",
            "(declare-const in17x8 Int)",
            "(declare-const in17x5 Int)",
            "(declare-const in17x6 Int)",
            "(declare-const in17x9 Int)",
            "(declare-const in28x0 Int)",
            "(declare-const in28x3 Int)",
            "(declare-const in28x4 Int)",
            "(declare-const in28x1 Int)",
            "(declare-const in28x2 Int)",
            "(declare-const in28x7 Int)",
            "(declare-const in28x8 Int)",
            "(declare-const in28x5 Int)",
            "(declare-const in28x6 Int)",
            "(declare-const in28x9 Int)",
            "(declare-const in5x8 Int)",
            "(declare-const in5x9 Int)",
            "(declare-const in5x2 Int)",
            "(declare-const in5x3 Int)",
            "(declare-const in5x0 Int)",
            "(declare-const in5x1 Int)",
            "(declare-const in5x6 Int)",
            "(declare-const in5x7 Int)",
            "(declare-const in5x4 Int)",
            "(declare-const in13x0 Int)",
            "(declare-const in18x27 Int)",
            "(declare-const in18x26 Int)",
            "(declare-const in18x29 Int)",
            "(declare-const in18x28 Int)",
            "(declare-const in4x18 Int)",
            "(declare-const in4x19 Int)",
            "(declare-const in15x1 Int)",
            "(declare-const in15x2 Int)",
            "(declare-const in15x0 Int)",
            "(declare-const in15x5 Int)",
            "(declare-const in15x6 Int)",
            "(declare-const in15x3 Int)",
            "(declare-const in15x4 Int)",
            "(declare-const in15x9 Int)",
            "(declare-const in4x14 Int)",
            "(declare-const in4x15 Int)",
            "(declare-const in18x21 Int)",
            "(declare-const in4x16 Int)",
            "(declare-const in15x7 Int)",
            "(declare-const in18x20 Int)",
            "(declare-const in4x17 Int)",
            "(declare-const in15x8 Int)",
            "(declare-const in18x23 Int)",
            "(declare-const in4x10 Int)",
            "(declare-const in18x22 Int)",
            "(declare-const in4x11 Int)",
            "(declare-const in18x25 Int)",
            "(declare-const in4x12 Int)",
            "(declare-const in18x24 Int)",
            "(declare-const in4x13 Int)",
            "(declare-const in18x16 Int)",
            "(declare-const in18x15 Int)",
            "(declare-const in18x17 Int)",
            "(declare-const in4x29 Int)",
            "(declare-const in18x19 Int)",
            "(declare-const in26x1 Int)",
            "(declare-const in26x2 Int)",
            "(declare-const in26x0 Int)",
            "(declare-const in4x20 Int)",
            "(declare-const in26x5 Int)",
            "(declare-const in26x6 Int)",
            "(declare-const in26x3 Int)",
            "(declare-const in26x4 Int)",
            "(declare-const in26x9 Int)",
            "(declare-const in4x25 Int)",
            "(declare-const in4x26 Int)",
            "(declare-const in4x27 Int)",
            "(declare-const in26x7 Int)",
            "(declare-const in18x10 Int)",
            "(declare-const in4x28 Int)",
            "(declare-const in26x8 Int)",
            "(declare-const in4x21 Int)",
            "(declare-const in18x12 Int)",
            "(declare-const in4x22 Int)",
            "(declare-const in18x11 Int)",
            "(declare-const in4x23 Int)",
            "(declare-const in18x14 Int)",
            "(declare-const in4x24 Int)",
            "(declare-const in18x13 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6))  ( =  in7x0 in0x7))  ( =  in7x1 in1x7))  ( =  in7x2 in2x7))  ( =  in7x3 in3x7))  ( =  in7x4 in4x7))  ( =  in7x5 in5x7))  ( =  in7x6 in6x7))  ( =  in8x0 in0x8))  ( =  in8x1 in1x8))  ( =  in8x2 in2x8))  ( =  in8x3 in3x8))  ( =  in8x4 in4x8))  ( =  in8x5 in5x8))  ( =  in8x6 in6x8))  ( =  in8x7 in7x8))  ( =  in9x0 in0x9))  ( =  in9x1 in1x9))  ( =  in9x2 in2x9))  ( =  in9x3 in3x9))  ( =  in9x4 in4x9))  ( =  in9x5 in5x9))  ( =  in9x6 in6x9))  ( =  in9x7 in7x9))  ( =  in9x8 in8x9))  ( =  in10x0 in0x10))  ( =  in10x1 in1x10))  ( =  in10x2 in2x10))  ( =  in10x3 in3x10))  ( =  in10x4 in4x10))  ( =  in10x5 in5x10))  ( =  in10x6 in6x10))  ( =  in10x7 in7x10))  ( =  in10x8 in8x10))  ( =  in10x9 in9x10))  ( =  in11x0 in0x11))  ( =  in11x1 in1x11))  ( =  in11x2 in2x11))  ( =  in11x3 in3x11))  ( =  in11x4 in4x11))  ( =  in11x5 in5x11))  ( =  in11x6 in6x11))  ( =  in11x7 in7x11))  ( =  in11x8 in8x11))  ( =  in11x9 in9x11))  ( =  in11x10 in10x11))  ( =  in12x0 in0x12))  ( =  in12x1 in1x12))  ( =  in12x2 in2x12))  ( =  in12x3 in3x12))  ( =  in12x4 in4x12))  ( =  in12x5 in5x12))  ( =  in12x6 in6x12))  ( =  in12x7 in7x12))  ( =  in12x8 in8x12))  ( =  in12x9 in9x12))  ( =  in12x10 in10x12))  ( =  in12x11 in11x12))  ( =  in13x0 in0x13))  ( =  in13x1 in1x13))  ( =  in13x2 in2x13))  ( =  in13x3 in3x13))  ( =  in13x4 in4x13))  ( =  in13x5 in5x13))  ( =  in13x6 in6x13))  ( =  in13x7 in7x13))  ( =  in13x8 in8x13))  ( =  in13x9 in9x13))  ( =  in13x10 in10x13))  ( =  in13x11 in11x13))  ( =  in13x12 in12x13))  ( =  in14x0 in0x14))  ( =  in14x1 in1x14))  ( =  in14x2 in2x14))  ( =  in14x3 in3x14))  ( =  in14x4 in4x14))  ( =  in14x5 in5x14))  ( =  in14x6 in6x14))  ( =  in14x7 in7x14))  ( =  in14x8 in8x14))  ( =  in14x9 in9x14))  ( =  in14x10 in10x14))  ( =  in14x11 in11x14))  ( =  in14x12 in12x14))  ( =  in14x13 in13x14))  ( =  in15x0 in0x15))  ( =  in15x1 in1x15))  ( =  in15x2 in2x15))  ( =  in15x3 in3x15))  ( =  in15x4 in4x15))  ( =  in15x5 in5x15))  ( =  in15x6 in6x15))  ( =  in15x7 in7x15))  ( =  in15x8 in8x15))  ( =  in15x9 in9x15))  ( =  in15x10 in10x15))  ( =  in15x11 in11x15))  ( =  in15x12 in12x15))  ( =  in15x13 in13x15))  ( =  in15x14 in14x15))  ( =  in16x0 in0x16))  ( =  in16x1 in1x16))  ( =  in16x2 in2x16))  ( =  in16x3 in3x16))  ( =  in16x4 in4x16))  ( =  in16x5 in5x16))  ( =  in16x6 in6x16))  ( =  in16x7 in7x16))  ( =  in16x8 in8x16))  ( =  in16x9 in9x16))  ( =  in16x10 in10x16))  ( =  in16x11 in11x16))  ( =  in16x12 in12x16))  ( =  in16x13 in13x16))  ( =  in16x14 in14x16))  ( =  in16x15 in15x16))  ( =  in17x0 in0x17))  ( =  in17x1 in1x17))  ( =  in17x2 in2x17))  ( =  in17x3 in3x17))  ( =  in17x4 in4x17))  ( =  in17x5 in5x17))  ( =  in17x6 in6x17))  ( =  in17x7 in7x17))  ( =  in17x8 in8x17))  ( =  in17x9 in9x17))  ( =  in17x10 in10x17))  ( =  in17x11 in11x17))  ( =  in17x12 in12x17))  ( =  in17x13 in13x17))  ( =  in17x14 in14x17))  ( =  in17x15 in15x17))  ( =  in17x16 in16x17))  ( =  in18x0 in0x18))  ( =  in18x1 in1x18))  ( =  in18x2 in2x18))  ( =  in18x3 in3x18))  ( =  in18x4 in4x18))  ( =  in18x5 in5x18))  ( =  in18x6 in6x18))  ( =  in18x7 in7x18))  ( =  in18x8 in8x18))  ( =  in18x9 in9x18))  ( =  in18x10 in10x18))  ( =  in18x11 in11x18))  ( =  in18x12 in12x18))  ( =  in18x13 in13x18))  ( =  in18x14 in14x18))  ( =  in18x15 in15x18))  ( =  in18x16 in16x18))  ( =  in18x17 in17x18))  ( =  in19x0 in0x19))  ( =  in19x1 in1x19))  ( =  in19x2 in2x19))  ( =  in19x3 in3x19))  ( =  in19x4 in4x19))  ( =  in19x5 in5x19))  ( =  in19x6 in6x19))  ( =  in19x7 in7x19))  ( =  in19x8 in8x19))  ( =  in19x9 in9x19))  ( =  in19x10 in10x19))  ( =  in19x11 in11x19))  ( =  in19x12 in12x19))  ( =  in19x13 in13x19))  ( =  in19x14 in14x19))  ( =  in19x15 in15x19))  ( =  in19x16 in16x19))  ( =  in19x17 in17x19))  ( =  in19x18 in18x19))  ( =  in20x0 in0x20))  ( =  in20x1 in1x20))  ( =  in20x2 in2x20))  ( =  in20x3 in3x20))  ( =  in20x4 in4x20))  ( =  in20x5 in5x20))  ( =  in20x6 in6x20))  ( =  in20x7 in7x20))  ( =  in20x8 in8x20))  ( =  in20x9 in9x20))  ( =  in20x10 in10x20))  ( =  in20x11 in11x20))  ( =  in20x12 in12x20))  ( =  in20x13 in13x20))  ( =  in20x14 in14x20))  ( =  in20x15 in15x20))  ( =  in20x16 in16x20))  ( =  in20x17 in17x20))  ( =  in20x18 in18x20))  ( =  in20x19 in19x20))  ( =  in21x0 in0x21))  ( =  in21x1 in1x21))  ( =  in21x2 in2x21))  ( =  in21x3 in3x21))  ( =  in21x4 in4x21))  ( =  in21x5 in5x21))  ( =  in21x6 in6x21))  ( =  in21x7 in7x21))  ( =  in21x8 in8x21))  ( =  in21x9 in9x21))  ( =  in21x10 in10x21))  ( =  in21x11 in11x21))  ( =  in21x12 in12x21))  ( =  in21x13 in13x21))  ( =  in21x14 in14x21))  ( =  in21x15 in15x21))  ( =  in21x16 in16x21))  ( =  in21x17 in17x21))  ( =  in21x18 in18x21))  ( =  in21x19 in19x21))  ( =  in21x20 in20x21))  ( =  in22x0 in0x22))  ( =  in22x1 in1x22))  ( =  in22x2 in2x22))  ( =  in22x3 in3x22))  ( =  in22x4 in4x22))  ( =  in22x5 in5x22))  ( =  in22x6 in6x22))  ( =  in22x7 in7x22))  ( =  in22x8 in8x22))  ( =  in22x9 in9x22))  ( =  in22x10 in10x22))  ( =  in22x11 in11x22))  ( =  in22x12 in12x22))  ( =  in22x13 in13x22))  ( =  in22x14 in14x22))  ( =  in22x15 in15x22))  ( =  in22x16 in16x22))  ( =  in22x17 in17x22))  ( =  in22x18 in18x22))  ( =  in22x19 in19x22))  ( =  in22x20 in20x22))  ( =  in22x21 in21x22))  ( =  in23x0 in0x23))  ( =  in23x1 in1x23))  ( =  in23x2 in2x23))  ( =  in23x3 in3x23))  ( =  in23x4 in4x23))  ( =  in23x5 in5x23))  ( =  in23x6 in6x23))  ( =  in23x7 in7x23))  ( =  in23x8 in8x23))  ( =  in23x9 in9x23))  ( =  in23x10 in10x23))  ( =  in23x11 in11x23))  ( =  in23x12 in12x23))  ( =  in23x13 in13x23))  ( =  in23x14 in14x23))  ( =  in23x15 in15x23))  ( =  in23x16 in16x23))  ( =  in23x17 in17x23))  ( =  in23x18 in18x23))  ( =  in23x19 in19x23))  ( =  in23x20 in20x23))  ( =  in23x21 in21x23))  ( =  in23x22 in22x23))  ( =  in24x0 in0x24))  ( =  in24x1 in1x24))  ( =  in24x2 in2x24))  ( =  in24x3 in3x24))  ( =  in24x4 in4x24))  ( =  in24x5 in5x24))  ( =  in24x6 in6x24))  ( =  in24x7 in7x24))  ( =  in24x8 in8x24))  ( =  in24x9 in9x24))  ( =  in24x10 in10x24))  ( =  in24x11 in11x24))  ( =  in24x12 in12x24))  ( =  in24x13 in13x24))  ( =  in24x14 in14x24))  ( =  in24x15 in15x24))  ( =  in24x16 in16x24))  ( =  in24x17 in17x24))  ( =  in24x18 in18x24))  ( =  in24x19 in19x24))  ( =  in24x20 in20x24))  ( =  in24x21 in21x24))  ( =  in24x22 in22x24))  ( =  in24x23 in23x24))  ( =  in25x0 in0x25))  ( =  in25x1 in1x25))  ( =  in25x2 in2x25))  ( =  in25x3 in3x25))  ( =  in25x4 in4x25))  ( =  in25x5 in5x25))  ( =  in25x6 in6x25))  ( =  in25x7 in7x25))  ( =  in25x8 in8x25))  ( =  in25x9 in9x25))  ( =  in25x10 in10x25))  ( =  in25x11 in11x25))  ( =  in25x12 in12x25))  ( =  in25x13 in13x25))  ( =  in25x14 in14x25))  ( =  in25x15 in15x25))  ( =  in25x16 in16x25))  ( =  in25x17 in17x25))  ( =  in25x18 in18x25))  ( =  in25x19 in19x25))  ( =  in25x20 in20x25))  ( =  in25x21 in21x25))  ( =  in25x22 in22x25))  ( =  in25x23 in23x25))  ( =  in25x24 in24x25))  ( =  in26x0 in0x26))  ( =  in26x1 in1x26))  ( =  in26x2 in2x26))  ( =  in26x3 in3x26))  ( =  in26x4 in4x26))  ( =  in26x5 in5x26))  ( =  in26x6 in6x26))  ( =  in26x7 in7x26))  ( =  in26x8 in8x26))  ( =  in26x9 in9x26))  ( =  in26x10 in10x26))  ( =  in26x11 in11x26))  ( =  in26x12 in12x26))  ( =  in26x13 in13x26))  ( =  in26x14 in14x26))  ( =  in26x15 in15x26))  ( =  in26x16 in16x26))  ( =  in26x17 in17x26))  ( =  in26x18 in18x26))  ( =  in26x19 in19x26))  ( =  in26x20 in20x26))  ( =  in26x21 in21x26))  ( =  in26x22 in22x26))  ( =  in26x23 in23x26))  ( =  in26x24 in24x26))  ( =  in26x25 in25x26))  ( =  in27x0 in0x27))  ( =  in27x1 in1x27))  ( =  in27x2 in2x27))  ( =  in27x3 in3x27))  ( =  in27x4 in4x27))  ( =  in27x5 in5x27))  ( =  in27x6 in6x27))  ( =  in27x7 in7x27))  ( =  in27x8 in8x27))  ( =  in27x9 in9x27))  ( =  in27x10 in10x27))  ( =  in27x11 in11x27))  ( =  in27x12 in12x27))  ( =  in27x13 in13x27))  ( =  in27x14 in14x27))  ( =  in27x15 in15x27))  ( =  in27x16 in16x27))  ( =  in27x17 in17x27))  ( =  in27x18 in18x27))  ( =  in27x19 in19x27))  ( =  in27x20 in20x27))  ( =  in27x21 in21x27))  ( =  in27x22 in22x27))  ( =  in27x23 in23x27))  ( =  in27x24 in24x27))  ( =  in27x25 in25x27))  ( =  in27x26 in26x27))  ( =  in28x0 in0x28))  ( =  in28x1 in1x28))  ( =  in28x2 in2x28))  ( =  in28x3 in3x28))  ( =  in28x4 in4x28))  ( =  in28x5 in5x28))  ( =  in28x6 in6x28))  ( =  in28x7 in7x28))  ( =  in28x8 in8x28))  ( =  in28x9 in9x28))  ( =  in28x10 in10x28))  ( =  in28x11 in11x28))  ( =  in28x12 in12x28))  ( =  in28x13 in13x28))  ( =  in28x14 in14x28))  ( =  in28x15 in15x28))  ( =  in28x16 in16x28))  ( =  in28x17 in17x28))  ( =  in28x18 in18x28))  ( =  in28x19 in19x28))  ( =  in28x20 in20x28))  ( =  in28x21 in21x28))  ( =  in28x22 in22x28))  ( =  in28x23 in23x28))  ( =  in28x24 in24x28))  ( =  in28x25 in25x28))  ( =  in28x26 in26x28))  ( =  in28x27 in27x28))  ( =  in29x0 in0x29))  ( =  in29x1 in1x29))  ( =  in29x2 in2x29))  ( =  in29x3 in3x29))  ( =  in29x4 in4x29))  ( =  in29x5 in5x29))  ( =  in29x6 in6x29))  ( =  in29x7 in7x29))  ( =  in29x8 in8x29))  ( =  in29x9 in9x29))  ( =  in29x10 in10x29))  ( =  in29x11 in11x29))  ( =  in29x12 in12x29))  ( =  in29x13 in13x29))  ( =  in29x14 in14x29))  ( =  in29x15 in15x29))  ( =  in29x16 in16x29))  ( =  in29x17 in17x29))  ( =  in29x18 in18x29))  ( =  in29x19 in19x29))  ( =  in29x20 in20x29))  ( =  in29x21 in21x29))  ( =  in29x22 in22x29))  ( =  in29x23 in23x29))  ( =  in29x24 in24x29))  ( =  in29x25 in25x29))  ( =  in29x26 in26x29))  ( =  in29x27 in27x29))  ( =  in29x28 in28x29)))"
          ]
        },
        "predicted": "(assert (and ( = in1x0 in0x1) ( = in2x0 in0x2) ( = in2x1 in1x2) ( = in3x0 in0x3) ( = in3x1 in1x3) ( = in3x2 in2x3) ( = in4x0 in0x4) ( = in4x1 in1x4) ( = in4x2 in2x4) ( = in4x3 in3x4) ( = in5x0 in0x5) ( = in5x1 in1x5) ( = in5x2 in2x5) ( = in5x3 in3x5) ( = in5x4 in4x5) ( = in6x0 in0x6) ( = in6x1 in1x6) ( = in6x2 in2x6) ( = in6x3 in3x6) ( = in6x4 in4x6) ( = in6x5 in5x6) ( = in7x0 in0x7) ( = in7x1 in1x7) ( = in7x2 in2x7) ( = in7x3 in3x7) ( = in7x4 in4x7) ( = in7x5 in5x7) ( = in7x6 in6x7) ( = in8x0 in0x8) ( = in8x1 in1x8) ( = in8x2 in2x8) ( = in8x3 in3x8) ( = in8x4 in4x8) ( = in8x5 in5x8) ( = in8x6 in6x8) ( = in8x7 in7x8) ( = in9x0 in0x9) ( = in9x1 in1x9) ( = in9x2 in2x9) ( = in9x3 in3x9) ( = in9x4 in4x9) ( = in9x5 in5x9) ( = in9x6 in6x9) ( = in9x7 in7x9) ( = in9x8 in8x9) ( = in10x0 in0x10) ( = in10x1 in1x10) ( = in10x2 in2x10) ( = in10x3 in3x10) ( = in10x4 in4x10) ( = in10x5 in5x10) ( = in10x6 in6x10) ( = in10x7 in7x10) ( = in10x8 in8x10) ( = in10x9 in9x10) ( = in11x0 in0x11) ( = in11x1 in1x11) ( = in11x2 in2x11) ( = in11x3 in3x11) ( = in11x4 in4x11) ( = in11x5 in5x11) ( = in11x6 in6x11) ( = in11x7 in7x11) ( = in11x8 in8x11) ( = in11x9 in9x11) ( = in11x10 in10x11) ( = in12x0 in0x12) ( = in12x1 in1x12) ( = in12x2 in2x12) ( = in12x3 in3x12) ( = in12x4 in4x12) ( = in12x5 in5x12) ( = in12x6 in6x12) ( = in12x7 in7x12) ( = in12x8 in8x12) ( = in12x9 in9x12) ( = in12x10 in10x12) ( = in12x11 in11x12) ( = in13x0 in0x13) ( = in13x1 in1x13) ( = in13x2 in2x13) ( = in13x3 in3x13) ( = in13x4 in4x13) ( = in13x5 in5x13) ( = in13x6 in6x13) ( = in13x7 in7x13) ( = in13x8 in8x13) ( = in13x9 in9x13) ( = in13x10 in10x13) ( = in13x11 in11x13) ( = in13x12 in12x13) ( = in14x0 in0x14) ( = in14x1 in1x14) ( = in14x2 in2x14) ( = in14x3 in3x14) ( = in14x4 in4x14) ( = in14x5 in5x14) ( = in14x6 in6x14) ( = in14x7 in7x14) ( = in14x8 in8x14) ( = in14x9 in9x14) ( = in14x10 in10x14) ( = in14x11 in11x14) ( = in14x12 in12x14) ( = in14x13 in13x14) ( = in15x0 in0x15) ( = in15x1 in1x15) ( = in15x2 in2x15) ( = in15x3 in3x15) ( = in15x4 in4x15) ( = in15x5 in5x15) ( = in15x6 in6x15) ( = in15x7 in7x15) ( = in15x8 in8x15) ( = in15x9 in9x15) ( = in15x10 in10x15) ( = in15x11 in11x15) ( = in15x12 in12x15) ( = in15x13 in13x15) ( = in15x14 in14x15) ( = in16x0 in0x16) ( = in16x1 in1x16) ( = in16x2 in2x16) ( = in16x3 in3x16) ( = in16x4 in4x16) ( = in16x5 in5x16) ( = in16x6 in6x16) ( = in16x7 in7x16) ( = in16x8 in8x16) ( = in16x9 in9x16) ( = in16x10 in10x16) ( = in16x11 in11x16) ( = in16x12 in12x16) ( = in16x13 in13x16) ( = in16x14 in14x16) ( = in16x15 in15x16) ( = in17x0 in0x17) ( = in17x1 in1x17) ( = in17x2 in2x17) ( = in17x3 in3x17) ( = in17x4 in4x17) ( = in17x5 in5x17) ( = in17x6 in6x17) ( = in17x7 in7x17) ( = in17x8 in8x17) ( = in17x9 in9x17) ( = in17x10 in10x17) ( = in17x11 in11x17) ( = in17x12 in12x17) ( = in17x13 in13x17) ( = in17x14 in14x17) ( = in17x15 in15x17) ( = in17x16 in16x17) ( = in18x0 in0x18) ( = in18x1 in1x18) ( = in18x2 in2x18) ( = in18x3 in3x18) ( = in18x4 in4x18) ( = in18x5 in5x18) ( = in18x6 in6x18) ( = in18x7 in7x18) ( = in18x8 in8x18) ( = in18x9 in9x18) ( = in18x10 in10x18) ( = in18x11 in11x18) ( = in18x12 in12x18) ( = in18x13 in13x18) ( = in18x14 in14x18) ( = in18x15 in15x18) ( = in18x16 in16x18) ( = in18x17 in17x18) ( = in19x0 in0x19) ( = in19x1 in1x19) ( = in19x2 in2x19) ( = in19x3 in3x19) ( = in19x4 in4x19) ( = in19x5 in5x19) ( = in19x6 in6x19) ( = in19x7 in7x19) ( = in19x8 in8x19) ( = in19x9 in9x19) ( = in19x10 in10x19) ( = in19x11 in11x19) ( = in19x12 in12x19) ( = in19x13 in13x19) ( = in19x14 in14x19) ( = in19x15 in15x19) ( = in19x16 in16x19) ( = in19x17 in17x19) ( = in19x18 in18x19) ( = in20x0 in0x20) ( = in20x1 in1x20) ( = in20x2 in2x20) ( = in20x3 in3x20) ( = in20x4 in4x20) ( = in20x5 in5x20) ( = in20x6 in6x20) ( = in20x7 in7x20) ( = in20x8 in8x20) ( = in20x9 in9x20) ( = in20x10 in10x20) ( = in20x11 in11x20) ( = in20x12 in12x20) ( = in20x13 in13x20) ( = in20x14 in14x20) ( = in20x15 in15x20) ( = in20x16 in16x20) ( = in20x17 in17x20) ( = in20x18 in18x20) ( = in20x19 in19x20) ( = in21x0 in0x21) ( = in21x1 in1x21) ( = in21x2 in2x21) ( = in21x3 in3x21) ( = in21x4 in4x21) ( = in21x5 in5x21) ( = in21x6 in6x21) ( = in21x7 in7x21) ( = in21x8 in8x21) ( = in21x9 in9x21) ( = in21x10 in10x21) ( = in21x11 in11x21) ( = in21x12 in12x21) ( = in21x13 in13x21) ( = in21x14 in14x21) ( = in21x15 in15x21) ( = in21x16 in16x21) ( = in21x17 in17x21) ( = in21x18 in18x21) ( = in21x19 in19x21) ( = in21x20 in20x21) ( = in22x0 in0x22) ( = in22x1 in1x22) ( = in22x2 in2x22) ( = in22x3 in3x22) ( = in22x4 in4x22) ( = in22x5 in5x22) ( = in22x6 in6x22) ( = in22x7 in7x22) ( = in22x8 in8x22) ( = in22x9 in9x22) ( = in22x10 in10x22) ( = in22x11 in11x22) ( = in22x12 in12x22) ( = in22x13 in13x22) ( = in22x14 in14x22) ( = in22x15 in15x22) ( = in22x16 in16x22) ( = in22x17 in17x22) ( = in22x18 in18x22) ( = in22x19 in19x22) ( = in22x20 in20x22) ( = in22x21 in21x22) ( = in23x0 in0x23) ( = in23x1 in1x23) ( = in23x2 in2x23) ( = in23x3 in3x23) ( = in23x4 in4x23) ( = in23x5 in5x23) ( = in23x6 in6x23) ( = in23x7 in7x23) ( = in23x8 in8x23) ( = in23x9 in9x23) ( = in23x10 in10x23) ( = in23x11 in11x23) ( = in23x12 in12x23) ( = in23x13 in13x23) ( = in23x14 in14x23) ( = in23x15 in15x23) ( = in23x16 in16x23) ( = in23x17 in17x23) ( = in23x18 in18x23) ( = in23x19 in19x23) ( = in23x20 in20x23) ( = in23x21 in21x23) ( = in23x22 in22x23) ( = in24x0 in0x24) ( = in24x1 in1x24) ( = in24x2 in2x24) ( = in24x3 in3x24) ( = in24x4 in4x24) ( = in24x5 in5x24) ( = in24x6 in6x24) ( = in24x7 in7x24) ( = in24x8 in8x24) ( = in24x9 in9x24) ( = in24x10 in10x24) ( = in24x11 in11x24) ( = in24x12 in12x24) ( = in24x13 in13x24) ( = in24x14 in14x24) ( = in24x15 in15x24) ( = in24x16 in16x24) ( = in24x17 in17x24) ( = in24x18 in18x24) ( = in24x19 in19x24) ( = in24x20 in20x24) ( = in24x21 in21x24) ( = in24x22 in22x24) ( = in24x23 in23x24) ( = in25x0 in0x25) ( = in25x1 in1x25) ( = in25x2 in2x25) ( = in25x3 in3x25) ( = in25x4 in4x25) ( = in25x5 in5x25) ( = in25x6 in6x25) ( = in25x7 in7x25) ( = in25x8 in8x25) ( = in25x9 in9x25) ( = in25x10 in10x25) ( = in25x11 in11x25) ( = in25x12 in12x25) ( = in25x13 in13x25) ( = in25x14 in14x25) ( = in25x15 in15x25) ( = in25x16 in16x25) ( = in25x17 in17x25) ( = in25x18 in18x25) ( = in25x19 in19x25) ( = in25x20 in20x25) ( = in25x21 in21x25) ( = in25x22 in22x25) ( = in25x23 in23x25) ( = in25x24 in24x25) ( = in26x0 in0x26) ( = in26x1 in1x26) ( = in26x2 in2x26) ( = in26x3 in3x26) ( = in26x4 in4x26) ( = in26x5 in5x26) ( = in26x6 in6x26) ( = in26x7 in7x26) ( = in26x8 in8x26) ( = in26x9 in9x26) ( = in26x10 in10x26) ( = in26x11 in11x26) ( = in26x12 in12x26) ( = in26x13 in13x26) ( = in26x14 in14x26) ( = in26x15 in15x26) ( = in26x16 in16x26) ( = in26x17 in17x26) ( = in26x18 in18x26) ( = in26x19 in19x26) ( = in26x20 in20x26) ( = in26x21 in21x26) ( = in26x22 in22x26) ( = in26x23 in23x26) ( = in26x24 in24x26) ( = in26x25 in25x26) ( = in27x0 in0x27) ( = in27x1 in1x27) ( = in27x2 in2x27) ( = in27x3 in3x27) ( = in27x4 in4x27) ( = in27x5 in5x27) ( = in27x6 in6x27) ( = in27x7 in7x27) ( = in27x8 in8x27) ( = in27x9 in9x27) ( = in27x10 in10x27) ( = in27x11 in11x27) ( = in27x12 in12x27) ( = in27x13 in13x27) ( = in27x14 in14x27) ( = in27x15 in15x27) ( = in27x16 in16x27) ( = in27x17 in17x27) ( = in27x18 in18x27) ( = in27x19 in19x27) ( = in27x20 in20x27) ( = in27x21 in21x27) ( = in27x22 in22x27) ( = in27x23 in23x27) ( = in27x24 in24x27) ( = in27x25 in25x27) ( = in27x26 in26x27) ( = in28x0 in0x28) ( = in28x1 in1x28) ( = in28x2 in2x28) ( = in28x3 in3x28) ( = in28x4 in4x28) ( = in28x5 in5x28) ( = in28x6 in6x28) ( = in28x7 in7x28) ( = in28x8 in8x28) ( = in28x9 in9x28) ( = in28x10 in10x28) ( = in28x11 in11x28) ( = in28x12 in12x28) ( = in28x13 in13x28) ( = in28x14 in14x28) ( = in28x15 in15x28) ( = in28x16 in16x28) ( = in28x17 in17x28) ( = in28x18 in18x28) ( = in28x19 in19x28) ( = in28x20 in20x28) ( = in28x21 in21x28) ( = in28x22 in22x28) ( = in28x23 in23x28) ( = in28x24 in24x28) ( = in28x25 in25x28) ( = in28x26 in26x28) ( = in28x27 in27x28) ( = in29x0 in0x29) ( = in29x1 in1x29) ( = in29x2 in2x29) ( = in29x3 in3x29) ( = in29x4 in4x29) ( = in29x5 in5x29) ( = in29x6 in6x29) ( = in29x7 in7x29) ( = in29x8 in8x29) ( = in29x9 in9x29) ( = in29x10 in10x29) ( = in29x11 in11x29) ( = in29x12 in12x29) ( = in29x13 in13x29) ( = in29x14 in14x29) ( = in29x15 in15x29) ( = in29x16 in16x29) ( = in29x17 in17x29) ( = in29x18 in18x29) ( = in29x19 in19x29) ( = in29x20 in20x29) ( = in29x21 in21x29) ( = in29x22 in22x29) ( = in29x23 in23x29) ( = in29x24 in24x29) ( = in29x25 in25x29) ( = in29x26 in26x29) ( = in29x27 in27x29) ( = in29x28 in28x29)))",
        "equivalent": true
      }
    }
  },
  "SimpleTrueFalse": {
    "succeeded": true,
    "attempts": 1,
    "examples_right": 30,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)"
          ],
          "assertions": [
            "(assert  ( =  in0 1))"
          ]
        },
        "predicted": "(assert (and (= in0 1)))",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and  ( =  in0 1)  ( =  in1 0)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0)))",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1)))",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0)))",
        "equivalent": true
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1)))",
        "equivalent": true
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1) (= in5 0)))",
        "equivalent": true
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1) (= in5 0) (= in6 1)))",
        "equivalent": true
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1) (= in5 0) (= in6 1) (= in7 0)))",
        "equivalent": true
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1) (= in5 0) (= in6 1) (= in7 0) (= in8 1)))",
        "equivalent": true
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1) (= in5 0) (= in6 1) (= in7 0) (= in8 1) (= in9 0)))",
        "equivalent": true
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1) (= in5 0) (= in6 1) (= in7 0) (= in8 1) (= in9 0) (= in10 1)))",
        "equivalent": true
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1) (= in5 0) (= in6 1) (= in7 0) (= in8 1) (= in9 0) (= in10 1) (= in11 0)))",
        "equivalent": true
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1) (= in5 0) (= in6 1) (= in7 0) (= in8 1) (= in9 0) (= in10 1) (= in11 0) (= in12 1)))",
        "equivalent": true
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1) (= in5 0) (= in6 1) (= in7 0) (= in8 1) (= in9 0) (= in10 1) (= in11 0) (= in12 1) (= in13 0)))",
        "equivalent": true
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1) (= in5 0) (= in6 1) (= in7 0) (= in8 1) (= in9 0) (= in10 1) (= in11 0) (= in12 1) (= in13 0) (= in14 1)))",
        "equivalent": true
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1) (= in5 0) (= in6 1) (= in7 0) (= in8 1) (= in9 0) (= in10 1) (= in11 0) (= in12 1) (= in13 0) (= in14 1) (= in15 0)))",
        "equivalent": true
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1) (= in5 0) (= in6 1) (= in7 0) (= in8 1) (= in9 0) (= in10 1) (= in11 0) (= in12 1) (= in13 0) (= in14 1) (= in15 0) (= in16 1)))",
        "equivalent": true
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1) (= in5 0) (= in6 1) (= in7 0) (= in8 1) (= in9 0) (= in10 1) (= in11 0) (= in12 1) (= in13 0) (= in14 1) (= in15 0) (= in16 1) (= in17 0)))",
        "equivalent": true
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1) (= in5 0) (= in6 1) (= in7 0) (= in8 1) (= in9 0) (= in10 1) (= in11 0) (= in12 1) (= in13 0) (= in14 1) (= in15 0) (= in16 1) (= in17 0) (= in18 1)))",
        "equivalent": true
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1))  ( =  in19 0)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1) (= in5 0) (= in6 1) (= in7 0) (= in8 1) (= in9 0) (= in10 1) (= in11 0) (= in12 1) (= in13 0) (= in14 1) (= in15 0) (= in16 1) (= in17 0) (= in18 1) (= in19 0)))",
        "equivalent": true
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1))  ( =  in19 0))  ( =  in20 1)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1) (= in5 0) (= in6 1) (= in7 0) (= in8 1) (= in9 0) (= in10 1) (= in11 0) (= in12 1) (= in13 0) (= in14 1) (= in15 0) (= in16 1) (= in17 0) (= in18 1) (= in19 0) (= in20 1)))",
        "equivalent": true
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1))  ( =  in19 0))  ( =  in20 1))  ( =  in21 0)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1) (= in5 0) (= in6 1) (= in7 0) (= in8 1) (= in9 0) (= in10 1) (= in11 0) (= in12 1) (= in13 0) (= in14 1) (= in15 0) (= in16 1) (= in17 0) (= in18 1) (= in19 0) (= in20 1) (= in21 0)))",
        "equivalent": true
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1))  ( =  in19 0))  ( =  in20 1))  ( =  in21 0))  ( =  in22 1)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1) (= in5 0) (= in6 1) (= in7 0) (= in8 1) (= in9 0) (= in10 1) (= in11 0) (= in12 1) (= in13 0) (= in14 1) (= in15 0) (= in16 1) (= in17 0) (= in18 1) (= in19 0) (= in20 1) (= in21 0) (= in22 1)))",
        "equivalent": true
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1))  ( =  in19 0))  ( =  in20 1))  ( =  in21 0))  ( =  in22 1))  ( =  in23 0)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1) (= in5 0) (= in6 1) (= in7 0) (= in8 1) (= in9 0) (= in10 1) (= in11 0) (= in12 1) (= in13 0) (= in14 1) (= in15 0) (= in16 1) (= in17 0) (= in18 1) (= in19 0) (= in20 1) (= in21 0) (= in22 1) (= in23 0)))",
        "equivalent": true
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1))  ( =  in19 0))  ( =  in20 1))  ( =  in21 0))  ( =  in22 1))  ( =  in23 0))  ( =  in24 1)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1) (= in5 0) (= in6 1) (= in7 0) (= in8 1) (= in9 0) (= in10 1) (= in11 0) (= in12 1) (= in13 0) (= in14 1) (= in15 0) (= in16 1) (= in17 0) (= in18 1) (= in19 0) (= in20 1) (= in21 0) (= in22 1) (= in23 0) (= in24 1)))",
        "equivalent": true
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1))  ( =  in19 0))  ( =  in20 1))  ( =  in21 0))  ( =  in22 1))  ( =  in23 0))  ( =  in24 1))  ( =  in25 0)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1) (= in5 0) (= in6 1) (= in7 0) (= in8 1) (= in9 0) (= in10 1) (= in11 0) (= in12 1) (= in13 0) (= in14 1) (= in15 0) (= in16 1) (= in17 0) (= in18 1) (= in19 0) (= in20 1) (= in21 0) (= in22 1) (= in23 0) (= in24 1) (= in25 0)))",
        "equivalent": true
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1))  ( =  in19 0))  ( =  in20 1))  ( =  in21 0))  ( =  in22 1))  ( =  in23 0))  ( =  in24 1))  ( =  in25 0))  ( =  in26 1)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1) (= in5 0) (= in6 1) (= in7 0) (= in8 1) (= in9 0) (= in10 1) (= in11 0) (= in12 1) (= in13 0) (= in14 1) (= in15 0) (= in16 1) (= in17 0) (= in18 1) (= in19 0) (= in20 1) (= in21 0) (= in22 1) (= in23 0) (= in24 1) (= in25 0) (= in26 1)))",
        "equivalent": true
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1))  ( =  in19 0))  ( =  in20 1))  ( =  in21 0))  ( =  in22 1))  ( =  in23 0))  ( =  in24 1))  ( =  in25 0))  ( =  in26 1))  ( =  in27 0)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1) (= in5 0) (= in6 1) (= in7 0) (= in8 1) (= in9 0) (= in10 1) (= in11 0) (= in12 1) (= in13 0) (= in14 1) (= in15 0) (= in16 1) (= in17 0) (= in18 1) (= in19 0) (= in20 1) (= in21 0) (= in22 1) (= in23 0) (= in24 1) (= in25 0) (= in26 1) (= in27 0)))",
        "equivalent": true
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1))  ( =  in19 0))  ( =  in20 1))  ( =  in21 0))  ( =  in22 1))  ( =  in23 0))  ( =  in24 1))  ( =  in25 0))  ( =  in26 1))  ( =  in27 0))  ( =  in28 1)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1) (= in5 0) (= in6 1) (= in7 0) (= in8 1) (= in9 0) (= in10 1) (= in11 0) (= in12 1) (= in13 0) (= in14 1) (= in15 0) (= in16 1) (= in17 0) (= in18 1) (= in19 0) (= in20 1) (= in21 0) (= in22 1) (= in23 0) (= in24 1) (= in25 0) (= in26 1) (= in27 0) (= in28 1)))",
        "equivalent": true
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1))  ( =  in19 0))  ( =  in20 1))  ( =  in21 0))  ( =  in22 1))  ( =  in23 0))  ( =  in24 1))  ( =  in25 0))  ( =  in26 1))  ( =  in27 0))  ( =  in28 1))  ( =  in29 0)))"
          ]
        },
        "predicted": "(assert (and (= in0 1) (= in1 0) (= in2 1) (= in3 0) (= in4 1) (= in5 0) (= in6 1) (= in7 0) (= in8 1) (= in9 0) (= in10 1) (= in11 0) (= in12 1) (= in13 0) (= in14 1) (= in15 0) (= in16 1) (= in17 0) (= in18 1) (= in19 0) (= in20 1) (= in21 0) (= in22 1) (= in23 0) (= in24 1) (= in25 0) (= in26 1) (= in27 0) (= in28 1) (= in29 0)))",
        "equivalent": true
      }
    }
  },
  "SimpleUnique": {
    "succeeded": true,
    "attempts": 1,
    "examples_right": 30,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (not ( = in0 in1)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1))))",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in1 in2))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in1 in2))))",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in2 in3))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in2 in3))))",
        "equivalent": true
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in3 in4))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in3 in4))))",
        "equivalent": true
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in4 in5))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in0 in5)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in1 in5)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in2 in5)) (not ( = in3 in4)) (not ( = in3 in5)) (not ( = in4 in5))))",
        "equivalent": true
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in5 in6))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in0 in5)) (not ( = in0 in6)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in1 in5)) (not ( = in1 in6)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in2 in5)) (not ( = in2 in6)) (not ( = in3 in4)) (not ( = in3 in5)) (not ( = in3 in6)) (not ( = in4 in5)) (not ( = in4 in6)) (not ( = in5 in6))))",
        "equivalent": true
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in6 in7))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in0 in5)) (not ( = in0 in6)) (not ( = in0 in7)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in1 in5)) (not ( = in1 in6)) (not ( = in1 in7)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in2 in5)) (not ( = in2 in6)) (not ( = in2 in7)) (not ( = in3 in4)) (not ( = in3 in5)) (not ( = in3 in6)) (not ( = in3 in7)) (not ( = in4 in5)) (not ( = in4 in6)) (not ( = in4 in7)) (not ( = in5 in6)) (not ( = in5 in7)) (not ( = in6 in7))))",
        "equivalent": true
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in7 in8))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in0 in5)) (not ( = in0 in6)) (not ( = in0 in7)) (not ( = in0 in8)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in1 in5)) (not ( = in1 in6)) (not ( = in1 in7)) (not ( = in1 in8)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in2 in5)) (not ( = in2 in6)) (not ( = in2 in7)) (not ( = in2 in8)) (not ( = in3 in4)) (not ( = in3 in5)) (not ( = in3 in6)) (not ( = in3 in7)) (not ( = in3 in8)) (not ( = in4 in5)) (not ( = in4 in6)) (not ( = in4 in7)) (not ( = in4 in8)) (not ( = in5 in6)) (not ( = in5 in7)) (not ( = in5 in8)) (not ( = in6 in7)) (not ( = in6 in8)) (not ( = in7 in8))))",
        "equivalent": true
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in8 in9))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in0 in5)) (not ( = in0 in6)) (not ( = in0 in7)) (not ( = in0 in8)) (not ( = in0 in9)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in1 in5)) (not ( = in1 in6)) (not ( = in1 in7)) (not ( = in1 in8)) (not ( = in1 in9)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in2 in5)) (not ( = in2 in6)) (not ( = in2 in7)) (not ( = in2 in8)) (not ( = in2 in9)) (not ( = in3 in4)) (not ( = in3 in5)) (not ( = in3 in6)) (not ( = in3 in7)) (not ( = in3 in8)) (not ( = in3 in9)) (not ( = in4 in5)) (not ( = in4 in6)) (not ( = in4 in7)) (not ( = in4 in8)) (not ( = in4 in9)) (not ( = in5 in6)) (not ( = in5 in7)) (not ( = in5 in8)) (not ( = in5 in9)) (not ( = in6 in7)) (not ( = in6 in8)) (not ( = in6 in9)) (not ( = in7 in8)) (not ( = in7 in9)) (not ( = in8 in9))))",
        "equivalent": true
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in9 in10))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in0 in5)) (not ( = in0 in6)) (not ( = in0 in7)) (not ( = in0 in8)) (not ( = in0 in9)) (not ( = in0 in10)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in1 in5)) (not ( = in1 in6)) (not ( = in1 in7)) (not ( = in1 in8)) (not ( = in1 in9)) (not ( = in1 in10)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in2 in5)) (not ( = in2 in6)) (not ( = in2 in7)) (not ( = in2 in8)) (not ( = in2 in9)) (not ( = in2 in10)) (not ( = in3 in4)) (not ( = in3 in5)) (not ( = in3 in6)) (not ( = in3 in7)) (not ( = in3 in8)) (not ( = in3 in9)) (not ( = in3 in10)) (not ( = in4 in5)) (not ( = in4 in6)) (not ( = in4 in7)) (not ( = in4 in8)) (not ( = in4 in9)) (not ( = in4 in10)) (not ( = in5 in6)) (not ( = in5 in7)) (not ( = in5 in8)) (not ( = in5 in9)) (not ( = in5 in10)) (not ( = in6 in7)) (not ( = in6 in8)) (not ( = in6 in9)) (not ( = in6 in10)) (not ( = in7 in8)) (not ( = in7 in9)) (not ( = in7 in10)) (not ( = in8 in9)) (not ( = in8 in10)) (not ( = in9 in10))))",
        "equivalent": true
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in10 in11))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in0 in5)) (not ( = in0 in6)) (not ( = in0 in7)) (not ( = in0 in8)) (not ( = in0 in9)) (not ( = in0 in10)) (not ( = in0 in11)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in1 in5)) (not ( = in1 in6)) (not ( = in1 in7)) (not ( = in1 in8)) (not ( = in1 in9)) (not ( = in1 in10)) (not ( = in1 in11)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in2 in5)) (not ( = in2 in6)) (not ( = in2 in7)) (not ( = in2 in8)) (not ( = in2 in9)) (not ( = in2 in10)) (not ( = in2 in11)) (not ( = in3 in4)) (not ( = in3 in5)) (not ( = in3 in6)) (not ( = in3 in7)) (not ( = in3 in8)) (not ( = in3 in9)) (not ( = in3 in10)) (not ( = in3 in11)) (not ( = in4 in5)) (not ( = in4 in6)) (not ( = in4 in7)) (not ( = in4 in8)) (not ( = in4 in9)) (not ( = in4 in10)) (not ( = in4 in11)) (not ( = in5 in6)) (not ( = in5 in7)) (not ( = in5 in8)) (not ( = in5 in9)) (not ( = in5 in10)) (not ( = in5 in11)) (not ( = in6 in7)) (not ( = in6 in8)) (not ( = in6 in9)) (not ( = in6 in10)) (not ( = in6 in11)) (not ( = in7 in8)) (not ( = in7 in9)) (not ( = in7 in10)) (not ( = in7 in11)) (not ( = in8 in9)) (not ( = in8 in10)) (not ( = in8 in11)) (not ( = in9 in10)) (not ( = in9 in11)) (not ( = in10 in11))))",
        "equivalent": true
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in11 in12))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in0 in5)) (not ( = in0 in6)) (not ( = in0 in7)) (not ( = in0 in8)) (not ( = in0 in9)) (not ( = in0 in10)) (not ( = in0 in11)) (not ( = in0 in12)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in1 in5)) (not ( = in1 in6)) (not ( = in1 in7)) (not ( = in1 in8)) (not ( = in1 in9)) (not ( = in1 in10)) (not ( = in1 in11)) (not ( = in1 in12)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in2 in5)) (not ( = in2 in6)) (not ( = in2 in7)) (not ( = in2 in8)) (not ( = in2 in9)) (not ( = in2 in10)) (not ( = in2 in11)) (not ( = in2 in12)) (not ( = in3 in4)) (not ( = in3 in5)) (not ( = in3 in6)) (not ( = in3 in7)) (not ( = in3 in8)) (not ( = in3 in9)) (not ( = in3 in10)) (not ( = in3 in11)) (not ( = in3 in12)) (not ( = in4 in5)) (not ( = in4 in6)) (not ( = in4 in7)) (not ( = in4 in8)) (not ( = in4 in9)) (not ( = in4 in10)) (not ( = in4 in11)) (not ( = in4 in12)) (not ( = in5 in6)) (not ( = in5 in7)) (not ( = in5 in8)) (not ( = in5 in9)) (not ( = in5 in10)) (not ( = in5 in11)) (not ( = in5 in12)) (not ( = in6 in7)) (not ( = in6 in8)) (not ( = in6 in9)) (not ( = in6 in10)) (not ( = in6 in11)) (not ( = in6 in12)) (not ( = in7 in8)) (not ( = in7 in9)) (not ( = in7 in10)) (not ( = in7 in11)) (not ( = in7 in12)) (not ( = in8 in9)) (not ( = in8 in10)) (not ( = in8 in11)) (not ( = in8 in12)) (not ( = in9 in10)) (not ( = in9 in11)) (not ( = in9 in12)) (not ( = in10 in11)) (not ( = in10 in12)) (not ( = in11 in12))))",
        "equivalent": true
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in12 in13))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in0 in5)) (not ( = in0 in6)) (not ( = in0 in7)) (not ( = in0 in8)) (not ( = in0 in9)) (not ( = in0 in10)) (not ( = in0 in11)) (not ( = in0 in12)) (not ( = in0 in13)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in1 in5)) (not ( = in1 in6)) (not ( = in1 in7)) (not ( = in1 in8)) (not ( = in1 in9)) (not ( = in1 in10)) (not ( = in1 in11)) (not ( = in1 in12)) (not ( = in1 in13)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in2 in5)) (not ( = in2 in6)) (not ( = in2 in7)) (not ( = in2 in8)) (not ( = in2 in9)) (not ( = in2 in10)) (not ( = in2 in11)) (not ( = in2 in12)) (not ( = in2 in13)) (not ( = in3 in4)) (not ( = in3 in5)) (not ( = in3 in6)) (not ( = in3 in7)) (not ( = in3 in8)) (not ( = in3 in9)) (not ( = in3 in10)) (not ( = in3 in11)) (not ( = in3 in12)) (not ( = in3 in13)) (not ( = in4 in5)) (not ( = in4 in6)) (not ( = in4 in7)) (not ( = in4 in8)) (not ( = in4 in9)) (not ( = in4 in10)) (not ( = in4 in11)) (not ( = in4 in12)) (not ( = in4 in13)) (not ( = in5 in6)) (not ( = in5 in7)) (not ( = in5 in8)) (not ( = in5 in9)) (not ( = in5 in10)) (not ( = in5 in11)) (not ( = in5 in12)) (not ( = in5 in13)) (not ( = in6 in7)) (not ( = in6 in8)) (not ( = in6 in9)) (not ( = in6 in10)) (not ( = in6 in11)) (not ( = in6 in12)) (not ( = in6 in13)) (not ( = in7 in8)) (not ( = in7 in9)) (not ( = in7 in10)) (not ( = in7 in11)) (not ( = in7 in12)) (not ( = in7 in13)) (not ( = in8 in9)) (not ( = in8 in10)) (not ( = in8 in11)) (not ( = in8 in12)) (not ( = in8 in13)) (not ( = in9 in10)) (not ( = in9 in11)) (not ( = in9 in12)) (not ( = in9 in13)) (not ( = in10 in11)) (not ( = in10 in12)) (not ( = in10 in13)) (not ( = in11 in12)) (not ( = in11 in13)) (not ( = in12 in13))))",
        "equivalent": true
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in13 in14))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in0 in5)) (not ( = in0 in6)) (not ( = in0 in7)) (not ( = in0 in8)) (not ( = in0 in9)) (not ( = in0 in10)) (not ( = in0 in11)) (not ( = in0 in12)) (not ( = in0 in13)) (not ( = in0 in14)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in1 in5)) (not ( = in1 in6)) (not ( = in1 in7)) (not ( = in1 in8)) (not ( = in1 in9)) (not ( = in1 in10)) (not ( = in1 in11)) (not ( = in1 in12)) (not ( = in1 in13)) (not ( = in1 in14)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in2 in5)) (not ( = in2 in6)) (not ( = in2 in7)) (not ( = in2 in8)) (not ( = in2 in9)) (not ( = in2 in10)) (not ( = in2 in11)) (not ( = in2 in12)) (not ( = in2 in13)) (not ( = in2 in14)) (not ( = in3 in4)) (not ( = in3 in5)) (not ( = in3 in6)) (not ( = in3 in7)) (not ( = in3 in8)) (not ( = in3 in9)) (not ( = in3 in10)) (not ( = in3 in11)) (not ( = in3 in12)) (not ( = in3 in13)) (not ( = in3 in14)) (not ( = in4 in5)) (not ( = in4 in6)) (not ( = in4 in7)) (not ( = in4 in8)) (not ( = in4 in9)) (not ( = in4 in10)) (not ( = in4 in11)) (not ( = in4 in12)) (not ( = in4 in13)) (not ( = in4 in14)) (not ( = in5 in6)) (not ( = in5 in7)) (not ( = in5 in8)) (not ( = in5 in9)) (not ( = in5 in10)) (not ( = in5 in11)) (not ( = in5 in12)) (not ( = in5 in13)) (not ( = in5 in14)) (not ( = in6 in7)) (not ( = in6 in8)) (not ( = in6 in9)) (not ( = in6 in10)) (not ( = in6 in11)) (not ( = in6 in12)) (not ( = in6 in13)) (not ( = in6 in14)) (not ( = in7 in8)) (not ( = in7 in9)) (not ( = in7 in10)) (not ( = in7 in11)) (not ( = in7 in12)) (not ( = in7 in13)) (not ( = in7 in14)) (not ( = in8 in9)) (not ( = in8 in10)) (not ( = in8 in11)) (not ( = in8 in12)) (not ( = in8 in13)) (not ( = in8 in14)) (not ( = in9 in10)) (not ( = in9 in11)) (not ( = in9 in12)) (not ( = in9 in13)) (not ( = in9 in14)) (not ( = in10 in11)) (not ( = in10 in12)) (not ( = in10 in13)) (not ( = in10 in14)) (not ( = in11 in12)) (not ( = in11 in13)) (not ( = in11 in14)) (not ( = in12 in13)) (not ( = in12 in14)) (not ( = in13 in14))))",
        "equivalent": true
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in14 in15))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in0 in5)) (not ( = in0 in6)) (not ( = in0 in7)) (not ( = in0 in8)) (not ( = in0 in9)) (not ( = in0 in10)) (not ( = in0 in11)) (not ( = in0 in12)) (not ( = in0 in13)) (not ( = in0 in14)) (not ( = in0 in15)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in1 in5)) (not ( = in1 in6)) (not ( = in1 in7)) (not ( = in1 in8)) (not ( = in1 in9)) (not ( = in1 in10)) (not ( = in1 in11)) (not ( = in1 in12)) (not ( = in1 in13)) (not ( = in1 in14)) (not ( = in1 in15)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in2 in5)) (not ( = in2 in6)) (not ( = in2 in7)) (not ( = in2 in8)) (not ( = in2 in9)) (not ( = in2 in10)) (not ( = in2 in11)) (not ( = in2 in12)) (not ( = in2 in13)) (not ( = in2 in14)) (not ( = in2 in15)) (not ( = in3 in4)) (not ( = in3 in5)) (not ( = in3 in6)) (not ( = in3 in7)) (not ( = in3 in8)) (not ( = in3 in9)) (not ( = in3 in10)) (not ( = in3 in11)) (not ( = in3 in12)) (not ( = in3 in13)) (not ( = in3 in14)) (not ( = in3 in15)) (not ( = in4 in5)) (not ( = in4 in6)) (not ( = in4 in7)) (not ( = in4 in8)) (not ( = in4 in9)) (not ( = in4 in10)) (not ( = in4 in11)) (not ( = in4 in12)) (not ( = in4 in13)) (not ( = in4 in14)) (not ( = in4 in15)) (not ( = in5 in6)) (not ( = in5 in7)) (not ( = in5 in8)) (not ( = in5 in9)) (not ( = in5 in10)) (not ( = in5 in11)) (not ( = in5 in12)) (not ( = in5 in13)) (not ( = in5 in14)) (not ( = in5 in15)) (not ( = in6 in7)) (not ( = in6 in8)) (not ( = in6 in9)) (not ( = in6 in10)) (not ( = in6 in11)) (not ( = in6 in12)) (not ( = in6 in13)) (not ( = in6 in14)) (not ( = in6 in15)) (not ( = in7 in8)) (not ( = in7 in9)) (not ( = in7 in10)) (not ( = in7 in11)) (not ( = in7 in12)) (not ( = in7 in13)) (not ( = in7 in14)) (not ( = in7 in15)) (not ( = in8 in9)) (not ( = in8 in10)) (not ( = in8 in11)) (not ( = in8 in12)) (not ( = in8 in13)) (not ( = in8 in14)) (not ( = in8 in15)) (not ( = in9 in10)) (not ( = in9 in11)) (not ( = in9 in12)) (not ( = in9 in13)) (not ( = in9 in14)) (not ( = in9 in15)) (not ( = in10 in11)) (not ( = in10 in12)) (not ( = in10 in13)) (not ( = in10 in14)) (not ( = in10 in15)) (not ( = in11 in12)) (not ( = in11 in13)) (not ( = in11 in14)) (not ( = in11 in15)) (not ( = in12 in13)) (not ( = in12 in14)) (not ( = in12 in15)) (not ( = in13 in14)) (not ( = in13 in15)) (not ( = in14 in15))))",
        "equivalent": true
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in15 in16))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in0 in5)) (not ( = in0 in6)) (not ( = in0 in7)) (not ( = in0 in8)) (not ( = in0 in9)) (not ( = in0 in10)) (not ( = in0 in11)) (not ( = in0 in12)) (not ( = in0 in13)) (not ( = in0 in14)) (not ( = in0 in15)) (not ( = in0 in16)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in1 in5)) (not ( = in1 in6)) (not ( = in1 in7)) (not ( = in1 in8)) (not ( = in1 in9)) (not ( = in1 in10)) (not ( = in1 in11)) (not ( = in1 in12)) (not ( = in1 in13)) (not ( = in1 in14)) (not ( = in1 in15)) (not ( = in1 in16)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in2 in5)) (not ( = in2 in6)) (not ( = in2 in7)) (not ( = in2 in8)) (not ( = in2 in9)) (not ( = in2 in10)) (not ( = in2 in11)) (not ( = in2 in12)) (not ( = in2 in13)) (not ( = in2 in14)) (not ( = in2 in15)) (not ( = in2 in16)) (not ( = in3 in4)) (not ( = in3 in5)) (not ( = in3 in6)) (not ( = in3 in7)) (not ( = in3 in8)) (not ( = in3 in9)) (not ( = in3 in10)) (not ( = in3 in11)) (not ( = in3 in12)) (not ( = in3 in13)) (not ( = in3 in14)) (not ( = in3 in15)) (not ( = in3 in16)) (not ( = in4 in5)) (not ( = in4 in6)) (not ( = in4 in7)) (not ( = in4 in8)) (not ( = in4 in9)) (not ( = in4 in10)) (not ( = in4 in11)) (not ( = in4 in12)) (not ( = in4 in13)) (not ( = in4 in14)) (not ( = in4 in15)) (not ( = in4 in16)) (not ( = in5 in6)) (not ( = in5 in7)) (not ( = in5 in8)) (not ( = in5 in9)) (not ( = in5 in10)) (not ( = in5 in11)) (not ( = in5 in12)) (not ( = in5 in13)) (not ( = in5 in14)) (not ( = in5 in15)) (not ( = in5 in16)) (not ( = in6 in7)) (not ( = in6 in8)) (not ( = in6 in9)) (not ( = in6 in10)) (not ( = in6 in11)) (not ( = in6 in12)) (not ( = in6 in13)) (not ( = in6 in14)) (not ( = in6 in15)) (not ( = in6 in16)) (not ( = in7 in8)) (not ( = in7 in9)) (not ( = in7 in10)) (not ( = in7 in11)) (not ( = in7 in12)) (not ( = in7 in13)) (not ( = in7 in14)) (not ( = in7 in15)) (not ( = in7 in16)) (not ( = in8 in9)) (not ( = in8 in10)) (not ( = in8 in11)) (not ( = in8 in12)) (not ( = in8 in13)) (not ( = in8 in14)) (not ( = in8 in15)) (not ( = in8 in16)) (not ( = in9 in10)) (not ( = in9 in11)) (not ( = in9 in12)) (not ( = in9 in13)) (not ( = in9 in14)) (not ( = in9 in15)) (not ( = in9 in16)) (not ( = in10 in11)) (not ( = in10 in12)) (not ( = in10 in13)) (not ( = in10 in14)) (not ( = in10 in15)) (not ( = in10 in16)) (not ( = in11 in12)) (not ( = in11 in13)) (not ( = in11 in14)) (not ( = in11 in15)) (not ( = in11 in16)) (not ( = in12 in13)) (not ( = in12 in14)) (not ( = in12 in15)) (not ( = in12 in16)) (not ( = in13 in14)) (not ( = in13 in15)) (not ( = in13 in16)) (not ( = in14 in15)) (not ( = in14 in16)) (not ( = in15 in16))))",
        "equivalent": true
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in16 in17))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in0 in5)) (not ( = in0 in6)) (not ( = in0 in7)) (not ( = in0 in8)) (not ( = in0 in9)) (not ( = in0 in10)) (not ( = in0 in11)) (not ( = in0 in12)) (not ( = in0 in13)) (not ( = in0 in14)) (not ( = in0 in15)) (not ( = in0 in16)) (not ( = in0 in17)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in1 in5)) (not ( = in1 in6)) (not ( = in1 in7)) (not ( = in1 in8)) (not ( = in1 in9)) (not ( = in1 in10)) (not ( = in1 in11)) (not ( = in1 in12)) (not ( = in1 in13)) (not ( = in1 in14)) (not ( = in1 in15)) (not ( = in1 in16)) (not ( = in1 in17)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in2 in5)) (not ( = in2 in6)) (not ( = in2 in7)) (not ( = in2 in8)) (not ( = in2 in9)) (not ( = in2 in10)) (not ( = in2 in11)) (not ( = in2 in12)) (not ( = in2 in13)) (not ( = in2 in14)) (not ( = in2 in15)) (not ( = in2 in16)) (not ( = in2 in17)) (not ( = in3 in4)) (not ( = in3 in5)) (not ( = in3 in6)) (not ( = in3 in7)) (not ( = in3 in8)) (not ( = in3 in9)) (not ( = in3 in10)) (not ( = in3 in11)) (not ( = in3 in12)) (not ( = in3 in13)) (not ( = in3 in14)) (not ( = in3 in15)) (not ( = in3 in16)) (not ( = in3 in17)) (not ( = in4 in5)) (not ( = in4 in6)) (not ( = in4 in7)) (not ( = in4 in8)) (not ( = in4 in9)) (not ( = in4 in10)) (not ( = in4 in11)) (not ( = in4 in12)) (not ( = in4 in13)) (not ( = in4 in14)) (not ( = in4 in15)) (not ( = in4 in16)) (not ( = in4 in17)) (not ( = in5 in6)) (not ( = in5 in7)) (not ( = in5 in8)) (not ( = in5 in9)) (not ( = in5 in10)) (not ( = in5 in11)) (not ( = in5 in12)) (not ( = in5 in13)) (not ( = in5 in14)) (not ( = in5 in15)) (not ( = in5 in16)) (not ( = in5 in17)) (not ( = in6 in7)) (not ( = in6 in8)) (not ( = in6 in9)) (not ( = in6 in10)) (not ( = in6 in11)) (not ( = in6 in12)) (not ( = in6 in13)) (not ( = in6 in14)) (not ( = in6 in15)) (not ( = in6 in16)) (not ( = in6 in17)) (not ( = in7 in8)) (not ( = in7 in9)) (not ( = in7 in10)) (not ( = in7 in11)) (not ( = in7 in12)) (not ( = in7 in13)) (not ( = in7 in14)) (not ( = in7 in15)) (not ( = in7 in16)) (not ( = in7 in17)) (not ( = in8 in9)) (not ( = in8 in10)) (not ( = in8 in11)) (not ( = in8 in12)) (not ( = in8 in13)) (not ( = in8 in14)) (not ( = in8 in15)) (not ( = in8 in16)) (not ( = in8 in17)) (not ( = in9 in10)) (not ( = in9 in11)) (not ( = in9 in12)) (not ( = in9 in13)) (not ( = in9 in14)) (not ( = in9 in15)) (not ( = in9 in16)) (not ( = in9 in17)) (not ( = in10 in11)) (not ( = in10 in12)) (not ( = in10 in13)) (not ( = in10 in14)) (not ( = in10 in15)) (not ( = in10 in16)) (not ( = in10 in17)) (not ( = in11 in12)) (not ( = in11 in13)) (not ( = in11 in14)) (not ( = in11 in15)) (not ( = in11 in16)) (not ( = in11 in17)) (not ( = in12 in13)) (not ( = in12 in14)) (not ( = in12 in15)) (not ( = in12 in16)) (not ( = in12 in17)) (not ( = in13 in14)) (not ( = in13 in15)) (not ( = in13 in16)) (not ( = in13 in17)) (not ( = in14 in15)) (not ( = in14 in16)) (not ( = in14 in17)) (not ( = in15 in16)) (not ( = in15 in17)) (not ( = in16 in17))))",
        "equivalent": true
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in0 in18))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in1 in18))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in2 in18))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in3 in18))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in4 in18))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in5 in18))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in6 in18))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in7 in18))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in8 in18))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in9 in18))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in10 in18))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in11 in18))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in12 in18))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in13 in18))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in14 in18))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in15 in18))) (not ( = in16 in17))) (not ( = in16 in18))) (not ( = in17 in18))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in0 in5)) (not ( = in0 in6)) (not ( = in0 in7)) (not ( = in0 in8)) (not ( = in0 in9)) (not ( = in0 in10)) (not ( = in0 in11)) (not ( = in0 in12)) (not ( = in0 in13)) (not ( = in0 in14)) (not ( = in0 in15)) (not ( = in0 in16)) (not ( = in0 in17)) (not ( = in0 in18)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in1 in5)) (not ( = in1 in6)) (not ( = in1 in7)) (not ( = in1 in8)) (not ( = in1 in9)) (not ( = in1 in10)) (not ( = in1 in11)) (not ( = in1 in12)) (not ( = in1 in13)) (not ( = in1 in14)) (not ( = in1 in15)) (not ( = in1 in16)) (not ( = in1 in17)) (not ( = in1 in18)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in2 in5)) (not ( = in2 in6)) (not ( = in2 in7)) (not ( = in2 in8)) (not ( = in2 in9)) (not ( = in2 in10)) (not ( = in2 in11)) (not ( = in2 in12)) (not ( = in2 in13)) (not ( = in2 in14)) (not ( = in2 in15)) (not ( = in2 in16)) (not ( = in2 in17)) (not ( = in2 in18)) (not ( = in3 in4)) (not ( = in3 in5)) (not ( = in3 in6)) (not ( = in3 in7)) (not ( = in3 in8)) (not ( = in3 in9)) (not ( = in3 in10)) (not ( = in3 in11)) (not ( = in3 in12)) (not ( = in3 in13)) (not ( = in3 in14)) (not ( = in3 in15)) (not ( = in3 in16)) (not ( = in3 in17)) (not ( = in3 in18)) (not ( = in4 in5)) (not ( = in4 in6)) (not ( = in4 in7)) (not ( = in4 in8)) (not ( = in4 in9)) (not ( = in4 in10)) (not ( = in4 in11)) (not ( = in4 in12)) (not ( = in4 in13)) (not ( = in4 in14)) (not ( = in4 in15)) (not ( = in4 in16)) (not ( = in4 in17)) (not ( = in4 in18)) (not ( = in5 in6)) (not ( = in5 in7)) (not ( = in5 in8)) (not ( = in5 in9)) (not ( = in5 in10)) (not ( = in5 in11)) (not ( = in5 in12)) (not ( = in5 in13)) (not ( = in5 in14)) (not ( = in5 in15)) (not ( = in5 in16)) (not ( = in5 in17)) (not ( = in5 in18)) (not ( = in6 in7)) (not ( = in6 in8)) (not ( = in6 in9)) (not ( = in6 in10)) (not ( = in6 in11)) (not ( = in6 in12)) (not ( = in6 in13)) (not ( = in6 in14)) (not ( = in6 in15)) (not ( = in6 in16)) (not ( = in6 in17)) (not ( = in6 in18)) (not ( = in7 in8)) (not ( = in7 in9)) (not ( = in7 in10)) (not ( = in7 in11)) (not ( = in7 in12)) (not ( = in7 in13)) (not ( = in7 in14)) (not ( = in7 in15)) (not ( = in7 in16)) (not ( = in7 in17)) (not ( = in7 in18)) (not ( = in8 in9)) (not ( = in8 in10)) (not ( = in8 in11)) (not ( = in8 in12)) (not ( = in8 in13)) (not ( = in8 in14)) (not ( = in8 in15)) (not ( = in8 in16)) (not ( = in8 in17)) (not ( = in8 in18)) (not ( = in9 in10)) (not ( = in9 in11)) (not ( = in9 in12)) (not ( = in9 in13)) (not ( = in9 in14)) (not ( = in9 in15)) (not ( = in9 in16)) (not ( = in9 in17)) (not ( = in9 in18)) (not ( = in10 in11)) (not ( = in10 in12)) (not ( = in10 in13)) (not ( = in10 in14)) (not ( = in10 in15)) (not ( = in10 in16)) (not ( = in10 in17)) (not ( = in10 in18)) (not ( = in11 in12)) (not ( = in11 in13)) (not ( = in11 in14)) (not ( = in11 in15)) (not ( = in11 in16)) (not ( = in11 in17)) (not ( = in11 in18)) (not ( = in12 in13)) (not ( = in12 in14)) (not ( = in12 in15)) (not ( = in12 in16)) (not ( = in12 in17)) (not ( = in12 in18)) (not ( = in13 in14)) (not ( = in13 in15)) (not ( = in13 in16)) (not ( = in13 in17)) (not ( = in13 in18)) (not ( = in14 in15)) (not ( = in14 in16)) (not ( = in14 in17)) (not ( = in14 in18)) (not ( = in15 in16)) (not ( = in15 in17)) (not ( = in15 in18)) (not ( = in16 in17)) (not ( = in16 in18)) (not ( = in17 in18))))",
        "equivalent": true
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in0 in18))) (not ( = in0 in19))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in1 in18))) (not ( = in1 in19))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in2 in18))) (not ( = in2 in19))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in3 in18))) (not ( = in3 in19))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in4 in18))) (not ( = in4 in19))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in5 in18))) (not ( = in5 in19))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in6 in18))) (not ( = in6 in19))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in7 in18))) (not ( = in7 in19))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in8 in18))) (not ( = in8 in19))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in9 in18))) (not ( = in9 in19))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in10 in18))) (not ( = in10 in19))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in11 in18))) (not ( = in11 in19))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in12 in18))) (not ( = in12 in19))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in13 in18))) (not ( = in13 in19))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in14 in18))) (not ( = in14 in19))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in15 in18))) (not ( = in15 in19))) (not ( = in16 in17))) (not ( = in16 in18))) (not ( = in16 in19))) (not ( = in17 in18))) (not ( = in17 in19))) (not ( = in18 in19))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in0 in5)) (not ( = in0 in6)) (not ( = in0 in7)) (not ( = in0 in8)) (not ( = in0 in9)) (not ( = in0 in10)) (not ( = in0 in11)) (not ( = in0 in12)) (not ( = in0 in13)) (not ( = in0 in14)) (not ( = in0 in15)) (not ( = in0 in16)) (not ( = in0 in17)) (not ( = in0 in18)) (not ( = in0 in19)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in1 in5)) (not ( = in1 in6)) (not ( = in1 in7)) (not ( = in1 in8)) (not ( = in1 in9)) (not ( = in1 in10)) (not ( = in1 in11)) (not ( = in1 in12)) (not ( = in1 in13)) (not ( = in1 in14)) (not ( = in1 in15)) (not ( = in1 in16)) (not ( = in1 in17)) (not ( = in1 in18)) (not ( = in1 in19)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in2 in5)) (not ( = in2 in6)) (not ( = in2 in7)) (not ( = in2 in8)) (not ( = in2 in9)) (not ( = in2 in10)) (not ( = in2 in11)) (not ( = in2 in12)) (not ( = in2 in13)) (not ( = in2 in14)) (not ( = in2 in15)) (not ( = in2 in16)) (not ( = in2 in17)) (not ( = in2 in18)) (not ( = in2 in19)) (not ( = in3 in4)) (not ( = in3 in5)) (not ( = in3 in6)) (not ( = in3 in7)) (not ( = in3 in8)) (not ( = in3 in9)) (not ( = in3 in10)) (not ( = in3 in11)) (not ( = in3 in12)) (not ( = in3 in13)) (not ( = in3 in14)) (not ( = in3 in15)) (not ( = in3 in16)) (not ( = in3 in17)) (not ( = in3 in18)) (not ( = in3 in19)) (not ( = in4 in5)) (not ( = in4 in6)) (not ( = in4 in7)) (not ( = in4 in8)) (not ( = in4 in9)) (not ( = in4 in10)) (not ( = in4 in11)) (not ( = in4 in12)) (not ( = in4 in13)) (not ( = in4 in14)) (not ( = in4 in15)) (not ( = in4 in16)) (not ( = in4 in17)) (not ( = in4 in18)) (not ( = in4 in19)) (not ( = in5 in6)) (not ( = in5 in7)) (not ( = in5 in8)) (not ( = in5 in9)) (not ( = in5 in10)) (not ( = in5 in11)) (not ( = in5 in12)) (not ( = in5 in13)) (not ( = in5 in14)) (not ( = in5 in15)) (not ( = in5 in16)) (not ( = in5 in17)) (not ( = in5 in18)) (not ( = in5 in19)) (not ( = in6 in7)) (not ( = in6 in8)) (not ( = in6 in9)) (not ( = in6 in10)) (not ( = in6 in11)) (not ( = in6 in12)) (not ( = in6 in13)) (not ( = in6 in14)) (not ( = in6 in15)) (not ( = in6 in16)) (not ( = in6 in17)) (not ( = in6 in18)) (not ( = in6 in19)) (not ( = in7 in8)) (not ( = in7 in9)) (not ( = in7 in10)) (not ( = in7 in11)) (not ( = in7 in12)) (not ( = in7 in13)) (not ( = in7 in14)) (not ( = in7 in15)) (not ( = in7 in16)) (not ( = in7 in17)) (not ( = in7 in18)) (not ( = in7 in19)) (not ( = in8 in9)) (not ( = in8 in10)) (not ( = in8 in11)) (not ( = in8 in12)) (not ( = in8 in13)) (not ( = in8 in14)) (not ( = in8 in15)) (not ( = in8 in16)) (not ( = in8 in17)) (not ( = in8 in18)) (not ( = in8 in19)) (not ( = in9 in10)) (not ( = in9 in11)) (not ( = in9 in12)) (not ( = in9 in13)) (not ( = in9 in14)) (not ( = in9 in15)) (not ( = in9 in16)) (not ( = in9 in17)) (not ( = in9 in18)) (not ( = in9 in19)) (not ( = in10 in11)) (not ( = in10 in12)) (not ( = in10 in13)) (not ( = in10 in14)) (not ( = in10 in15)) (not ( = in10 in16)) (not ( = in10 in17)) (not ( = in10 in18)) (not ( = in10 in19)) (not ( = in11 in12)) (not ( = in11 in13)) (not ( = in11 in14)) (not ( = in11 in15)) (not ( = in11 in16)) (not ( = in11 in17)) (not ( = in11 in18)) (not ( = in11 in19)) (not ( = in12 in13)) (not ( = in12 in14)) (not ( = in12 in15)) (not ( = in12 in16)) (not ( = in12 in17)) (not ( = in12 in18)) (not ( = in12 in19)) (not ( = in13 in14)) (not ( = in13 in15)) (not ( = in13 in16)) (not ( = in13 in17)) (not ( = in13 in18)) (not ( = in13 in19)) (not ( = in14 in15)) (not ( = in14 in16)) (not ( = in14 in17)) (not ( = in14 in18)) (not ( = in14 in19)) (not ( = in15 in16)) (not ( = in15 in17)) (not ( = in15 in18)) (not ( = in15 in19)) (not ( = in16 in17)) (not ( = in16 in18)) (not ( = in16 in19)) (not ( = in17 in18)) (not ( = in17 in19)) (not ( = in18 in19))))",
        "equivalent": true
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in0 in18))) (not ( = in0 in19))) (not ( = in0 in20))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in1 in18))) (not ( = in1 in19))) (not ( = in1 in20))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in2 in18))) (not ( = in2 in19))) (not ( = in2 in20))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in3 in18))) (not ( = in3 in19))) (not ( = in3 in20))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in4 in18))) (not ( = in4 in19))) (not ( = in4 in20))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in5 in18))) (not ( = in5 in19))) (not ( = in5 in20))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in6 in18))) (not ( = in6 in19))) (not ( = in6 in20))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in7 in18))) (not ( = in7 in19))) (not ( = in7 in20))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in8 in18))) (not ( = in8 in19))) (not ( = in8 in20))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in9 in18))) (not ( = in9 in19))) (not ( = in9 in20))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in10 in18))) (not ( = in10 in19))) (not ( = in10 in20))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in11 in18))) (not ( = in11 in19))) (not ( = in11 in20))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in12 in18))) (not ( = in12 in19))) (not ( = in12 in20))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in13 in18))) (not ( = in13 in19))) (not ( = in13 in20))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in14 in18))) (not ( = in14 in19))) (not ( = in14 in20))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in15 in18))) (not ( = in15 in19))) (not ( = in15 in20))) (not ( = in16 in17))) (not ( = in16 in18))) (not ( = in16 in19))) (not ( = in16 in20))) (not ( = in17 in18))) (not ( = in17 in19))) (not ( = in17 in20))) (not ( = in18 in19))) (not ( = in18 in20))) (not ( = in19 in20))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in0 in5)) (not ( = in0 in6)) (not ( = in0 in7)) (not ( = in0 in8)) (not ( = in0 in9)) (not ( = in0 in10)) (not ( = in0 in11)) (not ( = in0 in12)) (not ( = in0 in13)) (not ( = in0 in14)) (not ( = in0 in15)) (not ( = in0 in16)) (not ( = in0 in17)) (not ( = in0 in18)) (not ( = in0 in19)) (not ( = in0 in20)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in1 in5)) (not ( = in1 in6)) (not ( = in1 in7)) (not ( = in1 in8)) (not ( = in1 in9)) (not ( = in1 in10)) (not ( = in1 in11)) (not ( = in1 in12)) (not ( = in1 in13)) (not ( = in1 in14)) (not ( = in1 in15)) (not ( = in1 in16)) (not ( = in1 in17)) (not ( = in1 in18)) (not ( = in1 in19)) (not ( = in1 in20)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in2 in5)) (not ( = in2 in6)) (not ( = in2 in7)) (not ( = in2 in8)) (not ( = in2 in9)) (not ( = in2 in10)) (not ( = in2 in11)) (not ( = in2 in12)) (not ( = in2 in13)) (not ( = in2 in14)) (not ( = in2 in15)) (not ( = in2 in16)) (not ( = in2 in17)) (not ( = in2 in18)) (not ( = in2 in19)) (not ( = in2 in20)) (not ( = in3 in4)) (not ( = in3 in5)) (not ( = in3 in6)) (not ( = in3 in7)) (not ( = in3 in8)) (not ( = in3 in9)) (not ( = in3 in10)) (not ( = in3 in11)) (not ( = in3 in12)) (not ( = in3 in13)) (not ( = in3 in14)) (not ( = in3 in15)) (not ( = in3 in16)) (not ( = in3 in17)) (not ( = in3 in18)) (not ( = in3 in19)) (not ( = in3 in20)) (not ( = in4 in5)) (not ( = in4 in6)) (not ( = in4 in7)) (not ( = in4 in8)) (not ( = in4 in9)) (not ( = in4 in10)) (not ( = in4 in11)) (not ( = in4 in12)) (not ( = in4 in13)) (not ( = in4 in14)) (not ( = in4 in15)) (not ( = in4 in16)) (not ( = in4 in17)) (not ( = in4 in18)) (not ( = in4 in19)) (not ( = in4 in20)) (not ( = in5 in6)) (not ( = in5 in7)) (not ( = in5 in8)) (not ( = in5 in9)) (not ( = in5 in10)) (not ( = in5 in11)) (not ( = in5 in12)) (not ( = in5 in13)) (not ( = in5 in14)) (not ( = in5 in15)) (not ( = in5 in16)) (not ( = in5 in17)) (not ( = in5 in18)) (not ( = in5 in19)) (not ( = in5 in20)) (not ( = in6 in7)) (not ( = in6 in8)) (not ( = in6 in9)) (not ( = in6 in10)) (not ( = in6 in11)) (not ( = in6 in12)) (not ( = in6 in13)) (not ( = in6 in14)) (not ( = in6 in15)) (not ( = in6 in16)) (not ( = in6 in17)) (not ( = in6 in18)) (not ( = in6 in19)) (not ( = in6 in20)) (not ( = in7 in8)) (not ( = in7 in9)) (not ( = in7 in10)) (not ( = in7 in11)) (not ( = in7 in12)) (not ( = in7 in13)) (not ( = in7 in14)) (not ( = in7 in15)) (not ( = in7 in16)) (not ( = in7 in17)) (not ( = in7 in18)) (not ( = in7 in19)) (not ( = in7 in20)) (not ( = in8 in9)) (not ( = in8 in10)) (not ( = in8 in11)) (not ( = in8 in12)) (not ( = in8 in13)) (not ( = in8 in14)) (not ( = in8 in15)) (not ( = in8 in16)) (not ( = in8 in17)) (not ( = in8 in18)) (not ( = in8 in19)) (not ( = in8 in20)) (not ( = in9 in10)) (not ( = in9 in11)) (not ( = in9 in12)) (not ( = in9 in13)) (not ( = in9 in14)) (not ( = in9 in15)) (not ( = in9 in16)) (not ( = in9 in17)) (not ( = in9 in18)) (not ( = in9 in19)) (not ( = in9 in20)) (not ( = in10 in11)) (not ( = in10 in12)) (not ( = in10 in13)) (not ( = in10 in14)) (not ( = in10 in15)) (not ( = in10 in16)) (not ( = in10 in17)) (not ( = in10 in18)) (not ( = in10 in19)) (not ( = in10 in20)) (not ( = in11 in12)) (not ( = in11 in13)) (not ( = in11 in14)) (not ( = in11 in15)) (not ( = in11 in16)) (not ( = in11 in17)) (not ( = in11 in18)) (not ( = in11 in19)) (not ( = in11 in20)) (not ( = in12 in13)) (not ( = in12 in14)) (not ( = in12 in15)) (not ( = in12 in16)) (not ( = in12 in17)) (not ( = in12 in18)) (not ( = in12 in19)) (not ( = in12 in20)) (not ( = in13 in14)) (not ( = in13 in15)) (not ( = in13 in16)) (not ( = in13 in17)) (not ( = in13 in18)) (not ( = in13 in19)) (not ( = in13 in20)) (not ( = in14 in15)) (not ( = in14 in16)) (not ( = in14 in17)) (not ( = in14 in18)) (not ( = in14 in19)) (not ( = in14 in20)) (not ( = in15 in16)) (not ( = in15 in17)) (not ( = in15 in18)) (not ( = in15 in19)) (not ( = in15 in20)) (not ( = in16 in17)) (not ( = in16 in18)) (not ( = in16 in19)) (not ( = in16 in20)) (not ( = in17 in18)) (not ( = in17 in19)) (not ( = in17 in20)) (not ( = in18 in19)) (not ( = in18 in20)) (not ( = in19 in20))))",
        "equivalent": true
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in0 in18))) (not ( = in0 in19))) (not ( = in0 in20))) (not ( = in0 in21))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in1 in18))) (not ( = in1 in19))) (not ( = in1 in20))) (not ( = in1 in21))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in2 in18))) (not ( = in2 in19))) (not ( = in2 in20))) (not ( = in2 in21))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in3 in18))) (not ( = in3 in19))) (not ( = in3 in20))) (not ( = in3 in21))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in4 in18))) (not ( = in4 in19))) (not ( = in4 in20))) (not ( = in4 in21))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in5 in18))) (not ( = in5 in19))) (not ( = in5 in20))) (not ( = in5 in21))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in6 in18))) (not ( = in6 in19))) (not ( = in6 in20))) (not ( = in6 in21))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in7 in18))) (not ( = in7 in19))) (not ( = in7 in20))) (not ( = in7 in21))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in8 in18))) (not ( = in8 in19))) (not ( = in8 in20))) (not ( = in8 in21))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in9 in18))) (not ( = in9 in19))) (not ( = in9 in20))) (not ( = in9 in21))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in10 in18))) (not ( = in10 in19))) (not ( = in10 in20))) (not ( = in10 in21))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in11 in18))) (not ( = in11 in19))) (not ( = in11 in20))) (not ( = in11 in21))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in12 in18))) (not ( = in12 in19))) (not ( = in12 in20))) (not ( = in12 in21))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in13 in18))) (not ( = in13 in19))) (not ( = in13 in20))) (not ( = in13 in21))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in14 in18))) (not ( = in14 in19))) (not ( = in14 in20))) (not ( = in14 in21))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in15 in18))) (not ( = in15 in19))) (not ( = in15 in20))) (not ( = in15 in21))) (not ( = in16 in17))) (not ( = in16 in18))) (not ( = in16 in19))) (not ( = in16 in20))) (not ( = in16 in21))) (not ( = in17 in18))) (not ( = in17 in19))) (not ( = in17 in20))) (not ( = in17 in21))) (not ( = in18 in19))) (not ( = in18 in20))) (not ( = in18 in21))) (not ( = in19 in20))) (not ( = in19 in21))) (not ( = in20 in21))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in0 in5)) (not ( = in0 in6)) (not ( = in0 in7)) (not ( = in0 in8)) (not ( = in0 in9)) (not ( = in0 in10)) (not ( = in0 in11)) (not ( = in0 in12)) (not ( = in0 in13)) (not ( = in0 in14)) (not ( = in0 in15)) (not ( = in0 in16)) (not ( = in0 in17)) (not ( = in0 in18)) (not ( = in0 in19)) (not ( = in0 in20)) (not ( = in0 in21)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in1 in5)) (not ( = in1 in6)) (not ( = in1 in7)) (not ( = in1 in8)) (not ( = in1 in9)) (not ( = in1 in10)) (not ( = in1 in11)) (not ( = in1 in12)) (not ( = in1 in13)) (not ( = in1 in14)) (not ( = in1 in15)) (not ( = in1 in16)) (not ( = in1 in17)) (not ( = in1 in18)) (not ( = in1 in19)) (not ( = in1 in20)) (not ( = in1 in21)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in2 in5)) (not ( = in2 in6)) (not ( = in2 in7)) (not ( = in2 in8)) (not ( = in2 in9)) (not ( = in2 in10)) (not ( = in2 in11)) (not ( = in2 in12)) (not ( = in2 in13)) (not ( = in2 in14)) (not ( = in2 in15)) (not ( = in2 in16)) (not ( = in2 in17)) (not ( = in2 in18)) (not ( = in2 in19)) (not ( = in2 in20)) (not ( = in2 in21)) (not ( = in3 in4)) (not ( = in3 in5)) (not ( = in3 in6)) (not ( = in3 in7)) (not ( = in3 in8)) (not ( = in3 in9)) (not ( = in3 in10)) (not ( = in3 in11)) (not ( = in3 in12)) (not ( = in3 in13)) (not ( = in3 in14)) (not ( = in3 in15)) (not ( = in3 in16)) (not ( = in3 in17)) (not ( = in3 in18)) (not ( = in3 in19)) (not ( = in3 in20)) (not ( = in3 in21)) (not ( = in4 in5)) (not ( = in4 in6)) (not ( = in4 in7)) (not ( = in4 in8)) (not ( = in4 in9)) (not ( = in4 in10)) (not ( = in4 in11)) (not ( = in4 in12)) (not ( = in4 in13)) (not ( = in4 in14)) (not ( = in4 in15)) (not ( = in4 in16)) (not ( = in4 in17)) (not ( = in4 in18)) (not ( = in4 in19)) (not ( = in4 in20)) (not ( = in4 in21)) (not ( = in5 in6)) (not ( = in5 in7)) (not ( = in5 in8)) (not ( = in5 in9)) (not ( = in5 in10)) (not ( = in5 in11)) (not ( = in5 in12)) (not ( = in5 in13)) (not ( = in5 in14)) (not ( = in5 in15)) (not ( = in5 in16)) (not ( = in5 in17)) (not ( = in5 in18)) (not ( = in5 in19)) (not ( = in5 in20)) (not ( = in5 in21)) (not ( = in6 in7)) (not ( = in6 in8)) (not ( = in6 in9)) (not ( = in6 in10)) (not ( = in6 in11)) (not ( = in6 in12)) (not ( = in6 in13)) (not ( = in6 in14)) (not ( = in6 in15)) (not ( = in6 in16)) (not ( = in6 in17)) (not ( = in6 in18)) (not ( = in6 in19)) (not ( = in6 in20)) (not ( = in6 in21)) (not ( = in7 in8)) (not ( = in7 in9)) (not ( = in7 in10)) (not ( = in7 in11)) (not ( = in7 in12)) (not ( = in7 in13)) (not ( = in7 in14)) (not ( = in7 in15)) (not ( = in7 in16)) (not ( = in7 in17)) (not ( = in7 in18)) (not ( = in7 in19)) (not ( = in7 in20)) (not ( = in7 in21)) (not ( = in8 in9)) (not ( = in8 in10)) (not ( = in8 in11)) (not ( = in8 in12)) (not ( = in8 in13)) (not ( = in8 in14)) (not ( = in8 in15)) (not ( = in8 in16)) (not ( = in8 in17)) (not ( = in8 in18)) (not ( = in8 in19)) (not ( = in8 in20)) (not ( = in8 in21)) (not ( = in9 in10)) (not ( = in9 in11)) (not ( = in9 in12)) (not ( = in9 in13)) (not ( = in9 in14)) (not ( = in9 in15)) (not ( = in9 in16)) (not ( = in9 in17)) (not ( = in9 in18)) (not ( = in9 in19)) (not ( = in9 in20)) (not ( = in9 in21)) (not ( = in10 in11)) (not ( = in10 in12)) (not ( = in10 in13)) (not ( = in10 in14)) (not ( = in10 in15)) (not ( = in10 in16)) (not ( = in10 in17)) (not ( = in10 in18)) (not ( = in10 in19)) (not ( = in10 in20)) (not ( = in10 in21)) (not ( = in11 in12)) (not ( = in11 in13)) (not ( = in11 in14)) (not ( = in11 in15)) (not ( = in11 in16)) (not ( = in11 in17)) (not ( = in11 in18)) (not ( = in11 in19)) (not ( = in11 in20)) (not ( = in11 in21)) (not ( = in12 in13)) (not ( = in12 in14)) (not ( = in12 in15)) (not ( = in12 in16)) (not ( = in12 in17)) (not ( = in12 in18)) (not ( = in12 in19)) (not ( = in12 in20)) (not ( = in12 in21)) (not ( = in13 in14)) (not ( = in13 in15)) (not ( = in13 in16)) (not ( = in13 in17)) (not ( = in13 in18)) (not ( = in13 in19)) (not ( = in13 in20)) (not ( = in13 in21)) (not ( = in14 in15)) (not ( = in14 in16)) (not ( = in14 in17)) (not ( = in14 in18)) (not ( = in14 in19)) (not ( = in14 in20)) (not ( = in14 in21)) (not ( = in15 in16)) (not ( = in15 in17)) (not ( = in15 in18)) (not ( = in15 in19)) (not ( = in15 in20)) (not ( = in15 in21)) (not ( = in16 in17)) (not ( = in16 in18)) (not ( = in16 in19)) (not ( = in16 in20)) (not ( = in16 in21)) (not ( = in17 in18)) (not ( = in17 in19)) (not ( = in17 in20)) (not ( = in17 in21)) (not ( = in18 in19)) (not ( = in18 in20)) (not ( = in18 in21)) (not ( = in19 in20)) (not ( = in19 in21)) (not ( = in20 in21))))",
        "equivalent": true
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in0 in18))) (not ( = in0 in19))) (not ( = in0 in20))) (not ( = in0 in21))) (not ( = in0 in22))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in1 in18))) (not ( = in1 in19))) (not ( = in1 in20))) (not ( = in1 in21))) (not ( = in1 in22))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in2 in18))) (not ( = in2 in19))) (not ( = in2 in20))) (not ( = in2 in21))) (not ( = in2 in22))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in3 in18))) (not ( = in3 in19))) (not ( = in3 in20))) (not ( = in3 in21))) (not ( = in3 in22))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in4 in18))) (not ( = in4 in19))) (not ( = in4 in20))) (not ( = in4 in21))) (not ( = in4 in22))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in5 in18))) (not ( = in5 in19))) (not ( = in5 in20))) (not ( = in5 in21))) (not ( = in5 in22))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in6 in18))) (not ( = in6 in19))) (not ( = in6 in20))) (not ( = in6 in21))) (not ( = in6 in22))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in7 in18))) (not ( = in7 in19))) (not ( = in7 in20))) (not ( = in7 in21))) (not ( = in7 in22))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in8 in18))) (not ( = in8 in19))) (not ( = in8 in20))) (not ( = in8 in21))) (not ( = in8 in22))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in9 in18))) (not ( = in9 in19))) (not ( = in9 in20))) (not ( = in9 in21))) (not ( = in9 in22))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in10 in18))) (not ( = in10 in19))) (not ( = in10 in20))) (not ( = in10 in21))) (not ( = in10 in22))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in11 in18))) (not ( = in11 in19))) (not ( = in11 in20))) (not ( = in11 in21))) (not ( = in11 in22))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in12 in18))) (not ( = in12 in19))) (not ( = in12 in20))) (not ( = in12 in21))) (not ( = in12 in22))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in13 in18))) (not ( = in13 in19))) (not ( = in13 in20))) (not ( = in13 in21))) (not ( = in13 in22))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in14 in18))) (not ( = in14 in19))) (not ( = in14 in20))) (not ( = in14 in21))) (not ( = in14 in22))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in15 in18))) (not ( = in15 in19))) (not ( = in15 in20))) (not ( = in15 in21))) (not ( = in15 in22))) (not ( = in16 in17))) (not ( = in16 in18))) (not ( = in16 in19))) (not ( = in16 in20))) (not ( = in16 in21))) (not ( = in16 in22))) (not ( = in17 in18))) (not ( = in17 in19))) (not ( = in17 in20))) (not ( = in17 in21))) (not ( = in17 in22))) (not ( = in18 in19))) (not ( = in18 in20))) (not ( = in18 in21))) (not ( = in18 in22))) (not ( = in19 in20))) (not ( = in19 in21))) (not ( = in19 in22))) (not ( = in20 in21))) (not ( = in20 in22))) (not ( = in21 in22))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in0 in5)) (not ( = in0 in6)) (not ( = in0 in7)) (not ( = in0 in8)) (not ( = in0 in9)) (not ( = in0 in10)) (not ( = in0 in11)) (not ( = in0 in12)) (not ( = in0 in13)) (not ( = in0 in14)) (not ( = in0 in15)) (not ( = in0 in16)) (not ( = in0 in17)) (not ( = in0 in18)) (not ( = in0 in19)) (not ( = in0 in20)) (not ( = in0 in21)) (not ( = in0 in22)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in1 in5)) (not ( = in1 in6)) (not ( = in1 in7)) (not ( = in1 in8)) (not ( = in1 in9)) (not ( = in1 in10)) (not ( = in1 in11)) (not ( = in1 in12)) (not ( = in1 in13)) (not ( = in1 in14)) (not ( = in1 in15)) (not ( = in1 in16)) (not ( = in1 in17)) (not ( = in1 in18)) (not ( = in1 in19)) (not ( = in1 in20)) (not ( = in1 in21)) (not ( = in1 in22)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in2 in5)) (not ( = in2 in6)) (not ( = in2 in7)) (not ( = in2 in8)) (not ( = in2 in9)) (not ( = in2 in10)) (not ( = in2 in11)) (not ( = in2 in12)) (not ( = in2 in13)) (not ( = in2 in14)) (not ( = in2 in15)) (not ( = in2 in16)) (not ( = in2 in17)) (not ( = in2 in18)) (not ( = in2 in19)) (not ( = in2 in20)) (not ( = in2 in21)) (not ( = in2 in22)) (not ( = in3 in4)) (not ( = in3 in5)) (not ( = in3 in6)) (not ( = in3 in7)) (not ( = in3 in8)) (not ( = in3 in9)) (not ( = in3 in10)) (not ( = in3 in11)) (not ( = in3 in12)) (not ( = in3 in13)) (not ( = in3 in14)) (not ( = in3 in15)) (not ( = in3 in16)) (not ( = in3 in17)) (not ( = in3 in18)) (not ( = in3 in19)) (not ( = in3 in20)) (not ( = in3 in21)) (not ( = in3 in22)) (not ( = in4 in5)) (not ( = in4 in6)) (not ( = in4 in7)) (not ( = in4 in8)) (not ( = in4 in9)) (not ( = in4 in10)) (not ( = in4 in11)) (not ( = in4 in12)) (not ( = in4 in13)) (not ( = in4 in14)) (not ( = in4 in15)) (not ( = in4 in16)) (not ( = in4 in17)) (not ( = in4 in18)) (not ( = in4 in19)) (not ( = in4 in20)) (not ( = in4 in21)) (not ( = in4 in22)) (not ( = in5 in6)) (not ( = in5 in7)) (not ( = in5 in8)) (not ( = in5 in9)) (not ( = in5 in10)) (not ( = in5 in11)) (not ( = in5 in12)) (not ( = in5 in13)) (not ( = in5 in14)) (not ( = in5 in15)) (not ( = in5 in16)) (not ( = in5 in17)) (not ( = in5 in18)) (not ( = in5 in19)) (not ( = in5 in20)) (not ( = in5 in21)) (not ( = in5 in22)) (not ( = in6 in7)) (not ( = in6 in8)) (not ( = in6 in9)) (not ( = in6 in10)) (not ( = in6 in11)) (not ( = in6 in12)) (not ( = in6 in13)) (not ( = in6 in14)) (not ( = in6 in15)) (not ( = in6 in16)) (not ( = in6 in17)) (not ( = in6 in18)) (not ( = in6 in19)) (not ( = in6 in20)) (not ( = in6 in21)) (not ( = in6 in22)) (not ( = in7 in8)) (not ( = in7 in9)) (not ( = in7 in10)) (not ( = in7 in11)) (not ( = in7 in12)) (not ( = in7 in13)) (not ( = in7 in14)) (not ( = in7 in15)) (not ( = in7 in16)) (not ( = in7 in17)) (not ( = in7 in18)) (not ( = in7 in19)) (not ( = in7 in20)) (not ( = in7 in21)) (not ( = in7 in22)) (not ( = in8 in9)) (not ( = in8 in10)) (not ( = in8 in11)) (not ( = in8 in12)) (not ( = in8 in13)) (not ( = in8 in14)) (not ( = in8 in15)) (not ( = in8 in16)) (not ( = in8 in17)) (not ( = in8 in18)) (not ( = in8 in19)) (not ( = in8 in20)) (not ( = in8 in21)) (not ( = in8 in22)) (not ( = in9 in10)) (not ( = in9 in11)) (not ( = in9 in12)) (not ( = in9 in13)) (not ( = in9 in14)) (not ( = in9 in15)) (not ( = in9 in16)) (not ( = in9 in17)) (not ( = in9 in18)) (not ( = in9 in19)) (not ( = in9 in20)) (not ( = in9 in21)) (not ( = in9 in22)) (not ( = in10 in11)) (not ( = in10 in12)) (not ( = in10 in13)) (not ( = in10 in14)) (not ( = in10 in15)) (not ( = in10 in16)) (not ( = in10 in17)) (not ( = in10 in18)) (not ( = in10 in19)) (not ( = in10 in20)) (not ( = in10 in21)) (not ( = in10 in22)) (not ( = in11 in12)) (not ( = in11 in13)) (not ( = in11 in14)) (not ( = in11 in15)) (not ( = in11 in16)) (not ( = in11 in17)) (not ( = in11 in18)) (not ( = in11 in19)) (not ( = in11 in20)) (not ( = in11 in21)) (not ( = in11 in22)) (not ( = in12 in13)) (not ( = in12 in14)) (not ( = in12 in15)) (not ( = in12 in16)) (not ( = in12 in17)) (not ( = in12 in18)) (not ( = in12 in19)) (not ( = in12 in20)) (not ( = in12 in21)) (not ( = in12 in22)) (not ( = in13 in14)) (not ( = in13 in15)) (not ( = in13 in16)) (not ( = in13 in17)) (not ( = in13 in18)) (not ( = in13 in19)) (not ( = in13 in20)) (not ( = in13 in21)) (not ( = in13 in22)) (not ( = in14 in15)) (not ( = in14 in16)) (not ( = in14 in17)) (not ( = in14 in18)) (not ( = in14 in19)) (not ( = in14 in20)) (not ( = in14 in21)) (not ( = in14 in22)) (not ( = in15 in16)) (not ( = in15 in17)) (not ( = in15 in18)) (not ( = in15 in19)) (not ( = in15 in20)) (not ( = in15 in21)) (not ( = in15 in22)) (not ( = in16 in17)) (not ( = in16 in18)) (not ( = in16 in19)) (not ( = in16 in20)) (not ( = in16 in21)) (not ( = in16 in22)) (not ( = in17 in18)) (not ( = in17 in19)) (not ( = in17 in20)) (not ( = in17 in21)) (not ( = in17 in22)) (not ( = in18 in19)) (not ( = in18 in20)) (not ( = in18 in21)) (not ( = in18 in22)) (not ( = in19 in20)) (not ( = in19 in21)) (not ( = in19 in22)) (not ( = in20 in21)) (not ( = in20 in22)) (not ( = in21 in22))))",
        "equivalent": true
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in0 in18))) (not ( = in0 in19))) (not ( = in0 in20))) (not ( = in0 in21))) (not ( = in0 in22))) (not ( = in0 in23))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in1 in18))) (not ( = in1 in19))) (not ( = in1 in20))) (not ( = in1 in21))) (not ( = in1 in22))) (not ( = in1 in23))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in2 in18))) (not ( = in2 in19))) (not ( = in2 in20))) (not ( = in2 in21))) (not ( = in2 in22))) (not ( = in2 in23))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in3 in18))) (not ( = in3 in19))) (not ( = in3 in20))) (not ( = in3 in21))) (not ( = in3 in22))) (not ( = in3 in23))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in4 in18))) (not ( = in4 in19))) (not ( = in4 in20))) (not ( = in4 in21))) (not ( = in4 in22))) (not ( = in4 in23))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in5 in18))) (not ( = in5 in19))) (not ( = in5 in20))) (not ( = in5 in21))) (not ( = in5 in22))) (not ( = in5 in23))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in6 in18))) (not ( = in6 in19))) (not ( = in6 in20))) (not ( = in6 in21))) (not ( = in6 in22))) (not ( = in6 in23))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in7 in18))) (not ( = in7 in19))) (not ( = in7 in20))) (not ( = in7 in21))) (not ( = in7 in22))) (not ( = in7 in23))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in8 in18))) (not ( = in8 in19))) (not ( = in8 in20))) (not ( = in8 in21))) (not ( = in8 in22))) (not ( = in8 in23))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in9 in18))) (not ( = in9 in19))) (not ( = in9 in20))) (not ( = in9 in21))) (not ( = in9 in22))) (not ( = in9 in23))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in10 in18))) (not ( = in10 in19))) (not ( = in10 in20))) (not ( = in10 in21))) (not ( = in10 in22))) (not ( = in10 in23))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in11 in18))) (not ( = in11 in19))) (not ( = in11 in20))) (not ( = in11 in21))) (not ( = in11 in22))) (not ( = in11 in23))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in12 in18))) (not ( = in12 in19))) (not ( = in12 in20))) (not ( = in12 in21))) (not ( = in12 in22))) (not ( = in12 in23))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in13 in18))) (not ( = in13 in19))) (not ( = in13 in20))) (not ( = in13 in21))) (not ( = in13 in22))) (not ( = in13 in23))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in14 in18))) (not ( = in14 in19))) (not ( = in14 in20))) (not ( = in14 in21))) (not ( = in14 in22))) (not ( = in14 in23))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in15 in18))) (not ( = in15 in19))) (not ( = in15 in20))) (not ( = in15 in21))) (not ( = in15 in22))) (not ( = in15 in23))) (not ( = in16 in17))) (not ( = in16 in18))) (not ( = in16 in19))) (not ( = in16 in20))) (not ( = in16 in21))) (not ( = in16 in22))) (not ( = in16 in23))) (not ( = in17 in18))) (not ( = in17 in19))) (not ( = in17 in20))) (not ( = in17 in21))) (not ( = in17 in22))) (not ( = in17 in23))) (not ( = in18 in19))) (not ( = in18 in20))) (not ( = in18 in21))) (not ( = in18 in22))) (not ( = in18 in23))) (not ( = in19 in20))) (not ( = in19 in21))) (not ( = in19 in22))) (not ( = in19 in23))) (not ( = in20 in21))) (not ( = in20 in22))) (not ( = in20 in23))) (not ( = in21 in22))) (not ( = in21 in23))) (not ( = in22 in23))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in0 in5)) (not ( = in0 in6)) (not ( = in0 in7)) (not ( = in0 in8)) (not ( = in0 in9)) (not ( = in0 in10)) (not ( = in0 in11)) (not ( = in0 in12)) (not ( = in0 in13)) (not ( = in0 in14)) (not ( = in0 in15)) (not ( = in0 in16)) (not ( = in0 in17)) (not ( = in0 in18)) (not ( = in0 in19)) (not ( = in0 in20)) (not ( = in0 in21)) (not ( = in0 in22)) (not ( = in0 in23)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in1 in5)) (not ( = in1 in6)) (not ( = in1 in7)) (not ( = in1 in8)) (not ( = in1 in9)) (not ( = in1 in10)) (not ( = in1 in11)) (not ( = in1 in12)) (not ( = in1 in13)) (not ( = in1 in14)) (not ( = in1 in15)) (not ( = in1 in16)) (not ( = in1 in17)) (not ( = in1 in18)) (not ( = in1 in19)) (not ( = in1 in20)) (not ( = in1 in21)) (not ( = in1 in22)) (not ( = in1 in23)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in2 in5)) (not ( = in2 in6)) (not ( = in2 in7)) (not ( = in2 in8)) (not ( = in2 in9)) (not ( = in2 in10)) (not ( = in2 in11)) (not ( = in2 in12)) (not ( = in2 in13)) (not ( = in2 in14)) (not ( = in2 in15)) (not ( = in2 in16)) (not ( = in2 in17)) (not ( = in2 in18)) (not ( = in2 in19)) (not ( = in2 in20)) (not ( = in2 in21)) (not ( = in2 in22)) (not ( = in2 in23)) (not ( = in3 in4)) (not ( = in3 in5)) (not ( = in3 in6)) (not ( = in3 in7)) (not ( = in3 in8)) (not ( = in3 in9)) (not ( = in3 in10)) (not ( = in3 in11)) (not ( = in3 in12)) (not ( = in3 in13)) (not ( = in3 in14)) (not ( = in3 in15)) (not ( = in3 in16)) (not ( = in3 in17)) (not ( = in3 in18)) (not ( = in3 in19)) (not ( = in3 in20)) (not ( = in3 in21)) (not ( = in3 in22)) (not ( = in3 in23)) (not ( = in4 in5)) (not ( = in4 in6)) (not ( = in4 in7)) (not ( = in4 in8)) (not ( = in4 in9)) (not ( = in4 in10)) (not ( = in4 in11)) (not ( = in4 in12)) (not ( = in4 in13)) (not ( = in4 in14)) (not ( = in4 in15)) (not ( = in4 in16)) (not ( = in4 in17)) (not ( = in4 in18)) (not ( = in4 in19)) (not ( = in4 in20)) (not ( = in4 in21)) (not ( = in4 in22)) (not ( = in4 in23)) (not ( = in5 in6)) (not ( = in5 in7)) (not ( = in5 in8)) (not ( = in5 in9)) (not ( = in5 in10)) (not ( = in5 in11)) (not ( = in5 in12)) (not ( = in5 in13)) (not ( = in5 in14)) (not ( = in5 in15)) (not ( = in5 in16)) (not ( = in5 in17)) (not ( = in5 in18)) (not ( = in5 in19)) (not ( = in5 in20)) (not ( = in5 in21)) (not ( = in5 in22)) (not ( = in5 in23)) (not ( = in6 in7)) (not ( = in6 in8)) (not ( = in6 in9)) (not ( = in6 in10)) (not ( = in6 in11)) (not ( = in6 in12)) (not ( = in6 in13)) (not ( = in6 in14)) (not ( = in6 in15)) (not ( = in6 in16)) (not ( = in6 in17)) (not ( = in6 in18)) (not ( = in6 in19)) (not ( = in6 in20)) (not ( = in6 in21)) (not ( = in6 in22)) (not ( = in6 in23)) (not ( = in7 in8)) (not ( = in7 in9)) (not ( = in7 in10)) (not ( = in7 in11)) (not ( = in7 in12)) (not ( = in7 in13)) (not ( = in7 in14)) (not ( = in7 in15)) (not ( = in7 in16)) (not ( = in7 in17)) (not ( = in7 in18)) (not ( = in7 in19)) (not ( = in7 in20)) (not ( = in7 in21)) (not ( = in7 in22)) (not ( = in7 in23)) (not ( = in8 in9)) (not ( = in8 in10)) (not ( = in8 in11)) (not ( = in8 in12)) (not ( = in8 in13)) (not ( = in8 in14)) (not ( = in8 in15)) (not ( = in8 in16)) (not ( = in8 in17)) (not ( = in8 in18)) (not ( = in8 in19)) (not ( = in8 in20)) (not ( = in8 in21)) (not ( = in8 in22)) (not ( = in8 in23)) (not ( = in9 in10)) (not ( = in9 in11)) (not ( = in9 in12)) (not ( = in9 in13)) (not ( = in9 in14)) (not ( = in9 in15)) (not ( = in9 in16)) (not ( = in9 in17)) (not ( = in9 in18)) (not ( = in9 in19)) (not ( = in9 in20)) (not ( = in9 in21)) (not ( = in9 in22)) (not ( = in9 in23)) (not ( = in10 in11)) (not ( = in10 in12)) (not ( = in10 in13)) (not ( = in10 in14)) (not ( = in10 in15)) (not ( = in10 in16)) (not ( = in10 in17)) (not ( = in10 in18)) (not ( = in10 in19)) (not ( = in10 in20)) (not ( = in10 in21)) (not ( = in10 in22)) (not ( = in10 in23)) (not ( = in11 in12)) (not ( = in11 in13)) (not ( = in11 in14)) (not ( = in11 in15)) (not ( = in11 in16)) (not ( = in11 in17)) (not ( = in11 in18)) (not ( = in11 in19)) (not ( = in11 in20)) (not ( = in11 in21)) (not ( = in11 in22)) (not ( = in11 in23)) (not ( = in12 in13)) (not ( = in12 in14)) (not ( = in12 in15)) (not ( = in12 in16)) (not ( = in12 in17)) (not ( = in12 in18)) (not ( = in12 in19)) (not ( = in12 in20)) (not ( = in12 in21)) (not ( = in12 in22)) (not ( = in12 in23)) (not ( = in13 in14)) (not ( = in13 in15)) (not ( = in13 in16)) (not ( = in13 in17)) (not ( = in13 in18)) (not ( = in13 in19)) (not ( = in13 in20)) (not ( = in13 in21)) (not ( = in13 in22)) (not ( = in13 in23)) (not ( = in14 in15)) (not ( = in14 in16)) (not ( = in14 in17)) (not ( = in14 in18)) (not ( = in14 in19)) (not ( = in14 in20)) (not ( = in14 in21)) (not ( = in14 in22)) (not ( = in14 in23)) (not ( = in15 in16)) (not ( = in15 in17)) (not ( = in15 in18)) (not ( = in15 in19)) (not ( = in15 in20)) (not ( = in15 in21)) (not ( = in15 in22)) (not ( = in15 in23)) (not ( = in16 in17)) (not ( = in16 in18)) (not ( = in16 in19)) (not ( = in16 in20)) (not ( = in16 in21)) (not ( = in16 in22)) (not ( = in16 in23)) (not ( = in17 in18)) (not ( = in17 in19)) (not ( = in17 in20)) (not ( = in17 in21)) (not ( = in17 in22)) (not ( = in17 in23)) (not ( = in18 in19)) (not ( = in18 in20)) (not ( = in18 in21)) (not ( = in18 in22)) (not ( = in18 in23)) (not ( = in19 in20)) (not ( = in19 in21)) (not ( = in19 in22)) (not ( = in19 in23)) (not ( = in20 in21)) (not ( = in20 in22)) (not ( = in20 in23)) (not ( = in21 in22)) (not ( = in21 in23)) (not ( = in22 in23))))",
        "equivalent": true
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in0 in18))) (not ( = in0 in19))) (not ( = in0 in20))) (not ( = in0 in21))) (not ( = in0 in22))) (not ( = in0 in23))) (not ( = in0 in24))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in1 in18))) (not ( = in1 in19))) (not ( = in1 in20))) (not ( = in1 in21))) (not ( = in1 in22))) (not ( = in1 in23))) (not ( = in1 in24))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in2 in18))) (not ( = in2 in19))) (not ( = in2 in20))) (not ( = in2 in21))) (not ( = in2 in22))) (not ( = in2 in23))) (not ( = in2 in24))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in3 in18))) (not ( = in3 in19))) (not ( = in3 in20))) (not ( = in3 in21))) (not ( = in3 in22))) (not ( = in3 in23))) (not ( = in3 in24))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in4 in18))) (not ( = in4 in19))) (not ( = in4 in20))) (not ( = in4 in21))) (not ( = in4 in22))) (not ( = in4 in23))) (not ( = in4 in24))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in5 in18))) (not ( = in5 in19))) (not ( = in5 in20))) (not ( = in5 in21))) (not ( = in5 in22))) (not ( = in5 in23))) (not ( = in5 in24))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in6 in18))) (not ( = in6 in19))) (not ( = in6 in20))) (not ( = in6 in21))) (not ( = in6 in22))) (not ( = in6 in23))) (not ( = in6 in24))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in7 in18))) (not ( = in7 in19))) (not ( = in7 in20))) (not ( = in7 in21))) (not ( = in7 in22))) (not ( = in7 in23))) (not ( = in7 in24))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in8 in18))) (not ( = in8 in19))) (not ( = in8 in20))) (not ( = in8 in21))) (not ( = in8 in22))) (not ( = in8 in23))) (not ( = in8 in24))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in9 in18))) (not ( = in9 in19))) (not ( = in9 in20))) (not ( = in9 in21))) (not ( = in9 in22))) (not ( = in9 in23))) (not ( = in9 in24))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in10 in18))) (not ( = in10 in19))) (not ( = in10 in20))) (not ( = in10 in21))) (not ( = in10 in22))) (not ( = in10 in23))) (not ( = in10 in24))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in11 in18))) (not ( = in11 in19))) (not ( = in11 in20))) (not ( = in11 in21))) (not ( = in11 in22))) (not ( = in11 in23))) (not ( = in11 in24))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in12 in18))) (not ( = in12 in19))) (not ( = in12 in20))) (not ( = in12 in21))) (not ( = in12 in22))) (not ( = in12 in23))) (not ( = in12 in24))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in13 in18))) (not ( = in13 in19))) (not ( = in13 in20))) (not ( = in13 in21))) (not ( = in13 in22))) (not ( = in13 in23))) (not ( = in13 in24))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in14 in18))) (not ( = in14 in19))) (not ( = in14 in20))) (not ( = in14 in21))) (not ( = in14 in22))) (not ( = in14 in23))) (not ( = in14 in24))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in15 in18))) (not ( = in15 in19))) (not ( = in15 in20))) (not ( = in15 in21))) (not ( = in15 in22))) (not ( = in15 in23))) (not ( = in15 in24))) (not ( = in16 in17))) (not ( = in16 in18))) (not ( = in16 in19))) (not ( = in16 in20))) (not ( = in16 in21))) (not ( = in16 in22))) (not ( = in16 in23))) (not ( = in16 in24))) (not ( = in17 in18))) (not ( = in17 in19))) (not ( = in17 in20))) (not ( = in17 in21))) (not ( = in17 in22))) (not ( = in17 in23))) (not ( = in17 in24))) (not ( = in18 in19))) (not ( = in18 in20))) (not ( = in18 in21))) (not ( = in18 in22))) (not ( = in18 in23))) (not ( = in18 in24))) (not ( = in19 in20))) (not ( = in19 in21))) (not ( = in19 in22))) (not ( = in19 in23))) (not ( = in19 in24))) (not ( = in20 in21))) (not ( = in20 in22))) (not ( = in20 in23))) (not ( = in20 in24))) (not ( = in21 in22))) (not ( = in21 in23))) (not ( = in21 in24))) (not ( = in22 in23))) (not ( = in22 in24))) (not ( = in23 in24))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in0 in5)) (not ( = in0 in6)) (not ( = in0 in7)) (not ( = in0 in8)) (not ( = in0 in9)) (not ( = in0 in10)) (not ( = in0 in11)) (not ( = in0 in12)) (not ( = in0 in13)) (not ( = in0 in14)) (not ( = in0 in15)) (not ( = in0 in16)) (not ( = in0 in17)) (not ( = in0 in18)) (not ( = in0 in19)) (not ( = in0 in20)) (not ( = in0 in21)) (not ( = in0 in22)) (not ( = in0 in23)) (not ( = in0 in24)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in1 in5)) (not ( = in1 in6)) (not ( = in1 in7)) (not ( = in1 in8)) (not ( = in1 in9)) (not ( = in1 in10)) (not ( = in1 in11)) (not ( = in1 in12)) (not ( = in1 in13)) (not ( = in1 in14)) (not ( = in1 in15)) (not ( = in1 in16)) (not ( = in1 in17)) (not ( = in1 in18)) (not ( = in1 in19)) (not ( = in1 in20)) (not ( = in1 in21)) (not ( = in1 in22)) (not ( = in1 in23)) (not ( = in1 in24)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in2 in5)) (not ( = in2 in6)) (not ( = in2 in7)) (not ( = in2 in8)) (not ( = in2 in9)) (not ( = in2 in10)) (not ( = in2 in11)) (not ( = in2 in12)) (not ( = in2 in13)) (not ( = in2 in14)) (not ( = in2 in15)) (not ( = in2 in16)) (not ( = in2 in17)) (not ( = in2 in18)) (not ( = in2 in19)) (not ( = in2 in20)) (not ( = in2 in21)) (not ( = in2 in22)) (not ( = in2 in23)) (not ( = in2 in24)) (not ( = in3 in4)) (not ( = in3 in5)) (not ( = in3 in6)) (not ( = in3 in7)) (not ( = in3 in8)) (not ( = in3 in9)) (not ( = in3 in10)) (not ( = in3 in11)) (not ( = in3 in12)) (not ( = in3 in13)) (not ( = in3 in14)) (not ( = in3 in15)) (not ( = in3 in16)) (not ( = in3 in17)) (not ( = in3 in18)) (not ( = in3 in19)) (not ( = in3 in20)) (not ( = in3 in21)) (not ( = in3 in22)) (not ( = in3 in23)) (not ( = in3 in24)) (not ( = in4 in5)) (not ( = in4 in6)) (not ( = in4 in7)) (not ( = in4 in8)) (not ( = in4 in9)) (not ( = in4 in10)) (not ( = in4 in11)) (not ( = in4 in12)) (not ( = in4 in13)) (not ( = in4 in14)) (not ( = in4 in15)) (not ( = in4 in16)) (not ( = in4 in17)) (not ( = in4 in18)) (not ( = in4 in19)) (not ( = in4 in20)) (not ( = in4 in21)) (not ( = in4 in22)) (not ( = in4 in23)) (not ( = in4 in24)) (not ( = in5 in6)) (not ( = in5 in7)) (not ( = in5 in8)) (not ( = in5 in9)) (not ( = in5 in10)) (not ( = in5 in11)) (not ( = in5 in12)) (not ( = in5 in13)) (not ( = in5 in14)) (not ( = in5 in15)) (not ( = in5 in16)) (not ( = in5 in17)) (not ( = in5 in18)) (not ( = in5 in19)) (not ( = in5 in20)) (not ( = in5 in21)) (not ( = in5 in22)) (not ( = in5 in23)) (not ( = in5 in24)) (not ( = in6 in7)) (not ( = in6 in8)) (not ( = in6 in9)) (not ( = in6 in10)) (not ( = in6 in11)) (not ( = in6 in12)) (not ( = in6 in13)) (not ( = in6 in14)) (not ( = in6 in15)) (not ( = in6 in16)) (not ( = in6 in17)) (not ( = in6 in18)) (not ( = in6 in19)) (not ( = in6 in20)) (not ( = in6 in21)) (not ( = in6 in22)) (not ( = in6 in23)) (not ( = in6 in24)) (not ( = in7 in8)) (not ( = in7 in9)) (not ( = in7 in10)) (not ( = in7 in11)) (not ( = in7 in12)) (not ( = in7 in13)) (not ( = in7 in14)) (not ( = in7 in15)) (not ( = in7 in16)) (not ( = in7 in17)) (not ( = in7 in18)) (not ( = in7 in19)) (not ( = in7 in20)) (not ( = in7 in21)) (not ( = in7 in22)) (not ( = in7 in23)) (not ( = in7 in24)) (not ( = in8 in9)) (not ( = in8 in10)) (not ( = in8 in11)) (not ( = in8 in12)) (not ( = in8 in13)) (not ( = in8 in14)) (not ( = in8 in15)) (not ( = in8 in16)) (not ( = in8 in17)) (not ( = in8 in18)) (not ( = in8 in19)) (not ( = in8 in20)) (not ( = in8 in21)) (not ( = in8 in22)) (not ( = in8 in23)) (not ( = in8 in24)) (not ( = in9 in10)) (not ( = in9 in11)) (not ( = in9 in12)) (not ( = in9 in13)) (not ( = in9 in14)) (not ( = in9 in15)) (not ( = in9 in16)) (not ( = in9 in17)) (not ( = in9 in18)) (not ( = in9 in19)) (not ( = in9 in20)) (not ( = in9 in21)) (not ( = in9 in22)) (not ( = in9 in23)) (not ( = in9 in24)) (not ( = in10 in11)) (not ( = in10 in12)) (not ( = in10 in13)) (not ( = in10 in14)) (not ( = in10 in15)) (not ( = in10 in16)) (not ( = in10 in17)) (not ( = in10 in18)) (not ( = in10 in19)) (not ( = in10 in20)) (not ( = in10 in21)) (not ( = in10 in22)) (not ( = in10 in23)) (not ( = in10 in24)) (not ( = in11 in12)) (not ( = in11 in13)) (not ( = in11 in14)) (not ( = in11 in15)) (not ( = in11 in16)) (not ( = in11 in17)) (not ( = in11 in18)) (not ( = in11 in19)) (not ( = in11 in20)) (not ( = in11 in21)) (not ( = in11 in22)) (not ( = in11 in23)) (not ( = in11 in24)) (not ( = in12 in13)) (not ( = in12 in14)) (not ( = in12 in15)) (not ( = in12 in16)) (not ( = in12 in17)) (not ( = in12 in18)) (not ( = in12 in19)) (not ( = in12 in20)) (not ( = in12 in21)) (not ( = in12 in22)) (not ( = in12 in23)) (not ( = in12 in24)) (not ( = in13 in14)) (not ( = in13 in15)) (not ( = in13 in16)) (not ( = in13 in17)) (not ( = in13 in18)) (not ( = in13 in19)) (not ( = in13 in20)) (not ( = in13 in21)) (not ( = in13 in22)) (not ( = in13 in23)) (not ( = in13 in24)) (not ( = in14 in15)) (not ( = in14 in16)) (not ( = in14 in17)) (not ( = in14 in18)) (not ( = in14 in19)) (not ( = in14 in20)) (not ( = in14 in21)) (not ( = in14 in22)) (not ( = in14 in23)) (not ( = in14 in24)) (not ( = in15 in16)) (not ( = in15 in17)) (not ( = in15 in18)) (not ( = in15 in19)) (not ( = in15 in20)) (not ( = in15 in21)) (not ( = in15 in22)) (not ( = in15 in23)) (not ( = in15 in24)) (not ( = in16 in17)) (not ( = in16 in18)) (not ( = in16 in19)) (not ( = in16 in20)) (not ( = in16 in21)) (not ( = in16 in22)) (not ( = in16 in23)) (not ( = in16 in24)) (not ( = in17 in18)) (not ( = in17 in19)) (not ( = in17 in20)) (not ( = in17 in21)) (not ( = in17 in22)) (not ( = in17 in23)) (not ( = in17 in24)) (not ( = in18 in19)) (not ( = in18 in20)) (not ( = in18 in21)) (not ( = in18 in22)) (not ( = in18 in23)) (not ( = in18 in24)) (not ( = in19 in20)) (not ( = in19 in21)) (not ( = in19 in22)) (not ( = in19 in23)) (not ( = in19 in24)) (not ( = in20 in21)) (not ( = in20 in22)) (not ( = in20 in23)) (not ( = in20 in24)) (not ( = in21 in22)) (not ( = in21 in23)) (not ( = in21 in24)) (not ( = in22 in23)) (not ( = in22 in24)) (not ( = in23 in24))))",
        "equivalent": true
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in0 in18))) (not ( = in0 in19))) (not ( = in0 in20))) (not ( = in0 in21))) (not ( = in0 in22))) (not ( = in0 in23))) (not ( = in0 in24))) (not ( = in0 in25))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in1 in18))) (not ( = in1 in19))) (not ( = in1 in20))) (not ( = in1 in21))) (not ( = in1 in22))) (not ( = in1 in23))) (not ( = in1 in24))) (not ( = in1 in25))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in2 in18))) (not ( = in2 in19))) (not ( = in2 in20))) (not ( = in2 in21))) (not ( = in2 in22))) (not ( = in2 in23))) (not ( = in2 in24))) (not ( = in2 in25))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in3 in18))) (not ( = in3 in19))) (not ( = in3 in20))) (not ( = in3 in21))) (not ( = in3 in22))) (not ( = in3 in23))) (not ( = in3 in24))) (not ( = in3 in25))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in4 in18))) (not ( = in4 in19))) (not ( = in4 in20))) (not ( = in4 in21))) (not ( = in4 in22))) (not ( = in4 in23))) (not ( = in4 in24))) (not ( = in4 in25))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in5 in18))) (not ( = in5 in19))) (not ( = in5 in20))) (not ( = in5 in21))) (not ( = in5 in22))) (not ( = in5 in23))) (not ( = in5 in24))) (not ( = in5 in25))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in6 in18))) (not ( = in6 in19))) (not ( = in6 in20))) (not ( = in6 in21))) (not ( = in6 in22))) (not ( = in6 in23))) (not ( = in6 in24))) (not ( = in6 in25))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in7 in18))) (not ( = in7 in19))) (not ( = in7 in20))) (not ( = in7 in21))) (not ( = in7 in22))) (not ( = in7 in23))) (not ( = in7 in24))) (not ( = in7 in25))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in8 in18))) (not ( = in8 in19))) (not ( = in8 in20))) (not ( = in8 in21))) (not ( = in8 in22))) (not ( = in8 in23))) (not ( = in8 in24))) (not ( = in8 in25))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in9 in18))) (not ( = in9 in19))) (not ( = in9 in20))) (not ( = in9 in21))) (not ( = in9 in22))) (not ( = in9 in23))) (not ( = in9 in24))) (not ( = in9 in25))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in10 in18))) (not ( = in10 in19))) (not ( = in10 in20))) (not ( = in10 in21))) (not ( = in10 in22))) (not ( = in10 in23))) (not ( = in10 in24))) (not ( = in10 in25))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in11 in18))) (not ( = in11 in19))) (not ( = in11 in20))) (not ( = in11 in21))) (not ( = in11 in22))) (not ( = in11 in23))) (not ( = in11 in24))) (not ( = in11 in25))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in12 in18))) (not ( = in12 in19))) (not ( = in12 in20))) (not ( = in12 in21))) (not ( = in12 in22))) (not ( = in12 in23))) (not ( = in12 in24))) (not ( = in12 in25))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in13 in18))) (not ( = in13 in19))) (not ( = in13 in20))) (not ( = in13 in21))) (not ( = in13 in22))) (not ( = in13 in23))) (not ( = in13 in24))) (not ( = in13 in25))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in14 in18))) (not ( = in14 in19))) (not ( = in14 in20))) (not ( = in14 in21))) (not ( = in14 in22))) (not ( = in14 in23))) (not ( = in14 in24))) (not ( = in14 in25))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in15 in18))) (not ( = in15 in19))) (not ( = in15 in20))) (not ( = in15 in21))) (not ( = in15 in22))) (not ( = in15 in23))) (not ( = in15 in24))) (not ( = in15 in25))) (not ( = in16 in17))) (not ( = in16 in18))) (not ( = in16 in19))) (not ( = in16 in20))) (not ( = in16 in21))) (not ( = in16 in22))) (not ( = in16 in23))) (not ( = in16 in24))) (not ( = in16 in25))) (not ( = in17 in18))) (not ( = in17 in19))) (not ( = in17 in20))) (not ( = in17 in21))) (not ( = in17 in22))) (not ( = in17 in23))) (not ( = in17 in24))) (not ( = in17 in25))) (not ( = in18 in19))) (not ( = in18 in20))) (not ( = in18 in21))) (not ( = in18 in22))) (not ( = in18 in23))) (not ( = in18 in24))) (not ( = in18 in25))) (not ( = in19 in20))) (not ( = in19 in21))) (not ( = in19 in22))) (not ( = in19 in23))) (not ( = in19 in24))) (not ( = in19 in25))) (not ( = in20 in21))) (not ( = in20 in22))) (not ( = in20 in23))) (not ( = in20 in24))) (not ( = in20 in25))) (not ( = in21 in22))) (not ( = in21 in23))) (not ( = in21 in24))) (not ( = in21 in25))) (not ( = in22 in23))) (not ( = in22 in24))) (not ( = in22 in25))) (not ( = in23 in24))) (not ( = in23 in25))) (not ( = in24 in25))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in0 in5)) (not ( = in0 in6)) (not ( = in0 in7)) (not ( = in0 in8)) (not ( = in0 in9)) (not ( = in0 in10)) (not ( = in0 in11)) (not ( = in0 in12)) (not ( = in0 in13)) (not ( = in0 in14)) (not ( = in0 in15)) (not ( = in0 in16)) (not ( = in0 in17)) (not ( = in0 in18)) (not ( = in0 in19)) (not ( = in0 in20)) (not ( = in0 in21)) (not ( = in0 in22)) (not ( = in0 in23)) (not ( = in0 in24)) (not ( = in0 in25)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in1 in5)) (not ( = in1 in6)) (not ( = in1 in7)) (not ( = in1 in8)) (not ( = in1 in9)) (not ( = in1 in10)) (not ( = in1 in11)) (not ( = in1 in12)) (not ( = in1 in13)) (not ( = in1 in14)) (not ( = in1 in15)) (not ( = in1 in16)) (not ( = in1 in17)) (not ( = in1 in18)) (not ( = in1 in19)) (not ( = in1 in20)) (not ( = in1 in21)) (not ( = in1 in22)) (not ( = in1 in23)) (not ( = in1 in24)) (not ( = in1 in25)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in2 in5)) (not ( = in2 in6)) (not ( = in2 in7)) (not ( = in2 in8)) (not ( = in2 in9)) (not ( = in2 in10)) (not ( = in2 in11)) (not ( = in2 in12)) (not ( = in2 in13)) (not ( = in2 in14)) (not ( = in2 in15)) (not ( = in2 in16)) (not ( = in2 in17)) (not ( = in2 in18)) (not ( = in2 in19)) (not ( = in2 in20)) (not ( = in2 in21)) (not ( = in2 in22)) (not ( = in2 in23)) (not ( = in2 in24)) (not ( = in2 in25)) (not ( = in3 in4)) (not ( = in3 in5)) (not ( = in3 in6)) (not ( = in3 in7)) (not ( = in3 in8)) (not ( = in3 in9)) (not ( = in3 in10)) (not ( = in3 in11)) (not ( = in3 in12)) (not ( = in3 in13)) (not ( = in3 in14)) (not ( = in3 in15)) (not ( = in3 in16)) (not ( = in3 in17)) (not ( = in3 in18)) (not ( = in3 in19)) (not ( = in3 in20)) (not ( = in3 in21)) (not ( = in3 in22)) (not ( = in3 in23)) (not ( = in3 in24)) (not ( = in3 in25)) (not ( = in4 in5)) (not ( = in4 in6)) (not ( = in4 in7)) (not ( = in4 in8)) (not ( = in4 in9)) (not ( = in4 in10)) (not ( = in4 in11)) (not ( = in4 in12)) (not ( = in4 in13)) (not ( = in4 in14)) (not ( = in4 in15)) (not ( = in4 in16)) (not ( = in4 in17)) (not ( = in4 in18)) (not ( = in4 in19)) (not ( = in4 in20)) (not ( = in4 in21)) (not ( = in4 in22)) (not ( = in4 in23)) (not ( = in4 in24)) (not ( = in4 in25)) (not ( = in5 in6)) (not ( = in5 in7)) (not ( = in5 in8)) (not ( = in5 in9)) (not ( = in5 in10)) (not ( = in5 in11)) (not ( = in5 in12)) (not ( = in5 in13)) (not ( = in5 in14)) (not ( = in5 in15)) (not ( = in5 in16)) (not ( = in5 in17)) (not ( = in5 in18)) (not ( = in5 in19)) (not ( = in5 in20)) (not ( = in5 in21)) (not ( = in5 in22)) (not ( = in5 in23)) (not ( = in5 in24)) (not ( = in5 in25)) (not ( = in6 in7)) (not ( = in6 in8)) (not ( = in6 in9)) (not ( = in6 in10)) (not ( = in6 in11)) (not ( = in6 in12)) (not ( = in6 in13)) (not ( = in6 in14)) (not ( = in6 in15)) (not ( = in6 in16)) (not ( = in6 in17)) (not ( = in6 in18)) (not ( = in6 in19)) (not ( = in6 in20)) (not ( = in6 in21)) (not ( = in6 in22)) (not ( = in6 in23)) (not ( = in6 in24)) (not ( = in6 in25)) (not ( = in7 in8)) (not ( = in7 in9)) (not ( = in7 in10)) (not ( = in7 in11)) (not ( = in7 in12)) (not ( = in7 in13)) (not ( = in7 in14)) (not ( = in7 in15)) (not ( = in7 in16)) (not ( = in7 in17)) (not ( = in7 in18)) (not ( = in7 in19)) (not ( = in7 in20)) (not ( = in7 in21)) (not ( = in7 in22)) (not ( = in7 in23)) (not ( = in7 in24)) (not ( = in7 in25)) (not ( = in8 in9)) (not ( = in8 in10)) (not ( = in8 in11)) (not ( = in8 in12)) (not ( = in8 in13)) (not ( = in8 in14)) (not ( = in8 in15)) (not ( = in8 in16)) (not ( = in8 in17)) (not ( = in8 in18)) (not ( = in8 in19)) (not ( = in8 in20)) (not ( = in8 in21)) (not ( = in8 in22)) (not ( = in8 in23)) (not ( = in8 in24)) (not ( = in8 in25)) (not ( = in9 in10)) (not ( = in9 in11)) (not ( = in9 in12)) (not ( = in9 in13)) (not ( = in9 in14)) (not ( = in9 in15)) (not ( = in9 in16)) (not ( = in9 in17)) (not ( = in9 in18)) (not ( = in9 in19)) (not ( = in9 in20)) (not ( = in9 in21)) (not ( = in9 in22)) (not ( = in9 in23)) (not ( = in9 in24)) (not ( = in9 in25)) (not ( = in10 in11)) (not ( = in10 in12)) (not ( = in10 in13)) (not ( = in10 in14)) (not ( = in10 in15)) (not ( = in10 in16)) (not ( = in10 in17)) (not ( = in10 in18)) (not ( = in10 in19)) (not ( = in10 in20)) (not ( = in10 in21)) (not ( = in10 in22)) (not ( = in10 in23)) (not ( = in10 in24)) (not ( = in10 in25)) (not ( = in11 in12)) (not ( = in11 in13)) (not ( = in11 in14)) (not ( = in11 in15)) (not ( = in11 in16)) (not ( = in11 in17)) (not ( = in11 in18)) (not ( = in11 in19)) (not ( = in11 in20)) (not ( = in11 in21)) (not ( = in11 in22)) (not ( = in11 in23)) (not ( = in11 in24)) (not ( = in11 in25)) (not ( = in12 in13)) (not ( = in12 in14)) (not ( = in12 in15)) (not ( = in12 in16)) (not ( = in12 in17)) (not ( = in12 in18)) (not ( = in12 in19)) (not ( = in12 in20)) (not ( = in12 in21)) (not ( = in12 in22)) (not ( = in12 in23)) (not ( = in12 in24)) (not ( = in12 in25)) (not ( = in13 in14)) (not ( = in13 in15)) (not ( = in13 in16)) (not ( = in13 in17)) (not ( = in13 in18)) (not ( = in13 in19)) (not ( = in13 in20)) (not ( = in13 in21)) (not ( = in13 in22)) (not ( = in13 in23)) (not ( = in13 in24)) (not ( = in13 in25)) (not ( = in14 in15)) (not ( = in14 in16)) (not ( = in14 in17)) (not ( = in14 in18)) (not ( = in14 in19)) (not ( = in14 in20)) (not ( = in14 in21)) (not ( = in14 in22)) (not ( = in14 in23)) (not ( = in14 in24)) (not ( = in14 in25)) (not ( = in15 in16)) (not ( = in15 in17)) (not ( = in15 in18)) (not ( = in15 in19)) (not ( = in15 in20)) (not ( = in15 in21)) (not ( = in15 in22)) (not ( = in15 in23)) (not ( = in15 in24)) (not ( = in15 in25)) (not ( = in16 in17)) (not ( = in16 in18)) (not ( = in16 in19)) (not ( = in16 in20)) (not ( = in16 in21)) (not ( = in16 in22)) (not ( = in16 in23)) (not ( = in16 in24)) (not ( = in16 in25)) (not ( = in17 in18)) (not ( = in17 in19)) (not ( = in17 in20)) (not ( = in17 in21)) (not ( = in17 in22)) (not ( = in17 in23)) (not ( = in17 in24)) (not ( = in17 in25)) (not ( = in18 in19)) (not ( = in18 in20)) (not ( = in18 in21)) (not ( = in18 in22)) (not ( = in18 in23)) (not ( = in18 in24)) (not ( = in18 in25)) (not ( = in19 in20)) (not ( = in19 in21)) (not ( = in19 in22)) (not ( = in19 in23)) (not ( = in19 in24)) (not ( = in19 in25)) (not ( = in20 in21)) (not ( = in20 in22)) (not ( = in20 in23)) (not ( = in20 in24)) (not ( = in20 in25)) (not ( = in21 in22)) (not ( = in21 in23)) (not ( = in21 in24)) (not ( = in21 in25)) (not ( = in22 in23)) (not ( = in22 in24)) (not ( = in22 in25)) (not ( = in23 in24)) (not ( = in23 in25)) (not ( = in24 in25))))",
        "equivalent": true
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in0 in18))) (not ( = in0 in19))) (not ( = in0 in20))) (not ( = in0 in21))) (not ( = in0 in22))) (not ( = in0 in23))) (not ( = in0 in24))) (not ( = in0 in25))) (not ( = in0 in26))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in1 in18))) (not ( = in1 in19))) (not ( = in1 in20))) (not ( = in1 in21))) (not ( = in1 in22))) (not ( = in1 in23))) (not ( = in1 in24))) (not ( = in1 in25))) (not ( = in1 in26))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in2 in18))) (not ( = in2 in19))) (not ( = in2 in20))) (not ( = in2 in21))) (not ( = in2 in22))) (not ( = in2 in23))) (not ( = in2 in24))) (not ( = in2 in25))) (not ( = in2 in26))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in3 in18))) (not ( = in3 in19))) (not ( = in3 in20))) (not ( = in3 in21))) (not ( = in3 in22))) (not ( = in3 in23))) (not ( = in3 in24))) (not ( = in3 in25))) (not ( = in3 in26))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in4 in18))) (not ( = in4 in19))) (not ( = in4 in20))) (not ( = in4 in21))) (not ( = in4 in22))) (not ( = in4 in23))) (not ( = in4 in24))) (not ( = in4 in25))) (not ( = in4 in26))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in5 in18))) (not ( = in5 in19))) (not ( = in5 in20))) (not ( = in5 in21))) (not ( = in5 in22))) (not ( = in5 in23))) (not ( = in5 in24))) (not ( = in5 in25))) (not ( = in5 in26))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in6 in18))) (not ( = in6 in19))) (not ( = in6 in20))) (not ( = in6 in21))) (not ( = in6 in22))) (not ( = in6 in23))) (not ( = in6 in24))) (not ( = in6 in25))) (not ( = in6 in26))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in7 in18))) (not ( = in7 in19))) (not ( = in7 in20))) (not ( = in7 in21))) (not ( = in7 in22))) (not ( = in7 in23))) (not ( = in7 in24))) (not ( = in7 in25))) (not ( = in7 in26))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in8 in18))) (not ( = in8 in19))) (not ( = in8 in20))) (not ( = in8 in21))) (not ( = in8 in22))) (not ( = in8 in23))) (not ( = in8 in24))) (not ( = in8 in25))) (not ( = in8 in26))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in9 in18))) (not ( = in9 in19))) (not ( = in9 in20))) (not ( = in9 in21))) (not ( = in9 in22))) (not ( = in9 in23))) (not ( = in9 in24))) (not ( = in9 in25))) (not ( = in9 in26))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in10 in18))) (not ( = in10 in19))) (not ( = in10 in20))) (not ( = in10 in21))) (not ( = in10 in22))) (not ( = in10 in23))) (not ( = in10 in24))) (not ( = in10 in25))) (not ( = in10 in26))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in11 in18))) (not ( = in11 in19))) (not ( = in11 in20))) (not ( = in11 in21))) (not ( = in11 in22))) (not ( = in11 in23))) (not ( = in11 in24))) (not ( = in11 in25))) (not ( = in11 in26))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in12 in18))) (not ( = in12 in19))) (not ( = in12 in20))) (not ( = in12 in21))) (not ( = in12 in22))) (not ( = in12 in23))) (not ( = in12 in24))) (not ( = in12 in25))) (not ( = in12 in26))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in13 in18))) (not ( = in13 in19))) (not ( = in13 in20))) (not ( = in13 in21))) (not ( = in13 in22))) (not ( = in13 in23))) (not ( = in13 in24))) (not ( = in13 in25))) (not ( = in13 in26))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in14 in18))) (not ( = in14 in19))) (not ( = in14 in20))) (not ( = in14 in21))) (not ( = in14 in22))) (not ( = in14 in23))) (not ( = in14 in24))) (not ( = in14 in25))) (not ( = in14 in26))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in15 in18))) (not ( = in15 in19))) (not ( = in15 in20))) (not ( = in15 in21))) (not ( = in15 in22))) (not ( = in15 in23))) (not ( = in15 in24))) (not ( = in15 in25))) (not ( = in15 in26))) (not ( = in16 in17))) (not ( = in16 in18))) (not ( = in16 in19))) (not ( = in16 in20))) (not ( = in16 in21))) (not ( = in16 in22))) (not ( = in16 in23))) (not ( = in16 in24))) (not ( = in16 in25))) (not ( = in16 in26))) (not ( = in17 in18))) (not ( = in17 in19))) (not ( = in17 in20))) (not ( = in17 in21))) (not ( = in17 in22))) (not ( = in17 in23))) (not ( = in17 in24))) (not ( = in17 in25))) (not ( = in17 in26))) (not ( = in18 in19))) (not ( = in18 in20))) (not ( = in18 in21))) (not ( = in18 in22))) (not ( = in18 in23))) (not ( = in18 in24))) (not ( = in18 in25))) (not ( = in18 in26))) (not ( = in19 in20))) (not ( = in19 in21))) (not ( = in19 in22))) (not ( = in19 in23))) (not ( = in19 in24))) (not ( = in19 in25))) (not ( = in19 in26))) (not ( = in20 in21))) (not ( = in20 in22))) (not ( = in20 in23))) (not ( = in20 in24))) (not ( = in20 in25))) (not ( = in20 in26))) (not ( = in21 in22))) (not ( = in21 in23))) (not ( = in21 in24))) (not ( = in21 in25))) (not ( = in21 in26))) (not ( = in22 in23))) (not ( = in22 in24))) (not ( = in22 in25))) (not ( = in22 in26))) (not ( = in23 in24))) (not ( = in23 in25))) (not ( = in23 in26))) (not ( = in24 in25))) (not ( = in24 in26))) (not ( = in25 in26))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in0 in5)) (not ( = in0 in6)) (not ( = in0 in7)) (not ( = in0 in8)) (not ( = in0 in9)) (not ( = in0 in10)) (not ( = in0 in11)) (not ( = in0 in12)) (not ( = in0 in13)) (not ( = in0 in14)) (not ( = in0 in15)) (not ( = in0 in16)) (not ( = in0 in17)) (not ( = in0 in18)) (not ( = in0 in19)) (not ( = in0 in20)) (not ( = in0 in21)) (not ( = in0 in22)) (not ( = in0 in23)) (not ( = in0 in24)) (not ( = in0 in25)) (not ( = in0 in26)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in1 in5)) (not ( = in1 in6)) (not ( = in1 in7)) (not ( = in1 in8)) (not ( = in1 in9)) (not ( = in1 in10)) (not ( = in1 in11)) (not ( = in1 in12)) (not ( = in1 in13)) (not ( = in1 in14)) (not ( = in1 in15)) (not ( = in1 in16)) (not ( = in1 in17)) (not ( = in1 in18)) (not ( = in1 in19)) (not ( = in1 in20)) (not ( = in1 in21)) (not ( = in1 in22)) (not ( = in1 in23)) (not ( = in1 in24)) (not ( = in1 in25)) (not ( = in1 in26)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in2 in5)) (not ( = in2 in6)) (not ( = in2 in7)) (not ( = in2 in8)) (not ( = in2 in9)) (not ( = in2 in10)) (not ( = in2 in11)) (not ( = in2 in12)) (not ( = in2 in13)) (not ( = in2 in14)) (not ( = in2 in15)) (not ( = in2 in16)) (not ( = in2 in17)) (not ( = in2 in18)) (not ( = in2 in19)) (not ( = in2 in20)) (not ( = in2 in21)) (not ( = in2 in22)) (not ( = in2 in23)) (not ( = in2 in24)) (not ( = in2 in25)) (not ( = in2 in26)) (not ( = in3 in4)) (not ( = in3 in5)) (not ( = in3 in6)) (not ( = in3 in7)) (not ( = in3 in8)) (not ( = in3 in9)) (not ( = in3 in10)) (not ( = in3 in11)) (not ( = in3 in12)) (not ( = in3 in13)) (not ( = in3 in14)) (not ( = in3 in15)) (not ( = in3 in16)) (not ( = in3 in17)) (not ( = in3 in18)) (not ( = in3 in19)) (not ( = in3 in20)) (not ( = in3 in21)) (not ( = in3 in22)) (not ( = in3 in23)) (not ( = in3 in24)) (not ( = in3 in25)) (not ( = in3 in26)) (not ( = in4 in5)) (not ( = in4 in6)) (not ( = in4 in7)) (not ( = in4 in8)) (not ( = in4 in9)) (not ( = in4 in10)) (not ( = in4 in11)) (not ( = in4 in12)) (not ( = in4 in13)) (not ( = in4 in14)) (not ( = in4 in15)) (not ( = in4 in16)) (not ( = in4 in17)) (not ( = in4 in18)) (not ( = in4 in19)) (not ( = in4 in20)) (not ( = in4 in21)) (not ( = in4 in22)) (not ( = in4 in23)) (not ( = in4 in24)) (not ( = in4 in25)) (not ( = in4 in26)) (not ( = in5 in6)) (not ( = in5 in7)) (not ( = in5 in8)) (not ( = in5 in9)) (not ( = in5 in10)) (not ( = in5 in11)) (not ( = in5 in12)) (not ( = in5 in13)) (not ( = in5 in14)) (not ( = in5 in15)) (not ( = in5 in16)) (not ( = in5 in17)) (not ( = in5 in18)) (not ( = in5 in19)) (not ( = in5 in20)) (not ( = in5 in21)) (not ( = in5 in22)) (not ( = in5 in23)) (not ( = in5 in24)) (not ( = in5 in25)) (not ( = in5 in26)) (not ( = in6 in7)) (not ( = in6 in8)) (not ( = in6 in9)) (not ( = in6 in10)) (not ( = in6 in11)) (not ( = in6 in12)) (not ( = in6 in13)) (not ( = in6 in14)) (not ( = in6 in15)) (not ( = in6 in16)) (not ( = in6 in17)) (not ( = in6 in18)) (not ( = in6 in19)) (not ( = in6 in20)) (not ( = in6 in21)) (not ( = in6 in22)) (not ( = in6 in23)) (not ( = in6 in24)) (not ( = in6 in25)) (not ( = in6 in26)) (not ( = in7 in8)) (not ( = in7 in9)) (not ( = in7 in10)) (not ( = in7 in11)) (not ( = in7 in12)) (not ( = in7 in13)) (not ( = in7 in14)) (not ( = in7 in15)) (not ( = in7 in16)) (not ( = in7 in17)) (not ( = in7 in18)) (not ( = in7 in19)) (not ( = in7 in20)) (not ( = in7 in21)) (not ( = in7 in22)) (not ( = in7 in23)) (not ( = in7 in24)) (not ( = in7 in25)) (not ( = in7 in26)) (not ( = in8 in9)) (not ( = in8 in10)) (not ( = in8 in11)) (not ( = in8 in12)) (not ( = in8 in13)) (not ( = in8 in14)) (not ( = in8 in15)) (not ( = in8 in16)) (not ( = in8 in17)) (not ( = in8 in18)) (not ( = in8 in19)) (not ( = in8 in20)) (not ( = in8 in21)) (not ( = in8 in22)) (not ( = in8 in23)) (not ( = in8 in24)) (not ( = in8 in25)) (not ( = in8 in26)) (not ( = in9 in10)) (not ( = in9 in11)) (not ( = in9 in12)) (not ( = in9 in13)) (not ( = in9 in14)) (not ( = in9 in15)) (not ( = in9 in16)) (not ( = in9 in17)) (not ( = in9 in18)) (not ( = in9 in19)) (not ( = in9 in20)) (not ( = in9 in21)) (not ( = in9 in22)) (not ( = in9 in23)) (not ( = in9 in24)) (not ( = in9 in25)) (not ( = in9 in26)) (not ( = in10 in11)) (not ( = in10 in12)) (not ( = in10 in13)) (not ( = in10 in14)) (not ( = in10 in15)) (not ( = in10 in16)) (not ( = in10 in17)) (not ( = in10 in18)) (not ( = in10 in19)) (not ( = in10 in20)) (not ( = in10 in21)) (not ( = in10 in22)) (not ( = in10 in23)) (not ( = in10 in24)) (not ( = in10 in25)) (not ( = in10 in26)) (not ( = in11 in12)) (not ( = in11 in13)) (not ( = in11 in14)) (not ( = in11 in15)) (not ( = in11 in16)) (not ( = in11 in17)) (not ( = in11 in18)) (not ( = in11 in19)) (not ( = in11 in20)) (not ( = in11 in21)) (not ( = in11 in22)) (not ( = in11 in23)) (not ( = in11 in24)) (not ( = in11 in25)) (not ( = in11 in26)) (not ( = in12 in13)) (not ( = in12 in14)) (not ( = in12 in15)) (not ( = in12 in16)) (not ( = in12 in17)) (not ( = in12 in18)) (not ( = in12 in19)) (not ( = in12 in20)) (not ( = in12 in21)) (not ( = in12 in22)) (not ( = in12 in23)) (not ( = in12 in24)) (not ( = in12 in25)) (not ( = in12 in26)) (not ( = in13 in14)) (not ( = in13 in15)) (not ( = in13 in16)) (not ( = in13 in17)) (not ( = in13 in18)) (not ( = in13 in19)) (not ( = in13 in20)) (not ( = in13 in21)) (not ( = in13 in22)) (not ( = in13 in23)) (not ( = in13 in24)) (not ( = in13 in25)) (not ( = in13 in26)) (not ( = in14 in15)) (not ( = in14 in16)) (not ( = in14 in17)) (not ( = in14 in18)) (not ( = in14 in19)) (not ( = in14 in20)) (not ( = in14 in21)) (not ( = in14 in22)) (not ( = in14 in23)) (not ( = in14 in24)) (not ( = in14 in25)) (not ( = in14 in26)) (not ( = in15 in16)) (not ( = in15 in17)) (not ( = in15 in18)) (not ( = in15 in19)) (not ( = in15 in20)) (not ( = in15 in21)) (not ( = in15 in22)) (not ( = in15 in23)) (not ( = in15 in24)) (not ( = in15 in25)) (not ( = in15 in26)) (not ( = in16 in17)) (not ( = in16 in18)) (not ( = in16 in19)) (not ( = in16 in20)) (not ( = in16 in21)) (not ( = in16 in22)) (not ( = in16 in23)) (not ( = in16 in24)) (not ( = in16 in25)) (not ( = in16 in26)) (not ( = in17 in18)) (not ( = in17 in19)) (not ( = in17 in20)) (not ( = in17 in21)) (not ( = in17 in22)) (not ( = in17 in23)) (not ( = in17 in24)) (not ( = in17 in25)) (not ( = in17 in26)) (not ( = in18 in19)) (not ( = in18 in20)) (not ( = in18 in21)) (not ( = in18 in22)) (not ( = in18 in23)) (not ( = in18 in24)) (not ( = in18 in25)) (not ( = in18 in26)) (not ( = in19 in20)) (not ( = in19 in21)) (not ( = in19 in22)) (not ( = in19 in23)) (not ( = in19 in24)) (not ( = in19 in25)) (not ( = in19 in26)) (not ( = in20 in21)) (not ( = in20 in22)) (not ( = in20 in23)) (not ( = in20 in24)) (not ( = in20 in25)) (not ( = in20 in26)) (not ( = in21 in22)) (not ( = in21 in23)) (not ( = in21 in24)) (not ( = in21 in25)) (not ( = in21 in26)) (not ( = in22 in23)) (not ( = in22 in24)) (not ( = in22 in25)) (not ( = in22 in26)) (not ( = in23 in24)) (not ( = in23 in25)) (not ( = in23 in26)) (not ( = in24 in25)) (not ( = in24 in26)) (not ( = in25 in26))))",
        "equivalent": true
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in0 in18))) (not ( = in0 in19))) (not ( = in0 in20))) (not ( = in0 in21))) (not ( = in0 in22))) (not ( = in0 in23))) (not ( = in0 in24))) (not ( = in0 in25))) (not ( = in0 in26))) (not ( = in0 in27))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in1 in18))) (not ( = in1 in19))) (not ( = in1 in20))) (not ( = in1 in21))) (not ( = in1 in22))) (not ( = in1 in23))) (not ( = in1 in24))) (not ( = in1 in25))) (not ( = in1 in26))) (not ( = in1 in27))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in2 in18))) (not ( = in2 in19))) (not ( = in2 in20))) (not ( = in2 in21))) (not ( = in2 in22))) (not ( = in2 in23))) (not ( = in2 in24))) (not ( = in2 in25))) (not ( = in2 in26))) (not ( = in2 in27))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in3 in18))) (not ( = in3 in19))) (not ( = in3 in20))) (not ( = in3 in21))) (not ( = in3 in22))) (not ( = in3 in23))) (not ( = in3 in24))) (not ( = in3 in25))) (not ( = in3 in26))) (not ( = in3 in27))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in4 in18))) (not ( = in4 in19))) (not ( = in4 in20))) (not ( = in4 in21))) (not ( = in4 in22))) (not ( = in4 in23))) (not ( = in4 in24))) (not ( = in4 in25))) (not ( = in4 in26))) (not ( = in4 in27))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in5 in18))) (not ( = in5 in19))) (not ( = in5 in20))) (not ( = in5 in21))) (not ( = in5 in22))) (not ( = in5 in23))) (not ( = in5 in24))) (not ( = in5 in25))) (not ( = in5 in26))) (not ( = in5 in27))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in6 in18))) (not ( = in6 in19))) (not ( = in6 in20))) (not ( = in6 in21))) (not ( = in6 in22))) (not ( = in6 in23))) (not ( = in6 in24))) (not ( = in6 in25))) (not ( = in6 in26))) (not ( = in6 in27))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in7 in18))) (not ( = in7 in19))) (not ( = in7 in20))) (not ( = in7 in21))) (not ( = in7 in22))) (not ( = in7 in23))) (not ( = in7 in24))) (not ( = in7 in25))) (not ( = in7 in26))) (not ( = in7 in27))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in8 in18))) (not ( = in8 in19))) (not ( = in8 in20))) (not ( = in8 in21))) (not ( = in8 in22))) (not ( = in8 in23))) (not ( = in8 in24))) (not ( = in8 in25))) (not ( = in8 in26))) (not ( = in8 in27))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in9 in18))) (not ( = in9 in19))) (not ( = in9 in20))) (not ( = in9 in21))) (not ( = in9 in22))) (not ( = in9 in23))) (not ( = in9 in24))) (not ( = in9 in25))) (not ( = in9 in26))) (not ( = in9 in27))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in10 in18))) (not ( = in10 in19))) (not ( = in10 in20))) (not ( = in10 in21))) (not ( = in10 in22))) (not ( = in10 in23))) (not ( = in10 in24))) (not ( = in10 in25))) (not ( = in10 in26))) (not ( = in10 in27))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in11 in18))) (not ( = in11 in19))) (not ( = in11 in20))) (not ( = in11 in21))) (not ( = in11 in22))) (not ( = in11 in23))) (not ( = in11 in24))) (not ( = in11 in25))) (not ( = in11 in26))) (not ( = in11 in27))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in12 in18))) (not ( = in12 in19))) (not ( = in12 in20))) (not ( = in12 in21))) (not ( = in12 in22))) (not ( = in12 in23))) (not ( = in12 in24))) (not ( = in12 in25))) (not ( = in12 in26))) (not ( = in12 in27))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in13 in18))) (not ( = in13 in19))) (not ( = in13 in20))) (not ( = in13 in21))) (not ( = in13 in22))) (not ( = in13 in23))) (not ( = in13 in24))) (not ( = in13 in25))) (not ( = in13 in26))) (not ( = in13 in27))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in14 in18))) (not ( = in14 in19))) (not ( = in14 in20))) (not ( = in14 in21))) (not ( = in14 in22))) (not ( = in14 in23))) (not ( = in14 in24))) (not ( = in14 in25))) (not ( = in14 in26))) (not ( = in14 in27))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in15 in18))) (not ( = in15 in19))) (not ( = in15 in20))) (not ( = in15 in21))) (not ( = in15 in22))) (not ( = in15 in23))) (not ( = in15 in24))) (not ( = in15 in25))) (not ( = in15 in26))) (not ( = in15 in27))) (not ( = in16 in17))) (not ( = in16 in18))) (not ( = in16 in19))) (not ( = in16 in20))) (not ( = in16 in21))) (not ( = in16 in22))) (not ( = in16 in23))) (not ( = in16 in24))) (not ( = in16 in25))) (not ( = in16 in26))) (not ( = in16 in27))) (not ( = in17 in18))) (not ( = in17 in19))) (not ( = in17 in20))) (not ( = in17 in21))) (not ( = in17 in22))) (not ( = in17 in23))) (not ( = in17 in24))) (not ( = in17 in25))) (not ( = in17 in26))) (not ( = in17 in27))) (not ( = in18 in19))) (not ( = in18 in20))) (not ( = in18 in21))) (not ( = in18 in22))) (not ( = in18 in23))) (not ( = in18 in24))) (not ( = in18 in25))) (not ( = in18 in26))) (not ( = in18 in27))) (not ( = in19 in20))) (not ( = in19 in21))) (not ( = in19 in22))) (not ( = in19 in23))) (not ( = in19 in24))) (not ( = in19 in25))) (not ( = in19 in26))) (not ( = in19 in27))) (not ( = in20 in21))) (not ( = in20 in22))) (not ( = in20 in23))) (not ( = in20 in24))) (not ( = in20 in25))) (not ( = in20 in26))) (not ( = in20 in27))) (not ( = in21 in22))) (not ( = in21 in23))) (not ( = in21 in24))) (not ( = in21 in25))) (not ( = in21 in26))) (not ( = in21 in27))) (not ( = in22 in23))) (not ( = in22 in24))) (not ( = in22 in25))) (not ( = in22 in26))) (not ( = in22 in27))) (not ( = in23 in24))) (not ( = in23 in25))) (not ( = in23 in26))) (not ( = in23 in27))) (not ( = in24 in25))) (not ( = in24 in26))) (not ( = in24 in27))) (not ( = in25 in26))) (not ( = in25 in27))) (not ( = in26 in27))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in0 in5)) (not ( = in0 in6)) (not ( = in0 in7)) (not ( = in0 in8)) (not ( = in0 in9)) (not ( = in0 in10)) (not ( = in0 in11)) (not ( = in0 in12)) (not ( = in0 in13)) (not ( = in0 in14)) (not ( = in0 in15)) (not ( = in0 in16)) (not ( = in0 in17)) (not ( = in0 in18)) (not ( = in0 in19)) (not ( = in0 in20)) (not ( = in0 in21)) (not ( = in0 in22)) (not ( = in0 in23)) (not ( = in0 in24)) (not ( = in0 in25)) (not ( = in0 in26)) (not ( = in0 in27)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in1 in5)) (not ( = in1 in6)) (not ( = in1 in7)) (not ( = in1 in8)) (not ( = in1 in9)) (not ( = in1 in10)) (not ( = in1 in11)) (not ( = in1 in12)) (not ( = in1 in13)) (not ( = in1 in14)) (not ( = in1 in15)) (not ( = in1 in16)) (not ( = in1 in17)) (not ( = in1 in18)) (not ( = in1 in19)) (not ( = in1 in20)) (not ( = in1 in21)) (not ( = in1 in22)) (not ( = in1 in23)) (not ( = in1 in24)) (not ( = in1 in25)) (not ( = in1 in26)) (not ( = in1 in27)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in2 in5)) (not ( = in2 in6)) (not ( = in2 in7)) (not ( = in2 in8)) (not ( = in2 in9)) (not ( = in2 in10)) (not ( = in2 in11)) (not ( = in2 in12)) (not ( = in2 in13)) (not ( = in2 in14)) (not ( = in2 in15)) (not ( = in2 in16)) (not ( = in2 in17)) (not ( = in2 in18)) (not ( = in2 in19)) (not ( = in2 in20)) (not ( = in2 in21)) (not ( = in2 in22)) (not ( = in2 in23)) (not ( = in2 in24)) (not ( = in2 in25)) (not ( = in2 in26)) (not ( = in2 in27)) (not ( = in3 in4)) (not ( = in3 in5)) (not ( = in3 in6)) (not ( = in3 in7)) (not ( = in3 in8)) (not ( = in3 in9)) (not ( = in3 in10)) (not ( = in3 in11)) (not ( = in3 in12)) (not ( = in3 in13)) (not ( = in3 in14)) (not ( = in3 in15)) (not ( = in3 in16)) (not ( = in3 in17)) (not ( = in3 in18)) (not ( = in3 in19)) (not ( = in3 in20)) (not ( = in3 in21)) (not ( = in3 in22)) (not ( = in3 in23)) (not ( = in3 in24)) (not ( = in3 in25)) (not ( = in3 in26)) (not ( = in3 in27)) (not ( = in4 in5)) (not ( = in4 in6)) (not ( = in4 in7)) (not ( = in4 in8)) (not ( = in4 in9)) (not ( = in4 in10)) (not ( = in4 in11)) (not ( = in4 in12)) (not ( = in4 in13)) (not ( = in4 in14)) (not ( = in4 in15)) (not ( = in4 in16)) (not ( = in4 in17)) (not ( = in4 in18)) (not ( = in4 in19)) (not ( = in4 in20)) (not ( = in4 in21)) (not ( = in4 in22)) (not ( = in4 in23)) (not ( = in4 in24)) (not ( = in4 in25)) (not ( = in4 in26)) (not ( = in4 in27)) (not ( = in5 in6)) (not ( = in5 in7)) (not ( = in5 in8)) (not ( = in5 in9)) (not ( = in5 in10)) (not ( = in5 in11)) (not ( = in5 in12)) (not ( = in5 in13)) (not ( = in5 in14)) (not ( = in5 in15)) (not ( = in5 in16)) (not ( = in5 in17)) (not ( = in5 in18)) (not ( = in5 in19)) (not ( = in5 in20)) (not ( = in5 in21)) (not ( = in5 in22)) (not ( = in5 in23)) (not ( = in5 in24)) (not ( = in5 in25)) (not ( = in5 in26)) (not ( = in5 in27)) (not ( = in6 in7)) (not ( = in6 in8)) (not ( = in6 in9)) (not ( = in6 in10)) (not ( = in6 in11)) (not ( = in6 in12)) (not ( = in6 in13)) (not ( = in6 in14)) (not ( = in6 in15)) (not ( = in6 in16)) (not ( = in6 in17)) (not ( = in6 in18)) (not ( = in6 in19)) (not ( = in6 in20)) (not ( = in6 in21)) (not ( = in6 in22)) (not ( = in6 in23)) (not ( = in6 in24)) (not ( = in6 in25)) (not ( = in6 in26)) (not ( = in6 in27)) (not ( = in7 in8)) (not ( = in7 in9)) (not ( = in7 in10)) (not ( = in7 in11)) (not ( = in7 in12)) (not ( = in7 in13)) (not ( = in7 in14)) (not ( = in7 in15)) (not ( = in7 in16)) (not ( = in7 in17)) (not ( = in7 in18)) (not ( = in7 in19)) (not ( = in7 in20)) (not ( = in7 in21)) (not ( = in7 in22)) (not ( = in7 in23)) (not ( = in7 in24)) (not ( = in7 in25)) (not ( = in7 in26)) (not ( = in7 in27)) (not ( = in8 in9)) (not ( = in8 in10)) (not ( = in8 in11)) (not ( = in8 in12)) (not ( = in8 in13)) (not ( = in8 in14)) (not ( = in8 in15)) (not ( = in8 in16)) (not ( = in8 in17)) (not ( = in8 in18)) (not ( = in8 in19)) (not ( = in8 in20)) (not ( = in8 in21)) (not ( = in8 in22)) (not ( = in8 in23)) (not ( = in8 in24)) (not ( = in8 in25)) (not ( = in8 in26)) (not ( = in8 in27)) (not ( = in9 in10)) (not ( = in9 in11)) (not ( = in9 in12)) (not ( = in9 in13)) (not ( = in9 in14)) (not ( = in9 in15)) (not ( = in9 in16)) (not ( = in9 in17)) (not ( = in9 in18)) (not ( = in9 in19)) (not ( = in9 in20)) (not ( = in9 in21)) (not ( = in9 in22)) (not ( = in9 in23)) (not ( = in9 in24)) (not ( = in9 in25)) (not ( = in9 in26)) (not ( = in9 in27)) (not ( = in10 in11)) (not ( = in10 in12)) (not ( = in10 in13)) (not ( = in10 in14)) (not ( = in10 in15)) (not ( = in10 in16)) (not ( = in10 in17)) (not ( = in10 in18)) (not ( = in10 in19)) (not ( = in10 in20)) (not ( = in10 in21)) (not ( = in10 in22)) (not ( = in10 in23)) (not ( = in10 in24)) (not ( = in10 in25)) (not ( = in10 in26)) (not ( = in10 in27)) (not ( = in11 in12)) (not ( = in11 in13)) (not ( = in11 in14)) (not ( = in11 in15)) (not ( = in11 in16)) (not ( = in11 in17)) (not ( = in11 in18)) (not ( = in11 in19)) (not ( = in11 in20)) (not ( = in11 in21)) (not ( = in11 in22)) (not ( = in11 in23)) (not ( = in11 in24)) (not ( = in11 in25)) (not ( = in11 in26)) (not ( = in11 in27)) (not ( = in12 in13)) (not ( = in12 in14)) (not ( = in12 in15)) (not ( = in12 in16)) (not ( = in12 in17)) (not ( = in12 in18)) (not ( = in12 in19)) (not ( = in12 in20)) (not ( = in12 in21)) (not ( = in12 in22)) (not ( = in12 in23)) (not ( = in12 in24)) (not ( = in12 in25)) (not ( = in12 in26)) (not ( = in12 in27)) (not ( = in13 in14)) (not ( = in13 in15)) (not ( = in13 in16)) (not ( = in13 in17)) (not ( = in13 in18)) (not ( = in13 in19)) (not ( = in13 in20)) (not ( = in13 in21)) (not ( = in13 in22)) (not ( = in13 in23)) (not ( = in13 in24)) (not ( = in13 in25)) (not ( = in13 in26)) (not ( = in13 in27)) (not ( = in14 in15)) (not ( = in14 in16)) (not ( = in14 in17)) (not ( = in14 in18)) (not ( = in14 in19)) (not ( = in14 in20)) (not ( = in14 in21)) (not ( = in14 in22)) (not ( = in14 in23)) (not ( = in14 in24)) (not ( = in14 in25)) (not ( = in14 in26)) (not ( = in14 in27)) (not ( = in15 in16)) (not ( = in15 in17)) (not ( = in15 in18)) (not ( = in15 in19)) (not ( = in15 in20)) (not ( = in15 in21)) (not ( = in15 in22)) (not ( = in15 in23)) (not ( = in15 in24)) (not ( = in15 in25)) (not ( = in15 in26)) (not ( = in15 in27)) (not ( = in16 in17)) (not ( = in16 in18)) (not ( = in16 in19)) (not ( = in16 in20)) (not ( = in16 in21)) (not ( = in16 in22)) (not ( = in16 in23)) (not ( = in16 in24)) (not ( = in16 in25)) (not ( = in16 in26)) (not ( = in16 in27)) (not ( = in17 in18)) (not ( = in17 in19)) (not ( = in17 in20)) (not ( = in17 in21)) (not ( = in17 in22)) (not ( = in17 in23)) (not ( = in17 in24)) (not ( = in17 in25)) (not ( = in17 in26)) (not ( = in17 in27)) (not ( = in18 in19)) (not ( = in18 in20)) (not ( = in18 in21)) (not ( = in18 in22)) (not ( = in18 in23)) (not ( = in18 in24)) (not ( = in18 in25)) (not ( = in18 in26)) (not ( = in18 in27)) (not ( = in19 in20)) (not ( = in19 in21)) (not ( = in19 in22)) (not ( = in19 in23)) (not ( = in19 in24)) (not ( = in19 in25)) (not ( = in19 in26)) (not ( = in19 in27)) (not ( = in20 in21)) (not ( = in20 in22)) (not ( = in20 in23)) (not ( = in20 in24)) (not ( = in20 in25)) (not ( = in20 in26)) (not ( = in20 in27)) (not ( = in21 in22)) (not ( = in21 in23)) (not ( = in21 in24)) (not ( = in21 in25)) (not ( = in21 in26)) (not ( = in21 in27)) (not ( = in22 in23)) (not ( = in22 in24)) (not ( = in22 in25)) (not ( = in22 in26)) (not ( = in22 in27)) (not ( = in23 in24)) (not ( = in23 in25)) (not ( = in23 in26)) (not ( = in23 in27)) (not ( = in24 in25)) (not ( = in24 in26)) (not ( = in24 in27)) (not ( = in25 in26)) (not ( = in25 in27)) (not ( = in26 in27))))",
        "equivalent": true
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in0 in18))) (not ( = in0 in19))) (not ( = in0 in20))) (not ( = in0 in21))) (not ( = in0 in22))) (not ( = in0 in23))) (not ( = in0 in24))) (not ( = in0 in25))) (not ( = in0 in26))) (not ( = in0 in27))) (not ( = in0 in28))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in1 in18))) (not ( = in1 in19))) (not ( = in1 in20))) (not ( = in1 in21))) (not ( = in1 in22))) (not ( = in1 in23))) (not ( = in1 in24))) (not ( = in1 in25))) (not ( = in1 in26))) (not ( = in1 in27))) (not ( = in1 in28))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in2 in18))) (not ( = in2 in19))) (not ( = in2 in20))) (not ( = in2 in21))) (not ( = in2 in22))) (not ( = in2 in23))) (not ( = in2 in24))) (not ( = in2 in25))) (not ( = in2 in26))) (not ( = in2 in27))) (not ( = in2 in28))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in3 in18))) (not ( = in3 in19))) (not ( = in3 in20))) (not ( = in3 in21))) (not ( = in3 in22))) (not ( = in3 in23))) (not ( = in3 in24))) (not ( = in3 in25))) (not ( = in3 in26))) (not ( = in3 in27))) (not ( = in3 in28))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in4 in18))) (not ( = in4 in19))) (not ( = in4 in20))) (not ( = in4 in21))) (not ( = in4 in22))) (not ( = in4 in23))) (not ( = in4 in24))) (not ( = in4 in25))) (not ( = in4 in26))) (not ( = in4 in27))) (not ( = in4 in28))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in5 in18))) (not ( = in5 in19))) (not ( = in5 in20))) (not ( = in5 in21))) (not ( = in5 in22))) (not ( = in5 in23))) (not ( = in5 in24))) (not ( = in5 in25))) (not ( = in5 in26))) (not ( = in5 in27))) (not ( = in5 in28))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in6 in18))) (not ( = in6 in19))) (not ( = in6 in20))) (not ( = in6 in21))) (not ( = in6 in22))) (not ( = in6 in23))) (not ( = in6 in24))) (not ( = in6 in25))) (not ( = in6 in26))) (not ( = in6 in27))) (not ( = in6 in28))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in7 in18))) (not ( = in7 in19))) (not ( = in7 in20))) (not ( = in7 in21))) (not ( = in7 in22))) (not ( = in7 in23))) (not ( = in7 in24))) (not ( = in7 in25))) (not ( = in7 in26))) (not ( = in7 in27))) (not ( = in7 in28))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in8 in18))) (not ( = in8 in19))) (not ( = in8 in20))) (not ( = in8 in21))) (not ( = in8 in22))) (not ( = in8 in23))) (not ( = in8 in24))) (not ( = in8 in25))) (not ( = in8 in26))) (not ( = in8 in27))) (not ( = in8 in28))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in9 in18))) (not ( = in9 in19))) (not ( = in9 in20))) (not ( = in9 in21))) (not ( = in9 in22))) (not ( = in9 in23))) (not ( = in9 in24))) (not ( = in9 in25))) (not ( = in9 in26))) (not ( = in9 in27))) (not ( = in9 in28))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in10 in18))) (not ( = in10 in19))) (not ( = in10 in20))) (not ( = in10 in21))) (not ( = in10 in22))) (not ( = in10 in23))) (not ( = in10 in24))) (not ( = in10 in25))) (not ( = in10 in26))) (not ( = in10 in27))) (not ( = in10 in28))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in11 in18))) (not ( = in11 in19))) (not ( = in11 in20))) (not ( = in11 in21))) (not ( = in11 in22))) (not ( = in11 in23))) (not ( = in11 in24))) (not ( = in11 in25))) (not ( = in11 in26))) (not ( = in11 in27))) (not ( = in11 in28))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in12 in18))) (not ( = in12 in19))) (not ( = in12 in20))) (not ( = in12 in21))) (not ( = in12 in22))) (not ( = in12 in23))) (not ( = in12 in24))) (not ( = in12 in25))) (not ( = in12 in26))) (not ( = in12 in27))) (not ( = in12 in28))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in13 in18))) (not ( = in13 in19))) (not ( = in13 in20))) (not ( = in13 in21))) (not ( = in13 in22))) (not ( = in13 in23))) (not ( = in13 in24))) (not ( = in13 in25))) (not ( = in13 in26))) (not ( = in13 in27))) (not ( = in13 in28))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in14 in18))) (not ( = in14 in19))) (not ( = in14 in20))) (not ( = in14 in21))) (not ( = in14 in22))) (not ( = in14 in23))) (not ( = in14 in24))) (not ( = in14 in25))) (not ( = in14 in26))) (not ( = in14 in27))) (not ( = in14 in28))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in15 in18))) (not ( = in15 in19))) (not ( = in15 in20))) (not ( = in15 in21))) (not ( = in15 in22))) (not ( = in15 in23))) (not ( = in15 in24))) (not ( = in15 in25))) (not ( = in15 in26))) (not ( = in15 in27))) (not ( = in15 in28))) (not ( = in16 in17))) (not ( = in16 in18))) (not ( = in16 in19))) (not ( = in16 in20))) (not ( = in16 in21))) (not ( = in16 in22))) (not ( = in16 in23))) (not ( = in16 in24))) (not ( = in16 in25))) (not ( = in16 in26))) (not ( = in16 in27))) (not ( = in16 in28))) (not ( = in17 in18))) (not ( = in17 in19))) (not ( = in17 in20))) (not ( = in17 in21))) (not ( = in17 in22))) (not ( = in17 in23))) (not ( = in17 in24))) (not ( = in17 in25))) (not ( = in17 in26))) (not ( = in17 in27))) (not ( = in17 in28))) (not ( = in18 in19))) (not ( = in18 in20))) (not ( = in18 in21))) (not ( = in18 in22))) (not ( = in18 in23))) (not ( = in18 in24))) (not ( = in18 in25))) (not ( = in18 in26))) (not ( = in18 in27))) (not ( = in18 in28))) (not ( = in19 in20))) (not ( = in19 in21))) (not ( = in19 in22))) (not ( = in19 in23))) (not ( = in19 in24))) (not ( = in19 in25))) (not ( = in19 in26))) (not ( = in19 in27))) (not ( = in19 in28))) (not ( = in20 in21))) (not ( = in20 in22))) (not ( = in20 in23))) (not ( = in20 in24))) (not ( = in20 in25))) (not ( = in20 in26))) (not ( = in20 in27))) (not ( = in20 in28))) (not ( = in21 in22))) (not ( = in21 in23))) (not ( = in21 in24))) (not ( = in21 in25))) (not ( = in21 in26))) (not ( = in21 in27))) (not ( = in21 in28))) (not ( = in22 in23))) (not ( = in22 in24))) (not ( = in22 in25))) (not ( = in22 in26))) (not ( = in22 in27))) (not ( = in22 in28))) (not ( = in23 in24))) (not ( = in23 in25))) (not ( = in23 in26))) (not ( = in23 in27))) (not ( = in23 in28))) (not ( = in24 in25))) (not ( = in24 in26))) (not ( = in24 in27))) (not ( = in24 in28))) (not ( = in25 in26))) (not ( = in25 in27))) (not ( = in25 in28))) (not ( = in26 in27))) (not ( = in26 in28))) (not ( = in27 in28))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in0 in5)) (not ( = in0 in6)) (not ( = in0 in7)) (not ( = in0 in8)) (not ( = in0 in9)) (not ( = in0 in10)) (not ( = in0 in11)) (not ( = in0 in12)) (not ( = in0 in13)) (not ( = in0 in14)) (not ( = in0 in15)) (not ( = in0 in16)) (not ( = in0 in17)) (not ( = in0 in18)) (not ( = in0 in19)) (not ( = in0 in20)) (not ( = in0 in21)) (not ( = in0 in22)) (not ( = in0 in23)) (not ( = in0 in24)) (not ( = in0 in25)) (not ( = in0 in26)) (not ( = in0 in27)) (not ( = in0 in28)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in1 in5)) (not ( = in1 in6)) (not ( = in1 in7)) (not ( = in1 in8)) (not ( = in1 in9)) (not ( = in1 in10)) (not ( = in1 in11)) (not ( = in1 in12)) (not ( = in1 in13)) (not ( = in1 in14)) (not ( = in1 in15)) (not ( = in1 in16)) (not ( = in1 in17)) (not ( = in1 in18)) (not ( = in1 in19)) (not ( = in1 in20)) (not ( = in1 in21)) (not ( = in1 in22)) (not ( = in1 in23)) (not ( = in1 in24)) (not ( = in1 in25)) (not ( = in1 in26)) (not ( = in1 in27)) (not ( = in1 in28)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in2 in5)) (not ( = in2 in6)) (not ( = in2 in7)) (not ( = in2 in8)) (not ( = in2 in9)) (not ( = in2 in10)) (not ( = in2 in11)) (not ( = in2 in12)) (not ( = in2 in13)) (not ( = in2 in14)) (not ( = in2 in15)) (not ( = in2 in16)) (not ( = in2 in17)) (not ( = in2 in18)) (not ( = in2 in19)) (not ( = in2 in20)) (not ( = in2 in21)) (not ( = in2 in22)) (not ( = in2 in23)) (not ( = in2 in24)) (not ( = in2 in25)) (not ( = in2 in26)) (not ( = in2 in27)) (not ( = in2 in28)) (not ( = in3 in4)) (not ( = in3 in5)) (not ( = in3 in6)) (not ( = in3 in7)) (not ( = in3 in8)) (not ( = in3 in9)) (not ( = in3 in10)) (not ( = in3 in11)) (not ( = in3 in12)) (not ( = in3 in13)) (not ( = in3 in14)) (not ( = in3 in15)) (not ( = in3 in16)) (not ( = in3 in17)) (not ( = in3 in18)) (not ( = in3 in19)) (not ( = in3 in20)) (not ( = in3 in21)) (not ( = in3 in22)) (not ( = in3 in23)) (not ( = in3 in24)) (not ( = in3 in25)) (not ( = in3 in26)) (not ( = in3 in27)) (not ( = in3 in28)) (not ( = in4 in5)) (not ( = in4 in6)) (not ( = in4 in7)) (not ( = in4 in8)) (not ( = in4 in9)) (not ( = in4 in10)) (not ( = in4 in11)) (not ( = in4 in12)) (not ( = in4 in13)) (not ( = in4 in14)) (not ( = in4 in15)) (not ( = in4 in16)) (not ( = in4 in17)) (not ( = in4 in18)) (not ( = in4 in19)) (not ( = in4 in20)) (not ( = in4 in21)) (not ( = in4 in22)) (not ( = in4 in23)) (not ( = in4 in24)) (not ( = in4 in25)) (not ( = in4 in26)) (not ( = in4 in27)) (not ( = in4 in28)) (not ( = in5 in6)) (not ( = in5 in7)) (not ( = in5 in8)) (not ( = in5 in9)) (not ( = in5 in10)) (not ( = in5 in11)) (not ( = in5 in12)) (not ( = in5 in13)) (not ( = in5 in14)) (not ( = in5 in15)) (not ( = in5 in16)) (not ( = in5 in17)) (not ( = in5 in18)) (not ( = in5 in19)) (not ( = in5 in20)) (not ( = in5 in21)) (not ( = in5 in22)) (not ( = in5 in23)) (not ( = in5 in24)) (not ( = in5 in25)) (not ( = in5 in26)) (not ( = in5 in27)) (not ( = in5 in28)) (not ( = in6 in7)) (not ( = in6 in8)) (not ( = in6 in9)) (not ( = in6 in10)) (not ( = in6 in11)) (not ( = in6 in12)) (not ( = in6 in13)) (not ( = in6 in14)) (not ( = in6 in15)) (not ( = in6 in16)) (not ( = in6 in17)) (not ( = in6 in18)) (not ( = in6 in19)) (not ( = in6 in20)) (not ( = in6 in21)) (not ( = in6 in22)) (not ( = in6 in23)) (not ( = in6 in24)) (not ( = in6 in25)) (not ( = in6 in26)) (not ( = in6 in27)) (not ( = in6 in28)) (not ( = in7 in8)) (not ( = in7 in9)) (not ( = in7 in10)) (not ( = in7 in11)) (not ( = in7 in12)) (not ( = in7 in13)) (not ( = in7 in14)) (not ( = in7 in15)) (not ( = in7 in16)) (not ( = in7 in17)) (not ( = in7 in18)) (not ( = in7 in19)) (not ( = in7 in20)) (not ( = in7 in21)) (not ( = in7 in22)) (not ( = in7 in23)) (not ( = in7 in24)) (not ( = in7 in25)) (not ( = in7 in26)) (not ( = in7 in27)) (not ( = in7 in28)) (not ( = in8 in9)) (not ( = in8 in10)) (not ( = in8 in11)) (not ( = in8 in12)) (not ( = in8 in13)) (not ( = in8 in14)) (not ( = in8 in15)) (not ( = in8 in16)) (not ( = in8 in17)) (not ( = in8 in18)) (not ( = in8 in19)) (not ( = in8 in20)) (not ( = in8 in21)) (not ( = in8 in22)) (not ( = in8 in23)) (not ( = in8 in24)) (not ( = in8 in25)) (not ( = in8 in26)) (not ( = in8 in27)) (not ( = in8 in28)) (not ( = in9 in10)) (not ( = in9 in11)) (not ( = in9 in12)) (not ( = in9 in13)) (not ( = in9 in14)) (not ( = in9 in15)) (not ( = in9 in16)) (not ( = in9 in17)) (not ( = in9 in18)) (not ( = in9 in19)) (not ( = in9 in20)) (not ( = in9 in21)) (not ( = in9 in22)) (not ( = in9 in23)) (not ( = in9 in24)) (not ( = in9 in25)) (not ( = in9 in26)) (not ( = in9 in27)) (not ( = in9 in28)) (not ( = in10 in11)) (not ( = in10 in12)) (not ( = in10 in13)) (not ( = in10 in14)) (not ( = in10 in15)) (not ( = in10 in16)) (not ( = in10 in17)) (not ( = in10 in18)) (not ( = in10 in19)) (not ( = in10 in20)) (not ( = in10 in21)) (not ( = in10 in22)) (not ( = in10 in23)) (not ( = in10 in24)) (not ( = in10 in25)) (not ( = in10 in26)) (not ( = in10 in27)) (not ( = in10 in28)) (not ( = in11 in12)) (not ( = in11 in13)) (not ( = in11 in14)) (not ( = in11 in15)) (not ( = in11 in16)) (not ( = in11 in17)) (not ( = in11 in18)) (not ( = in11 in19)) (not ( = in11 in20)) (not ( = in11 in21)) (not ( = in11 in22)) (not ( = in11 in23)) (not ( = in11 in24)) (not ( = in11 in25)) (not ( = in11 in26)) (not ( = in11 in27)) (not ( = in11 in28)) (not ( = in12 in13)) (not ( = in12 in14)) (not ( = in12 in15)) (not ( = in12 in16)) (not ( = in12 in17)) (not ( = in12 in18)) (not ( = in12 in19)) (not ( = in12 in20)) (not ( = in12 in21)) (not ( = in12 in22)) (not ( = in12 in23)) (not ( = in12 in24)) (not ( = in12 in25)) (not ( = in12 in26)) (not ( = in12 in27)) (not ( = in12 in28)) (not ( = in13 in14)) (not ( = in13 in15)) (not ( = in13 in16)) (not ( = in13 in17)) (not ( = in13 in18)) (not ( = in13 in19)) (not ( = in13 in20)) (not ( = in13 in21)) (not ( = in13 in22)) (not ( = in13 in23)) (not ( = in13 in24)) (not ( = in13 in25)) (not ( = in13 in26)) (not ( = in13 in27)) (not ( = in13 in28)) (not ( = in14 in15)) (not ( = in14 in16)) (not ( = in14 in17)) (not ( = in14 in18)) (not ( = in14 in19)) (not ( = in14 in20)) (not ( = in14 in21)) (not ( = in14 in22)) (not ( = in14 in23)) (not ( = in14 in24)) (not ( = in14 in25)) (not ( = in14 in26)) (not ( = in14 in27)) (not ( = in14 in28)) (not ( = in15 in16)) (not ( = in15 in17)) (not ( = in15 in18)) (not ( = in15 in19)) (not ( = in15 in20)) (not ( = in15 in21)) (not ( = in15 in22)) (not ( = in15 in23)) (not ( = in15 in24)) (not ( = in15 in25)) (not ( = in15 in26)) (not ( = in15 in27)) (not ( = in15 in28)) (not ( = in16 in17)) (not ( = in16 in18)) (not ( = in16 in19)) (not ( = in16 in20)) (not ( = in16 in21)) (not ( = in16 in22)) (not ( = in16 in23)) (not ( = in16 in24)) (not ( = in16 in25)) (not ( = in16 in26)) (not ( = in16 in27)) (not ( = in16 in28)) (not ( = in17 in18)) (not ( = in17 in19)) (not ( = in17 in20)) (not ( = in17 in21)) (not ( = in17 in22)) (not ( = in17 in23)) (not ( = in17 in24)) (not ( = in17 in25)) (not ( = in17 in26)) (not ( = in17 in27)) (not ( = in17 in28)) (not ( = in18 in19)) (not ( = in18 in20)) (not ( = in18 in21)) (not ( = in18 in22)) (not ( = in18 in23)) (not ( = in18 in24)) (not ( = in18 in25)) (not ( = in18 in26)) (not ( = in18 in27)) (not ( = in18 in28)) (not ( = in19 in20)) (not ( = in19 in21)) (not ( = in19 in22)) (not ( = in19 in23)) (not ( = in19 in24)) (not ( = in19 in25)) (not ( = in19 in26)) (not ( = in19 in27)) (not ( = in19 in28)) (not ( = in20 in21)) (not ( = in20 in22)) (not ( = in20 in23)) (not ( = in20 in24)) (not ( = in20 in25)) (not ( = in20 in26)) (not ( = in20 in27)) (not ( = in20 in28)) (not ( = in21 in22)) (not ( = in21 in23)) (not ( = in21 in24)) (not ( = in21 in25)) (not ( = in21 in26)) (not ( = in21 in27)) (not ( = in21 in28)) (not ( = in22 in23)) (not ( = in22 in24)) (not ( = in22 in25)) (not ( = in22 in26)) (not ( = in22 in27)) (not ( = in22 in28)) (not ( = in23 in24)) (not ( = in23 in25)) (not ( = in23 in26)) (not ( = in23 in27)) (not ( = in23 in28)) (not ( = in24 in25)) (not ( = in24 in26)) (not ( = in24 in27)) (not ( = in24 in28)) (not ( = in25 in26)) (not ( = in25 in27)) (not ( = in25 in28)) (not ( = in26 in27)) (not ( = in26 in28)) (not ( = in27 in28))))",
        "equivalent": true
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in0 in18))) (not ( = in0 in19))) (not ( = in0 in20))) (not ( = in0 in21))) (not ( = in0 in22))) (not ( = in0 in23))) (not ( = in0 in24))) (not ( = in0 in25))) (not ( = in0 in26))) (not ( = in0 in27))) (not ( = in0 in28))) (not ( = in0 in29))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in1 in18))) (not ( = in1 in19))) (not ( = in1 in20))) (not ( = in1 in21))) (not ( = in1 in22))) (not ( = in1 in23))) (not ( = in1 in24))) (not ( = in1 in25))) (not ( = in1 in26))) (not ( = in1 in27))) (not ( = in1 in28))) (not ( = in1 in29))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in2 in18))) (not ( = in2 in19))) (not ( = in2 in20))) (not ( = in2 in21))) (not ( = in2 in22))) (not ( = in2 in23))) (not ( = in2 in24))) (not ( = in2 in25))) (not ( = in2 in26))) (not ( = in2 in27))) (not ( = in2 in28))) (not ( = in2 in29))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in3 in18))) (not ( = in3 in19))) (not ( = in3 in20))) (not ( = in3 in21))) (not ( = in3 in22))) (not ( = in3 in23))) (not ( = in3 in24))) (not ( = in3 in25))) (not ( = in3 in26))) (not ( = in3 in27))) (not ( = in3 in28))) (not ( = in3 in29))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in4 in18))) (not ( = in4 in19))) (not ( = in4 in20))) (not ( = in4 in21))) (not ( = in4 in22))) (not ( = in4 in23))) (not ( = in4 in24))) (not ( = in4 in25))) (not ( = in4 in26))) (not ( = in4 in27))) (not ( = in4 in28))) (not ( = in4 in29))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in5 in18))) (not ( = in5 in19))) (not ( = in5 in20))) (not ( = in5 in21))) (not ( = in5 in22))) (not ( = in5 in23))) (not ( = in5 in24))) (not ( = in5 in25))) (not ( = in5 in26))) (not ( = in5 in27))) (not ( = in5 in28))) (not ( = in5 in29))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in6 in18))) (not ( = in6 in19))) (not ( = in6 in20))) (not ( = in6 in21))) (not ( = in6 in22))) (not ( = in6 in23))) (not ( = in6 in24))) (not ( = in6 in25))) (not ( = in6 in26))) (not ( = in6 in27))) (not ( = in6 in28))) (not ( = in6 in29))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in7 in18))) (not ( = in7 in19))) (not ( = in7 in20))) (not ( = in7 in21))) (not ( = in7 in22))) (not ( = in7 in23))) (not ( = in7 in24))) (not ( = in7 in25))) (not ( = in7 in26))) (not ( = in7 in27))) (not ( = in7 in28))) (not ( = in7 in29))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in8 in18))) (not ( = in8 in19))) (not ( = in8 in20))) (not ( = in8 in21))) (not ( = in8 in22))) (not ( = in8 in23))) (not ( = in8 in24))) (not ( = in8 in25))) (not ( = in8 in26))) (not ( = in8 in27))) (not ( = in8 in28))) (not ( = in8 in29))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in9 in18))) (not ( = in9 in19))) (not ( = in9 in20))) (not ( = in9 in21))) (not ( = in9 in22))) (not ( = in9 in23))) (not ( = in9 in24))) (not ( = in9 in25))) (not ( = in9 in26))) (not ( = in9 in27))) (not ( = in9 in28))) (not ( = in9 in29))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in10 in18))) (not ( = in10 in19))) (not ( = in10 in20))) (not ( = in10 in21))) (not ( = in10 in22))) (not ( = in10 in23))) (not ( = in10 in24))) (not ( = in10 in25))) (not ( = in10 in26))) (not ( = in10 in27))) (not ( = in10 in28))) (not ( = in10 in29))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in11 in18))) (not ( = in11 in19))) (not ( = in11 in20))) (not ( = in11 in21))) (not ( = in11 in22))) (not ( = in11 in23))) (not ( = in11 in24))) (not ( = in11 in25))) (not ( = in11 in26))) (not ( = in11 in27))) (not ( = in11 in28))) (not ( = in11 in29))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in12 in18))) (not ( = in12 in19))) (not ( = in12 in20))) (not ( = in12 in21))) (not ( = in12 in22))) (not ( = in12 in23))) (not ( = in12 in24))) (not ( = in12 in25))) (not ( = in12 in26))) (not ( = in12 in27))) (not ( = in12 in28))) (not ( = in12 in29))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in13 in18))) (not ( = in13 in19))) (not ( = in13 in20))) (not ( = in13 in21))) (not ( = in13 in22))) (not ( = in13 in23))) (not ( = in13 in24))) (not ( = in13 in25))) (not ( = in13 in26))) (not ( = in13 in27))) (not ( = in13 in28))) (not ( = in13 in29))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in14 in18))) (not ( = in14 in19))) (not ( = in14 in20))) (not ( = in14 in21))) (not ( = in14 in22))) (not ( = in14 in23))) (not ( = in14 in24))) (not ( = in14 in25))) (not ( = in14 in26))) (not ( = in14 in27))) (not ( = in14 in28))) (not ( = in14 in29))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in15 in18))) (not ( = in15 in19))) (not ( = in15 in20))) (not ( = in15 in21))) (not ( = in15 in22))) (not ( = in15 in23))) (not ( = in15 in24))) (not ( = in15 in25))) (not ( = in15 in26))) (not ( = in15 in27))) (not ( = in15 in28))) (not ( = in15 in29))) (not ( = in16 in17))) (not ( = in16 in18))) (not ( = in16 in19))) (not ( = in16 in20))) (not ( = in16 in21))) (not ( = in16 in22))) (not ( = in16 in23))) (not ( = in16 in24))) (not ( = in16 in25))) (not ( = in16 in26))) (not ( = in16 in27))) (not ( = in16 in28))) (not ( = in16 in29))) (not ( = in17 in18))) (not ( = in17 in19))) (not ( = in17 in20))) (not ( = in17 in21))) (not ( = in17 in22))) (not ( = in17 in23))) (not ( = in17 in24))) (not ( = in17 in25))) (not ( = in17 in26))) (not ( = in17 in27))) (not ( = in17 in28))) (not ( = in17 in29))) (not ( = in18 in19))) (not ( = in18 in20))) (not ( = in18 in21))) (not ( = in18 in22))) (not ( = in18 in23))) (not ( = in18 in24))) (not ( = in18 in25))) (not ( = in18 in26))) (not ( = in18 in27))) (not ( = in18 in28))) (not ( = in18 in29))) (not ( = in19 in20))) (not ( = in19 in21))) (not ( = in19 in22))) (not ( = in19 in23))) (not ( = in19 in24))) (not ( = in19 in25))) (not ( = in19 in26))) (not ( = in19 in27))) (not ( = in19 in28))) (not ( = in19 in29))) (not ( = in20 in21))) (not ( = in20 in22))) (not ( = in20 in23))) (not ( = in20 in24))) (not ( = in20 in25))) (not ( = in20 in26))) (not ( = in20 in27))) (not ( = in20 in28))) (not ( = in20 in29))) (not ( = in21 in22))) (not ( = in21 in23))) (not ( = in21 in24))) (not ( = in21 in25))) (not ( = in21 in26))) (not ( = in21 in27))) (not ( = in21 in28))) (not ( = in21 in29))) (not ( = in22 in23))) (not ( = in22 in24))) (not ( = in22 in25))) (not ( = in22 in26))) (not ( = in22 in27))) (not ( = in22 in28))) (not ( = in22 in29))) (not ( = in23 in24))) (not ( = in23 in25))) (not ( = in23 in26))) (not ( = in23 in27))) (not ( = in23 in28))) (not ( = in23 in29))) (not ( = in24 in25))) (not ( = in24 in26))) (not ( = in24 in27))) (not ( = in24 in28))) (not ( = in24 in29))) (not ( = in25 in26))) (not ( = in25 in27))) (not ( = in25 in28))) (not ( = in25 in29))) (not ( = in26 in27))) (not ( = in26 in28))) (not ( = in26 in29))) (not ( = in27 in28))) (not ( = in27 in29))) (not ( = in28 in29))))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 in1)) (not ( = in0 in2)) (not ( = in0 in3)) (not ( = in0 in4)) (not ( = in0 in5)) (not ( = in0 in6)) (not ( = in0 in7)) (not ( = in0 in8)) (not ( = in0 in9)) (not ( = in0 in10)) (not ( = in0 in11)) (not ( = in0 in12)) (not ( = in0 in13)) (not ( = in0 in14)) (not ( = in0 in15)) (not ( = in0 in16)) (not ( = in0 in17)) (not ( = in0 in18)) (not ( = in0 in19)) (not ( = in0 in20)) (not ( = in0 in21)) (not ( = in0 in22)) (not ( = in0 in23)) (not ( = in0 in24)) (not ( = in0 in25)) (not ( = in0 in26)) (not ( = in0 in27)) (not ( = in0 in28)) (not ( = in0 in29)) (not ( = in1 in2)) (not ( = in1 in3)) (not ( = in1 in4)) (not ( = in1 in5)) (not ( = in1 in6)) (not ( = in1 in7)) (not ( = in1 in8)) (not ( = in1 in9)) (not ( = in1 in10)) (not ( = in1 in11)) (not ( = in1 in12)) (not ( = in1 in13)) (not ( = in1 in14)) (not ( = in1 in15)) (not ( = in1 in16)) (not ( = in1 in17)) (not ( = in1 in18)) (not ( = in1 in19)) (not ( = in1 in20)) (not ( = in1 in21)) (not ( = in1 in22)) (not ( = in1 in23)) (not ( = in1 in24)) (not ( = in1 in25)) (not ( = in1 in26)) (not ( = in1 in27)) (not ( = in1 in28)) (not ( = in1 in29)) (not ( = in2 in3)) (not ( = in2 in4)) (not ( = in2 in5)) (not ( = in2 in6)) (not ( = in2 in7)) (not ( = in2 in8)) (not ( = in2 in9)) (not ( = in2 in10)) (not ( = in2 in11)) (not ( = in2 in12)) (not ( = in2 in13)) (not ( = in2 in14)) (not ( = in2 in15)) (not ( = in2 in16)) (not ( = in2 in17)) (not ( = in2 in18)) (not ( = in2 in19)) (not ( = in2 in20)) (not ( = in2 in21)) (not ( = in2 in22)) (not ( = in2 in23)) (not ( = in2 in24)) (not ( = in2 in25)) (not ( = in2 in26)) (not ( = in2 in27)) (not ( = in2 in28)) (not ( = in2 in29)) (not ( = in3 in4)) (not ( = in3 in5)) (not ( = in3 in6)) (not ( = in3 in7)) (not ( = in3 in8)) (not ( = in3 in9)) (not ( = in3 in10)) (not ( = in3 in11)) (not ( = in3 in12)) (not ( = in3 in13)) (not ( = in3 in14)) (not ( = in3 in15)) (not ( = in3 in16)) (not ( = in3 in17)) (not ( = in3 in18)) (not ( = in3 in19)) (not ( = in3 in20)) (not ( = in3 in21)) (not ( = in3 in22)) (not ( = in3 in23)) (not ( = in3 in24)) (not ( = in3 in25)) (not ( = in3 in26)) (not ( = in3 in27)) (not ( = in3 in28)) (not ( = in3 in29)) (not ( = in4 in5)) (not ( = in4 in6)) (not ( = in4 in7)) (not ( = in4 in8)) (not ( = in4 in9)) (not ( = in4 in10)) (not ( = in4 in11)) (not ( = in4 in12)) (not ( = in4 in13)) (not ( = in4 in14)) (not ( = in4 in15)) (not ( = in4 in16)) (not ( = in4 in17)) (not ( = in4 in18)) (not ( = in4 in19)) (not ( = in4 in20)) (not ( = in4 in21)) (not ( = in4 in22)) (not ( = in4 in23)) (not ( = in4 in24)) (not ( = in4 in25)) (not ( = in4 in26)) (not ( = in4 in27)) (not ( = in4 in28)) (not ( = in4 in29)) (not ( = in5 in6)) (not ( = in5 in7)) (not ( = in5 in8)) (not ( = in5 in9)) (not ( = in5 in10)) (not ( = in5 in11)) (not ( = in5 in12)) (not ( = in5 in13)) (not ( = in5 in14)) (not ( = in5 in15)) (not ( = in5 in16)) (not ( = in5 in17)) (not ( = in5 in18)) (not ( = in5 in19)) (not ( = in5 in20)) (not ( = in5 in21)) (not ( = in5 in22)) (not ( = in5 in23)) (not ( = in5 in24)) (not ( = in5 in25)) (not ( = in5 in26)) (not ( = in5 in27)) (not ( = in5 in28)) (not ( = in5 in29)) (not ( = in6 in7)) (not ( = in6 in8)) (not ( = in6 in9)) (not ( = in6 in10)) (not ( = in6 in11)) (not ( = in6 in12)) (not ( = in6 in13)) (not ( = in6 in14)) (not ( = in6 in15)) (not ( = in6 in16)) (not ( = in6 in17)) (not ( = in6 in18)) (not ( = in6 in19)) (not ( = in6 in20)) (not ( = in6 in21)) (not ( = in6 in22)) (not ( = in6 in23)) (not ( = in6 in24)) (not ( = in6 in25)) (not ( = in6 in26)) (not ( = in6 in27)) (not ( = in6 in28)) (not ( = in6 in29)) (not ( = in7 in8)) (not ( = in7 in9)) (not ( = in7 in10)) (not ( = in7 in11)) (not ( = in7 in12)) (not ( = in7 in13)) (not ( = in7 in14)) (not ( = in7 in15)) (not ( = in7 in16)) (not ( = in7 in17)) (not ( = in7 in18)) (not ( = in7 in19)) (not ( = in7 in20)) (not ( = in7 in21)) (not ( = in7 in22)) (not ( = in7 in23)) (not ( = in7 in24)) (not ( = in7 in25)) (not ( = in7 in26)) (not ( = in7 in27)) (not ( = in7 in28)) (not ( = in7 in29)) (not ( = in8 in9)) (not ( = in8 in10)) (not ( = in8 in11)) (not ( = in8 in12)) (not ( = in8 in13)) (not ( = in8 in14)) (not ( = in8 in15)) (not ( = in8 in16)) (not ( = in8 in17)) (not ( = in8 in18)) (not ( = in8 in19)) (not ( = in8 in20)) (not ( = in8 in21)) (not ( = in8 in22)) (not ( = in8 in23)) (not ( = in8 in24)) (not ( = in8 in25)) (not ( = in8 in26)) (not ( = in8 in27)) (not ( = in8 in28)) (not ( = in8 in29)) (not ( = in9 in10)) (not ( = in9 in11)) (not ( = in9 in12)) (not ( = in9 in13)) (not ( = in9 in14)) (not ( = in9 in15)) (not ( = in9 in16)) (not ( = in9 in17)) (not ( = in9 in18)) (not ( = in9 in19)) (not ( = in9 in20)) (not ( = in9 in21)) (not ( = in9 in22)) (not ( = in9 in23)) (not ( = in9 in24)) (not ( = in9 in25)) (not ( = in9 in26)) (not ( = in9 in27)) (not ( = in9 in28)) (not ( = in9 in29)) (not ( = in10 in11)) (not ( = in10 in12)) (not ( = in10 in13)) (not ( = in10 in14)) (not ( = in10 in15)) (not ( = in10 in16)) (not ( = in10 in17)) (not ( = in10 in18)) (not ( = in10 in19)) (not ( = in10 in20)) (not ( = in10 in21)) (not ( = in10 in22)) (not ( = in10 in23)) (not ( = in10 in24)) (not ( = in10 in25)) (not ( = in10 in26)) (not ( = in10 in27)) (not ( = in10 in28)) (not ( = in10 in29)) (not ( = in11 in12)) (not ( = in11 in13)) (not ( = in11 in14)) (not ( = in11 in15)) (not ( = in11 in16)) (not ( = in11 in17)) (not ( = in11 in18)) (not ( = in11 in19)) (not ( = in11 in20)) (not ( = in11 in21)) (not ( = in11 in22)) (not ( = in11 in23)) (not ( = in11 in24)) (not ( = in11 in25)) (not ( = in11 in26)) (not ( = in11 in27)) (not ( = in11 in28)) (not ( = in11 in29)) (not ( = in12 in13)) (not ( = in12 in14)) (not ( = in12 in15)) (not ( = in12 in16)) (not ( = in12 in17)) (not ( = in12 in18)) (not ( = in12 in19)) (not ( = in12 in20)) (not ( = in12 in21)) (not ( = in12 in22)) (not ( = in12 in23)) (not ( = in12 in24)) (not ( = in12 in25)) (not ( = in12 in26)) (not ( = in12 in27)) (not ( = in12 in28)) (not ( = in12 in29)) (not ( = in13 in14)) (not ( = in13 in15)) (not ( = in13 in16)) (not ( = in13 in17)) (not ( = in13 in18)) (not ( = in13 in19)) (not ( = in13 in20)) (not ( = in13 in21)) (not ( = in13 in22)) (not ( = in13 in23)) (not ( = in13 in24)) (not ( = in13 in25)) (not ( = in13 in26)) (not ( = in13 in27)) (not ( = in13 in28)) (not ( = in13 in29)) (not ( = in14 in15)) (not ( = in14 in16)) (not ( = in14 in17)) (not ( = in14 in18)) (not ( = in14 in19)) (not ( = in14 in20)) (not ( = in14 in21)) (not ( = in14 in22)) (not ( = in14 in23)) (not ( = in14 in24)) (not ( = in14 in25)) (not ( = in14 in26)) (not ( = in14 in27)) (not ( = in14 in28)) (not ( = in14 in29)) (not ( = in15 in16)) (not ( = in15 in17)) (not ( = in15 in18)) (not ( = in15 in19)) (not ( = in15 in20)) (not ( = in15 in21)) (not ( = in15 in22)) (not ( = in15 in23)) (not ( = in15 in24)) (not ( = in15 in25)) (not ( = in15 in26)) (not ( = in15 in27)) (not ( = in15 in28)) (not ( = in15 in29)) (not ( = in16 in17)) (not ( = in16 in18)) (not ( = in16 in19)) (not ( = in16 in20)) (not ( = in16 in21)) (not ( = in16 in22)) (not ( = in16 in23)) (not ( = in16 in24)) (not ( = in16 in25)) (not ( = in16 in26)) (not ( = in16 in27)) (not ( = in16 in28)) (not ( = in16 in29)) (not ( = in17 in18)) (not ( = in17 in19)) (not ( = in17 in20)) (not ( = in17 in21)) (not ( = in17 in22)) (not ( = in17 in23)) (not ( = in17 in24)) (not ( = in17 in25)) (not ( = in17 in26)) (not ( = in17 in27)) (not ( = in17 in28)) (not ( = in17 in29)) (not ( = in18 in19)) (not ( = in18 in20)) (not ( = in18 in21)) (not ( = in18 in22)) (not ( = in18 in23)) (not ( = in18 in24)) (not ( = in18 in25)) (not ( = in18 in26)) (not ( = in18 in27)) (not ( = in18 in28)) (not ( = in18 in29)) (not ( = in19 in20)) (not ( = in19 in21)) (not ( = in19 in22)) (not ( = in19 in23)) (not ( = in19 in24)) (not ( = in19 in25)) (not ( = in19 in26)) (not ( = in19 in27)) (not ( = in19 in28)) (not ( = in19 in29)) (not ( = in20 in21)) (not ( = in20 in22)) (not ( = in20 in23)) (not ( = in20 in24)) (not ( = in20 in25)) (not ( = in20 in26)) (not ( = in20 in27)) (not ( = in20 in28)) (not ( = in20 in29)) (not ( = in21 in22)) (not ( = in21 in23)) (not ( = in21 in24)) (not ( = in21 in25)) (not ( = in21 in26)) (not ( = in21 in27)) (not ( = in21 in28)) (not ( = in21 in29)) (not ( = in22 in23)) (not ( = in22 in24)) (not ( = in22 in25)) (not ( = in22 in26)) (not ( = in22 in27)) (not ( = in22 in28)) (not ( = in22 in29)) (not ( = in23 in24)) (not ( = in23 in25)) (not ( = in23 in26)) (not ( = in23 in27)) (not ( = in23 in28)) (not ( = in23 in29)) (not ( = in24 in25)) (not ( = in24 in26)) (not ( = in24 in27)) (not ( = in24 in28)) (not ( = in24 in29)) (not ( = in25 in26)) (not ( = in25 in27)) (not ( = in25 in28)) (not ( = in25 in29)) (not ( = in26 in27)) (not ( = in26 in28)) (not ( = in26 in29)) (not ( = in27 in28)) (not ( = in27 in29)) (not ( = in28 in29))))",
        "equivalent": true
      }
    }
  },
  "WeirdConstDiff": {
    "succeeded": true,
    "attempts": 1,
    "examples_right": 30,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert  ( =  ( -  in2 in1) ( -  in1 in0)))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0))))",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1))))",
        "equivalent": true
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2))))",
        "equivalent": true
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2)) (= (- in5 in4) (- in4 in3))))",
        "equivalent": true
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2)) (= (- in5 in4) (- in4 in3)) (= (- in6 in5) (- in5 in4))))",
        "equivalent": true
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2)) (= (- in5 in4) (- in4 in3)) (= (- in6 in5) (- in5 in4)) (= (- in7 in6) (- in6 in5))))",
        "equivalent": true
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2)) (= (- in5 in4) (- in4 in3)) (= (- in6 in5) (- in5 in4)) (= (- in7 in6) (- in6 in5)) (= (- in8 in7) (- in7 in6))))",
        "equivalent": true
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2)) (= (- in5 in4) (- in4 in3)) (= (- in6 in5) (- in5 in4)) (= (- in7 in6) (- in6 in5)) (= (- in8 in7) (- in7 in6)) (= (- in9 in8) (- in8 in7))))",
        "equivalent": true
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2)) (= (- in5 in4) (- in4 in3)) (= (- in6 in5) (- in5 in4)) (= (- in7 in6) (- in6 in5)) (= (- in8 in7) (- in7 in6)) (= (- in9 in8) (- in8 in7)) (= (- in10 in9) (- in9 in8))))",
        "equivalent": true
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2)) (= (- in5 in4) (- in4 in3)) (= (- in6 in5) (- in5 in4)) (= (- in7 in6) (- in6 in5)) (= (- in8 in7) (- in7 in6)) (= (- in9 in8) (- in8 in7)) (= (- in10 in9) (- in9 in8)) (= (- in11 in10) (- in10 in9))))",
        "equivalent": true
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2)) (= (- in5 in4) (- in4 in3)) (= (- in6 in5) (- in5 in4)) (= (- in7 in6) (- in6 in5)) (= (- in8 in7) (- in7 in6)) (= (- in9 in8) (- in8 in7)) (= (- in10 in9) (- in9 in8)) (= (- in11 in10) (- in10 in9)) (= (- in12 in11) (- in11 in10))))",
        "equivalent": true
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2)) (= (- in5 in4) (- in4 in3)) (= (- in6 in5) (- in5 in4)) (= (- in7 in6) (- in6 in5)) (= (- in8 in7) (- in7 in6)) (= (- in9 in8) (- in8 in7)) (= (- in10 in9) (- in9 in8)) (= (- in11 in10) (- in10 in9)) (= (- in12 in11) (- in11 in10)) (= (- in13 in12) (- in12 in11))))",
        "equivalent": true
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2)) (= (- in5 in4) (- in4 in3)) (= (- in6 in5) (- in5 in4)) (= (- in7 in6) (- in6 in5)) (= (- in8 in7) (- in7 in6)) (= (- in9 in8) (- in8 in7)) (= (- in10 in9) (- in9 in8)) (= (- in11 in10) (- in10 in9)) (= (- in12 in11) (- in11 in10)) (= (- in13 in12) (- in12 in11)) (= (- in14 in13) (- in13 in12))))",
        "equivalent": true
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2)) (= (- in5 in4) (- in4 in3)) (= (- in6 in5) (- in5 in4)) (= (- in7 in6) (- in6 in5)) (= (- in8 in7) (- in7 in6)) (= (- in9 in8) (- in8 in7)) (= (- in10 in9) (- in9 in8)) (= (- in11 in10) (- in10 in9)) (= (- in12 in11) (- in11 in10)) (= (- in13 in12) (- in12 in11)) (= (- in14 in13) (- in13 in12)) (= (- in15 in14) (- in14 in13))))",
        "equivalent": true
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2)) (= (- in5 in4) (- in4 in3)) (= (- in6 in5) (- in5 in4)) (= (- in7 in6) (- in6 in5)) (= (- in8 in7) (- in7 in6)) (= (- in9 in8) (- in8 in7)) (= (- in10 in9) (- in9 in8)) (= (- in11 in10) (- in10 in9)) (= (- in12 in11) (- in11 in10)) (= (- in13 in12) (- in12 in11)) (= (- in14 in13) (- in13 in12)) (= (- in15 in14) (- in14 in13)) (= (- in16 in15) (- in15 in14))))",
        "equivalent": true
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2)) (= (- in5 in4) (- in4 in3)) (= (- in6 in5) (- in5 in4)) (= (- in7 in6) (- in6 in5)) (= (- in8 in7) (- in7 in6)) (= (- in9 in8) (- in8 in7)) (= (- in10 in9) (- in9 in8)) (= (- in11 in10) (- in10 in9)) (= (- in12 in11) (- in11 in10)) (= (- in13 in12) (- in12 in11)) (= (- in14 in13) (- in13 in12)) (= (- in15 in14) (- in14 in13)) (= (- in16 in15) (- in15 in14)) (= (- in17 in16) (- in16 in15))))",
        "equivalent": true
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15)))  ( =  ( -  in18 in17) ( -  in17 in16))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2)) (= (- in5 in4) (- in4 in3)) (= (- in6 in5) (- in5 in4)) (= (- in7 in6) (- in6 in5)) (= (- in8 in7) (- in7 in6)) (= (- in9 in8) (- in8 in7)) (= (- in10 in9) (- in9 in8)) (= (- in11 in10) (- in10 in9)) (= (- in12 in11) (- in11 in10)) (= (- in13 in12) (- in12 in11)) (= (- in14 in13) (- in13 in12)) (= (- in15 in14) (- in14 in13)) (= (- in16 in15) (- in15 in14)) (= (- in17 in16) (- in16 in15)) (= (- in18 in17) (- in17 in16))))",
        "equivalent": true
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15)))  ( =  ( -  in18 in17) ( -  in17 in16)))  ( =  ( -  in19 in18) ( -  in18 in17))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2)) (= (- in5 in4) (- in4 in3)) (= (- in6 in5) (- in5 in4)) (= (- in7 in6) (- in6 in5)) (= (- in8 in7) (- in7 in6)) (= (- in9 in8) (- in8 in7)) (= (- in10 in9) (- in9 in8)) (= (- in11 in10) (- in10 in9)) (= (- in12 in11) (- in11 in10)) (= (- in13 in12) (- in12 in11)) (= (- in14 in13) (- in13 in12)) (= (- in15 in14) (- in14 in13)) (= (- in16 in15) (- in15 in14)) (= (- in17 in16) (- in16 in15)) (= (- in18 in17) (- in17 in16)) (= (- in19 in18) (- in18 in17))))",
        "equivalent": true
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15)))  ( =  ( -  in18 in17) ( -  in17 in16)))  ( =  ( -  in19 in18) ( -  in18 in17)))  ( =  ( -  in20 in19) ( -  in19 in18))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2)) (= (- in5 in4) (- in4 in3)) (= (- in6 in5) (- in5 in4)) (= (- in7 in6) (- in6 in5)) (= (- in8 in7) (- in7 in6)) (= (- in9 in8) (- in8 in7)) (= (- in10 in9) (- in9 in8)) (= (- in11 in10) (- in10 in9)) (= (- in12 in11) (- in11 in10)) (= (- in13 in12) (- in12 in11)) (= (- in14 in13) (- in13 in12)) (= (- in15 in14) (- in14 in13)) (= (- in16 in15) (- in15 in14)) (= (- in17 in16) (- in16 in15)) (= (- in18 in17) (- in17 in16)) (= (- in19 in18) (- in18 in17)) (= (- in20 in19) (- in19 in18))))",
        "equivalent": true
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15)))  ( =  ( -  in18 in17) ( -  in17 in16)))  ( =  ( -  in19 in18) ( -  in18 in17)))  ( =  ( -  in20 in19) ( -  in19 in18)))  ( =  ( -  in21 in20) ( -  in20 in19))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2)) (= (- in5 in4) (- in4 in3)) (= (- in6 in5) (- in5 in4)) (= (- in7 in6) (- in6 in5)) (= (- in8 in7) (- in7 in6)) (= (- in9 in8) (- in8 in7)) (= (- in10 in9) (- in9 in8)) (= (- in11 in10) (- in10 in9)) (= (- in12 in11) (- in11 in10)) (= (- in13 in12) (- in12 in11)) (= (- in14 in13) (- in13 in12)) (= (- in15 in14) (- in14 in13)) (= (- in16 in15) (- in15 in14)) (= (- in17 in16) (- in16 in15)) (= (- in18 in17) (- in17 in16)) (= (- in19 in18) (- in18 in17)) (= (- in20 in19) (- in19 in18)) (= (- in21 in20) (- in20 in19))))",
        "equivalent": true
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15)))  ( =  ( -  in18 in17) ( -  in17 in16)))  ( =  ( -  in19 in18) ( -  in18 in17)))  ( =  ( -  in20 in19) ( -  in19 in18)))  ( =  ( -  in21 in20) ( -  in20 in19)))  ( =  ( -  in22 in21) ( -  in21 in20))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2)) (= (- in5 in4) (- in4 in3)) (= (- in6 in5) (- in5 in4)) (= (- in7 in6) (- in6 in5)) (= (- in8 in7) (- in7 in6)) (= (- in9 in8) (- in8 in7)) (= (- in10 in9) (- in9 in8)) (= (- in11 in10) (- in10 in9)) (= (- in12 in11) (- in11 in10)) (= (- in13 in12) (- in12 in11)) (= (- in14 in13) (- in13 in12)) (= (- in15 in14) (- in14 in13)) (= (- in16 in15) (- in15 in14)) (= (- in17 in16) (- in16 in15)) (= (- in18 in17) (- in17 in16)) (= (- in19 in18) (- in18 in17)) (= (- in20 in19) (- in19 in18)) (= (- in21 in20) (- in20 in19)) (= (- in22 in21) (- in21 in20))))",
        "equivalent": true
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15)))  ( =  ( -  in18 in17) ( -  in17 in16)))  ( =  ( -  in19 in18) ( -  in18 in17)))  ( =  ( -  in20 in19) ( -  in19 in18)))  ( =  ( -  in21 in20) ( -  in20 in19)))  ( =  ( -  in22 in21) ( -  in21 in20)))  ( =  ( -  in23 in22) ( -  in22 in21))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2)) (= (- in5 in4) (- in4 in3)) (= (- in6 in5) (- in5 in4)) (= (- in7 in6) (- in6 in5)) (= (- in8 in7) (- in7 in6)) (= (- in9 in8) (- in8 in7)) (= (- in10 in9) (- in9 in8)) (= (- in11 in10) (- in10 in9)) (= (- in12 in11) (- in11 in10)) (= (- in13 in12) (- in12 in11)) (= (- in14 in13) (- in13 in12)) (= (- in15 in14) (- in14 in13)) (= (- in16 in15) (- in15 in14)) (= (- in17 in16) (- in16 in15)) (= (- in18 in17) (- in17 in16)) (= (- in19 in18) (- in18 in17)) (= (- in20 in19) (- in19 in18)) (= (- in21 in20) (- in20 in19)) (= (- in22 in21) (- in21 in20)) (= (- in23 in22) (- in22 in21))))",
        "equivalent": true
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15)))  ( =  ( -  in18 in17) ( -  in17 in16)))  ( =  ( -  in19 in18) ( -  in18 in17)))  ( =  ( -  in20 in19) ( -  in19 in18)))  ( =  ( -  in21 in20) ( -  in20 in19)))  ( =  ( -  in22 in21) ( -  in21 in20)))  ( =  ( -  in23 in22) ( -  in22 in21)))  ( =  ( -  in24 in23) ( -  in23 in22))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2)) (= (- in5 in4) (- in4 in3)) (= (- in6 in5) (- in5 in4)) (= (- in7 in6) (- in6 in5)) (= (- in8 in7) (- in7 in6)) (= (- in9 in8) (- in8 in7)) (= (- in10 in9) (- in9 in8)) (= (- in11 in10) (- in10 in9)) (= (- in12 in11) (- in11 in10)) (= (- in13 in12) (- in12 in11)) (= (- in14 in13) (- in13 in12)) (= (- in15 in14) (- in14 in13)) (= (- in16 in15) (- in15 in14)) (= (- in17 in16) (- in16 in15)) (= (- in18 in17) (- in17 in16)) (= (- in19 in18) (- in18 in17)) (= (- in20 in19) (- in19 in18)) (= (- in21 in20) (- in20 in19)) (= (- in22 in21) (- in21 in20)) (= (- in23 in22) (- in22 in21)) (= (- in24 in23) (- in23 in22))))",
        "equivalent": true
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15)))  ( =  ( -  in18 in17) ( -  in17 in16)))  ( =  ( -  in19 in18) ( -  in18 in17)))  ( =  ( -  in20 in19) ( -  in19 in18)))  ( =  ( -  in21 in20) ( -  in20 in19)))  ( =  ( -  in22 in21) ( -  in21 in20)))  ( =  ( -  in23 in22) ( -  in22 in21)))  ( =  ( -  in24 in23) ( -  in23 in22)))  ( =  ( -  in25 in24) ( -  in24 in23))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2)) (= (- in5 in4) (- in4 in3)) (= (- in6 in5) (- in5 in4)) (= (- in7 in6) (- in6 in5)) (= (- in8 in7) (- in7 in6)) (= (- in9 in8) (- in8 in7)) (= (- in10 in9) (- in9 in8)) (= (- in11 in10) (- in10 in9)) (= (- in12 in11) (- in11 in10)) (= (- in13 in12) (- in12 in11)) (= (- in14 in13) (- in13 in12)) (= (- in15 in14) (- in14 in13)) (= (- in16 in15) (- in15 in14)) (= (- in17 in16) (- in16 in15)) (= (- in18 in17) (- in17 in16)) (= (- in19 in18) (- in18 in17)) (= (- in20 in19) (- in19 in18)) (= (- in21 in20) (- in20 in19)) (= (- in22 in21) (- in21 in20)) (= (- in23 in22) (- in22 in21)) (= (- in24 in23) (- in23 in22)) (= (- in25 in24) (- in24 in23))))",
        "equivalent": true
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15)))  ( =  ( -  in18 in17) ( -  in17 in16)))  ( =  ( -  in19 in18) ( -  in18 in17)))  ( =  ( -  in20 in19) ( -  in19 in18)))  ( =  ( -  in21 in20) ( -  in20 in19)))  ( =  ( -  in22 in21) ( -  in21 in20)))  ( =  ( -  in23 in22) ( -  in22 in21)))  ( =  ( -  in24 in23) ( -  in23 in22)))  ( =  ( -  in25 in24) ( -  in24 in23)))  ( =  ( -  in26 in25) ( -  in25 in24))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2)) (= (- in5 in4) (- in4 in3)) (= (- in6 in5) (- in5 in4)) (= (- in7 in6) (- in6 in5)) (= (- in8 in7) (- in7 in6)) (= (- in9 in8) (- in8 in7)) (= (- in10 in9) (- in9 in8)) (= (- in11 in10) (- in10 in9)) (= (- in12 in11) (- in11 in10)) (= (- in13 in12) (- in12 in11)) (= (- in14 in13) (- in13 in12)) (= (- in15 in14) (- in14 in13)) (= (- in16 in15) (- in15 in14)) (= (- in17 in16) (- in16 in15)) (= (- in18 in17) (- in17 in16)) (= (- in19 in18) (- in18 in17)) (= (- in20 in19) (- in19 in18)) (= (- in21 in20) (- in20 in19)) (= (- in22 in21) (- in21 in20)) (= (- in23 in22) (- in22 in21)) (= (- in24 in23) (- in23 in22)) (= (- in25 in24) (- in24 in23)) (= (- in26 in25) (- in25 in24))))",
        "equivalent": true
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15)))  ( =  ( -  in18 in17) ( -  in17 in16)))  ( =  ( -  in19 in18) ( -  in18 in17)))  ( =  ( -  in20 in19) ( -  in19 in18)))  ( =  ( -  in21 in20) ( -  in20 in19)))  ( =  ( -  in22 in21) ( -  in21 in20)))  ( =  ( -  in23 in22) ( -  in22 in21)))  ( =  ( -  in24 in23) ( -  in23 in22)))  ( =  ( -  in25 in24) ( -  in24 in23)))  ( =  ( -  in26 in25) ( -  in25 in24)))  ( =  ( -  in27 in26) ( -  in26 in25))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2)) (= (- in5 in4) (- in4 in3)) (= (- in6 in5) (- in5 in4)) (= (- in7 in6) (- in6 in5)) (= (- in8 in7) (- in7 in6)) (= (- in9 in8) (- in8 in7)) (= (- in10 in9) (- in9 in8)) (= (- in11 in10) (- in10 in9)) (= (- in12 in11) (- in11 in10)) (= (- in13 in12) (- in12 in11)) (= (- in14 in13) (- in13 in12)) (= (- in15 in14) (- in14 in13)) (= (- in16 in15) (- in15 in14)) (= (- in17 in16) (- in16 in15)) (= (- in18 in17) (- in17 in16)) (= (- in19 in18) (- in18 in17)) (= (- in20 in19) (- in19 in18)) (= (- in21 in20) (- in20 in19)) (= (- in22 in21) (- in21 in20)) (= (- in23 in22) (- in22 in21)) (= (- in24 in23) (- in23 in22)) (= (- in25 in24) (- in24 in23)) (= (- in26 in25) (- in25 in24)) (= (- in27 in26) (- in26 in25))))",
        "equivalent": true
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15)))  ( =  ( -  in18 in17) ( -  in17 in16)))  ( =  ( -  in19 in18) ( -  in18 in17)))  ( =  ( -  in20 in19) ( -  in19 in18)))  ( =  ( -  in21 in20) ( -  in20 in19)))  ( =  ( -  in22 in21) ( -  in21 in20)))  ( =  ( -  in23 in22) ( -  in22 in21)))  ( =  ( -  in24 in23) ( -  in23 in22)))  ( =  ( -  in25 in24) ( -  in24 in23)))  ( =  ( -  in26 in25) ( -  in25 in24)))  ( =  ( -  in27 in26) ( -  in26 in25)))  ( =  ( -  in28 in27) ( -  in27 in26))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2)) (= (- in5 in4) (- in4 in3)) (= (- in6 in5) (- in5 in4)) (= (- in7 in6) (- in6 in5)) (= (- in8 in7) (- in7 in6)) (= (- in9 in8) (- in8 in7)) (= (- in10 in9) (- in9 in8)) (= (- in11 in10) (- in10 in9)) (= (- in12 in11) (- in11 in10)) (= (- in13 in12) (- in12 in11)) (= (- in14 in13) (- in13 in12)) (= (- in15 in14) (- in14 in13)) (= (- in16 in15) (- in15 in14)) (= (- in17 in16) (- in16 in15)) (= (- in18 in17) (- in17 in16)) (= (- in19 in18) (- in18 in17)) (= (- in20 in19) (- in19 in18)) (= (- in21 in20) (- in20 in19)) (= (- in22 in21) (- in21 in20)) (= (- in23 in22) (- in22 in21)) (= (- in24 in23) (- in23 in22)) (= (- in25 in24) (- in24 in23)) (= (- in26 in25) (- in25 in24)) (= (- in27 in26) (- in26 in25)) (= (- in28 in27) (- in27 in26))))",
        "equivalent": true
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15)))  ( =  ( -  in18 in17) ( -  in17 in16)))  ( =  ( -  in19 in18) ( -  in18 in17)))  ( =  ( -  in20 in19) ( -  in19 in18)))  ( =  ( -  in21 in20) ( -  in20 in19)))  ( =  ( -  in22 in21) ( -  in21 in20)))  ( =  ( -  in23 in22) ( -  in22 in21)))  ( =  ( -  in24 in23) ( -  in23 in22)))  ( =  ( -  in25 in24) ( -  in24 in23)))  ( =  ( -  in26 in25) ( -  in25 in24)))  ( =  ( -  in27 in26) ( -  in26 in25)))  ( =  ( -  in28 in27) ( -  in27 in26)))  ( =  ( -  in29 in28) ( -  in28 in27))))"
          ]
        },
        "predicted": "(assert (and (= (- in2 in1) (- in1 in0)) (= (- in3 in2) (- in2 in1)) (= (- in4 in3) (- in3 in2)) (= (- in5 in4) (- in4 in3)) (= (- in6 in5) (- in5 in4)) (= (- in7 in6) (- in6 in5)) (= (- in8 in7) (- in7 in6)) (= (- in9 in8) (- in8 in7)) (= (- in10 in9) (- in9 in8)) (= (- in11 in10) (- in10 in9)) (= (- in12 in11) (- in11 in10)) (= (- in13 in12) (- in12 in11)) (= (- in14 in13) (- in13 in12)) (= (- in15 in14) (- in14 in13)) (= (- in16 in15) (- in15 in14)) (= (- in17 in16) (- in16 in15)) (= (- in18 in17) (- in17 in16)) (= (- in19 in18) (- in18 in17)) (= (- in20 in19) (- in19 in18)) (= (- in21 in20) (- in20 in19)) (= (- in22 in21) (- in21 in20)) (= (- in23 in22) (- in22 in21)) (= (- in24 in23) (- in23 in22)) (= (- in25 in24) (- in24 in23)) (= (- in26 in25) (- in25 in24)) (= (- in27 in26) (- in26 in25)) (= (- in28 in27) (- in27 in26)) (= (- in29 in28) (- in28 in27))))",
        "equivalent": true
      }
    }
  },
  "WeirdFibonacci": {
    "succeeded": true,
    "attempts": 2,
    "examples_right": 30,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 ( +  in0 in1)))"
          ]
        },
        "predicted": "(assert ( = in2 ( + in1 in0)))",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2))))"
          ]
        },
        "predicted": "(assert (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ))",
        "equivalent": true
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3))))"
          ]
        },
        "predicted": "(assert (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ) ))",
        "equivalent": true
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4))))"
          ]
        },
        "predicted": "(assert (and (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ( = in5 ( + in4 in3)) ) ) ))",
        "equivalent": true
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5))))"
          ]
        },
        "predicted": "(assert (and (and (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ( = in5 ( + in4 in3)) ( = in6 ( + in5 in4)) ) ) ) ))",
        "equivalent": true
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ( = in5 ( + in4 in3)) ( = in6 ( + in5 in4)) ( = in7 ( + in6 in5)) ) ) ) ) ))",
        "equivalent": true
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6)))  ( =  in8 ( +  in6 in7))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ( = in5 ( + in4 in3)) ( = in6 ( + in5 in4)) ( = in7 ( + in6 in5)) ( = in8 ( + in7 in6)) ) ) ) ) ) ))",
        "equivalent": true
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6)))  ( =  in8 ( +  in6 in7)))  ( =  in9 ( +  in7 in8))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ( = in5 ( + in4 in3)) ( = in6 ( + in5 in4)) ( = in7 ( + in6 in5)) ( = in8 ( + in7 in6)) ( = in9 ( + in8 in7)) ) ) ) ) ) ) ))",
        "equivalent": true
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6)))  ( =  in8 ( +  in6 in7)))  ( =  in9 ( +  in7 in8)))  ( =  in10 ( +  in8 in9))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ( = in5 ( + in4 in3)) ( = in6 ( + in5 in4)) ( = in7 ( + in6 in5)) ( = in8 ( + in7 in6)) ( = in9 ( + in8 in7)) ( = in10 ( + in9 in8)) ) ) ) ) ) ) ) ))",
        "equivalent": true
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6)))  ( =  in8 ( +  in6 in7)))  ( =  in9 ( +  in7 in8)))  ( =  in10 ( +  in8 in9)))  ( =  in11 ( +  in9 in10))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ( = in5 ( + in4 in3)) ( = in6 ( + in5 in4)) ( = in7 ( + in6 in5)) ( = in8 ( + in7 in6)) ( = in9 ( + in8 in7)) ( = in10 ( + in9 in8)) ( = in11 ( + in10 in9)) ) ) ) ) ) ) ) ) ))",
        "equivalent": true
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6)))  ( =  in8 ( +  in6 in7)))  ( =  in9 ( +  in7 in8)))  ( =  in10 ( +  in8 in9)))  ( =  in11 ( +  in9 in10)))  ( =  in12 ( +  in10 in11))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ( = in5 ( + in4 in3)) ( = in6 ( + in5 in4)) ( = in7 ( + in6 in5)) ( = in8 ( + in7 in6)) ( = in9 ( + in8 in7)) ( = in10 ( + in9 in8)) ( = in11 ( + in10 in9)) ( = in12 ( + in11 in10)) ) ) ) ) ) ) ) ) ) ))",
        "equivalent": true
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6)))  ( =  in8 ( +  in6 in7)))  ( =  in9 ( +  in7 in8)))  ( =  in10 ( +  in8 in9)))  ( =  in11 ( +  in9 in10)))  ( =  in12 ( +  in10 in11)))  ( =  in13 ( +  in11 in12))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ( = in5 ( + in4 in3)) ( = in6 ( + in5 in4)) ( = in7 ( + in6 in5)) ( = in8 ( + in7 in6)) ( = in9 ( + in8 in7)) ( = in10 ( + in9 in8)) ( = in11 ( + in10 in9)) ( = in12 ( + in11 in10)) ( = in13 ( + in12 in11)) ) ) ) ) ) ) ) ) ) ) ))",
        "equivalent": true
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6)))  ( =  in8 ( +  in6 in7)))  ( =  in9 ( +  in7 in8)))  ( =  in10 ( +  in8 in9)))  ( =  in11 ( +  in9 in10)))  ( =  in12 ( +  in10 in11)))  ( =  in13 ( +  in11 in12)))  ( =  in14 ( +  in12 in13))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ( = in5 ( + in4 in3)) ( = in6 ( + in5 in4)) ( = in7 ( + in6 in5)) ( = in8 ( + in7 in6)) ( = in9 ( + in8 in7)) ( = in10 ( + in9 in8)) ( = in11 ( + in10 in9)) ( = in12 ( + in11 in10)) ( = in13 ( + in12 in11)) ( = in14 ( + in13 in12)) ) ) ) ) ) ) ) ) ) ) ) ))",
        "equivalent": true
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6)))  ( =  in8 ( +  in6 in7)))  ( =  in9 ( +  in7 in8)))  ( =  in10 ( +  in8 in9)))  ( =  in11 ( +  in9 in10)))  ( =  in12 ( +  in10 in11)))  ( =  in13 ( +  in11 in12)))  ( =  in14 ( +  in12 in13)))  ( =  in15 ( +  in13 in14))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ( = in5 ( + in4 in3)) ( = in6 ( + in5 in4)) ( = in7 ( + in6 in5)) ( = in8 ( + in7 in6)) ( = in9 ( + in8 in7)) ( = in10 ( + in9 in8)) ( = in11 ( + in10 in9)) ( = in12 ( + in11 in10)) ( = in13 ( + in12 in11)) ( = in14 ( + in13 in12)) ( = in15 ( + in14 in13)) ) ) ) ) ) ) ) ) ) ) ) ) ))",
        "equivalent": true
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6)))  ( =  in8 ( +  in6 in7)))  ( =  in9 ( +  in7 in8)))  ( =  in10 ( +  in8 in9)))  ( =  in11 ( +  in9 in10)))  ( =  in12 ( +  in10 in11)))  ( =  in13 ( +  in11 in12)))  ( =  in14 ( +  in12 in13)))  ( =  in15 ( +  in13 in14)))  ( =  in16 ( +  in14 in15))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ( = in5 ( + in4 in3)) ( = in6 ( + in5 in4)) ( = in7 ( + in6 in5)) ( = in8 ( + in7 in6)) ( = in9 ( + in8 in7)) ( = in10 ( + in9 in8)) ( = in11 ( + in10 in9)) ( = in12 ( + in11 in10)) ( = in13 ( + in12 in11)) ( = in14 ( + in13 in12)) ( = in15 ( + in14 in13)) ( = in16 ( + in15 in14)) ) ) ) ) ) ) ) ) ) ) ) ) ) ))",
        "equivalent": true
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6)))  ( =  in8 ( +  in6 in7)))  ( =  in9 ( +  in7 in8)))  ( =  in10 ( +  in8 in9)))  ( =  in11 ( +  in9 in10)))  ( =  in12 ( +  in10 in11)))  ( =  in13 ( +  in11 in12)))  ( =  in14 ( +  in12 in13)))  ( =  in15 ( +  in13 in14)))  ( =  in16 ( +  in14 in15)))  ( =  in17 ( +  in15 in16))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ( = in5 ( + in4 in3)) ( = in6 ( + in5 in4)) ( = in7 ( + in6 in5)) ( = in8 ( + in7 in6)) ( = in9 ( + in8 in7)) ( = in10 ( + in9 in8)) ( = in11 ( + in10 in9)) ( = in12 ( + in11 in10)) ( = in13 ( + in12 in11)) ( = in14 ( + in13 in12)) ( = in15 ( + in14 in13)) ( = in16 ( + in15 in14)) ( = in17 ( + in16 in15)) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ))",
        "equivalent": true
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6)))  ( =  in8 ( +  in6 in7)))  ( =  in9 ( +  in7 in8)))  ( =  in10 ( +  in8 in9)))  ( =  in11 ( +  in9 in10)))  ( =  in12 ( +  in10 in11)))  ( =  in13 ( +  in11 in12)))  ( =  in14 ( +  in12 in13)))  ( =  in15 ( +  in13 in14)))  ( =  in16 ( +  in14 in15)))  ( =  in17 ( +  in15 in16)))  ( =  in18 ( +  in16 in17))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ( = in5 ( + in4 in3)) ( = in6 ( + in5 in4)) ( = in7 ( + in6 in5)) ( = in8 ( + in7 in6)) ( = in9 ( + in8 in7)) ( = in10 ( + in9 in8)) ( = in11 ( + in10 in9)) ( = in12 ( + in11 in10)) ( = in13 ( + in12 in11)) ( = in14 ( + in13 in12)) ( = in15 ( + in14 in13)) ( = in16 ( + in15 in14)) ( = in17 ( + in16 in15)) ( = in18 ( + in17 in16)) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ))",
        "equivalent": true
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6)))  ( =  in8 ( +  in6 in7)))  ( =  in9 ( +  in7 in8)))  ( =  in10 ( +  in8 in9)))  ( =  in11 ( +  in9 in10)))  ( =  in12 ( +  in10 in11)))  ( =  in13 ( +  in11 in12)))  ( =  in14 ( +  in12 in13)))  ( =  in15 ( +  in13 in14)))  ( =  in16 ( +  in14 in15)))  ( =  in17 ( +  in15 in16)))  ( =  in18 ( +  in16 in17)))  ( =  in19 ( +  in17 in18))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ( = in5 ( + in4 in3)) ( = in6 ( + in5 in4)) ( = in7 ( + in6 in5)) ( = in8 ( + in7 in6)) ( = in9 ( + in8 in7)) ( = in10 ( + in9 in8)) ( = in11 ( + in10 in9)) ( = in12 ( + in11 in10)) ( = in13 ( + in12 in11)) ( = in14 ( + in13 in12)) ( = in15 ( + in14 in13)) ( = in16 ( + in15 in14)) ( = in17 ( + in16 in15)) ( = in18 ( + in17 in16)) ( = in19 ( + in18 in17)) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ))",
        "equivalent": true
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6)))  ( =  in8 ( +  in6 in7)))  ( =  in9 ( +  in7 in8)))  ( =  in10 ( +  in8 in9)))  ( =  in11 ( +  in9 in10)))  ( =  in12 ( +  in10 in11)))  ( =  in13 ( +  in11 in12)))  ( =  in14 ( +  in12 in13)))  ( =  in15 ( +  in13 in14)))  ( =  in16 ( +  in14 in15)))  ( =  in17 ( +  in15 in16)))  ( =  in18 ( +  in16 in17)))  ( =  in19 ( +  in17 in18)))  ( =  in20 ( +  in18 in19))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ( = in5 ( + in4 in3)) ( = in6 ( + in5 in4)) ( = in7 ( + in6 in5)) ( = in8 ( + in7 in6)) ( = in9 ( + in8 in7)) ( = in10 ( + in9 in8)) ( = in11 ( + in10 in9)) ( = in12 ( + in11 in10)) ( = in13 ( + in12 in11)) ( = in14 ( + in13 in12)) ( = in15 ( + in14 in13)) ( = in16 ( + in15 in14)) ( = in17 ( + in16 in15)) ( = in18 ( + in17 in16)) ( = in19 ( + in18 in17)) ( = in20 ( + in19 in18)) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ))",
        "equivalent": true
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6)))  ( =  in8 ( +  in6 in7)))  ( =  in9 ( +  in7 in8)))  ( =  in10 ( +  in8 in9)))  ( =  in11 ( +  in9 in10)))  ( =  in12 ( +  in10 in11)))  ( =  in13 ( +  in11 in12)))  ( =  in14 ( +  in12 in13)))  ( =  in15 ( +  in13 in14)))  ( =  in16 ( +  in14 in15)))  ( =  in17 ( +  in15 in16)))  ( =  in18 ( +  in16 in17)))  ( =  in19 ( +  in17 in18)))  ( =  in20 ( +  in18 in19)))  ( =  in21 ( +  in19 in20))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ( = in5 ( + in4 in3)) ( = in6 ( + in5 in4)) ( = in7 ( + in6 in5)) ( = in8 ( + in7 in6)) ( = in9 ( + in8 in7)) ( = in10 ( + in9 in8)) ( = in11 ( + in10 in9)) ( = in12 ( + in11 in10)) ( = in13 ( + in12 in11)) ( = in14 ( + in13 in12)) ( = in15 ( + in14 in13)) ( = in16 ( + in15 in14)) ( = in17 ( + in16 in15)) ( = in18 ( + in17 in16)) ( = in19 ( + in18 in17)) ( = in20 ( + in19 in18)) ( = in21 ( + in20 in19)) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ))",
        "equivalent": true
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6)))  ( =  in8 ( +  in6 in7)))  ( =  in9 ( +  in7 in8)))  ( =  in10 ( +  in8 in9)))  ( =  in11 ( +  in9 in10)))  ( =  in12 ( +  in10 in11)))  ( =  in13 ( +  in11 in12)))  ( =  in14 ( +  in12 in13)))  ( =  in15 ( +  in13 in14)))  ( =  in16 ( +  in14 in15)))  ( =  in17 ( +  in15 in16)))  ( =  in18 ( +  in16 in17)))  ( =  in19 ( +  in17 in18)))  ( =  in20 ( +  in18 in19)))  ( =  in21 ( +  in19 in20)))  ( =  in22 ( +  in20 in21))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ( = in5 ( + in4 in3)) ( = in6 ( + in5 in4)) ( = in7 ( + in6 in5)) ( = in8 ( + in7 in6)) ( = in9 ( + in8 in7)) ( = in10 ( + in9 in8)) ( = in11 ( + in10 in9)) ( = in12 ( + in11 in10)) ( = in13 ( + in12 in11)) ( = in14 ( + in13 in12)) ( = in15 ( + in14 in13)) ( = in16 ( + in15 in14)) ( = in17 ( + in16 in15)) ( = in18 ( + in17 in16)) ( = in19 ( + in18 in17)) ( = in20 ( + in19 in18)) ( = in21 ( + in20 in19)) ( = in22 ( + in21 in20)) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ))",
        "equivalent": true
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6)))  ( =  in8 ( +  in6 in7)))  ( =  in9 ( +  in7 in8)))  ( =  in10 ( +  in8 in9)))  ( =  in11 ( +  in9 in10)))  ( =  in12 ( +  in10 in11)))  ( =  in13 ( +  in11 in12)))  ( =  in14 ( +  in12 in13)))  ( =  in15 ( +  in13 in14)))  ( =  in16 ( +  in14 in15)))  ( =  in17 ( +  in15 in16)))  ( =  in18 ( +  in16 in17)))  ( =  in19 ( +  in17 in18)))  ( =  in20 ( +  in18 in19)))  ( =  in21 ( +  in19 in20)))  ( =  in22 ( +  in20 in21)))  ( =  in23 ( +  in21 in22))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ( = in5 ( + in4 in3)) ( = in6 ( + in5 in4)) ( = in7 ( + in6 in5)) ( = in8 ( + in7 in6)) ( = in9 ( + in8 in7)) ( = in10 ( + in9 in8)) ( = in11 ( + in10 in9)) ( = in12 ( + in11 in10)) ( = in13 ( + in12 in11)) ( = in14 ( + in13 in12)) ( = in15 ( + in14 in13)) ( = in16 ( + in15 in14)) ( = in17 ( + in16 in15)) ( = in18 ( + in17 in16)) ( = in19 ( + in18 in17)) ( = in20 ( + in19 in18)) ( = in21 ( + in20 in19)) ( = in22 ( + in21 in20)) ( = in23 ( + in22 in21)) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ))",
        "equivalent": true
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6)))  ( =  in8 ( +  in6 in7)))  ( =  in9 ( +  in7 in8)))  ( =  in10 ( +  in8 in9)))  ( =  in11 ( +  in9 in10)))  ( =  in12 ( +  in10 in11)))  ( =  in13 ( +  in11 in12)))  ( =  in14 ( +  in12 in13)))  ( =  in15 ( +  in13 in14)))  ( =  in16 ( +  in14 in15)))  ( =  in17 ( +  in15 in16)))  ( =  in18 ( +  in16 in17)))  ( =  in19 ( +  in17 in18)))  ( =  in20 ( +  in18 in19)))  ( =  in21 ( +  in19 in20)))  ( =  in22 ( +  in20 in21)))  ( =  in23 ( +  in21 in22)))  ( =  in24 ( +  in22 in23))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ( = in5 ( + in4 in3)) ( = in6 ( + in5 in4)) ( = in7 ( + in6 in5)) ( = in8 ( + in7 in6)) ( = in9 ( + in8 in7)) ( = in10 ( + in9 in8)) ( = in11 ( + in10 in9)) ( = in12 ( + in11 in10)) ( = in13 ( + in12 in11)) ( = in14 ( + in13 in12)) ( = in15 ( + in14 in13)) ( = in16 ( + in15 in14)) ( = in17 ( + in16 in15)) ( = in18 ( + in17 in16)) ( = in19 ( + in18 in17)) ( = in20 ( + in19 in18)) ( = in21 ( + in20 in19)) ( = in22 ( + in21 in20)) ( = in23 ( + in22 in21)) ( = in24 ( + in23 in22)) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ))",
        "equivalent": true
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6)))  ( =  in8 ( +  in6 in7)))  ( =  in9 ( +  in7 in8)))  ( =  in10 ( +  in8 in9)))  ( =  in11 ( +  in9 in10)))  ( =  in12 ( +  in10 in11)))  ( =  in13 ( +  in11 in12)))  ( =  in14 ( +  in12 in13)))  ( =  in15 ( +  in13 in14)))  ( =  in16 ( +  in14 in15)))  ( =  in17 ( +  in15 in16)))  ( =  in18 ( +  in16 in17)))  ( =  in19 ( +  in17 in18)))  ( =  in20 ( +  in18 in19)))  ( =  in21 ( +  in19 in20)))  ( =  in22 ( +  in20 in21)))  ( =  in23 ( +  in21 in22)))  ( =  in24 ( +  in22 in23)))  ( =  in25 ( +  in23 in24))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ( = in5 ( + in4 in3)) ( = in6 ( + in5 in4)) ( = in7 ( + in6 in5)) ( = in8 ( + in7 in6)) ( = in9 ( + in8 in7)) ( = in10 ( + in9 in8)) ( = in11 ( + in10 in9)) ( = in12 ( + in11 in10)) ( = in13 ( + in12 in11)) ( = in14 ( + in13 in12)) ( = in15 ( + in14 in13)) ( = in16 ( + in15 in14)) ( = in17 ( + in16 in15)) ( = in18 ( + in17 in16)) ( = in19 ( + in18 in17)) ( = in20 ( + in19 in18)) ( = in21 ( + in20 in19)) ( = in22 ( + in21 in20)) ( = in23 ( + in22 in21)) ( = in24 ( + in23 in22)) ( = in25 ( + in24 in23)) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ))",
        "equivalent": true
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6)))  ( =  in8 ( +  in6 in7)))  ( =  in9 ( +  in7 in8)))  ( =  in10 ( +  in8 in9)))  ( =  in11 ( +  in9 in10)))  ( =  in12 ( +  in10 in11)))  ( =  in13 ( +  in11 in12)))  ( =  in14 ( +  in12 in13)))  ( =  in15 ( +  in13 in14)))  ( =  in16 ( +  in14 in15)))  ( =  in17 ( +  in15 in16)))  ( =  in18 ( +  in16 in17)))  ( =  in19 ( +  in17 in18)))  ( =  in20 ( +  in18 in19)))  ( =  in21 ( +  in19 in20)))  ( =  in22 ( +  in20 in21)))  ( =  in23 ( +  in21 in22)))  ( =  in24 ( +  in22 in23)))  ( =  in25 ( +  in23 in24)))  ( =  in26 ( +  in24 in25))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ( = in5 ( + in4 in3)) ( = in6 ( + in5 in4)) ( = in7 ( + in6 in5)) ( = in8 ( + in7 in6)) ( = in9 ( + in8 in7)) ( = in10 ( + in9 in8)) ( = in11 ( + in10 in9)) ( = in12 ( + in11 in10)) ( = in13 ( + in12 in11)) ( = in14 ( + in13 in12)) ( = in15 ( + in14 in13)) ( = in16 ( + in15 in14)) ( = in17 ( + in16 in15)) ( = in18 ( + in17 in16)) ( = in19 ( + in18 in17)) ( = in20 ( + in19 in18)) ( = in21 ( + in20 in19)) ( = in22 ( + in21 in20)) ( = in23 ( + in22 in21)) ( = in24 ( + in23 in22)) ( = in25 ( + in24 in23)) ( = in26 ( + in25 in24)) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ))",
        "equivalent": true
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6)))  ( =  in8 ( +  in6 in7)))  ( =  in9 ( +  in7 in8)))  ( =  in10 ( +  in8 in9)))  ( =  in11 ( +  in9 in10)))  ( =  in12 ( +  in10 in11)))  ( =  in13 ( +  in11 in12)))  ( =  in14 ( +  in12 in13)))  ( =  in15 ( +  in13 in14)))  ( =  in16 ( +  in14 in15)))  ( =  in17 ( +  in15 in16)))  ( =  in18 ( +  in16 in17)))  ( =  in19 ( +  in17 in18)))  ( =  in20 ( +  in18 in19)))  ( =  in21 ( +  in19 in20)))  ( =  in22 ( +  in20 in21)))  ( =  in23 ( +  in21 in22)))  ( =  in24 ( +  in22 in23)))  ( =  in25 ( +  in23 in24)))  ( =  in26 ( +  in24 in25)))  ( =  in27 ( +  in25 in26))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ( = in5 ( + in4 in3)) ( = in6 ( + in5 in4)) ( = in7 ( + in6 in5)) ( = in8 ( + in7 in6)) ( = in9 ( + in8 in7)) ( = in10 ( + in9 in8)) ( = in11 ( + in10 in9)) ( = in12 ( + in11 in10)) ( = in13 ( + in12 in11)) ( = in14 ( + in13 in12)) ( = in15 ( + in14 in13)) ( = in16 ( + in15 in14)) ( = in17 ( + in16 in15)) ( = in18 ( + in17 in16)) ( = in19 ( + in18 in17)) ( = in20 ( + in19 in18)) ( = in21 ( + in20 in19)) ( = in22 ( + in21 in20)) ( = in23 ( + in22 in21)) ( = in24 ( + in23 in22)) ( = in25 ( + in24 in23)) ( = in26 ( + in25 in24)) ( = in27 ( + in26 in25)) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ))",
        "equivalent": true
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6)))  ( =  in8 ( +  in6 in7)))  ( =  in9 ( +  in7 in8)))  ( =  in10 ( +  in8 in9)))  ( =  in11 ( +  in9 in10)))  ( =  in12 ( +  in10 in11)))  ( =  in13 ( +  in11 in12)))  ( =  in14 ( +  in12 in13)))  ( =  in15 ( +  in13 in14)))  ( =  in16 ( +  in14 in15)))  ( =  in17 ( +  in15 in16)))  ( =  in18 ( +  in16 in17)))  ( =  in19 ( +  in17 in18)))  ( =  in20 ( +  in18 in19)))  ( =  in21 ( +  in19 in20)))  ( =  in22 ( +  in20 in21)))  ( =  in23 ( +  in21 in22)))  ( =  in24 ( +  in22 in23)))  ( =  in25 ( +  in23 in24)))  ( =  in26 ( +  in24 in25)))  ( =  in27 ( +  in25 in26)))  ( =  in28 ( +  in26 in27))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ( = in5 ( + in4 in3)) ( = in6 ( + in5 in4)) ( = in7 ( + in6 in5)) ( = in8 ( + in7 in6)) ( = in9 ( + in8 in7)) ( = in10 ( + in9 in8)) ( = in11 ( + in10 in9)) ( = in12 ( + in11 in10)) ( = in13 ( + in12 in11)) ( = in14 ( + in13 in12)) ( = in15 ( + in14 in13)) ( = in16 ( + in15 in14)) ( = in17 ( + in16 in15)) ( = in18 ( + in17 in16)) ( = in19 ( + in18 in17)) ( = in20 ( + in19 in18)) ( = in21 ( + in20 in19)) ( = in22 ( + in21 in20)) ( = in23 ( + in22 in21)) ( = in24 ( + in23 in22)) ( = in25 ( + in24 in23)) ( = in26 ( + in25 in24)) ( = in27 ( + in26 in25)) ( = in28 ( + in27 in26)) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ))",
        "equivalent": true
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6)))  ( =  in8 ( +  in6 in7)))  ( =  in9 ( +  in7 in8)))  ( =  in10 ( +  in8 in9)))  ( =  in11 ( +  in9 in10)))  ( =  in12 ( +  in10 in11)))  ( =  in13 ( +  in11 in12)))  ( =  in14 ( +  in12 in13)))  ( =  in15 ( +  in13 in14)))  ( =  in16 ( +  in14 in15)))  ( =  in17 ( +  in15 in16)))  ( =  in18 ( +  in16 in17)))  ( =  in19 ( +  in17 in18)))  ( =  in20 ( +  in18 in19)))  ( =  in21 ( +  in19 in20)))  ( =  in22 ( +  in20 in21)))  ( =  in23 ( +  in21 in22)))  ( =  in24 ( +  in22 in23)))  ( =  in25 ( +  in23 in24)))  ( =  in26 ( +  in24 in25)))  ( =  in27 ( +  in25 in26)))  ( =  in28 ( +  in26 in27)))  ( =  in29 ( +  in27 in28))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in2 ( + in1 in0)) ( = in3 ( + in2 in1)) ( = in4 ( + in3 in2)) ( = in5 ( + in4 in3)) ( = in6 ( + in5 in4)) ( = in7 ( + in6 in5)) ( = in8 ( + in7 in6)) ( = in9 ( + in8 in7)) ( = in10 ( + in9 in8)) ( = in11 ( + in10 in9)) ( = in12 ( + in11 in10)) ( = in13 ( + in12 in11)) ( = in14 ( + in13 in12)) ( = in15 ( + in14 in13)) ( = in16 ( + in15 in14)) ( = in17 ( + in16 in15)) ( = in18 ( + in17 in16)) ( = in19 ( + in18 in17)) ( = in20 ( + in19 in18)) ( = in21 ( + in20 in19)) ( = in22 ( + in21 in20)) ( = in23 ( + in22 in21)) ( = in24 ( + in23 in22)) ( = in25 ( + in24 in23)) ( = in26 ( + in25 in24)) ( = in27 ( + in26 in25)) ( = in28 ( + in27 in26)) ( = in29 ( + in28 in27)) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ))",
        "equivalent": true
      }
    }
  },
  "WeirdTimes": {
    "succeeded": true,
    "attempts": 1,
    "examples_right": 30,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert  ( =  in1 ( *  in0 2)))"
          ]
        },
        "predicted": "(assert ( = in1 ( * in0 2)))",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3))))"
          ]
        },
        "predicted": "(assert (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3))))",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4))))"
          ]
        },
        "predicted": "(assert (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)))))",
        "equivalent": true
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5))))"
          ]
        },
        "predicted": "(assert (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5))))))",
        "equivalent": true
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6))))"
          ]
        },
        "predicted": "(assert (and (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5)) ( = in5 ( * in0 6)))))))",
        "equivalent": true
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5)) ( = in5 ( * in0 6)) ( = in6 ( * in0 7))))))))",
        "equivalent": true
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5)) ( = in5 ( * in0 6)) ( = in6 ( * in0 7)) ( = in7 ( * in0 8)))))))))",
        "equivalent": true
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5)) ( = in5 ( * in0 6)) ( = in6 ( * in0 7)) ( = in7 ( * in0 8)) ( = in8 ( * in0 9))))))))))",
        "equivalent": true
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5)) ( = in5 ( * in0 6)) ( = in6 ( * in0 7)) ( = in7 ( * in0 8)) ( = in8 ( * in0 9)) ( = in9 ( * in0 10)))))))))))",
        "equivalent": true
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5)) ( = in5 ( * in0 6)) ( = in6 ( * in0 7)) ( = in7 ( * in0 8)) ( = in8 ( * in0 9)) ( = in9 ( * in0 10)) ( = in10 ( * in0 11))))))))))))",
        "equivalent": true
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5)) ( = in5 ( * in0 6)) ( = in6 ( * in0 7)) ( = in7 ( * in0 8)) ( = in8 ( * in0 9)) ( = in9 ( * in0 10)) ( = in10 ( * in0 11)) ( = in11 ( * in0 12)))))))))))))",
        "equivalent": true
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5)) ( = in5 ( * in0 6)) ( = in6 ( * in0 7)) ( = in7 ( * in0 8)) ( = in8 ( * in0 9)) ( = in9 ( * in0 10)) ( = in10 ( * in0 11)) ( = in11 ( * in0 12)) ( = in12 ( * in0 13))))))))))))))",
        "equivalent": true
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5)) ( = in5 ( * in0 6)) ( = in6 ( * in0 7)) ( = in7 ( * in0 8)) ( = in8 ( * in0 9)) ( = in9 ( * in0 10)) ( = in10 ( * in0 11)) ( = in11 ( * in0 12)) ( = in12 ( * in0 13)) ( = in13 ( * in0 14)))))))))))))))",
        "equivalent": true
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5)) ( = in5 ( * in0 6)) ( = in6 ( * in0 7)) ( = in7 ( * in0 8)) ( = in8 ( * in0 9)) ( = in9 ( * in0 10)) ( = in10 ( * in0 11)) ( = in11 ( * in0 12)) ( = in12 ( * in0 13)) ( = in13 ( * in0 14)) ( = in14 ( * in0 15))))))))))))))))",
        "equivalent": true
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5)) ( = in5 ( * in0 6)) ( = in6 ( * in0 7)) ( = in7 ( * in0 8)) ( = in8 ( * in0 9)) ( = in9 ( * in0 10)) ( = in10 ( * in0 11)) ( = in11 ( * in0 12)) ( = in12 ( * in0 13)) ( = in13 ( * in0 14)) ( = in14 ( * in0 15)) ( = in15 ( * in0 16)))))))))))))))))",
        "equivalent": true
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5)) ( = in5 ( * in0 6)) ( = in6 ( * in0 7)) ( = in7 ( * in0 8)) ( = in8 ( * in0 9)) ( = in9 ( * in0 10)) ( = in10 ( * in0 11)) ( = in11 ( * in0 12)) ( = in12 ( * in0 13)) ( = in13 ( * in0 14)) ( = in14 ( * in0 15)) ( = in15 ( * in0 16)) ( = in16 ( * in0 17))))))))))))))))))",
        "equivalent": true
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5)) ( = in5 ( * in0 6)) ( = in6 ( * in0 7)) ( = in7 ( * in0 8)) ( = in8 ( * in0 9)) ( = in9 ( * in0 10)) ( = in10 ( * in0 11)) ( = in11 ( * in0 12)) ( = in12 ( * in0 13)) ( = in13 ( * in0 14)) ( = in14 ( * in0 15)) ( = in15 ( * in0 16)) ( = in16 ( * in0 17)) ( = in17 ( * in0 18)))))))))))))))))))",
        "equivalent": true
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5)) ( = in5 ( * in0 6)) ( = in6 ( * in0 7)) ( = in7 ( * in0 8)) ( = in8 ( * in0 9)) ( = in9 ( * in0 10)) ( = in10 ( * in0 11)) ( = in11 ( * in0 12)) ( = in12 ( * in0 13)) ( = in13 ( * in0 14)) ( = in14 ( * in0 15)) ( = in15 ( * in0 16)) ( = in16 ( * in0 17)) ( = in17 ( * in0 18)) ( = in18 ( * in0 19))))))))))))))))))))",
        "equivalent": true
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5)) ( = in5 ( * in0 6)) ( = in6 ( * in0 7)) ( = in7 ( * in0 8)) ( = in8 ( * in0 9)) ( = in9 ( * in0 10)) ( = in10 ( * in0 11)) ( = in11 ( * in0 12)) ( = in12 ( * in0 13)) ( = in13 ( * in0 14)) ( = in14 ( * in0 15)) ( = in15 ( * in0 16)) ( = in16 ( * in0 17)) ( = in17 ( * in0 18)) ( = in18 ( * in0 19)) ( = in19 ( * in0 20)))))))))))))))))))))",
        "equivalent": true
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5)) ( = in5 ( * in0 6)) ( = in6 ( * in0 7)) ( = in7 ( * in0 8)) ( = in8 ( * in0 9)) ( = in9 ( * in0 10)) ( = in10 ( * in0 11)) ( = in11 ( * in0 12)) ( = in12 ( * in0 13)) ( = in13 ( * in0 14)) ( = in14 ( * in0 15)) ( = in15 ( * in0 16)) ( = in16 ( * in0 17)) ( = in17 ( * in0 18)) ( = in18 ( * in0 19)) ( = in19 ( * in0 20)) ( = in20 ( * in0 21))))))))))))))))))))))",
        "equivalent": true
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5)) ( = in5 ( * in0 6)) ( = in6 ( * in0 7)) ( = in7 ( * in0 8)) ( = in8 ( * in0 9)) ( = in9 ( * in0 10)) ( = in10 ( * in0 11)) ( = in11 ( * in0 12)) ( = in12 ( * in0 13)) ( = in13 ( * in0 14)) ( = in14 ( * in0 15)) ( = in15 ( * in0 16)) ( = in16 ( * in0 17)) ( = in17 ( * in0 18)) ( = in18 ( * in0 19)) ( = in19 ( * in0 20)) ( = in20 ( * in0 21)) ( = in21 ( * in0 22)))))))))))))))))))))))",
        "equivalent": true
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22)))  ( =  in22 ( *  in0 23))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5)) ( = in5 ( * in0 6)) ( = in6 ( * in0 7)) ( = in7 ( * in0 8)) ( = in8 ( * in0 9)) ( = in9 ( * in0 10)) ( = in10 ( * in0 11)) ( = in11 ( * in0 12)) ( = in12 ( * in0 13)) ( = in13 ( * in0 14)) ( = in14 ( * in0 15)) ( = in15 ( * in0 16)) ( = in16 ( * in0 17)) ( = in17 ( * in0 18)) ( = in18 ( * in0 19)) ( = in19 ( * in0 20)) ( = in20 ( * in0 21)) ( = in21 ( * in0 22)) ( = in22 ( * in0 23))))))))))))))))))))))))",
        "equivalent": true
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22)))  ( =  in22 ( *  in0 23)))  ( =  in23 ( *  in0 24))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5)) ( = in5 ( * in0 6)) ( = in6 ( * in0 7)) ( = in7 ( * in0 8)) ( = in8 ( * in0 9)) ( = in9 ( * in0 10)) ( = in10 ( * in0 11)) ( = in11 ( * in0 12)) ( = in12 ( * in0 13)) ( = in13 ( * in0 14)) ( = in14 ( * in0 15)) ( = in15 ( * in0 16)) ( = in16 ( * in0 17)) ( = in17 ( * in0 18)) ( = in18 ( * in0 19)) ( = in19 ( * in0 20)) ( = in20 ( * in0 21)) ( = in21 ( * in0 22)) ( = in22 ( * in0 23)) ( = in23 ( * in0 24)))))))))))))))))))))))))",
        "equivalent": true
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22)))  ( =  in22 ( *  in0 23)))  ( =  in23 ( *  in0 24)))  ( =  in24 ( *  in0 25))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5)) ( = in5 ( * in0 6)) ( = in6 ( * in0 7)) ( = in7 ( * in0 8)) ( = in8 ( * in0 9)) ( = in9 ( * in0 10)) ( = in10 ( * in0 11)) ( = in11 ( * in0 12)) ( = in12 ( * in0 13)) ( = in13 ( * in0 14)) ( = in14 ( * in0 15)) ( = in15 ( * in0 16)) ( = in16 ( * in0 17)) ( = in17 ( * in0 18)) ( = in18 ( * in0 19)) ( = in19 ( * in0 20)) ( = in20 ( * in0 21)) ( = in21 ( * in0 22)) ( = in22 ( * in0 23)) ( = in23 ( * in0 24)) ( = in24 ( * in0 25))))))))))))))))))))))))))",
        "equivalent": true
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22)))  ( =  in22 ( *  in0 23)))  ( =  in23 ( *  in0 24)))  ( =  in24 ( *  in0 25)))  ( =  in25 ( *  in0 26))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5)) ( = in5 ( * in0 6)) ( = in6 ( * in0 7)) ( = in7 ( * in0 8)) ( = in8 ( * in0 9)) ( = in9 ( * in0 10)) ( = in10 ( * in0 11)) ( = in11 ( * in0 12)) ( = in12 ( * in0 13)) ( = in13 ( * in0 14)) ( = in14 ( * in0 15)) ( = in15 ( * in0 16)) ( = in16 ( * in0 17)) ( = in17 ( * in0 18)) ( = in18 ( * in0 19)) ( = in19 ( * in0 20)) ( = in20 ( * in0 21)) ( = in21 ( * in0 22)) ( = in22 ( * in0 23)) ( = in23 ( * in0 24)) ( = in24 ( * in0 25)) ( = in25 ( * in0 26)))))))))))))))))))))))))))",
        "equivalent": true
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22)))  ( =  in22 ( *  in0 23)))  ( =  in23 ( *  in0 24)))  ( =  in24 ( *  in0 25)))  ( =  in25 ( *  in0 26)))  ( =  in26 ( *  in0 27))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5)) ( = in5 ( * in0 6)) ( = in6 ( * in0 7)) ( = in7 ( * in0 8)) ( = in8 ( * in0 9)) ( = in9 ( * in0 10)) ( = in10 ( * in0 11)) ( = in11 ( * in0 12)) ( = in12 ( * in0 13)) ( = in13 ( * in0 14)) ( = in14 ( * in0 15)) ( = in15 ( * in0 16)) ( = in16 ( * in0 17)) ( = in17 ( * in0 18)) ( = in18 ( * in0 19)) ( = in19 ( * in0 20)) ( = in20 ( * in0 21)) ( = in21 ( * in0 22)) ( = in22 ( * in0 23)) ( = in23 ( * in0 24)) ( = in24 ( * in0 25)) ( = in25 ( * in0 26)) ( = in26 ( * in0 27))))))))))))))))))))))))))))",
        "equivalent": true
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22)))  ( =  in22 ( *  in0 23)))  ( =  in23 ( *  in0 24)))  ( =  in24 ( *  in0 25)))  ( =  in25 ( *  in0 26)))  ( =  in26 ( *  in0 27)))  ( =  in27 ( *  in0 28))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5)) ( = in5 ( * in0 6)) ( = in6 ( * in0 7)) ( = in7 ( * in0 8)) ( = in8 ( * in0 9)) ( = in9 ( * in0 10)) ( = in10 ( * in0 11)) ( = in11 ( * in0 12)) ( = in12 ( * in0 13)) ( = in13 ( * in0 14)) ( = in14 ( * in0 15)) ( = in15 ( * in0 16)) ( = in16 ( * in0 17)) ( = in17 ( * in0 18)) ( = in18 ( * in0 19)) ( = in19 ( * in0 20)) ( = in20 ( * in0 21)) ( = in21 ( * in0 22)) ( = in22 ( * in0 23)) ( = in23 ( * in0 24)) ( = in24 ( * in0 25)) ( = in25 ( * in0 26)) ( = in26 ( * in0 27)) ( = in27 ( * in0 28)))))))))))))))))))))))))))))",
        "equivalent": true
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22)))  ( =  in22 ( *  in0 23)))  ( =  in23 ( *  in0 24)))  ( =  in24 ( *  in0 25)))  ( =  in25 ( *  in0 26)))  ( =  in26 ( *  in0 27)))  ( =  in27 ( *  in0 28)))  ( =  in28 ( *  in0 29))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5)) ( = in5 ( * in0 6)) ( = in6 ( * in0 7)) ( = in7 ( * in0 8)) ( = in8 ( * in0 9)) ( = in9 ( * in0 10)) ( = in10 ( * in0 11)) ( = in11 ( * in0 12)) ( = in12 ( * in0 13)) ( = in13 ( * in0 14)) ( = in14 ( * in0 15)) ( = in15 ( * in0 16)) ( = in16 ( * in0 17)) ( = in17 ( * in0 18)) ( = in18 ( * in0 19)) ( = in19 ( * in0 20)) ( = in20 ( * in0 21)) ( = in21 ( * in0 22)) ( = in22 ( * in0 23)) ( = in23 ( * in0 24)) ( = in24 ( * in0 25)) ( = in25 ( * in0 26)) ( = in26 ( * in0 27)) ( = in27 ( * in0 28)) ( = in28 ( * in0 29))))))))))))))))))))))))))))))",
        "equivalent": true
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22)))  ( =  in22 ( *  in0 23)))  ( =  in23 ( *  in0 24)))  ( =  in24 ( *  in0 25)))  ( =  in25 ( *  in0 26)))  ( =  in26 ( *  in0 27)))  ( =  in27 ( *  in0 28)))  ( =  in28 ( *  in0 29)))  ( =  in29 ( *  in0 30))))"
          ]
        },
        "predicted": "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ( = in1 ( * in0 2)) ( = in2 ( * in0 3)) ( = in3 ( * in0 4)) ( = in4 ( * in0 5)) ( = in5 ( * in0 6)) ( = in6 ( * in0 7)) ( = in7 ( * in0 8)) ( = in8 ( * in0 9)) ( = in9 ( * in0 10)) ( = in10 ( * in0 11)) ( = in11 ( * in0 12)) ( = in12 ( * in0 13)) ( = in13 ( * in0 14)) ( = in14 ( * in0 15)) ( = in15 ( * in0 16)) ( = in16 ( * in0 17)) ( = in17 ( * in0 18)) ( = in18 ( * in0 19)) ( = in19 ( * in0 20)) ( = in20 ( * in0 21)) ( = in21 ( * in0 22)) ( = in22 ( * in0 23)) ( = in23 ( * in0 24)) ( = in24 ( * in0 25)) ( = in25 ( * in0 26)) ( = in26 ( * in0 27)) ( = in27 ( * in0 28)) ( = in28 ( * in0 29)) ( = in29 ( * in0 30)))))))))))))))))))))))))))))))",
        "equivalent": true
      }
    }
  },
  "BadgerHash": {
    "succeeded": true,
    "attempts": 1,
    "examples_right": 30,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const get0 Int)",
            "(declare-const get1 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 1))  ( =  0 ( mod  ( +  get1 get0) 1))) (not ( = put0_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 1)) (not (= put0_0 get0)) (= 0 (mod (+ get1 get0) 1))))",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const put1_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const get0 Int)",
            "(declare-const get1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 2))  ( =  0 ( mod  ( +  put1_1 put1_0) 2)))  ( =  0 ( mod  ( +  get1 get0) 2))) (not ( = put0_0 get0))) (not ( = put1_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 2)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 2)) (not (= put1_0 get0)) (= 0 (mod (+ get1 get0) 2))))",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const get0 Int)",
            "(declare-const get1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 3))  ( =  0 ( mod  ( +  put1_1 put1_0) 3)))  ( =  0 ( mod  ( +  put2_1 put2_0) 3)))  ( =  0 ( mod  ( +  get1 get0) 3))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 3)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 3)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 3)) (not (= put2_0 get0)) (= 0 (mod (+ get1 get0) 3))))",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const put3_0 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const get0 Int)",
            "(declare-const get1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 4))  ( =  0 ( mod  ( +  put1_1 put1_0) 4)))  ( =  0 ( mod  ( +  put2_1 put2_0) 4)))  ( =  0 ( mod  ( +  put3_1 put3_0) 4)))  ( =  0 ( mod  ( +  get1 get0) 4))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 4)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 4)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 4)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 4)) (not (= put3_0 get0)) (= 0 (mod (+ get1 get0) 4))))",
        "equivalent": true
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const put3_0 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const get0 Int)",
            "(declare-const get1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 5))  ( =  0 ( mod  ( +  put1_1 put1_0) 5)))  ( =  0 ( mod  ( +  put2_1 put2_0) 5)))  ( =  0 ( mod  ( +  put3_1 put3_0) 5)))  ( =  0 ( mod  ( +  put4_1 put4_0) 5)))  ( =  0 ( mod  ( +  get1 get0) 5))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 5)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 5)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 5)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 5)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 5)) (not (= put4_0 get0)) (= 0 (mod (+ get1 get0) 5))))",
        "equivalent": true
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const get0 Int)",
            "(declare-const get1 Int)",
            "(declare-const put3_0 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put5_0 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const put5_1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 6))  ( =  0 ( mod  ( +  put1_1 put1_0) 6)))  ( =  0 ( mod  ( +  put2_1 put2_0) 6)))  ( =  0 ( mod  ( +  put3_1 put3_0) 6)))  ( =  0 ( mod  ( +  put4_1 put4_0) 6)))  ( =  0 ( mod  ( +  put5_1 put5_0) 6)))  ( =  0 ( mod  ( +  get1 get0) 6))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))) (not ( = put5_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 6)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 6)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 6)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 6)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 6)) (not (= put4_0 get0)) (= 0 (mod (+ put5_1 put5_0) 6)) (not (= put5_0 get0)) (= 0 (mod (+ get1 get0) 6))))",
        "equivalent": true
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const get0 Int)",
            "(declare-const get1 Int)",
            "(declare-const put3_0 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put5_0 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const put6_1 Int)",
            "(declare-const put6_0 Int)",
            "(declare-const put5_1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 7))  ( =  0 ( mod  ( +  put1_1 put1_0) 7)))  ( =  0 ( mod  ( +  put2_1 put2_0) 7)))  ( =  0 ( mod  ( +  put3_1 put3_0) 7)))  ( =  0 ( mod  ( +  put4_1 put4_0) 7)))  ( =  0 ( mod  ( +  put5_1 put5_0) 7)))  ( =  0 ( mod  ( +  put6_1 put6_0) 7)))  ( =  0 ( mod  ( +  get1 get0) 7))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))) (not ( = put5_0 get0))) (not ( = put6_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 7)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 7)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 7)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 7)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 7)) (not (= put4_0 get0)) (= 0 (mod (+ put5_1 put5_0) 7)) (not (= put5_0 get0)) (= 0 (mod (+ put6_1 put6_0) 7)) (not (= put6_0 get0)) (= 0 (mod (+ get1 get0) 7))))",
        "equivalent": true
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const get0 Int)",
            "(declare-const get1 Int)",
            "(declare-const put3_0 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put5_0 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const put7_0 Int)",
            "(declare-const put6_1 Int)",
            "(declare-const put6_0 Int)",
            "(declare-const put5_1 Int)",
            "(declare-const put7_1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 8))  ( =  0 ( mod  ( +  put1_1 put1_0) 8)))  ( =  0 ( mod  ( +  put2_1 put2_0) 8)))  ( =  0 ( mod  ( +  put3_1 put3_0) 8)))  ( =  0 ( mod  ( +  put4_1 put4_0) 8)))  ( =  0 ( mod  ( +  put5_1 put5_0) 8)))  ( =  0 ( mod  ( +  put6_1 put6_0) 8)))  ( =  0 ( mod  ( +  put7_1 put7_0) 8)))  ( =  0 ( mod  ( +  get1 get0) 8))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))) (not ( = put5_0 get0))) (not ( = put6_0 get0))) (not ( = put7_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 8)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 8)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 8)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 8)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 8)) (not (= put4_0 get0)) (= 0 (mod (+ put5_1 put5_0) 8)) (not (= put5_0 get0)) (= 0 (mod (+ put6_1 put6_0) 8)) (not (= put6_0 get0)) (= 0 (mod (+ put7_1 put7_0) 8)) (not (= put7_0 get0)) (= 0 (mod (+ get1 get0) 8))))",
        "equivalent": true
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const get0 Int)",
            "(declare-const get1 Int)",
            "(declare-const put3_0 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put5_0 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const put7_0 Int)",
            "(declare-const put6_1 Int)",
            "(declare-const put6_0 Int)",
            "(declare-const put5_1 Int)",
            "(declare-const put8_1 Int)",
            "(declare-const put8_0 Int)",
            "(declare-const put7_1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 9))  ( =  0 ( mod  ( +  put1_1 put1_0) 9)))  ( =  0 ( mod  ( +  put2_1 put2_0) 9)))  ( =  0 ( mod  ( +  put3_1 put3_0) 9)))  ( =  0 ( mod  ( +  put4_1 put4_0) 9)))  ( =  0 ( mod  ( +  put5_1 put5_0) 9)))  ( =  0 ( mod  ( +  put6_1 put6_0) 9)))  ( =  0 ( mod  ( +  put7_1 put7_0) 9)))  ( =  0 ( mod  ( +  put8_1 put8_0) 9)))  ( =  0 ( mod  ( +  get1 get0) 9))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))) (not ( = put5_0 get0))) (not ( = put6_0 get0))) (not ( = put7_0 get0))) (not ( = put8_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 9)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 9)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 9)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 9)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 9)) (not (= put4_0 get0)) (= 0 (mod (+ put5_1 put5_0) 9)) (not (= put5_0 get0)) (= 0 (mod (+ put6_1 put6_0) 9)) (not (= put6_0 get0)) (= 0 (mod (+ put7_1 put7_0) 9)) (not (= put7_0 get0)) (= 0 (mod (+ put8_1 put8_0) 9)) (not (= put8_0 get0)) (= 0 (mod (+ get1 get0) 9))))",
        "equivalent": true
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const get0 Int)",
            "(declare-const get1 Int)",
            "(declare-const put3_0 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put5_0 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const put9_1 Int)",
            "(declare-const put7_0 Int)",
            "(declare-const put6_1 Int)",
            "(declare-const put6_0 Int)",
            "(declare-const put5_1 Int)",
            "(declare-const put9_0 Int)",
            "(declare-const put8_1 Int)",
            "(declare-const put8_0 Int)",
            "(declare-const put7_1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 10))  ( =  0 ( mod  ( +  put1_1 put1_0) 10)))  ( =  0 ( mod  ( +  put2_1 put2_0) 10)))  ( =  0 ( mod  ( +  put3_1 put3_0) 10)))  ( =  0 ( mod  ( +  put4_1 put4_0) 10)))  ( =  0 ( mod  ( +  put5_1 put5_0) 10)))  ( =  0 ( mod  ( +  put6_1 put6_0) 10)))  ( =  0 ( mod  ( +  put7_1 put7_0) 10)))  ( =  0 ( mod  ( +  put8_1 put8_0) 10)))  ( =  0 ( mod  ( +  put9_1 put9_0) 10)))  ( =  0 ( mod  ( +  get1 get0) 10))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))) (not ( = put5_0 get0))) (not ( = put6_0 get0))) (not ( = put7_0 get0))) (not ( = put8_0 get0))) (not ( = put9_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 10)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 10)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 10)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 10)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 10)) (not (= put4_0 get0)) (= 0 (mod (+ put5_1 put5_0) 10)) (not (= put5_0 get0)) (= 0 (mod (+ put6_1 put6_0) 10)) (not (= put6_0 get0)) (= 0 (mod (+ put7_1 put7_0) 10)) (not (= put7_0 get0)) (= 0 (mod (+ put8_1 put8_0) 10)) (not (= put8_0 get0)) (= 0 (mod (+ put9_1 put9_0) 10)) (not (= put9_0 get0)) (= 0 (mod (+ get1 get0) 10))))",
        "equivalent": true
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const put10_0 Int)",
            "(declare-const get0 Int)",
            "(declare-const get1 Int)",
            "(declare-const put3_0 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put5_0 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const put9_1 Int)",
            "(declare-const put10_1 Int)",
            "(declare-const put7_0 Int)",
            "(declare-const put6_1 Int)",
            "(declare-const put6_0 Int)",
            "(declare-const put5_1 Int)",
            "(declare-const put9_0 Int)",
            "(declare-const put8_1 Int)",
            "(declare-const put8_0 Int)",
            "(declare-const put7_1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 11))  ( =  0 ( mod  ( +  put1_1 put1_0) 11)))  ( =  0 ( mod  ( +  put2_1 put2_0) 11)))  ( =  0 ( mod  ( +  put3_1 put3_0) 11)))  ( =  0 ( mod  ( +  put4_1 put4_0) 11)))  ( =  0 ( mod  ( +  put5_1 put5_0) 11)))  ( =  0 ( mod  ( +  put6_1 put6_0) 11)))  ( =  0 ( mod  ( +  put7_1 put7_0) 11)))  ( =  0 ( mod  ( +  put8_1 put8_0) 11)))  ( =  0 ( mod  ( +  put9_1 put9_0) 11)))  ( =  0 ( mod  ( +  put10_1 put10_0) 11)))  ( =  0 ( mod  ( +  get1 get0) 11))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))) (not ( = put5_0 get0))) (not ( = put6_0 get0))) (not ( = put7_0 get0))) (not ( = put8_0 get0))) (not ( = put9_0 get0))) (not ( = put10_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 11)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 11)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 11)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 11)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 11)) (not (= put4_0 get0)) (= 0 (mod (+ put5_1 put5_0) 11)) (not (= put5_0 get0)) (= 0 (mod (+ put6_1 put6_0) 11)) (not (= put6_0 get0)) (= 0 (mod (+ put7_1 put7_0) 11)) (not (= put7_0 get0)) (= 0 (mod (+ put8_1 put8_0) 11)) (not (= put8_0 get0)) (= 0 (mod (+ put9_1 put9_0) 11)) (not (= put9_0 get0)) (= 0 (mod (+ put10_1 put10_0) 11)) (not (= put10_0 get0)) (= 0 (mod (+ get1 get0) 11))))",
        "equivalent": true
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const put10_0 Int)",
            "(declare-const get0 Int)",
            "(declare-const get1 Int)",
            "(declare-const put3_0 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put5_0 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const put9_1 Int)",
            "(declare-const put11_0 Int)",
            "(declare-const put10_1 Int)",
            "(declare-const put11_1 Int)",
            "(declare-const put7_0 Int)",
            "(declare-const put6_1 Int)",
            "(declare-const put6_0 Int)",
            "(declare-const put5_1 Int)",
            "(declare-const put9_0 Int)",
            "(declare-const put8_1 Int)",
            "(declare-const put8_0 Int)",
            "(declare-const put7_1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 12))  ( =  0 ( mod  ( +  put1_1 put1_0) 12)))  ( =  0 ( mod  ( +  put2_1 put2_0) 12)))  ( =  0 ( mod  ( +  put3_1 put3_0) 12)))  ( =  0 ( mod  ( +  put4_1 put4_0) 12)))  ( =  0 ( mod  ( +  put5_1 put5_0) 12)))  ( =  0 ( mod  ( +  put6_1 put6_0) 12)))  ( =  0 ( mod  ( +  put7_1 put7_0) 12)))  ( =  0 ( mod  ( +  put8_1 put8_0) 12)))  ( =  0 ( mod  ( +  put9_1 put9_0) 12)))  ( =  0 ( mod  ( +  put10_1 put10_0) 12)))  ( =  0 ( mod  ( +  put11_1 put11_0) 12)))  ( =  0 ( mod  ( +  get1 get0) 12))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))) (not ( = put5_0 get0))) (not ( = put6_0 get0))) (not ( = put7_0 get0))) (not ( = put8_0 get0))) (not ( = put9_0 get0))) (not ( = put10_0 get0))) (not ( = put11_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 12)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 12)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 12)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 12)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 12)) (not (= put4_0 get0)) (= 0 (mod (+ put5_1 put5_0) 12)) (not (= put5_0 get0)) (= 0 (mod (+ put6_1 put6_0) 12)) (not (= put6_0 get0)) (= 0 (mod (+ put7_1 put7_0) 12)) (not (= put7_0 get0)) (= 0 (mod (+ put8_1 put8_0) 12)) (not (= put8_0 get0)) (= 0 (mod (+ put9_1 put9_0) 12)) (not (= put9_0 get0)) (= 0 (mod (+ put10_1 put10_0) 12)) (not (= put10_0 get0)) (= 0 (mod (+ put11_1 put11_0) 12)) (not (= put11_0 get0)) (= 0 (mod (+ get1 get0) 12))))",
        "equivalent": true
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const put10_0 Int)",
            "(declare-const get0 Int)",
            "(declare-const get1 Int)",
            "(declare-const put3_0 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put5_0 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const put12_1 Int)",
            "(declare-const put9_1 Int)",
            "(declare-const put11_0 Int)",
            "(declare-const put10_1 Int)",
            "(declare-const put12_0 Int)",
            "(declare-const put11_1 Int)",
            "(declare-const put7_0 Int)",
            "(declare-const put6_1 Int)",
            "(declare-const put6_0 Int)",
            "(declare-const put5_1 Int)",
            "(declare-const put9_0 Int)",
            "(declare-const put8_1 Int)",
            "(declare-const put8_0 Int)",
            "(declare-const put7_1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 13))  ( =  0 ( mod  ( +  put1_1 put1_0) 13)))  ( =  0 ( mod  ( +  put2_1 put2_0) 13)))  ( =  0 ( mod  ( +  put3_1 put3_0) 13)))  ( =  0 ( mod  ( +  put4_1 put4_0) 13)))  ( =  0 ( mod  ( +  put5_1 put5_0) 13)))  ( =  0 ( mod  ( +  put6_1 put6_0) 13)))  ( =  0 ( mod  ( +  put7_1 put7_0) 13)))  ( =  0 ( mod  ( +  put8_1 put8_0) 13)))  ( =  0 ( mod  ( +  put9_1 put9_0) 13)))  ( =  0 ( mod  ( +  put10_1 put10_0) 13)))  ( =  0 ( mod  ( +  put11_1 put11_0) 13)))  ( =  0 ( mod  ( +  put12_1 put12_0) 13)))  ( =  0 ( mod  ( +  get1 get0) 13))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))) (not ( = put5_0 get0))) (not ( = put6_0 get0))) (not ( = put7_0 get0))) (not ( = put8_0 get0))) (not ( = put9_0 get0))) (not ( = put10_0 get0))) (not ( = put11_0 get0))) (not ( = put12_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 13)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 13)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 13)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 13)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 13)) (not (= put4_0 get0)) (= 0 (mod (+ put5_1 put5_0) 13)) (not (= put5_0 get0)) (= 0 (mod (+ put6_1 put6_0) 13)) (not (= put6_0 get0)) (= 0 (mod (+ put7_1 put7_0) 13)) (not (= put7_0 get0)) (= 0 (mod (+ put8_1 put8_0) 13)) (not (= put8_0 get0)) (= 0 (mod (+ put9_1 put9_0) 13)) (not (= put9_0 get0)) (= 0 (mod (+ put10_1 put10_0) 13)) (not (= put10_0 get0)) (= 0 (mod (+ put11_1 put11_0) 13)) (not (= put11_0 get0)) (= 0 (mod (+ put12_1 put12_0) 13)) (not (= put12_0 get0)) (= 0 (mod (+ get1 get0) 13))))",
        "equivalent": true
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const put10_0 Int)",
            "(declare-const get0 Int)",
            "(declare-const get1 Int)",
            "(declare-const put3_0 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put5_0 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const put13_0 Int)",
            "(declare-const put12_1 Int)",
            "(declare-const put13_1 Int)",
            "(declare-const put9_1 Int)",
            "(declare-const put11_0 Int)",
            "(declare-const put10_1 Int)",
            "(declare-const put12_0 Int)",
            "(declare-const put11_1 Int)",
            "(declare-const put7_0 Int)",
            "(declare-const put6_1 Int)",
            "(declare-const put6_0 Int)",
            "(declare-const put5_1 Int)",
            "(declare-const put9_0 Int)",
            "(declare-const put8_1 Int)",
            "(declare-const put8_0 Int)",
            "(declare-const put7_1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 14))  ( =  0 ( mod  ( +  put1_1 put1_0) 14)))  ( =  0 ( mod  ( +  put2_1 put2_0) 14)))  ( =  0 ( mod  ( +  put3_1 put3_0) 14)))  ( =  0 ( mod  ( +  put4_1 put4_0) 14)))  ( =  0 ( mod  ( +  put5_1 put5_0) 14)))  ( =  0 ( mod  ( +  put6_1 put6_0) 14)))  ( =  0 ( mod  ( +  put7_1 put7_0) 14)))  ( =  0 ( mod  ( +  put8_1 put8_0) 14)))  ( =  0 ( mod  ( +  put9_1 put9_0) 14)))  ( =  0 ( mod  ( +  put10_1 put10_0) 14)))  ( =  0 ( mod  ( +  put11_1 put11_0) 14)))  ( =  0 ( mod  ( +  put12_1 put12_0) 14)))  ( =  0 ( mod  ( +  put13_1 put13_0) 14)))  ( =  0 ( mod  ( +  get1 get0) 14))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))) (not ( = put5_0 get0))) (not ( = put6_0 get0))) (not ( = put7_0 get0))) (not ( = put8_0 get0))) (not ( = put9_0 get0))) (not ( = put10_0 get0))) (not ( = put11_0 get0))) (not ( = put12_0 get0))) (not ( = put13_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 14)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 14)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 14)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 14)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 14)) (not (= put4_0 get0)) (= 0 (mod (+ put5_1 put5_0) 14)) (not (= put5_0 get0)) (= 0 (mod (+ put6_1 put6_0) 14)) (not (= put6_0 get0)) (= 0 (mod (+ put7_1 put7_0) 14)) (not (= put7_0 get0)) (= 0 (mod (+ put8_1 put8_0) 14)) (not (= put8_0 get0)) (= 0 (mod (+ put9_1 put9_0) 14)) (not (= put9_0 get0)) (= 0 (mod (+ put10_1 put10_0) 14)) (not (= put10_0 get0)) (= 0 (mod (+ put11_1 put11_0) 14)) (not (= put11_0 get0)) (= 0 (mod (+ put12_1 put12_0) 14)) (not (= put12_0 get0)) (= 0 (mod (+ put13_1 put13_0) 14)) (not (= put13_0 get0)) (= 0 (mod (+ get1 get0) 14))))",
        "equivalent": true
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const put10_0 Int)",
            "(declare-const get0 Int)",
            "(declare-const get1 Int)",
            "(declare-const put3_0 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put5_0 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const put13_0 Int)",
            "(declare-const put12_1 Int)",
            "(declare-const put14_0 Int)",
            "(declare-const put13_1 Int)",
            "(declare-const put9_1 Int)",
            "(declare-const put11_0 Int)",
            "(declare-const put10_1 Int)",
            "(declare-const put12_0 Int)",
            "(declare-const put11_1 Int)",
            "(declare-const put7_0 Int)",
            "(declare-const put6_1 Int)",
            "(declare-const put6_0 Int)",
            "(declare-const put5_1 Int)",
            "(declare-const put9_0 Int)",
            "(declare-const put14_1 Int)",
            "(declare-const put8_1 Int)",
            "(declare-const put8_0 Int)",
            "(declare-const put7_1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 15))  ( =  0 ( mod  ( +  put1_1 put1_0) 15)))  ( =  0 ( mod  ( +  put2_1 put2_0) 15)))  ( =  0 ( mod  ( +  put3_1 put3_0) 15)))  ( =  0 ( mod  ( +  put4_1 put4_0) 15)))  ( =  0 ( mod  ( +  put5_1 put5_0) 15)))  ( =  0 ( mod  ( +  put6_1 put6_0) 15)))  ( =  0 ( mod  ( +  put7_1 put7_0) 15)))  ( =  0 ( mod  ( +  put8_1 put8_0) 15)))  ( =  0 ( mod  ( +  put9_1 put9_0) 15)))  ( =  0 ( mod  ( +  put10_1 put10_0) 15)))  ( =  0 ( mod  ( +  put11_1 put11_0) 15)))  ( =  0 ( mod  ( +  put12_1 put12_0) 15)))  ( =  0 ( mod  ( +  put13_1 put13_0) 15)))  ( =  0 ( mod  ( +  put14_1 put14_0) 15)))  ( =  0 ( mod  ( +  get1 get0) 15))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))) (not ( = put5_0 get0))) (not ( = put6_0 get0))) (not ( = put7_0 get0))) (not ( = put8_0 get0))) (not ( = put9_0 get0))) (not ( = put10_0 get0))) (not ( = put11_0 get0))) (not ( = put12_0 get0))) (not ( = put13_0 get0))) (not ( = put14_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 15)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 15)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 15)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 15)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 15)) (not (= put4_0 get0)) (= 0 (mod (+ put5_1 put5_0) 15)) (not (= put5_0 get0)) (= 0 (mod (+ put6_1 put6_0) 15)) (not (= put6_0 get0)) (= 0 (mod (+ put7_1 put7_0) 15)) (not (= put7_0 get0)) (= 0 (mod (+ put8_1 put8_0) 15)) (not (= put8_0 get0)) (= 0 (mod (+ put9_1 put9_0) 15)) (not (= put9_0 get0)) (= 0 (mod (+ put10_1 put10_0) 15)) (not (= put10_0 get0)) (= 0 (mod (+ put11_1 put11_0) 15)) (not (= put11_0 get0)) (= 0 (mod (+ put12_1 put12_0) 15)) (not (= put12_0 get0)) (= 0 (mod (+ put13_1 put13_0) 15)) (not (= put13_0 get0)) (= 0 (mod (+ put14_1 put14_0) 15)) (not (= put14_0 get0)) (= 0 (mod (+ get1 get0) 15))))",
        "equivalent": true
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const put10_0 Int)",
            "(declare-const get0 Int)",
            "(declare-const get1 Int)",
            "(declare-const put3_0 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put5_0 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const put13_0 Int)",
            "(declare-const put12_1 Int)",
            "(declare-const put14_0 Int)",
            "(declare-const put13_1 Int)",
            "(declare-const put9_1 Int)",
            "(declare-const put11_0 Int)",
            "(declare-const put10_1 Int)",
            "(declare-const put12_0 Int)",
            "(declare-const put11_1 Int)",
            "(declare-const put7_0 Int)",
            "(declare-const put6_1 Int)",
            "(declare-const put6_0 Int)",
            "(declare-const put5_1 Int)",
            "(declare-const put15_0 Int)",
            "(declare-const put9_0 Int)",
            "(declare-const put14_1 Int)",
            "(declare-const put8_1 Int)",
            "(declare-const put8_0 Int)",
            "(declare-const put15_1 Int)",
            "(declare-const put7_1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 16))  ( =  0 ( mod  ( +  put1_1 put1_0) 16)))  ( =  0 ( mod  ( +  put2_1 put2_0) 16)))  ( =  0 ( mod  ( +  put3_1 put3_0) 16)))  ( =  0 ( mod  ( +  put4_1 put4_0) 16)))  ( =  0 ( mod  ( +  put5_1 put5_0) 16)))  ( =  0 ( mod  ( +  put6_1 put6_0) 16)))  ( =  0 ( mod  ( +  put7_1 put7_0) 16)))  ( =  0 ( mod  ( +  put8_1 put8_0) 16)))  ( =  0 ( mod  ( +  put9_1 put9_0) 16)))  ( =  0 ( mod  ( +  put10_1 put10_0) 16)))  ( =  0 ( mod  ( +  put11_1 put11_0) 16)))  ( =  0 ( mod  ( +  put12_1 put12_0) 16)))  ( =  0 ( mod  ( +  put13_1 put13_0) 16)))  ( =  0 ( mod  ( +  put14_1 put14_0) 16)))  ( =  0 ( mod  ( +  put15_1 put15_0) 16)))  ( =  0 ( mod  ( +  get1 get0) 16))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))) (not ( = put5_0 get0))) (not ( = put6_0 get0))) (not ( = put7_0 get0))) (not ( = put8_0 get0))) (not ( = put9_0 get0))) (not ( = put10_0 get0))) (not ( = put11_0 get0))) (not ( = put12_0 get0))) (not ( = put13_0 get0))) (not ( = put14_0 get0))) (not ( = put15_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 16)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 16)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 16)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 16)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 16)) (not (= put4_0 get0)) (= 0 (mod (+ put5_1 put5_0) 16)) (not (= put5_0 get0)) (= 0 (mod (+ put6_1 put6_0) 16)) (not (= put6_0 get0)) (= 0 (mod (+ put7_1 put7_0) 16)) (not (= put7_0 get0)) (= 0 (mod (+ put8_1 put8_0) 16)) (not (= put8_0 get0)) (= 0 (mod (+ put9_1 put9_0) 16)) (not (= put9_0 get0)) (= 0 (mod (+ put10_1 put10_0) 16)) (not (= put10_0 get0)) (= 0 (mod (+ put11_1 put11_0) 16)) (not (= put11_0 get0)) (= 0 (mod (+ put12_1 put12_0) 16)) (not (= put12_0 get0)) (= 0 (mod (+ put13_1 put13_0) 16)) (not (= put13_0 get0)) (= 0 (mod (+ put14_1 put14_0) 16)) (not (= put14_0 get0)) (= 0 (mod (+ put15_1 put15_0) 16)) (not (= put15_0 get0)) (= 0 (mod (+ get1 get0) 16))))",
        "equivalent": true
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const put10_0 Int)",
            "(declare-const get0 Int)",
            "(declare-const get1 Int)",
            "(declare-const put3_0 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put5_0 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const put13_0 Int)",
            "(declare-const put12_1 Int)",
            "(declare-const put14_0 Int)",
            "(declare-const put13_1 Int)",
            "(declare-const put9_1 Int)",
            "(declare-const put11_0 Int)",
            "(declare-const put10_1 Int)",
            "(declare-const put12_0 Int)",
            "(declare-const put11_1 Int)",
            "(declare-const put7_0 Int)",
            "(declare-const put16_1 Int)",
            "(declare-const put6_1 Int)",
            "(declare-const put6_0 Int)",
            "(declare-const put5_1 Int)",
            "(declare-const put15_0 Int)",
            "(declare-const put9_0 Int)",
            "(declare-const put14_1 Int)",
            "(declare-const put8_1 Int)",
            "(declare-const put16_0 Int)",
            "(declare-const put8_0 Int)",
            "(declare-const put15_1 Int)",
            "(declare-const put7_1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 17))  ( =  0 ( mod  ( +  put1_1 put1_0) 17)))  ( =  0 ( mod  ( +  put2_1 put2_0) 17)))  ( =  0 ( mod  ( +  put3_1 put3_0) 17)))  ( =  0 ( mod  ( +  put4_1 put4_0) 17)))  ( =  0 ( mod  ( +  put5_1 put5_0) 17)))  ( =  0 ( mod  ( +  put6_1 put6_0) 17)))  ( =  0 ( mod  ( +  put7_1 put7_0) 17)))  ( =  0 ( mod  ( +  put8_1 put8_0) 17)))  ( =  0 ( mod  ( +  put9_1 put9_0) 17)))  ( =  0 ( mod  ( +  put10_1 put10_0) 17)))  ( =  0 ( mod  ( +  put11_1 put11_0) 17)))  ( =  0 ( mod  ( +  put12_1 put12_0) 17)))  ( =  0 ( mod  ( +  put13_1 put13_0) 17)))  ( =  0 ( mod  ( +  put14_1 put14_0) 17)))  ( =  0 ( mod  ( +  put15_1 put15_0) 17)))  ( =  0 ( mod  ( +  put16_1 put16_0) 17)))  ( =  0 ( mod  ( +  get1 get0) 17))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))) (not ( = put5_0 get0))) (not ( = put6_0 get0))) (not ( = put7_0 get0))) (not ( = put8_0 get0))) (not ( = put9_0 get0))) (not ( = put10_0 get0))) (not ( = put11_0 get0))) (not ( = put12_0 get0))) (not ( = put13_0 get0))) (not ( = put14_0 get0))) (not ( = put15_0 get0))) (not ( = put16_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 17)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 17)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 17)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 17)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 17)) (not (= put4_0 get0)) (= 0 (mod (+ put5_1 put5_0) 17)) (not (= put5_0 get0)) (= 0 (mod (+ put6_1 put6_0) 17)) (not (= put6_0 get0)) (= 0 (mod (+ put7_1 put7_0) 17)) (not (= put7_0 get0)) (= 0 (mod (+ put8_1 put8_0) 17)) (not (= put8_0 get0)) (= 0 (mod (+ put9_1 put9_0) 17)) (not (= put9_0 get0)) (= 0 (mod (+ put10_1 put10_0) 17)) (not (= put10_0 get0)) (= 0 (mod (+ put11_1 put11_0) 17)) (not (= put11_0 get0)) (= 0 (mod (+ put12_1 put12_0) 17)) (not (= put12_0 get0)) (= 0 (mod (+ put13_1 put13_0) 17)) (not (= put13_0 get0)) (= 0 (mod (+ put14_1 put14_0) 17)) (not (= put14_0 get0)) (= 0 (mod (+ put15_1 put15_0) 17)) (not (= put15_0 get0)) (= 0 (mod (+ put16_1 put16_0) 17)) (not (= put16_0 get0)) (= 0 (mod (+ get1 get0) 17))))",
        "equivalent": true
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const put10_0 Int)",
            "(declare-const get0 Int)",
            "(declare-const get1 Int)",
            "(declare-const put3_0 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put5_0 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const put13_0 Int)",
            "(declare-const put12_1 Int)",
            "(declare-const put14_0 Int)",
            "(declare-const put13_1 Int)",
            "(declare-const put9_1 Int)",
            "(declare-const put11_0 Int)",
            "(declare-const put10_1 Int)",
            "(declare-const put12_0 Int)",
            "(declare-const put11_1 Int)",
            "(declare-const put17_0 Int)",
            "(declare-const put7_0 Int)",
            "(declare-const put16_1 Int)",
            "(declare-const put6_1 Int)",
            "(declare-const put6_0 Int)",
            "(declare-const put17_1 Int)",
            "(declare-const put5_1 Int)",
            "(declare-const put15_0 Int)",
            "(declare-const put9_0 Int)",
            "(declare-const put14_1 Int)",
            "(declare-const put8_1 Int)",
            "(declare-const put16_0 Int)",
            "(declare-const put8_0 Int)",
            "(declare-const put15_1 Int)",
            "(declare-const put7_1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 18))  ( =  0 ( mod  ( +  put1_1 put1_0) 18)))  ( =  0 ( mod  ( +  put2_1 put2_0) 18)))  ( =  0 ( mod  ( +  put3_1 put3_0) 18)))  ( =  0 ( mod  ( +  put4_1 put4_0) 18)))  ( =  0 ( mod  ( +  put5_1 put5_0) 18)))  ( =  0 ( mod  ( +  put6_1 put6_0) 18)))  ( =  0 ( mod  ( +  put7_1 put7_0) 18)))  ( =  0 ( mod  ( +  put8_1 put8_0) 18)))  ( =  0 ( mod  ( +  put9_1 put9_0) 18)))  ( =  0 ( mod  ( +  put10_1 put10_0) 18)))  ( =  0 ( mod  ( +  put11_1 put11_0) 18)))  ( =  0 ( mod  ( +  put12_1 put12_0) 18)))  ( =  0 ( mod  ( +  put13_1 put13_0) 18)))  ( =  0 ( mod  ( +  put14_1 put14_0) 18)))  ( =  0 ( mod  ( +  put15_1 put15_0) 18)))  ( =  0 ( mod  ( +  put16_1 put16_0) 18)))  ( =  0 ( mod  ( +  put17_1 put17_0) 18)))  ( =  0 ( mod  ( +  get1 get0) 18))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))) (not ( = put5_0 get0))) (not ( = put6_0 get0))) (not ( = put7_0 get0))) (not ( = put8_0 get0))) (not ( = put9_0 get0))) (not ( = put10_0 get0))) (not ( = put11_0 get0))) (not ( = put12_0 get0))) (not ( = put13_0 get0))) (not ( = put14_0 get0))) (not ( = put15_0 get0))) (not ( = put16_0 get0))) (not ( = put17_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 18)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 18)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 18)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 18)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 18)) (not (= put4_0 get0)) (= 0 (mod (+ put5_1 put5_0) 18)) (not (= put5_0 get0)) (= 0 (mod (+ put6_1 put6_0) 18)) (not (= put6_0 get0)) (= 0 (mod (+ put7_1 put7_0) 18)) (not (= put7_0 get0)) (= 0 (mod (+ put8_1 put8_0) 18)) (not (= put8_0 get0)) (= 0 (mod (+ put9_1 put9_0) 18)) (not (= put9_0 get0)) (= 0 (mod (+ put10_1 put10_0) 18)) (not (= put10_0 get0)) (= 0 (mod (+ put11_1 put11_0) 18)) (not (= put11_0 get0)) (= 0 (mod (+ put12_1 put12_0) 18)) (not (= put12_0 get0)) (= 0 (mod (+ put13_1 put13_0) 18)) (not (= put13_0 get0)) (= 0 (mod (+ put14_1 put14_0) 18)) (not (= put14_0 get0)) (= 0 (mod (+ put15_1 put15_0) 18)) (not (= put15_0 get0)) (= 0 (mod (+ put16_1 put16_0) 18)) (not (= put16_0 get0)) (= 0 (mod (+ put17_1 put17_0) 18)) (not (= put17_0 get0)) (= 0 (mod (+ get1 get0) 18))))",
        "equivalent": true
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const put10_0 Int)",
            "(declare-const get0 Int)",
            "(declare-const get1 Int)",
            "(declare-const put3_0 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put5_0 Int)",
            "(declare-const put18_1 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const put13_0 Int)",
            "(declare-const put12_1 Int)",
            "(declare-const put14_0 Int)",
            "(declare-const put13_1 Int)",
            "(declare-const put9_1 Int)",
            "(declare-const put11_0 Int)",
            "(declare-const put10_1 Int)",
            "(declare-const put12_0 Int)",
            "(declare-const put11_1 Int)",
            "(declare-const put17_0 Int)",
            "(declare-const put7_0 Int)",
            "(declare-const put16_1 Int)",
            "(declare-const put6_1 Int)",
            "(declare-const put18_0 Int)",
            "(declare-const put6_0 Int)",
            "(declare-const put17_1 Int)",
            "(declare-const put5_1 Int)",
            "(declare-const put15_0 Int)",
            "(declare-const put9_0 Int)",
            "(declare-const put14_1 Int)",
            "(declare-const put8_1 Int)",
            "(declare-const put16_0 Int)",
            "(declare-const put8_0 Int)",
            "(declare-const put15_1 Int)",
            "(declare-const put7_1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 19))  ( =  0 ( mod  ( +  put1_1 put1_0) 19)))  ( =  0 ( mod  ( +  put2_1 put2_0) 19)))  ( =  0 ( mod  ( +  put3_1 put3_0) 19)))  ( =  0 ( mod  ( +  put4_1 put4_0) 19)))  ( =  0 ( mod  ( +  put5_1 put5_0) 19)))  ( =  0 ( mod  ( +  put6_1 put6_0) 19)))  ( =  0 ( mod  ( +  put7_1 put7_0) 19)))  ( =  0 ( mod  ( +  put8_1 put8_0) 19)))  ( =  0 ( mod  ( +  put9_1 put9_0) 19)))  ( =  0 ( mod  ( +  put10_1 put10_0) 19)))  ( =  0 ( mod  ( +  put11_1 put11_0) 19)))  ( =  0 ( mod  ( +  put12_1 put12_0) 19)))  ( =  0 ( mod  ( +  put13_1 put13_0) 19)))  ( =  0 ( mod  ( +  put14_1 put14_0) 19)))  ( =  0 ( mod  ( +  put15_1 put15_0) 19)))  ( =  0 ( mod  ( +  put16_1 put16_0) 19)))  ( =  0 ( mod  ( +  put17_1 put17_0) 19)))  ( =  0 ( mod  ( +  put18_1 put18_0) 19)))  ( =  0 ( mod  ( +  get1 get0) 19))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))) (not ( = put5_0 get0))) (not ( = put6_0 get0))) (not ( = put7_0 get0))) (not ( = put8_0 get0))) (not ( = put9_0 get0))) (not ( = put10_0 get0))) (not ( = put11_0 get0))) (not ( = put12_0 get0))) (not ( = put13_0 get0))) (not ( = put14_0 get0))) (not ( = put15_0 get0))) (not ( = put16_0 get0))) (not ( = put17_0 get0))) (not ( = put18_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 19)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 19)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 19)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 19)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 19)) (not (= put4_0 get0)) (= 0 (mod (+ put5_1 put5_0) 19)) (not (= put5_0 get0)) (= 0 (mod (+ put6_1 put6_0) 19)) (not (= put6_0 get0)) (= 0 (mod (+ put7_1 put7_0) 19)) (not (= put7_0 get0)) (= 0 (mod (+ put8_1 put8_0) 19)) (not (= put8_0 get0)) (= 0 (mod (+ put9_1 put9_0) 19)) (not (= put9_0 get0)) (= 0 (mod (+ put10_1 put10_0) 19)) (not (= put10_0 get0)) (= 0 (mod (+ put11_1 put11_0) 19)) (not (= put11_0 get0)) (= 0 (mod (+ put12_1 put12_0) 19)) (not (= put12_0 get0)) (= 0 (mod (+ put13_1 put13_0) 19)) (not (= put13_0 get0)) (= 0 (mod (+ put14_1 put14_0) 19)) (not (= put14_0 get0)) (= 0 (mod (+ put15_1 put15_0) 19)) (not (= put15_0 get0)) (= 0 (mod (+ put16_1 put16_0) 19)) (not (= put16_0 get0)) (= 0 (mod (+ put17_1 put17_0) 19)) (not (= put17_0 get0)) (= 0 (mod (+ put18_1 put18_0) 19)) (not (= put18_0 get0)) (= 0 (mod (+ get1 get0) 19))))",
        "equivalent": true
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const put10_0 Int)",
            "(declare-const get0 Int)",
            "(declare-const get1 Int)",
            "(declare-const put3_0 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put19_0 Int)",
            "(declare-const put5_0 Int)",
            "(declare-const put18_1 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put19_1 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const put13_0 Int)",
            "(declare-const put12_1 Int)",
            "(declare-const put14_0 Int)",
            "(declare-const put13_1 Int)",
            "(declare-const put9_1 Int)",
            "(declare-const put11_0 Int)",
            "(declare-const put10_1 Int)",
            "(declare-const put12_0 Int)",
            "(declare-const put11_1 Int)",
            "(declare-const put17_0 Int)",
            "(declare-const put7_0 Int)",
            "(declare-const put16_1 Int)",
            "(declare-const put6_1 Int)",
            "(declare-const put18_0 Int)",
            "(declare-const put6_0 Int)",
            "(declare-const put17_1 Int)",
            "(declare-const put5_1 Int)",
            "(declare-const put15_0 Int)",
            "(declare-const put9_0 Int)",
            "(declare-const put14_1 Int)",
            "(declare-const put8_1 Int)",
            "(declare-const put16_0 Int)",
            "(declare-const put8_0 Int)",
            "(declare-const put15_1 Int)",
            "(declare-const put7_1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 20))  ( =  0 ( mod  ( +  put1_1 put1_0) 20)))  ( =  0 ( mod  ( +  put2_1 put2_0) 20)))  ( =  0 ( mod  ( +  put3_1 put3_0) 20)))  ( =  0 ( mod  ( +  put4_1 put4_0) 20)))  ( =  0 ( mod  ( +  put5_1 put5_0) 20)))  ( =  0 ( mod  ( +  put6_1 put6_0) 20)))  ( =  0 ( mod  ( +  put7_1 put7_0) 20)))  ( =  0 ( mod  ( +  put8_1 put8_0) 20)))  ( =  0 ( mod  ( +  put9_1 put9_0) 20)))  ( =  0 ( mod  ( +  put10_1 put10_0) 20)))  ( =  0 ( mod  ( +  put11_1 put11_0) 20)))  ( =  0 ( mod  ( +  put12_1 put12_0) 20)))  ( =  0 ( mod  ( +  put13_1 put13_0) 20)))  ( =  0 ( mod  ( +  put14_1 put14_0) 20)))  ( =  0 ( mod  ( +  put15_1 put15_0) 20)))  ( =  0 ( mod  ( +  put16_1 put16_0) 20)))  ( =  0 ( mod  ( +  put17_1 put17_0) 20)))  ( =  0 ( mod  ( +  put18_1 put18_0) 20)))  ( =  0 ( mod  ( +  put19_1 put19_0) 20)))  ( =  0 ( mod  ( +  get1 get0) 20))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))) (not ( = put5_0 get0))) (not ( = put6_0 get0))) (not ( = put7_0 get0))) (not ( = put8_0 get0))) (not ( = put9_0 get0))) (not ( = put10_0 get0))) (not ( = put11_0 get0))) (not ( = put12_0 get0))) (not ( = put13_0 get0))) (not ( = put14_0 get0))) (not ( = put15_0 get0))) (not ( = put16_0 get0))) (not ( = put17_0 get0))) (not ( = put18_0 get0))) (not ( = put19_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 20)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 20)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 20)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 20)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 20)) (not (= put4_0 get0)) (= 0 (mod (+ put5_1 put5_0) 20)) (not (= put5_0 get0)) (= 0 (mod (+ put6_1 put6_0) 20)) (not (= put6_0 get0)) (= 0 (mod (+ put7_1 put7_0) 20)) (not (= put7_0 get0)) (= 0 (mod (+ put8_1 put8_0) 20)) (not (= put8_0 get0)) (= 0 (mod (+ put9_1 put9_0) 20)) (not (= put9_0 get0)) (= 0 (mod (+ put10_1 put10_0) 20)) (not (= put10_0 get0)) (= 0 (mod (+ put11_1 put11_0) 20)) (not (= put11_0 get0)) (= 0 (mod (+ put12_1 put12_0) 20)) (not (= put12_0 get0)) (= 0 (mod (+ put13_1 put13_0) 20)) (not (= put13_0 get0)) (= 0 (mod (+ put14_1 put14_0) 20)) (not (= put14_0 get0)) (= 0 (mod (+ put15_1 put15_0) 20)) (not (= put15_0 get0)) (= 0 (mod (+ put16_1 put16_0) 20)) (not (= put16_0 get0)) (= 0 (mod (+ put17_1 put17_0) 20)) (not (= put17_0 get0)) (= 0 (mod (+ put18_1 put18_0) 20)) (not (= put18_0 get0)) (= 0 (mod (+ put19_1 put19_0) 20)) (not (= put19_0 get0)) (= 0 (mod (+ get1 get0) 20))))",
        "equivalent": true
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const put10_0 Int)",
            "(declare-const put20_1 Int)",
            "(declare-const put20_0 Int)",
            "(declare-const get0 Int)",
            "(declare-const get1 Int)",
            "(declare-const put3_0 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put19_0 Int)",
            "(declare-const put5_0 Int)",
            "(declare-const put18_1 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put19_1 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const put13_0 Int)",
            "(declare-const put12_1 Int)",
            "(declare-const put14_0 Int)",
            "(declare-const put13_1 Int)",
            "(declare-const put9_1 Int)",
            "(declare-const put11_0 Int)",
            "(declare-const put10_1 Int)",
            "(declare-const put12_0 Int)",
            "(declare-const put11_1 Int)",
            "(declare-const put17_0 Int)",
            "(declare-const put7_0 Int)",
            "(declare-const put16_1 Int)",
            "(declare-const put6_1 Int)",
            "(declare-const put18_0 Int)",
            "(declare-const put6_0 Int)",
            "(declare-const put17_1 Int)",
            "(declare-const put5_1 Int)",
            "(declare-const put15_0 Int)",
            "(declare-const put9_0 Int)",
            "(declare-const put14_1 Int)",
            "(declare-const put8_1 Int)",
            "(declare-const put16_0 Int)",
            "(declare-const put8_0 Int)",
            "(declare-const put15_1 Int)",
            "(declare-const put7_1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 21))  ( =  0 ( mod  ( +  put1_1 put1_0) 21)))  ( =  0 ( mod  ( +  put2_1 put2_0) 21)))  ( =  0 ( mod  ( +  put3_1 put3_0) 21)))  ( =  0 ( mod  ( +  put4_1 put4_0) 21)))  ( =  0 ( mod  ( +  put5_1 put5_0) 21)))  ( =  0 ( mod  ( +  put6_1 put6_0) 21)))  ( =  0 ( mod  ( +  put7_1 put7_0) 21)))  ( =  0 ( mod  ( +  put8_1 put8_0) 21)))  ( =  0 ( mod  ( +  put9_1 put9_0) 21)))  ( =  0 ( mod  ( +  put10_1 put10_0) 21)))  ( =  0 ( mod  ( +  put11_1 put11_0) 21)))  ( =  0 ( mod  ( +  put12_1 put12_0) 21)))  ( =  0 ( mod  ( +  put13_1 put13_0) 21)))  ( =  0 ( mod  ( +  put14_1 put14_0) 21)))  ( =  0 ( mod  ( +  put15_1 put15_0) 21)))  ( =  0 ( mod  ( +  put16_1 put16_0) 21)))  ( =  0 ( mod  ( +  put17_1 put17_0) 21)))  ( =  0 ( mod  ( +  put18_1 put18_0) 21)))  ( =  0 ( mod  ( +  put19_1 put19_0) 21)))  ( =  0 ( mod  ( +  put20_1 put20_0) 21)))  ( =  0 ( mod  ( +  get1 get0) 21))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))) (not ( = put5_0 get0))) (not ( = put6_0 get0))) (not ( = put7_0 get0))) (not ( = put8_0 get0))) (not ( = put9_0 get0))) (not ( = put10_0 get0))) (not ( = put11_0 get0))) (not ( = put12_0 get0))) (not ( = put13_0 get0))) (not ( = put14_0 get0))) (not ( = put15_0 get0))) (not ( = put16_0 get0))) (not ( = put17_0 get0))) (not ( = put18_0 get0))) (not ( = put19_0 get0))) (not ( = put20_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 21)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 21)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 21)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 21)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 21)) (not (= put4_0 get0)) (= 0 (mod (+ put5_1 put5_0) 21)) (not (= put5_0 get0)) (= 0 (mod (+ put6_1 put6_0) 21)) (not (= put6_0 get0)) (= 0 (mod (+ put7_1 put7_0) 21)) (not (= put7_0 get0)) (= 0 (mod (+ put8_1 put8_0) 21)) (not (= put8_0 get0)) (= 0 (mod (+ put9_1 put9_0) 21)) (not (= put9_0 get0)) (= 0 (mod (+ put10_1 put10_0) 21)) (not (= put10_0 get0)) (= 0 (mod (+ put11_1 put11_0) 21)) (not (= put11_0 get0)) (= 0 (mod (+ put12_1 put12_0) 21)) (not (= put12_0 get0)) (= 0 (mod (+ put13_1 put13_0) 21)) (not (= put13_0 get0)) (= 0 (mod (+ put14_1 put14_0) 21)) (not (= put14_0 get0)) (= 0 (mod (+ put15_1 put15_0) 21)) (not (= put15_0 get0)) (= 0 (mod (+ put16_1 put16_0) 21)) (not (= put16_0 get0)) (= 0 (mod (+ put17_1 put17_0) 21)) (not (= put17_0 get0)) (= 0 (mod (+ put18_1 put18_0) 21)) (not (= put18_0 get0)) (= 0 (mod (+ put19_1 put19_0) 21)) (not (= put19_0 get0)) (= 0 (mod (+ put20_1 put20_0) 21)) (not (= put20_0 get0)) (= 0 (mod (+ get1 get0) 21))))",
        "equivalent": true
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const put10_0 Int)",
            "(declare-const put21_1 Int)",
            "(declare-const put21_0 Int)",
            "(declare-const put20_1 Int)",
            "(declare-const put20_0 Int)",
            "(declare-const get0 Int)",
            "(declare-const get1 Int)",
            "(declare-const put3_0 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put19_0 Int)",
            "(declare-const put5_0 Int)",
            "(declare-const put18_1 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put19_1 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const put13_0 Int)",
            "(declare-const put12_1 Int)",
            "(declare-const put14_0 Int)",
            "(declare-const put13_1 Int)",
            "(declare-const put9_1 Int)",
            "(declare-const put11_0 Int)",
            "(declare-const put10_1 Int)",
            "(declare-const put12_0 Int)",
            "(declare-const put11_1 Int)",
            "(declare-const put17_0 Int)",
            "(declare-const put7_0 Int)",
            "(declare-const put16_1 Int)",
            "(declare-const put6_1 Int)",
            "(declare-const put18_0 Int)",
            "(declare-const put6_0 Int)",
            "(declare-const put17_1 Int)",
            "(declare-const put5_1 Int)",
            "(declare-const put15_0 Int)",
            "(declare-const put9_0 Int)",
            "(declare-const put14_1 Int)",
            "(declare-const put8_1 Int)",
            "(declare-const put16_0 Int)",
            "(declare-const put8_0 Int)",
            "(declare-const put15_1 Int)",
            "(declare-const put7_1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 22))  ( =  0 ( mod  ( +  put1_1 put1_0) 22)))  ( =  0 ( mod  ( +  put2_1 put2_0) 22)))  ( =  0 ( mod  ( +  put3_1 put3_0) 22)))  ( =  0 ( mod  ( +  put4_1 put4_0) 22)))  ( =  0 ( mod  ( +  put5_1 put5_0) 22)))  ( =  0 ( mod  ( +  put6_1 put6_0) 22)))  ( =  0 ( mod  ( +  put7_1 put7_0) 22)))  ( =  0 ( mod  ( +  put8_1 put8_0) 22)))  ( =  0 ( mod  ( +  put9_1 put9_0) 22)))  ( =  0 ( mod  ( +  put10_1 put10_0) 22)))  ( =  0 ( mod  ( +  put11_1 put11_0) 22)))  ( =  0 ( mod  ( +  put12_1 put12_0) 22)))  ( =  0 ( mod  ( +  put13_1 put13_0) 22)))  ( =  0 ( mod  ( +  put14_1 put14_0) 22)))  ( =  0 ( mod  ( +  put15_1 put15_0) 22)))  ( =  0 ( mod  ( +  put16_1 put16_0) 22)))  ( =  0 ( mod  ( +  put17_1 put17_0) 22)))  ( =  0 ( mod  ( +  put18_1 put18_0) 22)))  ( =  0 ( mod  ( +  put19_1 put19_0) 22)))  ( =  0 ( mod  ( +  put20_1 put20_0) 22)))  ( =  0 ( mod  ( +  put21_1 put21_0) 22)))  ( =  0 ( mod  ( +  get1 get0) 22))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))) (not ( = put5_0 get0))) (not ( = put6_0 get0))) (not ( = put7_0 get0))) (not ( = put8_0 get0))) (not ( = put9_0 get0))) (not ( = put10_0 get0))) (not ( = put11_0 get0))) (not ( = put12_0 get0))) (not ( = put13_0 get0))) (not ( = put14_0 get0))) (not ( = put15_0 get0))) (not ( = put16_0 get0))) (not ( = put17_0 get0))) (not ( = put18_0 get0))) (not ( = put19_0 get0))) (not ( = put20_0 get0))) (not ( = put21_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 22)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 22)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 22)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 22)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 22)) (not (= put4_0 get0)) (= 0 (mod (+ put5_1 put5_0) 22)) (not (= put5_0 get0)) (= 0 (mod (+ put6_1 put6_0) 22)) (not (= put6_0 get0)) (= 0 (mod (+ put7_1 put7_0) 22)) (not (= put7_0 get0)) (= 0 (mod (+ put8_1 put8_0) 22)) (not (= put8_0 get0)) (= 0 (mod (+ put9_1 put9_0) 22)) (not (= put9_0 get0)) (= 0 (mod (+ put10_1 put10_0) 22)) (not (= put10_0 get0)) (= 0 (mod (+ put11_1 put11_0) 22)) (not (= put11_0 get0)) (= 0 (mod (+ put12_1 put12_0) 22)) (not (= put12_0 get0)) (= 0 (mod (+ put13_1 put13_0) 22)) (not (= put13_0 get0)) (= 0 (mod (+ put14_1 put14_0) 22)) (not (= put14_0 get0)) (= 0 (mod (+ put15_1 put15_0) 22)) (not (= put15_0 get0)) (= 0 (mod (+ put16_1 put16_0) 22)) (not (= put16_0 get0)) (= 0 (mod (+ put17_1 put17_0) 22)) (not (= put17_0 get0)) (= 0 (mod (+ put18_1 put18_0) 22)) (not (= put18_0 get0)) (= 0 (mod (+ put19_1 put19_0) 22)) (not (= put19_0 get0)) (= 0 (mod (+ put20_1 put20_0) 22)) (not (= put20_0 get0)) (= 0 (mod (+ put21_1 put21_0) 22)) (not (= put21_0 get0)) (= 0 (mod (+ get1 get0) 22))))",
        "equivalent": true
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const put10_0 Int)",
            "(declare-const put22_1 Int)",
            "(declare-const put22_0 Int)",
            "(declare-const put21_1 Int)",
            "(declare-const put21_0 Int)",
            "(declare-const put20_1 Int)",
            "(declare-const put20_0 Int)",
            "(declare-const get0 Int)",
            "(declare-const get1 Int)",
            "(declare-const put3_0 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put19_0 Int)",
            "(declare-const put5_0 Int)",
            "(declare-const put18_1 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put19_1 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const put13_0 Int)",
            "(declare-const put12_1 Int)",
            "(declare-const put14_0 Int)",
            "(declare-const put13_1 Int)",
            "(declare-const put9_1 Int)",
            "(declare-const put11_0 Int)",
            "(declare-const put10_1 Int)",
            "(declare-const put12_0 Int)",
            "(declare-const put11_1 Int)",
            "(declare-const put17_0 Int)",
            "(declare-const put7_0 Int)",
            "(declare-const put16_1 Int)",
            "(declare-const put6_1 Int)",
            "(declare-const put18_0 Int)",
            "(declare-const put6_0 Int)",
            "(declare-const put17_1 Int)",
            "(declare-const put5_1 Int)",
            "(declare-const put15_0 Int)",
            "(declare-const put9_0 Int)",
            "(declare-const put14_1 Int)",
            "(declare-const put8_1 Int)",
            "(declare-const put16_0 Int)",
            "(declare-const put8_0 Int)",
            "(declare-const put15_1 Int)",
            "(declare-const put7_1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 23))  ( =  0 ( mod  ( +  put1_1 put1_0) 23)))  ( =  0 ( mod  ( +  put2_1 put2_0) 23)))  ( =  0 ( mod  ( +  put3_1 put3_0) 23)))  ( =  0 ( mod  ( +  put4_1 put4_0) 23)))  ( =  0 ( mod  ( +  put5_1 put5_0) 23)))  ( =  0 ( mod  ( +  put6_1 put6_0) 23)))  ( =  0 ( mod  ( +  put7_1 put7_0) 23)))  ( =  0 ( mod  ( +  put8_1 put8_0) 23)))  ( =  0 ( mod  ( +  put9_1 put9_0) 23)))  ( =  0 ( mod  ( +  put10_1 put10_0) 23)))  ( =  0 ( mod  ( +  put11_1 put11_0) 23)))  ( =  0 ( mod  ( +  put12_1 put12_0) 23)))  ( =  0 ( mod  ( +  put13_1 put13_0) 23)))  ( =  0 ( mod  ( +  put14_1 put14_0) 23)))  ( =  0 ( mod  ( +  put15_1 put15_0) 23)))  ( =  0 ( mod  ( +  put16_1 put16_0) 23)))  ( =  0 ( mod  ( +  put17_1 put17_0) 23)))  ( =  0 ( mod  ( +  put18_1 put18_0) 23)))  ( =  0 ( mod  ( +  put19_1 put19_0) 23)))  ( =  0 ( mod  ( +  put20_1 put20_0) 23)))  ( =  0 ( mod  ( +  put21_1 put21_0) 23)))  ( =  0 ( mod  ( +  put22_1 put22_0) 23)))  ( =  0 ( mod  ( +  get1 get0) 23))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))) (not ( = put5_0 get0))) (not ( = put6_0 get0))) (not ( = put7_0 get0))) (not ( = put8_0 get0))) (not ( = put9_0 get0))) (not ( = put10_0 get0))) (not ( = put11_0 get0))) (not ( = put12_0 get0))) (not ( = put13_0 get0))) (not ( = put14_0 get0))) (not ( = put15_0 get0))) (not ( = put16_0 get0))) (not ( = put17_0 get0))) (not ( = put18_0 get0))) (not ( = put19_0 get0))) (not ( = put20_0 get0))) (not ( = put21_0 get0))) (not ( = put22_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 23)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 23)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 23)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 23)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 23)) (not (= put4_0 get0)) (= 0 (mod (+ put5_1 put5_0) 23)) (not (= put5_0 get0)) (= 0 (mod (+ put6_1 put6_0) 23)) (not (= put6_0 get0)) (= 0 (mod (+ put7_1 put7_0) 23)) (not (= put7_0 get0)) (= 0 (mod (+ put8_1 put8_0) 23)) (not (= put8_0 get0)) (= 0 (mod (+ put9_1 put9_0) 23)) (not (= put9_0 get0)) (= 0 (mod (+ put10_1 put10_0) 23)) (not (= put10_0 get0)) (= 0 (mod (+ put11_1 put11_0) 23)) (not (= put11_0 get0)) (= 0 (mod (+ put12_1 put12_0) 23)) (not (= put12_0 get0)) (= 0 (mod (+ put13_1 put13_0) 23)) (not (= put13_0 get0)) (= 0 (mod (+ put14_1 put14_0) 23)) (not (= put14_0 get0)) (= 0 (mod (+ put15_1 put15_0) 23)) (not (= put15_0 get0)) (= 0 (mod (+ put16_1 put16_0) 23)) (not (= put16_0 get0)) (= 0 (mod (+ put17_1 put17_0) 23)) (not (= put17_0 get0)) (= 0 (mod (+ put18_1 put18_0) 23)) (not (= put18_0 get0)) (= 0 (mod (+ put19_1 put19_0) 23)) (not (= put19_0 get0)) (= 0 (mod (+ put20_1 put20_0) 23)) (not (= put20_0 get0)) (= 0 (mod (+ put21_1 put21_0) 23)) (not (= put21_0 get0)) (= 0 (mod (+ put22_1 put22_0) 23)) (not (= put22_0 get0)) (= 0 (mod (+ get1 get0) 23))))",
        "equivalent": true
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const put23_1 Int)",
            "(declare-const put23_0 Int)",
            "(declare-const put21_1 Int)",
            "(declare-const put20_1 Int)",
            "(declare-const put20_0 Int)",
            "(declare-const get0 Int)",
            "(declare-const get1 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put19_0 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put19_1 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const put13_0 Int)",
            "(declare-const put13_1 Int)",
            "(declare-const put11_0 Int)",
            "(declare-const put11_1 Int)",
            "(declare-const put17_0 Int)",
            "(declare-const put6_1 Int)",
            "(declare-const put6_0 Int)",
            "(declare-const put17_1 Int)",
            "(declare-const put15_0 Int)",
            "(declare-const put8_1 Int)",
            "(declare-const put8_0 Int)",
            "(declare-const put15_1 Int)",
            "(declare-const put10_0 Int)",
            "(declare-const put22_1 Int)",
            "(declare-const put22_0 Int)",
            "(declare-const put21_0 Int)",
            "(declare-const put3_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put5_0 Int)",
            "(declare-const put18_1 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put12_1 Int)",
            "(declare-const put14_0 Int)",
            "(declare-const put9_1 Int)",
            "(declare-const put10_1 Int)",
            "(declare-const put12_0 Int)",
            "(declare-const put7_0 Int)",
            "(declare-const put16_1 Int)",
            "(declare-const put18_0 Int)",
            "(declare-const put5_1 Int)",
            "(declare-const put9_0 Int)",
            "(declare-const put14_1 Int)",
            "(declare-const put16_0 Int)",
            "(declare-const put7_1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 24))  ( =  0 ( mod  ( +  put1_1 put1_0) 24)))  ( =  0 ( mod  ( +  put2_1 put2_0) 24)))  ( =  0 ( mod  ( +  put3_1 put3_0) 24)))  ( =  0 ( mod  ( +  put4_1 put4_0) 24)))  ( =  0 ( mod  ( +  put5_1 put5_0) 24)))  ( =  0 ( mod  ( +  put6_1 put6_0) 24)))  ( =  0 ( mod  ( +  put7_1 put7_0) 24)))  ( =  0 ( mod  ( +  put8_1 put8_0) 24)))  ( =  0 ( mod  ( +  put9_1 put9_0) 24)))  ( =  0 ( mod  ( +  put10_1 put10_0) 24)))  ( =  0 ( mod  ( +  put11_1 put11_0) 24)))  ( =  0 ( mod  ( +  put12_1 put12_0) 24)))  ( =  0 ( mod  ( +  put13_1 put13_0) 24)))  ( =  0 ( mod  ( +  put14_1 put14_0) 24)))  ( =  0 ( mod  ( +  put15_1 put15_0) 24)))  ( =  0 ( mod  ( +  put16_1 put16_0) 24)))  ( =  0 ( mod  ( +  put17_1 put17_0) 24)))  ( =  0 ( mod  ( +  put18_1 put18_0) 24)))  ( =  0 ( mod  ( +  put19_1 put19_0) 24)))  ( =  0 ( mod  ( +  put20_1 put20_0) 24)))  ( =  0 ( mod  ( +  put21_1 put21_0) 24)))  ( =  0 ( mod  ( +  put22_1 put22_0) 24)))  ( =  0 ( mod  ( +  put23_1 put23_0) 24)))  ( =  0 ( mod  ( +  get1 get0) 24))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))) (not ( = put5_0 get0))) (not ( = put6_0 get0))) (not ( = put7_0 get0))) (not ( = put8_0 get0))) (not ( = put9_0 get0))) (not ( = put10_0 get0))) (not ( = put11_0 get0))) (not ( = put12_0 get0))) (not ( = put13_0 get0))) (not ( = put14_0 get0))) (not ( = put15_0 get0))) (not ( = put16_0 get0))) (not ( = put17_0 get0))) (not ( = put18_0 get0))) (not ( = put19_0 get0))) (not ( = put20_0 get0))) (not ( = put21_0 get0))) (not ( = put22_0 get0))) (not ( = put23_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 24)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 24)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 24)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 24)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 24)) (not (= put4_0 get0)) (= 0 (mod (+ put5_1 put5_0) 24)) (not (= put5_0 get0)) (= 0 (mod (+ put6_1 put6_0) 24)) (not (= put6_0 get0)) (= 0 (mod (+ put7_1 put7_0) 24)) (not (= put7_0 get0)) (= 0 (mod (+ put8_1 put8_0) 24)) (not (= put8_0 get0)) (= 0 (mod (+ put9_1 put9_0) 24)) (not (= put9_0 get0)) (= 0 (mod (+ put10_1 put10_0) 24)) (not (= put10_0 get0)) (= 0 (mod (+ put11_1 put11_0) 24)) (not (= put11_0 get0)) (= 0 (mod (+ put12_1 put12_0) 24)) (not (= put12_0 get0)) (= 0 (mod (+ put13_1 put13_0) 24)) (not (= put13_0 get0)) (= 0 (mod (+ put14_1 put14_0) 24)) (not (= put14_0 get0)) (= 0 (mod (+ put15_1 put15_0) 24)) (not (= put15_0 get0)) (= 0 (mod (+ put16_1 put16_0) 24)) (not (= put16_0 get0)) (= 0 (mod (+ put17_1 put17_0) 24)) (not (= put17_0 get0)) (= 0 (mod (+ put18_1 put18_0) 24)) (not (= put18_0 get0)) (= 0 (mod (+ put19_1 put19_0) 24)) (not (= put19_0 get0)) (= 0 (mod (+ put20_1 put20_0) 24)) (not (= put20_0 get0)) (= 0 (mod (+ put21_1 put21_0) 24)) (not (= put21_0 get0)) (= 0 (mod (+ put22_1 put22_0) 24)) (not (= put22_0 get0)) (= 0 (mod (+ put23_1 put23_0) 24)) (not (= put23_0 get0)) (= 0 (mod (+ get1 get0) 24))))",
        "equivalent": true
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const put23_1 Int)",
            "(declare-const put23_0 Int)",
            "(declare-const put21_1 Int)",
            "(declare-const put20_1 Int)",
            "(declare-const put20_0 Int)",
            "(declare-const get0 Int)",
            "(declare-const get1 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put19_0 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put19_1 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const put13_0 Int)",
            "(declare-const put13_1 Int)",
            "(declare-const put11_0 Int)",
            "(declare-const put11_1 Int)",
            "(declare-const put17_0 Int)",
            "(declare-const put6_1 Int)",
            "(declare-const put6_0 Int)",
            "(declare-const put17_1 Int)",
            "(declare-const put15_0 Int)",
            "(declare-const put8_1 Int)",
            "(declare-const put8_0 Int)",
            "(declare-const put15_1 Int)",
            "(declare-const put10_0 Int)",
            "(declare-const put24_1 Int)",
            "(declare-const put24_0 Int)",
            "(declare-const put22_1 Int)",
            "(declare-const put22_0 Int)",
            "(declare-const put21_0 Int)",
            "(declare-const put3_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put5_0 Int)",
            "(declare-const put18_1 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put12_1 Int)",
            "(declare-const put14_0 Int)",
            "(declare-const put9_1 Int)",
            "(declare-const put10_1 Int)",
            "(declare-const put12_0 Int)",
            "(declare-const put7_0 Int)",
            "(declare-const put16_1 Int)",
            "(declare-const put18_0 Int)",
            "(declare-const put5_1 Int)",
            "(declare-const put9_0 Int)",
            "(declare-const put14_1 Int)",
            "(declare-const put16_0 Int)",
            "(declare-const put7_1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 25))  ( =  0 ( mod  ( +  put1_1 put1_0) 25)))  ( =  0 ( mod  ( +  put2_1 put2_0) 25)))  ( =  0 ( mod  ( +  put3_1 put3_0) 25)))  ( =  0 ( mod  ( +  put4_1 put4_0) 25)))  ( =  0 ( mod  ( +  put5_1 put5_0) 25)))  ( =  0 ( mod  ( +  put6_1 put6_0) 25)))  ( =  0 ( mod  ( +  put7_1 put7_0) 25)))  ( =  0 ( mod  ( +  put8_1 put8_0) 25)))  ( =  0 ( mod  ( +  put9_1 put9_0) 25)))  ( =  0 ( mod  ( +  put10_1 put10_0) 25)))  ( =  0 ( mod  ( +  put11_1 put11_0) 25)))  ( =  0 ( mod  ( +  put12_1 put12_0) 25)))  ( =  0 ( mod  ( +  put13_1 put13_0) 25)))  ( =  0 ( mod  ( +  put14_1 put14_0) 25)))  ( =  0 ( mod  ( +  put15_1 put15_0) 25)))  ( =  0 ( mod  ( +  put16_1 put16_0) 25)))  ( =  0 ( mod  ( +  put17_1 put17_0) 25)))  ( =  0 ( mod  ( +  put18_1 put18_0) 25)))  ( =  0 ( mod  ( +  put19_1 put19_0) 25)))  ( =  0 ( mod  ( +  put20_1 put20_0) 25)))  ( =  0 ( mod  ( +  put21_1 put21_0) 25)))  ( =  0 ( mod  ( +  put22_1 put22_0) 25)))  ( =  0 ( mod  ( +  put23_1 put23_0) 25)))  ( =  0 ( mod  ( +  put24_1 put24_0) 25)))  ( =  0 ( mod  ( +  get1 get0) 25))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))) (not ( = put5_0 get0))) (not ( = put6_0 get0))) (not ( = put7_0 get0))) (not ( = put8_0 get0))) (not ( = put9_0 get0))) (not ( = put10_0 get0))) (not ( = put11_0 get0))) (not ( = put12_0 get0))) (not ( = put13_0 get0))) (not ( = put14_0 get0))) (not ( = put15_0 get0))) (not ( = put16_0 get0))) (not ( = put17_0 get0))) (not ( = put18_0 get0))) (not ( = put19_0 get0))) (not ( = put20_0 get0))) (not ( = put21_0 get0))) (not ( = put22_0 get0))) (not ( = put23_0 get0))) (not ( = put24_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 25)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 25)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 25)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 25)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 25)) (not (= put4_0 get0)) (= 0 (mod (+ put5_1 put5_0) 25)) (not (= put5_0 get0)) (= 0 (mod (+ put6_1 put6_0) 25)) (not (= put6_0 get0)) (= 0 (mod (+ put7_1 put7_0) 25)) (not (= put7_0 get0)) (= 0 (mod (+ put8_1 put8_0) 25)) (not (= put8_0 get0)) (= 0 (mod (+ put9_1 put9_0) 25)) (not (= put9_0 get0)) (= 0 (mod (+ put10_1 put10_0) 25)) (not (= put10_0 get0)) (= 0 (mod (+ put11_1 put11_0) 25)) (not (= put11_0 get0)) (= 0 (mod (+ put12_1 put12_0) 25)) (not (= put12_0 get0)) (= 0 (mod (+ put13_1 put13_0) 25)) (not (= put13_0 get0)) (= 0 (mod (+ put14_1 put14_0) 25)) (not (= put14_0 get0)) (= 0 (mod (+ put15_1 put15_0) 25)) (not (= put15_0 get0)) (= 0 (mod (+ put16_1 put16_0) 25)) (not (= put16_0 get0)) (= 0 (mod (+ put17_1 put17_0) 25)) (not (= put17_0 get0)) (= 0 (mod (+ put18_1 put18_0) 25)) (not (= put18_0 get0)) (= 0 (mod (+ put19_1 put19_0) 25)) (not (= put19_0 get0)) (= 0 (mod (+ put20_1 put20_0) 25)) (not (= put20_0 get0)) (= 0 (mod (+ put21_1 put21_0) 25)) (not (= put21_0 get0)) (= 0 (mod (+ put22_1 put22_0) 25)) (not (= put22_0 get0)) (= 0 (mod (+ put23_1 put23_0) 25)) (not (= put23_0 get0)) (= 0 (mod (+ put24_1 put24_0) 25)) (not (= put24_0 get0)) (= 0 (mod (+ get1 get0) 25))))",
        "equivalent": true
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const put25_0 Int)",
            "(declare-const put23_1 Int)",
            "(declare-const put23_0 Int)",
            "(declare-const put21_1 Int)",
            "(declare-const put25_1 Int)",
            "(declare-const put20_1 Int)",
            "(declare-const put20_0 Int)",
            "(declare-const get0 Int)",
            "(declare-const get1 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put19_0 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put19_1 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const put13_0 Int)",
            "(declare-const put13_1 Int)",
            "(declare-const put11_0 Int)",
            "(declare-const put11_1 Int)",
            "(declare-const put17_0 Int)",
            "(declare-const put6_1 Int)",
            "(declare-const put6_0 Int)",
            "(declare-const put17_1 Int)",
            "(declare-const put15_0 Int)",
            "(declare-const put8_1 Int)",
            "(declare-const put8_0 Int)",
            "(declare-const put15_1 Int)",
            "(declare-const put10_0 Int)",
            "(declare-const put24_1 Int)",
            "(declare-const put24_0 Int)",
            "(declare-const put22_1 Int)",
            "(declare-const put22_0 Int)",
            "(declare-const put21_0 Int)",
            "(declare-const put3_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put5_0 Int)",
            "(declare-const put18_1 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put12_1 Int)",
            "(declare-const put14_0 Int)",
            "(declare-const put9_1 Int)",
            "(declare-const put10_1 Int)",
            "(declare-const put12_0 Int)",
            "(declare-const put7_0 Int)",
            "(declare-const put16_1 Int)",
            "(declare-const put18_0 Int)",
            "(declare-const put5_1 Int)",
            "(declare-const put9_0 Int)",
            "(declare-const put14_1 Int)",
            "(declare-const put16_0 Int)",
            "(declare-const put7_1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 26))  ( =  0 ( mod  ( +  put1_1 put1_0) 26)))  ( =  0 ( mod  ( +  put2_1 put2_0) 26)))  ( =  0 ( mod  ( +  put3_1 put3_0) 26)))  ( =  0 ( mod  ( +  put4_1 put4_0) 26)))  ( =  0 ( mod  ( +  put5_1 put5_0) 26)))  ( =  0 ( mod  ( +  put6_1 put6_0) 26)))  ( =  0 ( mod  ( +  put7_1 put7_0) 26)))  ( =  0 ( mod  ( +  put8_1 put8_0) 26)))  ( =  0 ( mod  ( +  put9_1 put9_0) 26)))  ( =  0 ( mod  ( +  put10_1 put10_0) 26)))  ( =  0 ( mod  ( +  put11_1 put11_0) 26)))  ( =  0 ( mod  ( +  put12_1 put12_0) 26)))  ( =  0 ( mod  ( +  put13_1 put13_0) 26)))  ( =  0 ( mod  ( +  put14_1 put14_0) 26)))  ( =  0 ( mod  ( +  put15_1 put15_0) 26)))  ( =  0 ( mod  ( +  put16_1 put16_0) 26)))  ( =  0 ( mod  ( +  put17_1 put17_0) 26)))  ( =  0 ( mod  ( +  put18_1 put18_0) 26)))  ( =  0 ( mod  ( +  put19_1 put19_0) 26)))  ( =  0 ( mod  ( +  put20_1 put20_0) 26)))  ( =  0 ( mod  ( +  put21_1 put21_0) 26)))  ( =  0 ( mod  ( +  put22_1 put22_0) 26)))  ( =  0 ( mod  ( +  put23_1 put23_0) 26)))  ( =  0 ( mod  ( +  put24_1 put24_0) 26)))  ( =  0 ( mod  ( +  put25_1 put25_0) 26)))  ( =  0 ( mod  ( +  get1 get0) 26))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))) (not ( = put5_0 get0))) (not ( = put6_0 get0))) (not ( = put7_0 get0))) (not ( = put8_0 get0))) (not ( = put9_0 get0))) (not ( = put10_0 get0))) (not ( = put11_0 get0))) (not ( = put12_0 get0))) (not ( = put13_0 get0))) (not ( = put14_0 get0))) (not ( = put15_0 get0))) (not ( = put16_0 get0))) (not ( = put17_0 get0))) (not ( = put18_0 get0))) (not ( = put19_0 get0))) (not ( = put20_0 get0))) (not ( = put21_0 get0))) (not ( = put22_0 get0))) (not ( = put23_0 get0))) (not ( = put24_0 get0))) (not ( = put25_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 26)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 26)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 26)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 26)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 26)) (not (= put4_0 get0)) (= 0 (mod (+ put5_1 put5_0) 26)) (not (= put5_0 get0)) (= 0 (mod (+ put6_1 put6_0) 26)) (not (= put6_0 get0)) (= 0 (mod (+ put7_1 put7_0) 26)) (not (= put7_0 get0)) (= 0 (mod (+ put8_1 put8_0) 26)) (not (= put8_0 get0)) (= 0 (mod (+ put9_1 put9_0) 26)) (not (= put9_0 get0)) (= 0 (mod (+ put10_1 put10_0) 26)) (not (= put10_0 get0)) (= 0 (mod (+ put11_1 put11_0) 26)) (not (= put11_0 get0)) (= 0 (mod (+ put12_1 put12_0) 26)) (not (= put12_0 get0)) (= 0 (mod (+ put13_1 put13_0) 26)) (not (= put13_0 get0)) (= 0 (mod (+ put14_1 put14_0) 26)) (not (= put14_0 get0)) (= 0 (mod (+ put15_1 put15_0) 26)) (not (= put15_0 get0)) (= 0 (mod (+ put16_1 put16_0) 26)) (not (= put16_0 get0)) (= 0 (mod (+ put17_1 put17_0) 26)) (not (= put17_0 get0)) (= 0 (mod (+ put18_1 put18_0) 26)) (not (= put18_0 get0)) (= 0 (mod (+ put19_1 put19_0) 26)) (not (= put19_0 get0)) (= 0 (mod (+ put20_1 put20_0) 26)) (not (= put20_0 get0)) (= 0 (mod (+ put21_1 put21_0) 26)) (not (= put21_0 get0)) (= 0 (mod (+ put22_1 put22_0) 26)) (not (= put22_0 get0)) (= 0 (mod (+ put23_1 put23_0) 26)) (not (= put23_0 get0)) (= 0 (mod (+ put24_1 put24_0) 26)) (not (= put24_0 get0)) (= 0 (mod (+ put25_1 put25_0) 26)) (not (= put25_0 get0)) (= 0 (mod (+ get1 get0) 26))))",
        "equivalent": true
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const put25_0 Int)",
            "(declare-const put23_1 Int)",
            "(declare-const put23_0 Int)",
            "(declare-const put21_1 Int)",
            "(declare-const put25_1 Int)",
            "(declare-const put20_1 Int)",
            "(declare-const put20_0 Int)",
            "(declare-const get0 Int)",
            "(declare-const get1 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put19_0 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put19_1 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const put13_0 Int)",
            "(declare-const put13_1 Int)",
            "(declare-const put11_0 Int)",
            "(declare-const put11_1 Int)",
            "(declare-const put17_0 Int)",
            "(declare-const put6_1 Int)",
            "(declare-const put6_0 Int)",
            "(declare-const put17_1 Int)",
            "(declare-const put15_0 Int)",
            "(declare-const put8_1 Int)",
            "(declare-const put8_0 Int)",
            "(declare-const put15_1 Int)",
            "(declare-const put10_0 Int)",
            "(declare-const put24_1 Int)",
            "(declare-const put24_0 Int)",
            "(declare-const put22_1 Int)",
            "(declare-const put22_0 Int)",
            "(declare-const put26_1 Int)",
            "(declare-const put26_0 Int)",
            "(declare-const put21_0 Int)",
            "(declare-const put3_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put5_0 Int)",
            "(declare-const put18_1 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put12_1 Int)",
            "(declare-const put14_0 Int)",
            "(declare-const put9_1 Int)",
            "(declare-const put10_1 Int)",
            "(declare-const put12_0 Int)",
            "(declare-const put7_0 Int)",
            "(declare-const put16_1 Int)",
            "(declare-const put18_0 Int)",
            "(declare-const put5_1 Int)",
            "(declare-const put9_0 Int)",
            "(declare-const put14_1 Int)",
            "(declare-const put16_0 Int)",
            "(declare-const put7_1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 27))  ( =  0 ( mod  ( +  put1_1 put1_0) 27)))  ( =  0 ( mod  ( +  put2_1 put2_0) 27)))  ( =  0 ( mod  ( +  put3_1 put3_0) 27)))  ( =  0 ( mod  ( +  put4_1 put4_0) 27)))  ( =  0 ( mod  ( +  put5_1 put5_0) 27)))  ( =  0 ( mod  ( +  put6_1 put6_0) 27)))  ( =  0 ( mod  ( +  put7_1 put7_0) 27)))  ( =  0 ( mod  ( +  put8_1 put8_0) 27)))  ( =  0 ( mod  ( +  put9_1 put9_0) 27)))  ( =  0 ( mod  ( +  put10_1 put10_0) 27)))  ( =  0 ( mod  ( +  put11_1 put11_0) 27)))  ( =  0 ( mod  ( +  put12_1 put12_0) 27)))  ( =  0 ( mod  ( +  put13_1 put13_0) 27)))  ( =  0 ( mod  ( +  put14_1 put14_0) 27)))  ( =  0 ( mod  ( +  put15_1 put15_0) 27)))  ( =  0 ( mod  ( +  put16_1 put16_0) 27)))  ( =  0 ( mod  ( +  put17_1 put17_0) 27)))  ( =  0 ( mod  ( +  put18_1 put18_0) 27)))  ( =  0 ( mod  ( +  put19_1 put19_0) 27)))  ( =  0 ( mod  ( +  put20_1 put20_0) 27)))  ( =  0 ( mod  ( +  put21_1 put21_0) 27)))  ( =  0 ( mod  ( +  put22_1 put22_0) 27)))  ( =  0 ( mod  ( +  put23_1 put23_0) 27)))  ( =  0 ( mod  ( +  put24_1 put24_0) 27)))  ( =  0 ( mod  ( +  put25_1 put25_0) 27)))  ( =  0 ( mod  ( +  put26_1 put26_0) 27)))  ( =  0 ( mod  ( +  get1 get0) 27))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))) (not ( = put5_0 get0))) (not ( = put6_0 get0))) (not ( = put7_0 get0))) (not ( = put8_0 get0))) (not ( = put9_0 get0))) (not ( = put10_0 get0))) (not ( = put11_0 get0))) (not ( = put12_0 get0))) (not ( = put13_0 get0))) (not ( = put14_0 get0))) (not ( = put15_0 get0))) (not ( = put16_0 get0))) (not ( = put17_0 get0))) (not ( = put18_0 get0))) (not ( = put19_0 get0))) (not ( = put20_0 get0))) (not ( = put21_0 get0))) (not ( = put22_0 get0))) (not ( = put23_0 get0))) (not ( = put24_0 get0))) (not ( = put25_0 get0))) (not ( = put26_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 27)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 27)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 27)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 27)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 27)) (not (= put4_0 get0)) (= 0 (mod (+ put5_1 put5_0) 27)) (not (= put5_0 get0)) (= 0 (mod (+ put6_1 put6_0) 27)) (not (= put6_0 get0)) (= 0 (mod (+ put7_1 put7_0) 27)) (not (= put7_0 get0)) (= 0 (mod (+ put8_1 put8_0) 27)) (not (= put8_0 get0)) (= 0 (mod (+ put9_1 put9_0) 27)) (not (= put9_0 get0)) (= 0 (mod (+ put10_1 put10_0) 27)) (not (= put10_0 get0)) (= 0 (mod (+ put11_1 put11_0) 27)) (not (= put11_0 get0)) (= 0 (mod (+ put12_1 put12_0) 27)) (not (= put12_0 get0)) (= 0 (mod (+ put13_1 put13_0) 27)) (not (= put13_0 get0)) (= 0 (mod (+ put14_1 put14_0) 27)) (not (= put14_0 get0)) (= 0 (mod (+ put15_1 put15_0) 27)) (not (= put15_0 get0)) (= 0 (mod (+ put16_1 put16_0) 27)) (not (= put16_0 get0)) (= 0 (mod (+ put17_1 put17_0) 27)) (not (= put17_0 get0)) (= 0 (mod (+ put18_1 put18_0) 27)) (not (= put18_0 get0)) (= 0 (mod (+ put19_1 put19_0) 27)) (not (= put19_0 get0)) (= 0 (mod (+ put20_1 put20_0) 27)) (not (= put20_0 get0)) (= 0 (mod (+ put21_1 put21_0) 27)) (not (= put21_0 get0)) (= 0 (mod (+ put22_1 put22_0) 27)) (not (= put22_0 get0)) (= 0 (mod (+ put23_1 put23_0) 27)) (not (= put23_0 get0)) (= 0 (mod (+ put24_1 put24_0) 27)) (not (= put24_0 get0)) (= 0 (mod (+ put25_1 put25_0) 27)) (not (= put25_0 get0)) (= 0 (mod (+ put26_1 put26_0) 27)) (not (= put26_0 get0)) (= 0 (mod (+ get1 get0) 27))))",
        "equivalent": true
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const put25_0 Int)",
            "(declare-const put23_1 Int)",
            "(declare-const put23_0 Int)",
            "(declare-const put21_1 Int)",
            "(declare-const put27_1 Int)",
            "(declare-const put27_0 Int)",
            "(declare-const put25_1 Int)",
            "(declare-const put20_1 Int)",
            "(declare-const put20_0 Int)",
            "(declare-const get0 Int)",
            "(declare-const get1 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put19_0 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put19_1 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const put13_0 Int)",
            "(declare-const put13_1 Int)",
            "(declare-const put11_0 Int)",
            "(declare-const put11_1 Int)",
            "(declare-const put17_0 Int)",
            "(declare-const put6_1 Int)",
            "(declare-const put6_0 Int)",
            "(declare-const put17_1 Int)",
            "(declare-const put15_0 Int)",
            "(declare-const put8_1 Int)",
            "(declare-const put8_0 Int)",
            "(declare-const put15_1 Int)",
            "(declare-const put10_0 Int)",
            "(declare-const put24_1 Int)",
            "(declare-const put24_0 Int)",
            "(declare-const put22_1 Int)",
            "(declare-const put22_0 Int)",
            "(declare-const put26_1 Int)",
            "(declare-const put26_0 Int)",
            "(declare-const put21_0 Int)",
            "(declare-const put3_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put5_0 Int)",
            "(declare-const put18_1 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put12_1 Int)",
            "(declare-const put14_0 Int)",
            "(declare-const put9_1 Int)",
            "(declare-const put10_1 Int)",
            "(declare-const put12_0 Int)",
            "(declare-const put7_0 Int)",
            "(declare-const put16_1 Int)",
            "(declare-const put18_0 Int)",
            "(declare-const put5_1 Int)",
            "(declare-const put9_0 Int)",
            "(declare-const put14_1 Int)",
            "(declare-const put16_0 Int)",
            "(declare-const put7_1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 28))  ( =  0 ( mod  ( +  put1_1 put1_0) 28)))  ( =  0 ( mod  ( +  put2_1 put2_0) 28)))  ( =  0 ( mod  ( +  put3_1 put3_0) 28)))  ( =  0 ( mod  ( +  put4_1 put4_0) 28)))  ( =  0 ( mod  ( +  put5_1 put5_0) 28)))  ( =  0 ( mod  ( +  put6_1 put6_0) 28)))  ( =  0 ( mod  ( +  put7_1 put7_0) 28)))  ( =  0 ( mod  ( +  put8_1 put8_0) 28)))  ( =  0 ( mod  ( +  put9_1 put9_0) 28)))  ( =  0 ( mod  ( +  put10_1 put10_0) 28)))  ( =  0 ( mod  ( +  put11_1 put11_0) 28)))  ( =  0 ( mod  ( +  put12_1 put12_0) 28)))  ( =  0 ( mod  ( +  put13_1 put13_0) 28)))  ( =  0 ( mod  ( +  put14_1 put14_0) 28)))  ( =  0 ( mod  ( +  put15_1 put15_0) 28)))  ( =  0 ( mod  ( +  put16_1 put16_0) 28)))  ( =  0 ( mod  ( +  put17_1 put17_0) 28)))  ( =  0 ( mod  ( +  put18_1 put18_0) 28)))  ( =  0 ( mod  ( +  put19_1 put19_0) 28)))  ( =  0 ( mod  ( +  put20_1 put20_0) 28)))  ( =  0 ( mod  ( +  put21_1 put21_0) 28)))  ( =  0 ( mod  ( +  put22_1 put22_0) 28)))  ( =  0 ( mod  ( +  put23_1 put23_0) 28)))  ( =  0 ( mod  ( +  put24_1 put24_0) 28)))  ( =  0 ( mod  ( +  put25_1 put25_0) 28)))  ( =  0 ( mod  ( +  put26_1 put26_0) 28)))  ( =  0 ( mod  ( +  put27_1 put27_0) 28)))  ( =  0 ( mod  ( +  get1 get0) 28))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))) (not ( = put5_0 get0))) (not ( = put6_0 get0))) (not ( = put7_0 get0))) (not ( = put8_0 get0))) (not ( = put9_0 get0))) (not ( = put10_0 get0))) (not ( = put11_0 get0))) (not ( = put12_0 get0))) (not ( = put13_0 get0))) (not ( = put14_0 get0))) (not ( = put15_0 get0))) (not ( = put16_0 get0))) (not ( = put17_0 get0))) (not ( = put18_0 get0))) (not ( = put19_0 get0))) (not ( = put20_0 get0))) (not ( = put21_0 get0))) (not ( = put22_0 get0))) (not ( = put23_0 get0))) (not ( = put24_0 get0))) (not ( = put25_0 get0))) (not ( = put26_0 get0))) (not ( = put27_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 28)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 28)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 28)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 28)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 28)) (not (= put4_0 get0)) (= 0 (mod (+ put5_1 put5_0) 28)) (not (= put5_0 get0)) (= 0 (mod (+ put6_1 put6_0) 28)) (not (= put6_0 get0)) (= 0 (mod (+ put7_1 put7_0) 28)) (not (= put7_0 get0)) (= 0 (mod (+ put8_1 put8_0) 28)) (not (= put8_0 get0)) (= 0 (mod (+ put9_1 put9_0) 28)) (not (= put9_0 get0)) (= 0 (mod (+ put10_1 put10_0) 28)) (not (= put10_0 get0)) (= 0 (mod (+ put11_1 put11_0) 28)) (not (= put11_0 get0)) (= 0 (mod (+ put12_1 put12_0) 28)) (not (= put12_0 get0)) (= 0 (mod (+ put13_1 put13_0) 28)) (not (= put13_0 get0)) (= 0 (mod (+ put14_1 put14_0) 28)) (not (= put14_0 get0)) (= 0 (mod (+ put15_1 put15_0) 28)) (not (= put15_0 get0)) (= 0 (mod (+ put16_1 put16_0) 28)) (not (= put16_0 get0)) (= 0 (mod (+ put17_1 put17_0) 28)) (not (= put17_0 get0)) (= 0 (mod (+ put18_1 put18_0) 28)) (not (= put18_0 get0)) (= 0 (mod (+ put19_1 put19_0) 28)) (not (= put19_0 get0)) (= 0 (mod (+ put20_1 put20_0) 28)) (not (= put20_0 get0)) (= 0 (mod (+ put21_1 put21_0) 28)) (not (= put21_0 get0)) (= 0 (mod (+ put22_1 put22_0) 28)) (not (= put22_0 get0)) (= 0 (mod (+ put23_1 put23_0) 28)) (not (= put23_0 get0)) (= 0 (mod (+ put24_1 put24_0) 28)) (not (= put24_0 get0)) (= 0 (mod (+ put25_1 put25_0) 28)) (not (= put25_0 get0)) (= 0 (mod (+ put26_1 put26_0) 28)) (not (= put26_0 get0)) (= 0 (mod (+ put27_1 put27_0) 28)) (not (= put27_0 get0)) (= 0 (mod (+ get1 get0) 28))))",
        "equivalent": true
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const put25_0 Int)",
            "(declare-const put23_1 Int)",
            "(declare-const put23_0 Int)",
            "(declare-const put21_1 Int)",
            "(declare-const put27_1 Int)",
            "(declare-const put27_0 Int)",
            "(declare-const put25_1 Int)",
            "(declare-const put20_1 Int)",
            "(declare-const put20_0 Int)",
            "(declare-const get0 Int)",
            "(declare-const get1 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put19_0 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put19_1 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const put13_0 Int)",
            "(declare-const put13_1 Int)",
            "(declare-const put11_0 Int)",
            "(declare-const put11_1 Int)",
            "(declare-const put17_0 Int)",
            "(declare-const put6_1 Int)",
            "(declare-const put6_0 Int)",
            "(declare-const put17_1 Int)",
            "(declare-const put15_0 Int)",
            "(declare-const put8_1 Int)",
            "(declare-const put8_0 Int)",
            "(declare-const put15_1 Int)",
            "(declare-const put10_0 Int)",
            "(declare-const put24_1 Int)",
            "(declare-const put24_0 Int)",
            "(declare-const put22_1 Int)",
            "(declare-const put22_0 Int)",
            "(declare-const put28_1 Int)",
            "(declare-const put28_0 Int)",
            "(declare-const put26_1 Int)",
            "(declare-const put26_0 Int)",
            "(declare-const put21_0 Int)",
            "(declare-const put3_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put5_0 Int)",
            "(declare-const put18_1 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put12_1 Int)",
            "(declare-const put14_0 Int)",
            "(declare-const put9_1 Int)",
            "(declare-const put10_1 Int)",
            "(declare-const put12_0 Int)",
            "(declare-const put7_0 Int)",
            "(declare-const put16_1 Int)",
            "(declare-const put18_0 Int)",
            "(declare-const put5_1 Int)",
            "(declare-const put9_0 Int)",
            "(declare-const put14_1 Int)",
            "(declare-const put16_0 Int)",
            "(declare-const put7_1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 29))  ( =  0 ( mod  ( +  put1_1 put1_0) 29)))  ( =  0 ( mod  ( +  put2_1 put2_0) 29)))  ( =  0 ( mod  ( +  put3_1 put3_0) 29)))  ( =  0 ( mod  ( +  put4_1 put4_0) 29)))  ( =  0 ( mod  ( +  put5_1 put5_0) 29)))  ( =  0 ( mod  ( +  put6_1 put6_0) 29)))  ( =  0 ( mod  ( +  put7_1 put7_0) 29)))  ( =  0 ( mod  ( +  put8_1 put8_0) 29)))  ( =  0 ( mod  ( +  put9_1 put9_0) 29)))  ( =  0 ( mod  ( +  put10_1 put10_0) 29)))  ( =  0 ( mod  ( +  put11_1 put11_0) 29)))  ( =  0 ( mod  ( +  put12_1 put12_0) 29)))  ( =  0 ( mod  ( +  put13_1 put13_0) 29)))  ( =  0 ( mod  ( +  put14_1 put14_0) 29)))  ( =  0 ( mod  ( +  put15_1 put15_0) 29)))  ( =  0 ( mod  ( +  put16_1 put16_0) 29)))  ( =  0 ( mod  ( +  put17_1 put17_0) 29)))  ( =  0 ( mod  ( +  put18_1 put18_0) 29)))  ( =  0 ( mod  ( +  put19_1 put19_0) 29)))  ( =  0 ( mod  ( +  put20_1 put20_0) 29)))  ( =  0 ( mod  ( +  put21_1 put21_0) 29)))  ( =  0 ( mod  ( +  put22_1 put22_0) 29)))  ( =  0 ( mod  ( +  put23_1 put23_0) 29)))  ( =  0 ( mod  ( +  put24_1 put24_0) 29)))  ( =  0 ( mod  ( +  put25_1 put25_0) 29)))  ( =  0 ( mod  ( +  put26_1 put26_0) 29)))  ( =  0 ( mod  ( +  put27_1 put27_0) 29)))  ( =  0 ( mod  ( +  put28_1 put28_0) 29)))  ( =  0 ( mod  ( +  get1 get0) 29))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))) (not ( = put5_0 get0))) (not ( = put6_0 get0))) (not ( = put7_0 get0))) (not ( = put8_0 get0))) (not ( = put9_0 get0))) (not ( = put10_0 get0))) (not ( = put11_0 get0))) (not ( = put12_0 get0))) (not ( = put13_0 get0))) (not ( = put14_0 get0))) (not ( = put15_0 get0))) (not ( = put16_0 get0))) (not ( = put17_0 get0))) (not ( = put18_0 get0))) (not ( = put19_0 get0))) (not ( = put20_0 get0))) (not ( = put21_0 get0))) (not ( = put22_0 get0))) (not ( = put23_0 get0))) (not ( = put24_0 get0))) (not ( = put25_0 get0))) (not ( = put26_0 get0))) (not ( = put27_0 get0))) (not ( = put28_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 29)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 29)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 29)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 29)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 29)) (not (= put4_0 get0)) (= 0 (mod (+ put5_1 put5_0) 29)) (not (= put5_0 get0)) (= 0 (mod (+ put6_1 put6_0) 29)) (not (= put6_0 get0)) (= 0 (mod (+ put7_1 put7_0) 29)) (not (= put7_0 get0)) (= 0 (mod (+ put8_1 put8_0) 29)) (not (= put8_0 get0)) (= 0 (mod (+ put9_1 put9_0) 29)) (not (= put9_0 get0)) (= 0 (mod (+ put10_1 put10_0) 29)) (not (= put10_0 get0)) (= 0 (mod (+ put11_1 put11_0) 29)) (not (= put11_0 get0)) (= 0 (mod (+ put12_1 put12_0) 29)) (not (= put12_0 get0)) (= 0 (mod (+ put13_1 put13_0) 29)) (not (= put13_0 get0)) (= 0 (mod (+ put14_1 put14_0) 29)) (not (= put14_0 get0)) (= 0 (mod (+ put15_1 put15_0) 29)) (not (= put15_0 get0)) (= 0 (mod (+ put16_1 put16_0) 29)) (not (= put16_0 get0)) (= 0 (mod (+ put17_1 put17_0) 29)) (not (= put17_0 get0)) (= 0 (mod (+ put18_1 put18_0) 29)) (not (= put18_0 get0)) (= 0 (mod (+ put19_1 put19_0) 29)) (not (= put19_0 get0)) (= 0 (mod (+ put20_1 put20_0) 29)) (not (= put20_0 get0)) (= 0 (mod (+ put21_1 put21_0) 29)) (not (= put21_0 get0)) (= 0 (mod (+ put22_1 put22_0) 29)) (not (= put22_0 get0)) (= 0 (mod (+ put23_1 put23_0) 29)) (not (= put23_0 get0)) (= 0 (mod (+ put24_1 put24_0) 29)) (not (= put24_0 get0)) (= 0 (mod (+ put25_1 put25_0) 29)) (not (= put25_0 get0)) (= 0 (mod (+ put26_1 put26_0) 29)) (not (= put26_0 get0)) (= 0 (mod (+ put27_1 put27_0) 29)) (not (= put27_0 get0)) (= 0 (mod (+ put28_1 put28_0) 29)) (not (= put28_0 get0)) (= 0 (mod (+ get1 get0) 29))))",
        "equivalent": true
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const put29_1 Int)",
            "(declare-const put25_0 Int)",
            "(declare-const put23_1 Int)",
            "(declare-const put23_0 Int)",
            "(declare-const put21_1 Int)",
            "(declare-const put29_0 Int)",
            "(declare-const put27_1 Int)",
            "(declare-const put27_0 Int)",
            "(declare-const put25_1 Int)",
            "(declare-const put20_1 Int)",
            "(declare-const put20_0 Int)",
            "(declare-const get0 Int)",
            "(declare-const get1 Int)",
            "(declare-const put2_1 Int)",
            "(declare-const put2_0 Int)",
            "(declare-const put19_0 Int)",
            "(declare-const put4_1 Int)",
            "(declare-const put4_0 Int)",
            "(declare-const put19_1 Int)",
            "(declare-const put0_0 Int)",
            "(declare-const put0_1 Int)",
            "(declare-const put13_0 Int)",
            "(declare-const put13_1 Int)",
            "(declare-const put11_0 Int)",
            "(declare-const put11_1 Int)",
            "(declare-const put17_0 Int)",
            "(declare-const put6_1 Int)",
            "(declare-const put6_0 Int)",
            "(declare-const put17_1 Int)",
            "(declare-const put15_0 Int)",
            "(declare-const put8_1 Int)",
            "(declare-const put8_0 Int)",
            "(declare-const put15_1 Int)",
            "(declare-const put10_0 Int)",
            "(declare-const put24_1 Int)",
            "(declare-const put24_0 Int)",
            "(declare-const put22_1 Int)",
            "(declare-const put22_0 Int)",
            "(declare-const put28_1 Int)",
            "(declare-const put28_0 Int)",
            "(declare-const put26_1 Int)",
            "(declare-const put26_0 Int)",
            "(declare-const put21_0 Int)",
            "(declare-const put3_0 Int)",
            "(declare-const put1_1 Int)",
            "(declare-const put5_0 Int)",
            "(declare-const put18_1 Int)",
            "(declare-const put3_1 Int)",
            "(declare-const put1_0 Int)",
            "(declare-const put12_1 Int)",
            "(declare-const put14_0 Int)",
            "(declare-const put9_1 Int)",
            "(declare-const put10_1 Int)",
            "(declare-const put12_0 Int)",
            "(declare-const put7_0 Int)",
            "(declare-const put16_1 Int)",
            "(declare-const put18_0 Int)",
            "(declare-const put5_1 Int)",
            "(declare-const put9_0 Int)",
            "(declare-const put14_1 Int)",
            "(declare-const put16_0 Int)",
            "(declare-const put7_1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  0 ( mod  ( +  put0_1 put0_0) 30))  ( =  0 ( mod  ( +  put1_1 put1_0) 30)))  ( =  0 ( mod  ( +  put2_1 put2_0) 30)))  ( =  0 ( mod  ( +  put3_1 put3_0) 30)))  ( =  0 ( mod  ( +  put4_1 put4_0) 30)))  ( =  0 ( mod  ( +  put5_1 put5_0) 30)))  ( =  0 ( mod  ( +  put6_1 put6_0) 30)))  ( =  0 ( mod  ( +  put7_1 put7_0) 30)))  ( =  0 ( mod  ( +  put8_1 put8_0) 30)))  ( =  0 ( mod  ( +  put9_1 put9_0) 30)))  ( =  0 ( mod  ( +  put10_1 put10_0) 30)))  ( =  0 ( mod  ( +  put11_1 put11_0) 30)))  ( =  0 ( mod  ( +  put12_1 put12_0) 30)))  ( =  0 ( mod  ( +  put13_1 put13_0) 30)))  ( =  0 ( mod  ( +  put14_1 put14_0) 30)))  ( =  0 ( mod  ( +  put15_1 put15_0) 30)))  ( =  0 ( mod  ( +  put16_1 put16_0) 30)))  ( =  0 ( mod  ( +  put17_1 put17_0) 30)))  ( =  0 ( mod  ( +  put18_1 put18_0) 30)))  ( =  0 ( mod  ( +  put19_1 put19_0) 30)))  ( =  0 ( mod  ( +  put20_1 put20_0) 30)))  ( =  0 ( mod  ( +  put21_1 put21_0) 30)))  ( =  0 ( mod  ( +  put22_1 put22_0) 30)))  ( =  0 ( mod  ( +  put23_1 put23_0) 30)))  ( =  0 ( mod  ( +  put24_1 put24_0) 30)))  ( =  0 ( mod  ( +  put25_1 put25_0) 30)))  ( =  0 ( mod  ( +  put26_1 put26_0) 30)))  ( =  0 ( mod  ( +  put27_1 put27_0) 30)))  ( =  0 ( mod  ( +  put28_1 put28_0) 30)))  ( =  0 ( mod  ( +  put29_1 put29_0) 30)))  ( =  0 ( mod  ( +  get1 get0) 30))) (not ( = put0_0 get0))) (not ( = put1_0 get0))) (not ( = put2_0 get0))) (not ( = put3_0 get0))) (not ( = put4_0 get0))) (not ( = put5_0 get0))) (not ( = put6_0 get0))) (not ( = put7_0 get0))) (not ( = put8_0 get0))) (not ( = put9_0 get0))) (not ( = put10_0 get0))) (not ( = put11_0 get0))) (not ( = put12_0 get0))) (not ( = put13_0 get0))) (not ( = put14_0 get0))) (not ( = put15_0 get0))) (not ( = put16_0 get0))) (not ( = put17_0 get0))) (not ( = put18_0 get0))) (not ( = put19_0 get0))) (not ( = put20_0 get0))) (not ( = put21_0 get0))) (not ( = put22_0 get0))) (not ( = put23_0 get0))) (not ( = put24_0 get0))) (not ( = put25_0 get0))) (not ( = put26_0 get0))) (not ( = put27_0 get0))) (not ( = put28_0 get0))) (not ( = put29_0 get0))))"
          ]
        },
        "predicted": "(assert (and (= 0 (mod (+ put0_1 put0_0) 30)) (not (= put0_0 get0)) (= 0 (mod (+ put1_1 put1_0) 30)) (not (= put1_0 get0)) (= 0 (mod (+ put2_1 put2_0) 30)) (not (= put2_0 get0)) (= 0 (mod (+ put3_1 put3_0) 30)) (not (= put3_0 get0)) (= 0 (mod (+ put4_1 put4_0) 30)) (not (= put4_0 get0)) (= 0 (mod (+ put5_1 put5_0) 30)) (not (= put5_0 get0)) (= 0 (mod (+ put6_1 put6_0) 30)) (not (= put6_0 get0)) (= 0 (mod (+ put7_1 put7_0) 30)) (not (= put7_0 get0)) (= 0 (mod (+ put8_1 put8_0) 30)) (not (= put8_0 get0)) (= 0 (mod (+ put9_1 put9_0) 30)) (not (= put9_0 get0)) (= 0 (mod (+ put10_1 put10_0) 30)) (not (= put10_0 get0)) (= 0 (mod (+ put11_1 put11_0) 30)) (not (= put11_0 get0)) (= 0 (mod (+ put12_1 put12_0) 30)) (not (= put12_0 get0)) (= 0 (mod (+ put13_1 put13_0) 30)) (not (= put13_0 get0)) (= 0 (mod (+ put14_1 put14_0) 30)) (not (= put14_0 get0)) (= 0 (mod (+ put15_1 put15_0) 30)) (not (= put15_0 get0)) (= 0 (mod (+ put16_1 put16_0) 30)) (not (= put16_0 get0)) (= 0 (mod (+ put17_1 put17_0) 30)) (not (= put17_0 get0)) (= 0 (mod (+ put18_1 put18_0) 30)) (not (= put18_0 get0)) (= 0 (mod (+ put19_1 put19_0) 30)) (not (= put19_0 get0)) (= 0 (mod (+ put20_1 put20_0) 30)) (not (= put20_0 get0)) (= 0 (mod (+ put21_1 put21_0) 30)) (not (= put21_0 get0)) (= 0 (mod (+ put22_1 put22_0) 30)) (not (= put22_0 get0)) (= 0 (mod (+ put23_1 put23_0) 30)) (not (= put23_0 get0)) (= 0 (mod (+ put24_1 put24_0) 30)) (not (= put24_0 get0)) (= 0 (mod (+ put25_1 put25_0) 30)) (not (= put25_0 get0)) (= 0 (mod (+ put26_1 put26_0) 30)) (not (= put26_0 get0)) (= 0 (mod (+ put27_1 put27_0) 30)) (not (= put27_0 get0)) (= 0 (mod (+ put28_1 put28_0) 30)) (not (= put28_0 get0)) (= 0 (mod (+ put29_1 put29_0) 30)) (not (= put29_0 get0)) (= 0 (mod (+ get1 get0) 30))))",
        "equivalent": true
      }
    }
  },
  "BadgerPassword": {
    "succeeded": false,
    "attempts": 10,
    "examples_right": 10,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 64)) (not ( = in0 35))) (not ( = in0 36)))  ( =  in0 37)) (not ( = in1 64))) (not ( = in1 35))) (not ( = in1 36)))  ( =  in1 37)) (not ( = in2 64))) (not ( = in2 35))) (not ( = in2 36)))  ( =  in2 37)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37)))",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 64)) (not ( = in0 35))) (not ( = in0 36)))  ( =  in0 37)) (not ( = in1 64))) (not ( = in1 35))) (not ( = in1 36)))  ( =  in1 37)) (not ( = in2 64))) (not ( = in2 35))) (not ( = in2 36)))  ( =  in2 37)) (not ( = in3 64))) (not ( = in3 35))) (not ( = in3 36)))  ( =  in3 37)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37)))",
        "equivalent": true
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 64)) (not ( = in0 35))) (not ( = in0 36)))  ( =  in0 37)) (not ( = in1 64))) (not ( = in1 35))) (not ( = in1 36)))  ( =  in1 37)) (not ( = in2 64))) (not ( = in2 35))) (not ( = in2 36)))  ( =  in2 37)) (not ( = in3 64))) (not ( = in3 35))) (not ( = in3 36)))  ( =  in3 37)) (not ( = in4 64))) (not ( = in4 35))) (not ( = in4 36)))  ( =  in4 37)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37)))",
        "equivalent": true
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 64)) (not ( = in0 35))) (not ( = in0 36)))  ( =  in0 37)) (not ( = in1 64))) (not ( = in1 35))) (not ( = in1 36)))  ( =  in1 37)) (not ( = in2 64))) (not ( = in2 35))) (not ( = in2 36)))  ( =  in2 37)) (not ( = in3 64))) (not ( = in3 35))) (not ( = in3 36)))  ( =  in3 37)) (not ( = in4 64))) (not ( = in4 35))) (not ( = in4 36)))  ( =  in4 37)) (not ( = in5 64))) (not ( = in5 35))) (not ( = in5 36)))  ( =  in5 37)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37) (not (= in5 64)) (not (= in5 35)) (not (= in5 36)) (= in5 37)))",
        "equivalent": true
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 64)) (not ( = in0 35))) (not ( = in0 36)))  ( =  in0 37)) (not ( = in1 64))) (not ( = in1 35))) (not ( = in1 36)))  ( =  in1 37)) (not ( = in2 64))) (not ( = in2 35))) (not ( = in2 36)))  ( =  in2 37)) (not ( = in3 64))) (not ( = in3 35))) (not ( = in3 36)))  ( =  in3 37)) (not ( = in4 64))) (not ( = in4 35))) (not ( = in4 36)))  ( =  in4 37)) (not ( = in5 64))) (not ( = in5 35))) (not ( = in5 36)))  ( =  in5 37)) (not ( = in6 64))) (not ( = in6 35))) (not ( = in6 36)))  ( =  in6 37)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37) (not (= in5 64)) (not (= in5 35)) (not (= in5 36)) (= in5 37) (not (= in6 64)) (not (= in6 35)) (not (= in6 36)) (= in6 37)))",
        "equivalent": true
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 64)) (not ( = in0 35))) (not ( = in0 36)))  ( =  in0 37)) (not ( = in1 64))) (not ( = in1 35))) (not ( = in1 36)))  ( =  in1 37)) (not ( = in2 64))) (not ( = in2 35))) (not ( = in2 36)))  ( =  in2 37)) (not ( = in3 64))) (not ( = in3 35))) (not ( = in3 36)))  ( =  in3 37)) (not ( = in4 64))) (not ( = in4 35))) (not ( = in4 36)))  ( =  in4 37)) (not ( = in5 64))) (not ( = in5 35))) (not ( = in5 36)))  ( =  in5 37)) (not ( = in6 64))) (not ( = in6 35))) (not ( = in6 36)))  ( =  in6 37)) (not ( = in7 64))) (not ( = in7 35))) (not ( = in7 36)))  ( =  in7 37)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37) (not (= in5 64)) (not (= in5 35)) (not (= in5 36)) (= in5 37) (not (= in6 64)) (not (= in6 35)) (not (= in6 36)) (= in6 37) (not (= in7 64)) (not (= in7 35)) (not (= in7 36)) (= in7 37)))",
        "equivalent": true
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 64)) (not ( = in0 35))) (not ( = in0 36)))  ( =  in0 37)) (not ( = in1 64))) (not ( = in1 35))) (not ( = in1 36)))  ( =  in1 37)) (not ( = in2 64))) (not ( = in2 35))) (not ( = in2 36)))  ( =  in2 37)) (not ( = in3 64))) (not ( = in3 35))) (not ( = in3 36)))  ( =  in3 37)) (not ( = in4 64))) (not ( = in4 35))) (not ( = in4 36)))  ( =  in4 37)) (not ( = in5 64))) (not ( = in5 35))) (not ( = in5 36)))  ( =  in5 37)) (not ( = in6 64))) (not ( = in6 35))) (not ( = in6 36)))  ( =  in6 37)) (not ( = in7 64))) (not ( = in7 35))) (not ( = in7 36)))  ( =  in7 37)) (not ( = in8 64))) (not ( = in8 35))) (not ( = in8 36)))  ( =  in8 37)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37) (not (= in5 64)) (not (= in5 35)) (not (= in5 36)) (= in5 37) (not (= in6 64)) (not (= in6 35)) (not (= in6 36)) (= in6 37) (not (= in7 64)) (not (= in7 35)) (not (= in7 36)) (= in7 37) (not (= in8 64)) (not (= in8 35)) (not (= in8 36)) (= in8 37)))",
        "equivalent": true
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 64)) (not ( = in0 35))) (not ( = in0 36)))  ( =  in0 37)) (not ( = in1 64))) (not ( = in1 35))) (not ( = in1 36)))  ( =  in1 37)) (not ( = in2 64))) (not ( = in2 35))) (not ( = in2 36)))  ( =  in2 37)) (not ( = in3 64))) (not ( = in3 35))) (not ( = in3 36)))  ( =  in3 37)) (not ( = in4 64))) (not ( = in4 35))) (not ( = in4 36)))  ( =  in4 37)) (not ( = in5 64))) (not ( = in5 35))) (not ( = in5 36)))  ( =  in5 37)) (not ( = in6 64))) (not ( = in6 35))) (not ( = in6 36)))  ( =  in6 37)) (not ( = in7 64))) (not ( = in7 35))) (not ( = in7 36)))  ( =  in7 37)) (not ( = in8 64))) (not ( = in8 35))) (not ( = in8 36)))  ( =  in8 37)) (not ( = in9 64))) (not ( = in9 35))) (not ( = in9 36)))  ( =  in9 37)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37) (not (= in5 64)) (not (= in5 35)) (not (= in5 36)) (= in5 37) (not (= in6 64)) (not (= in6 35)) (not (= in6 36)) (= in6 37) (not (= in7 64)) (not (= in7 35)) (not (= in7 36)) (= in7 37) (not (= in8 64)) (not (= in8 35)) (not (= in8 36)) (= in8 37) (not (= in9 64)) (not (= in9 35)) (not (= in9 36)) (= in9 37)))",
        "equivalent": true
      },
      "11": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37) (not (= in5 64)) (not (= in5 35)) (not (= in5 36)) (= in5 37) (not (= in6 64)) (not (= in6 35)) (not (= in6 36)) (= in6 37) (not (= in7 64)) (not (= in7 35)) (not (= in7 36)) (= in7 37) (not (= in8 64)) (not (= in8 35)) (not (= in8 36)) (= in8 37) (not (= in9 64)) (not (= in9 35)) (not (= in9 36)) (= in9 37) (not (= in10 64)) (not (= in10 35)) (not (= in10 36)) (= in10 37)))",
        "equivalent": false
      },
      "12": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37) (not (= in5 64)) (not (= in5 35)) (not (= in5 36)) (= in5 37) (not (= in6 64)) (not (= in6 35)) (not (= in6 36)) (= in6 37) (not (= in7 64)) (not (= in7 35)) (not (= in7 36)) (= in7 37) (not (= in8 64)) (not (= in8 35)) (not (= in8 36)) (= in8 37) (not (= in9 64)) (not (= in9 35)) (not (= in9 36)) (= in9 37) (not (= in10 64)) (not (= in10 35)) (not (= in10 36)) (= in10 37) (not (= in11 64)) (not (= in11 35)) (not (= in11 36)) (= in11 37)))",
        "equivalent": false
      },
      "13": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37) (not (= in5 64)) (not (= in5 35)) (not (= in5 36)) (= in5 37) (not (= in6 64)) (not (= in6 35)) (not (= in6 36)) (= in6 37) (not (= in7 64)) (not (= in7 35)) (not (= in7 36)) (= in7 37) (not (= in8 64)) (not (= in8 35)) (not (= in8 36)) (= in8 37) (not (= in9 64)) (not (= in9 35)) (not (= in9 36)) (= in9 37) (not (= in10 64)) (not (= in10 35)) (not (= in10 36)) (= in10 37) (not (= in11 64)) (not (= in11 35)) (not (= in11 36)) (= in11 37) (not (= in12 64)) (not (= in12 35)) (not (= in12 36)) (= in12 37)))",
        "equivalent": false
      },
      "14": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37) (not (= in5 64)) (not (= in5 35)) (not (= in5 36)) (= in5 37) (not (= in6 64)) (not (= in6 35)) (not (= in6 36)) (= in6 37) (not (= in7 64)) (not (= in7 35)) (not (= in7 36)) (= in7 37) (not (= in8 64)) (not (= in8 35)) (not (= in8 36)) (= in8 37) (not (= in9 64)) (not (= in9 35)) (not (= in9 36)) (= in9 37) (not (= in10 64)) (not (= in10 35)) (not (= in10 36)) (= in10 37) (not (= in11 64)) (not (= in11 35)) (not (= in11 36)) (= in11 37) (not (= in12 64)) (not (= in12 35)) (not (= in12 36)) (= in12 37) (not (= in13 64)) (not (= in13 35)) (not (= in13 36)) (= in13 37)))",
        "equivalent": false
      },
      "15": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37) (not (= in5 64)) (not (= in5 35)) (not (= in5 36)) (= in5 37) (not (= in6 64)) (not (= in6 35)) (not (= in6 36)) (= in6 37) (not (= in7 64)) (not (= in7 35)) (not (= in7 36)) (= in7 37) (not (= in8 64)) (not (= in8 35)) (not (= in8 36)) (= in8 37) (not (= in9 64)) (not (= in9 35)) (not (= in9 36)) (= in9 37) (not (= in10 64)) (not (= in10 35)) (not (= in10 36)) (= in10 37) (not (= in11 64)) (not (= in11 35)) (not (= in11 36)) (= in11 37) (not (= in12 64)) (not (= in12 35)) (not (= in12 36)) (= in12 37) (not (= in13 64)) (not (= in13 35)) (not (= in13 36)) (= in13 37) (not (= in14 64)) (not (= in14 35)) (not (= in14 36)) (= in14 37)))",
        "equivalent": false
      },
      "16": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37) (not (= in5 64)) (not (= in5 35)) (not (= in5 36)) (= in5 37) (not (= in6 64)) (not (= in6 35)) (not (= in6 36)) (= in6 37) (not (= in7 64)) (not (= in7 35)) (not (= in7 36)) (= in7 37) (not (= in8 64)) (not (= in8 35)) (not (= in8 36)) (= in8 37) (not (= in9 64)) (not (= in9 35)) (not (= in9 36)) (= in9 37) (not (= in10 64)) (not (= in10 35)) (not (= in10 36)) (= in10 37) (not (= in11 64)) (not (= in11 35)) (not (= in11 36)) (= in11 37) (not (= in12 64)) (not (= in12 35)) (not (= in12 36)) (= in12 37) (not (= in13 64)) (not (= in13 35)) (not (= in13 36)) (= in13 37) (not (= in14 64)) (not (= in14 35)) (not (= in14 36)) (= in14 37) (not (= in15 64)) (not (= in15 35)) (not (= in15 36)) (= in15 37)))",
        "equivalent": false
      },
      "17": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37) (not (= in5 64)) (not (= in5 35)) (not (= in5 36)) (= in5 37) (not (= in6 64)) (not (= in6 35)) (not (= in6 36)) (= in6 37) (not (= in7 64)) (not (= in7 35)) (not (= in7 36)) (= in7 37) (not (= in8 64)) (not (= in8 35)) (not (= in8 36)) (= in8 37) (not (= in9 64)) (not (= in9 35)) (not (= in9 36)) (= in9 37) (not (= in10 64)) (not (= in10 35)) (not (= in10 36)) (= in10 37) (not (= in11 64)) (not (= in11 35)) (not (= in11 36)) (= in11 37) (not (= in12 64)) (not (= in12 35)) (not (= in12 36)) (= in12 37) (not (= in13 64)) (not (= in13 35)) (not (= in13 36)) (= in13 37) (not (= in14 64)) (not (= in14 35)) (not (= in14 36)) (= in14 37) (not (= in15 64)) (not (= in15 35)) (not (= in15 36)) (= in15 37) (not (= in16 64)) (not (= in16 35)) (not (= in16 36)) (= in16 37)))",
        "equivalent": false
      },
      "18": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37) (not (= in5 64)) (not (= in5 35)) (not (= in5 36)) (= in5 37) (not (= in6 64)) (not (= in6 35)) (not (= in6 36)) (= in6 37) (not (= in7 64)) (not (= in7 35)) (not (= in7 36)) (= in7 37) (not (= in8 64)) (not (= in8 35)) (not (= in8 36)) (= in8 37) (not (= in9 64)) (not (= in9 35)) (not (= in9 36)) (= in9 37) (not (= in10 64)) (not (= in10 35)) (not (= in10 36)) (= in10 37) (not (= in11 64)) (not (= in11 35)) (not (= in11 36)) (= in11 37) (not (= in12 64)) (not (= in12 35)) (not (= in12 36)) (= in12 37) (not (= in13 64)) (not (= in13 35)) (not (= in13 36)) (= in13 37) (not (= in14 64)) (not (= in14 35)) (not (= in14 36)) (= in14 37) (not (= in15 64)) (not (= in15 35)) (not (= in15 36)) (= in15 37) (not (= in16 64)) (not (= in16 35)) (not (= in16 36)) (= in16 37) (not (= in17 64)) (not (= in17 35)) (not (= in17 36)) (= in17 37)))",
        "equivalent": false
      },
      "19": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37) (not (= in5 64)) (not (= in5 35)) (not (= in5 36)) (= in5 37) (not (= in6 64)) (not (= in6 35)) (not (= in6 36)) (= in6 37) (not (= in7 64)) (not (= in7 35)) (not (= in7 36)) (= in7 37) (not (= in8 64)) (not (= in8 35)) (not (= in8 36)) (= in8 37) (not (= in9 64)) (not (= in9 35)) (not (= in9 36)) (= in9 37) (not (= in10 64)) (not (= in10 35)) (not (= in10 36)) (= in10 37) (not (= in11 64)) (not (= in11 35)) (not (= in11 36)) (= in11 37) (not (= in12 64)) (not (= in12 35)) (not (= in12 36)) (= in12 37) (not (= in13 64)) (not (= in13 35)) (not (= in13 36)) (= in13 37) (not (= in14 64)) (not (= in14 35)) (not (= in14 36)) (= in14 37) (not (= in15 64)) (not (= in15 35)) (not (= in15 36)) (= in15 37) (not (= in16 64)) (not (= in16 35)) (not (= in16 36)) (= in16 37) (not (= in17 64)) (not (= in17 35)) (not (= in17 36)) (= in17 37) (not (= in18 64)) (not (= in18 35)) (not (= in18 36)) (= in18 37)))",
        "equivalent": false
      },
      "20": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37) (not (= in5 64)) (not (= in5 35)) (not (= in5 36)) (= in5 37) (not (= in6 64)) (not (= in6 35)) (not (= in6 36)) (= in6 37) (not (= in7 64)) (not (= in7 35)) (not (= in7 36)) (= in7 37) (not (= in8 64)) (not (= in8 35)) (not (= in8 36)) (= in8 37) (not (= in9 64)) (not (= in9 35)) (not (= in9 36)) (= in9 37) (not (= in10 64)) (not (= in10 35)) (not (= in10 36)) (= in10 37) (not (= in11 64)) (not (= in11 35)) (not (= in11 36)) (= in11 37) (not (= in12 64)) (not (= in12 35)) (not (= in12 36)) (= in12 37) (not (= in13 64)) (not (= in13 35)) (not (= in13 36)) (= in13 37) (not (= in14 64)) (not (= in14 35)) (not (= in14 36)) (= in14 37) (not (= in15 64)) (not (= in15 35)) (not (= in15 36)) (= in15 37) (not (= in16 64)) (not (= in16 35)) (not (= in16 36)) (= in16 37) (not (= in17 64)) (not (= in17 35)) (not (= in17 36)) (= in17 37) (not (= in18 64)) (not (= in18 35)) (not (= in18 36)) (= in18 37) (not (= in19 64)) (not (= in19 35)) (not (= in19 36)) (= in19 37)))",
        "equivalent": false
      },
      "21": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37) (not (= in5 64)) (not (= in5 35)) (not (= in5 36)) (= in5 37) (not (= in6 64)) (not (= in6 35)) (not (= in6 36)) (= in6 37) (not (= in7 64)) (not (= in7 35)) (not (= in7 36)) (= in7 37) (not (= in8 64)) (not (= in8 35)) (not (= in8 36)) (= in8 37) (not (= in9 64)) (not (= in9 35)) (not (= in9 36)) (= in9 37) (not (= in10 64)) (not (= in10 35)) (not (= in10 36)) (= in10 37) (not (= in11 64)) (not (= in11 35)) (not (= in11 36)) (= in11 37) (not (= in12 64)) (not (= in12 35)) (not (= in12 36)) (= in12 37) (not (= in13 64)) (not (= in13 35)) (not (= in13 36)) (= in13 37) (not (= in14 64)) (not (= in14 35)) (not (= in14 36)) (= in14 37) (not (= in15 64)) (not (= in15 35)) (not (= in15 36)) (= in15 37) (not (= in16 64)) (not (= in16 35)) (not (= in16 36)) (= in16 37) (not (= in17 64)) (not (= in17 35)) (not (= in17 36)) (= in17 37) (not (= in18 64)) (not (= in18 35)) (not (= in18 36)) (= in18 37) (not (= in19 64)) (not (= in19 35)) (not (= in19 36)) (= in19 37) (not (= in20 64)) (not (= in20 35)) (not (= in20 36)) (= in20 37)))",
        "equivalent": false
      },
      "22": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37) (not (= in5 64)) (not (= in5 35)) (not (= in5 36)) (= in5 37) (not (= in6 64)) (not (= in6 35)) (not (= in6 36)) (= in6 37) (not (= in7 64)) (not (= in7 35)) (not (= in7 36)) (= in7 37) (not (= in8 64)) (not (= in8 35)) (not (= in8 36)) (= in8 37) (not (= in9 64)) (not (= in9 35)) (not (= in9 36)) (= in9 37) (not (= in10 64)) (not (= in10 35)) (not (= in10 36)) (= in10 37) (not (= in11 64)) (not (= in11 35)) (not (= in11 36)) (= in11 37) (not (= in12 64)) (not (= in12 35)) (not (= in12 36)) (= in12 37) (not (= in13 64)) (not (= in13 35)) (not (= in13 36)) (= in13 37) (not (= in14 64)) (not (= in14 35)) (not (= in14 36)) (= in14 37) (not (= in15 64)) (not (= in15 35)) (not (= in15 36)) (= in15 37) (not (= in16 64)) (not (= in16 35)) (not (= in16 36)) (= in16 37) (not (= in17 64)) (not (= in17 35)) (not (= in17 36)) (= in17 37) (not (= in18 64)) (not (= in18 35)) (not (= in18 36)) (= in18 37) (not (= in19 64)) (not (= in19 35)) (not (= in19 36)) (= in19 37) (not (= in20 64)) (not (= in20 35)) (not (= in20 36)) (= in20 37) (not (= in21 64)) (not (= in21 35)) (not (= in21 36)) (= in21 37)))",
        "equivalent": false
      },
      "23": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37) (not (= in5 64)) (not (= in5 35)) (not (= in5 36)) (= in5 37) (not (= in6 64)) (not (= in6 35)) (not (= in6 36)) (= in6 37) (not (= in7 64)) (not (= in7 35)) (not (= in7 36)) (= in7 37) (not (= in8 64)) (not (= in8 35)) (not (= in8 36)) (= in8 37) (not (= in9 64)) (not (= in9 35)) (not (= in9 36)) (= in9 37) (not (= in10 64)) (not (= in10 35)) (not (= in10 36)) (= in10 37) (not (= in11 64)) (not (= in11 35)) (not (= in11 36)) (= in11 37) (not (= in12 64)) (not (= in12 35)) (not (= in12 36)) (= in12 37) (not (= in13 64)) (not (= in13 35)) (not (= in13 36)) (= in13 37) (not (= in14 64)) (not (= in14 35)) (not (= in14 36)) (= in14 37) (not (= in15 64)) (not (= in15 35)) (not (= in15 36)) (= in15 37) (not (= in16 64)) (not (= in16 35)) (not (= in16 36)) (= in16 37) (not (= in17 64)) (not (= in17 35)) (not (= in17 36)) (= in17 37) (not (= in18 64)) (not (= in18 35)) (not (= in18 36)) (= in18 37) (not (= in19 64)) (not (= in19 35)) (not (= in19 36)) (= in19 37) (not (= in20 64)) (not (= in20 35)) (not (= in20 36)) (= in20 37) (not (= in21 64)) (not (= in21 35)) (not (= in21 36)) (= in21 37) (not (= in22 64)) (not (= in22 35)) (not (= in22 36)) (= in22 37)))",
        "equivalent": false
      },
      "24": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37) (not (= in5 64)) (not (= in5 35)) (not (= in5 36)) (= in5 37) (not (= in6 64)) (not (= in6 35)) (not (= in6 36)) (= in6 37) (not (= in7 64)) (not (= in7 35)) (not (= in7 36)) (= in7 37) (not (= in8 64)) (not (= in8 35)) (not (= in8 36)) (= in8 37) (not (= in9 64)) (not (= in9 35)) (not (= in9 36)) (= in9 37) (not (= in10 64)) (not (= in10 35)) (not (= in10 36)) (= in10 37) (not (= in11 64)) (not (= in11 35)) (not (= in11 36)) (= in11 37) (not (= in12 64)) (not (= in12 35)) (not (= in12 36)) (= in12 37) (not (= in13 64)) (not (= in13 35)) (not (= in13 36)) (= in13 37) (not (= in14 64)) (not (= in14 35)) (not (= in14 36)) (= in14 37) (not (= in15 64)) (not (= in15 35)) (not (= in15 36)) (= in15 37) (not (= in16 64)) (not (= in16 35)) (not (= in16 36)) (= in16 37) (not (= in17 64)) (not (= in17 35)) (not (= in17 36)) (= in17 37) (not (= in18 64)) (not (= in18 35)) (not (= in18 36)) (= in18 37) (not (= in19 64)) (not (= in19 35)) (not (= in19 36)) (= in19 37) (not (= in20 64)) (not (= in20 35)) (not (= in20 36)) (= in20 37) (not (= in21 64)) (not (= in21 35)) (not (= in21 36)) (= in21 37) (not (= in22 64)) (not (= in22 35)) (not (= in22 36)) (= in22 37) (not (= in23 64)) (not (= in23 35)) (not (= in23 36)) (= in23 37)))",
        "equivalent": false
      },
      "25": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37) (not (= in5 64)) (not (= in5 35)) (not (= in5 36)) (= in5 37) (not (= in6 64)) (not (= in6 35)) (not (= in6 36)) (= in6 37) (not (= in7 64)) (not (= in7 35)) (not (= in7 36)) (= in7 37) (not (= in8 64)) (not (= in8 35)) (not (= in8 36)) (= in8 37) (not (= in9 64)) (not (= in9 35)) (not (= in9 36)) (= in9 37) (not (= in10 64)) (not (= in10 35)) (not (= in10 36)) (= in10 37) (not (= in11 64)) (not (= in11 35)) (not (= in11 36)) (= in11 37) (not (= in12 64)) (not (= in12 35)) (not (= in12 36)) (= in12 37) (not (= in13 64)) (not (= in13 35)) (not (= in13 36)) (= in13 37) (not (= in14 64)) (not (= in14 35)) (not (= in14 36)) (= in14 37) (not (= in15 64)) (not (= in15 35)) (not (= in15 36)) (= in15 37) (not (= in16 64)) (not (= in16 35)) (not (= in16 36)) (= in16 37) (not (= in17 64)) (not (= in17 35)) (not (= in17 36)) (= in17 37) (not (= in18 64)) (not (= in18 35)) (not (= in18 36)) (= in18 37) (not (= in19 64)) (not (= in19 35)) (not (= in19 36)) (= in19 37) (not (= in20 64)) (not (= in20 35)) (not (= in20 36)) (= in20 37) (not (= in21 64)) (not (= in21 35)) (not (= in21 36)) (= in21 37) (not (= in22 64)) (not (= in22 35)) (not (= in22 36)) (= in22 37) (not (= in23 64)) (not (= in23 35)) (not (= in23 36)) (= in23 37) (not (= in24 64)) (not (= in24 35)) (not (= in24 36)) (= in24 37)))",
        "equivalent": false
      },
      "26": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37) (not (= in5 64)) (not (= in5 35)) (not (= in5 36)) (= in5 37) (not (= in6 64)) (not (= in6 35)) (not (= in6 36)) (= in6 37) (not (= in7 64)) (not (= in7 35)) (not (= in7 36)) (= in7 37) (not (= in8 64)) (not (= in8 35)) (not (= in8 36)) (= in8 37) (not (= in9 64)) (not (= in9 35)) (not (= in9 36)) (= in9 37) (not (= in10 64)) (not (= in10 35)) (not (= in10 36)) (= in10 37) (not (= in11 64)) (not (= in11 35)) (not (= in11 36)) (= in11 37) (not (= in12 64)) (not (= in12 35)) (not (= in12 36)) (= in12 37) (not (= in13 64)) (not (= in13 35)) (not (= in13 36)) (= in13 37) (not (= in14 64)) (not (= in14 35)) (not (= in14 36)) (= in14 37) (not (= in15 64)) (not (= in15 35)) (not (= in15 36)) (= in15 37) (not (= in16 64)) (not (= in16 35)) (not (= in16 36)) (= in16 37) (not (= in17 64)) (not (= in17 35)) (not (= in17 36)) (= in17 37) (not (= in18 64)) (not (= in18 35)) (not (= in18 36)) (= in18 37) (not (= in19 64)) (not (= in19 35)) (not (= in19 36)) (= in19 37) (not (= in20 64)) (not (= in20 35)) (not (= in20 36)) (= in20 37) (not (= in21 64)) (not (= in21 35)) (not (= in21 36)) (= in21 37) (not (= in22 64)) (not (= in22 35)) (not (= in22 36)) (= in22 37) (not (= in23 64)) (not (= in23 35)) (not (= in23 36)) (= in23 37) (not (= in24 64)) (not (= in24 35)) (not (= in24 36)) (= in24 37) (not (= in25 64)) (not (= in25 35)) (not (= in25 36)) (= in25 37)))",
        "equivalent": false
      },
      "27": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37) (not (= in5 64)) (not (= in5 35)) (not (= in5 36)) (= in5 37) (not (= in6 64)) (not (= in6 35)) (not (= in6 36)) (= in6 37) (not (= in7 64)) (not (= in7 35)) (not (= in7 36)) (= in7 37) (not (= in8 64)) (not (= in8 35)) (not (= in8 36)) (= in8 37) (not (= in9 64)) (not (= in9 35)) (not (= in9 36)) (= in9 37) (not (= in10 64)) (not (= in10 35)) (not (= in10 36)) (= in10 37) (not (= in11 64)) (not (= in11 35)) (not (= in11 36)) (= in11 37) (not (= in12 64)) (not (= in12 35)) (not (= in12 36)) (= in12 37) (not (= in13 64)) (not (= in13 35)) (not (= in13 36)) (= in13 37) (not (= in14 64)) (not (= in14 35)) (not (= in14 36)) (= in14 37) (not (= in15 64)) (not (= in15 35)) (not (= in15 36)) (= in15 37) (not (= in16 64)) (not (= in16 35)) (not (= in16 36)) (= in16 37) (not (= in17 64)) (not (= in17 35)) (not (= in17 36)) (= in17 37) (not (= in18 64)) (not (= in18 35)) (not (= in18 36)) (= in18 37) (not (= in19 64)) (not (= in19 35)) (not (= in19 36)) (= in19 37) (not (= in20 64)) (not (= in20 35)) (not (= in20 36)) (= in20 37) (not (= in21 64)) (not (= in21 35)) (not (= in21 36)) (= in21 37) (not (= in22 64)) (not (= in22 35)) (not (= in22 36)) (= in22 37) (not (= in23 64)) (not (= in23 35)) (not (= in23 36)) (= in23 37) (not (= in24 64)) (not (= in24 35)) (not (= in24 36)) (= in24 37) (not (= in25 64)) (not (= in25 35)) (not (= in25 36)) (= in25 37) (not (= in26 64)) (not (= in26 35)) (not (= in26 36)) (= in26 37)))",
        "equivalent": false
      },
      "28": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37) (not (= in5 64)) (not (= in5 35)) (not (= in5 36)) (= in5 37) (not (= in6 64)) (not (= in6 35)) (not (= in6 36)) (= in6 37) (not (= in7 64)) (not (= in7 35)) (not (= in7 36)) (= in7 37) (not (= in8 64)) (not (= in8 35)) (not (= in8 36)) (= in8 37) (not (= in9 64)) (not (= in9 35)) (not (= in9 36)) (= in9 37) (not (= in10 64)) (not (= in10 35)) (not (= in10 36)) (= in10 37) (not (= in11 64)) (not (= in11 35)) (not (= in11 36)) (= in11 37) (not (= in12 64)) (not (= in12 35)) (not (= in12 36)) (= in12 37) (not (= in13 64)) (not (= in13 35)) (not (= in13 36)) (= in13 37) (not (= in14 64)) (not (= in14 35)) (not (= in14 36)) (= in14 37) (not (= in15 64)) (not (= in15 35)) (not (= in15 36)) (= in15 37) (not (= in16 64)) (not (= in16 35)) (not (= in16 36)) (= in16 37) (not (= in17 64)) (not (= in17 35)) (not (= in17 36)) (= in17 37) (not (= in18 64)) (not (= in18 35)) (not (= in18 36)) (= in18 37) (not (= in19 64)) (not (= in19 35)) (not (= in19 36)) (= in19 37) (not (= in20 64)) (not (= in20 35)) (not (= in20 36)) (= in20 37) (not (= in21 64)) (not (= in21 35)) (not (= in21 36)) (= in21 37) (not (= in22 64)) (not (= in22 35)) (not (= in22 36)) (= in22 37) (not (= in23 64)) (not (= in23 35)) (not (= in23 36)) (= in23 37) (not (= in24 64)) (not (= in24 35)) (not (= in24 36)) (= in24 37) (not (= in25 64)) (not (= in25 35)) (not (= in25 36)) (= in25 37) (not (= in26 64)) (not (= in26 35)) (not (= in26 36)) (= in26 37) (not (= in27 64)) (not (= in27 35)) (not (= in27 36)) (= in27 37)))",
        "equivalent": false
      },
      "29": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37) (not (= in5 64)) (not (= in5 35)) (not (= in5 36)) (= in5 37) (not (= in6 64)) (not (= in6 35)) (not (= in6 36)) (= in6 37) (not (= in7 64)) (not (= in7 35)) (not (= in7 36)) (= in7 37) (not (= in8 64)) (not (= in8 35)) (not (= in8 36)) (= in8 37) (not (= in9 64)) (not (= in9 35)) (not (= in9 36)) (= in9 37) (not (= in10 64)) (not (= in10 35)) (not (= in10 36)) (= in10 37) (not (= in11 64)) (not (= in11 35)) (not (= in11 36)) (= in11 37) (not (= in12 64)) (not (= in12 35)) (not (= in12 36)) (= in12 37) (not (= in13 64)) (not (= in13 35)) (not (= in13 36)) (= in13 37) (not (= in14 64)) (not (= in14 35)) (not (= in14 36)) (= in14 37) (not (= in15 64)) (not (= in15 35)) (not (= in15 36)) (= in15 37) (not (= in16 64)) (not (= in16 35)) (not (= in16 36)) (= in16 37) (not (= in17 64)) (not (= in17 35)) (not (= in17 36)) (= in17 37) (not (= in18 64)) (not (= in18 35)) (not (= in18 36)) (= in18 37) (not (= in19 64)) (not (= in19 35)) (not (= in19 36)) (= in19 37) (not (= in20 64)) (not (= in20 35)) (not (= in20 36)) (= in20 37) (not (= in21 64)) (not (= in21 35)) (not (= in21 36)) (= in21 37) (not (= in22 64)) (not (= in22 35)) (not (= in22 36)) (= in22 37) (not (= in23 64)) (not (= in23 35)) (not (= in23 36)) (= in23 37) (not (= in24 64)) (not (= in24 35)) (not (= in24 36)) (= in24 37) (not (= in25 64)) (not (= in25 35)) (not (= in25 36)) (= in25 37) (not (= in26 64)) (not (= in26 35)) (not (= in26 36)) (= in26 37) (not (= in27 64)) (not (= in27 35)) (not (= in27 36)) (= in27 37) (not (= in28 64)) (not (= in28 35)) (not (= in28 36)) (= in28 37)))",
        "equivalent": false
      },
      "30": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 64)) (not (= in0 35)) (not (= in0 36)) (= in0 37) (not (= in1 64)) (not (= in1 35)) (not (= in1 36)) (= in1 37) (not (= in2 64)) (not (= in2 35)) (not (= in2 36)) (= in2 37) (not (= in3 64)) (not (= in3 35)) (not (= in3 36)) (= in3 37) (not (= in4 64)) (not (= in4 35)) (not (= in4 36)) (= in4 37) (not (= in5 64)) (not (= in5 35)) (not (= in5 36)) (= in5 37) (not (= in6 64)) (not (= in6 35)) (not (= in6 36)) (= in6 37) (not (= in7 64)) (not (= in7 35)) (not (= in7 36)) (= in7 37) (not (= in8 64)) (not (= in8 35)) (not (= in8 36)) (= in8 37) (not (= in9 64)) (not (= in9 35)) (not (= in9 36)) (= in9 37) (not (= in10 64)) (not (= in10 35)) (not (= in10 36)) (= in10 37) (not (= in11 64)) (not (= in11 35)) (not (= in11 36)) (= in11 37) (not (= in12 64)) (not (= in12 35)) (not (= in12 36)) (= in12 37) (not (= in13 64)) (not (= in13 35)) (not (= in13 36)) (= in13 37) (not (= in14 64)) (not (= in14 35)) (not (= in14 36)) (= in14 37) (not (= in15 64)) (not (= in15 35)) (not (= in15 36)) (= in15 37) (not (= in16 64)) (not (= in16 35)) (not (= in16 36)) (= in16 37) (not (= in17 64)) (not (= in17 35)) (not (= in17 36)) (= in17 37) (not (= in18 64)) (not (= in18 35)) (not (= in18 36)) (= in18 37) (not (= in19 64)) (not (= in19 35)) (not (= in19 36)) (= in19 37) (not (= in20 64)) (not (= in20 35)) (not (= in20 36)) (= in20 37) (not (= in21 64)) (not (= in21 35)) (not (= in21 36)) (= in21 37) (not (= in22 64)) (not (= in22 35)) (not (= in22 36)) (= in22 37) (not (= in23 64)) (not (= in23 35)) (not (= in23 36)) (= in23 37) (not (= in24 64)) (not (= in24 35)) (not (= in24 36)) (= in24 37) (not (= in25 64)) (not (= in25 35)) (not (= in25 36)) (= in25 37) (not (= in26 64)) (not (= in26 35)) (not (= in26 36)) (= in26 37) (not (= in27 64)) (not (= in27 35)) (not (= in27 36)) (= in27 37) (not (= in28 64)) (not (= in28 35)) (not (= in28 36)) (= in28 37) (not (= in29 64)) (not (= in29 35)) (not (= in29 36)) (= in29 37)))",
        "equivalent": false
      }
    }
  },
  "BadgerUsername": {
    "succeeded": false,
    "attempts": 10,
    "examples_right": 15,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)))"
          ]
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45))))",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)))"
          ]
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45))))",
        "equivalent": true
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)))"
          ]
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45))))",
        "equivalent": true
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)))"
          ]
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45)) (and (not (= in5 95)) (= in5 45))))",
        "equivalent": true
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)))"
          ]
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45)) (and (not (= in5 95)) (= in5 45)) (and (not (= in6 95)) (= in6 45))))",
        "equivalent": true
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)) (not ( = in7 95)))  ( =  in7 45)))"
          ]
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45)) (and (not (= in5 95)) (= in5 45)) (and (not (= in6 95)) (= in6 45)) (and (not (= in7 95)) (= in7 45))))",
        "equivalent": true
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)) (not ( = in7 95)))  ( =  in7 45)) (not ( = in8 95)))  ( =  in8 45)))"
          ]
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45)) (and (not (= in5 95)) (= in5 45)) (and (not (= in6 95)) (= in6 45)) (and (not (= in7 95)) (= in7 45)) (and (not (= in8 95)) (= in8 45))))",
        "equivalent": true
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)) (not ( = in7 95)))  ( =  in7 45)) (not ( = in8 95)))  ( =  in8 45)) (not ( = in9 95)))  ( =  in9 45)))"
          ]
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45)) (and (not (= in5 95)) (= in5 45)) (and (not (= in6 95)) (= in6 45)) (and (not (= in7 95)) (= in7 45)) (and (not (= in8 95)) (= in8 45)) (and (not (= in9 95)) (= in9 45))))",
        "equivalent": true
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)) (not ( = in7 95)))  ( =  in7 45)) (not ( = in8 95)))  ( =  in8 45)) (not ( = in9 95)))  ( =  in9 45)) (not ( = in10 95)))  ( =  in10 45)))"
          ]
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45)) (and (not (= in5 95)) (= in5 45)) (and (not (= in6 95)) (= in6 45)) (and (not (= in7 95)) (= in7 45)) (and (not (= in8 95)) (= in8 45)) (and (not (= in9 95)) (= in9 45)) (and (not (= in10 95)) (= in10 45))))",
        "equivalent": true
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)) (not ( = in7 95)))  ( =  in7 45)) (not ( = in8 95)))  ( =  in8 45)) (not ( = in9 95)))  ( =  in9 45)) (not ( = in10 95)))  ( =  in10 45)) (not ( = in11 95)))  ( =  in11 45)))"
          ]
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45)) (and (not (= in5 95)) (= in5 45)) (and (not (= in6 95)) (= in6 45)) (and (not (= in7 95)) (= in7 45)) (and (not (= in8 95)) (= in8 45)) (and (not (= in9 95)) (= in9 45)) (and (not (= in10 95)) (= in10 45)) (and (not (= in11 95)) (= in11 45))))",
        "equivalent": true
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)) (not ( = in7 95)))  ( =  in7 45)) (not ( = in8 95)))  ( =  in8 45)) (not ( = in9 95)))  ( =  in9 45)) (not ( = in10 95)))  ( =  in10 45)) (not ( = in11 95)))  ( =  in11 45)) (not ( = in12 95)))  ( =  in12 45)))"
          ]
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45)) (and (not (= in5 95)) (= in5 45)) (and (not (= in6 95)) (= in6 45)) (and (not (= in7 95)) (= in7 45)) (and (not (= in8 95)) (= in8 45)) (and (not (= in9 95)) (= in9 45)) (and (not (= in10 95)) (= in10 45)) (and (not (= in11 95)) (= in11 45)) (and (not (= in12 95)) (= in12 45))))",
        "equivalent": true
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)) (not ( = in7 95)))  ( =  in7 45)) (not ( = in8 95)))  ( =  in8 45)) (not ( = in9 95)))  ( =  in9 45)) (not ( = in10 95)))  ( =  in10 45)) (not ( = in11 95)))  ( =  in11 45)) (not ( = in12 95)))  ( =  in12 45)) (not ( = in13 95)))  ( =  in13 45)))"
          ]
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45)) (and (not (= in5 95)) (= in5 45)) (and (not (= in6 95)) (= in6 45)) (and (not (= in7 95)) (= in7 45)) (and (not (= in8 95)) (= in8 45)) (and (not (= in9 95)) (= in9 45)) (and (not (= in10 95)) (= in10 45)) (and (not (= in11 95)) (= in11 45)) (and (not (= in12 95)) (= in12 45)) (and (not (= in13 95)) (= in13 45))))",
        "equivalent": true
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)) (not ( = in7 95)))  ( =  in7 45)) (not ( = in8 95)))  ( =  in8 45)) (not ( = in9 95)))  ( =  in9 45)) (not ( = in10 95)))  ( =  in10 45)) (not ( = in11 95)))  ( =  in11 45)) (not ( = in12 95)))  ( =  in12 45)) (not ( = in13 95)))  ( =  in13 45)) (not ( = in14 95)))  ( =  in14 45)))"
          ]
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45)) (and (not (= in5 95)) (= in5 45)) (and (not (= in6 95)) (= in6 45)) (and (not (= in7 95)) (= in7 45)) (and (not (= in8 95)) (= in8 45)) (and (not (= in9 95)) (= in9 45)) (and (not (= in10 95)) (= in10 45)) (and (not (= in11 95)) (= in11 45)) (and (not (= in12 95)) (= in12 45)) (and (not (= in13 95)) (= in13 45)) (and (not (= in14 95)) (= in14 45))))",
        "equivalent": true
      },
      "16": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45)) (and (not (= in5 95)) (= in5 45)) (and (not (= in6 95)) (= in6 45)) (and (not (= in7 95)) (= in7 45)) (and (not (= in8 95)) (= in8 45)) (and (not (= in9 95)) (= in9 45)) (and (not (= in10 95)) (= in10 45)) (and (not (= in11 95)) (= in11 45)) (and (not (= in12 95)) (= in12 45)) (and (not (= in13 95)) (= in13 45)) (and (not (= in14 95)) (= in14 45)) (and (not (= in15 95)) (= in15 45))))",
        "equivalent": false
      },
      "17": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45)) (and (not (= in5 95)) (= in5 45)) (and (not (= in6 95)) (= in6 45)) (and (not (= in7 95)) (= in7 45)) (and (not (= in8 95)) (= in8 45)) (and (not (= in9 95)) (= in9 45)) (and (not (= in10 95)) (= in10 45)) (and (not (= in11 95)) (= in11 45)) (and (not (= in12 95)) (= in12 45)) (and (not (= in13 95)) (= in13 45)) (and (not (= in14 95)) (= in14 45)) (and (not (= in15 95)) (= in15 45)) (and (not (= in16 95)) (= in16 45))))",
        "equivalent": false
      },
      "18": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45)) (and (not (= in5 95)) (= in5 45)) (and (not (= in6 95)) (= in6 45)) (and (not (= in7 95)) (= in7 45)) (and (not (= in8 95)) (= in8 45)) (and (not (= in9 95)) (= in9 45)) (and (not (= in10 95)) (= in10 45)) (and (not (= in11 95)) (= in11 45)) (and (not (= in12 95)) (= in12 45)) (and (not (= in13 95)) (= in13 45)) (and (not (= in14 95)) (= in14 45)) (and (not (= in15 95)) (= in15 45)) (and (not (= in16 95)) (= in16 45)) (and (not (= in17 95)) (= in17 45))))",
        "equivalent": false
      },
      "19": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45)) (and (not (= in5 95)) (= in5 45)) (and (not (= in6 95)) (= in6 45)) (and (not (= in7 95)) (= in7 45)) (and (not (= in8 95)) (= in8 45)) (and (not (= in9 95)) (= in9 45)) (and (not (= in10 95)) (= in10 45)) (and (not (= in11 95)) (= in11 45)) (and (not (= in12 95)) (= in12 45)) (and (not (= in13 95)) (= in13 45)) (and (not (= in14 95)) (= in14 45)) (and (not (= in15 95)) (= in15 45)) (and (not (= in16 95)) (= in16 45)) (and (not (= in17 95)) (= in17 45)) (and (not (= in18 95)) (= in18 45))))",
        "equivalent": false
      },
      "20": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45)) (and (not (= in5 95)) (= in5 45)) (and (not (= in6 95)) (= in6 45)) (and (not (= in7 95)) (= in7 45)) (and (not (= in8 95)) (= in8 45)) (and (not (= in9 95)) (= in9 45)) (and (not (= in10 95)) (= in10 45)) (and (not (= in11 95)) (= in11 45)) (and (not (= in12 95)) (= in12 45)) (and (not (= in13 95)) (= in13 45)) (and (not (= in14 95)) (= in14 45)) (and (not (= in15 95)) (= in15 45)) (and (not (= in16 95)) (= in16 45)) (and (not (= in17 95)) (= in17 45)) (and (not (= in18 95)) (= in18 45)) (and (not (= in19 95)) (= in19 45))))",
        "equivalent": false
      },
      "21": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45)) (and (not (= in5 95)) (= in5 45)) (and (not (= in6 95)) (= in6 45)) (and (not (= in7 95)) (= in7 45)) (and (not (= in8 95)) (= in8 45)) (and (not (= in9 95)) (= in9 45)) (and (not (= in10 95)) (= in10 45)) (and (not (= in11 95)) (= in11 45)) (and (not (= in12 95)) (= in12 45)) (and (not (= in13 95)) (= in13 45)) (and (not (= in14 95)) (= in14 45)) (and (not (= in15 95)) (= in15 45)) (and (not (= in16 95)) (= in16 45)) (and (not (= in17 95)) (= in17 45)) (and (not (= in18 95)) (= in18 45)) (and (not (= in19 95)) (= in19 45)) (and (not (= in20 95)) (= in20 45))))",
        "equivalent": false
      },
      "22": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45)) (and (not (= in5 95)) (= in5 45)) (and (not (= in6 95)) (= in6 45)) (and (not (= in7 95)) (= in7 45)) (and (not (= in8 95)) (= in8 45)) (and (not (= in9 95)) (= in9 45)) (and (not (= in10 95)) (= in10 45)) (and (not (= in11 95)) (= in11 45)) (and (not (= in12 95)) (= in12 45)) (and (not (= in13 95)) (= in13 45)) (and (not (= in14 95)) (= in14 45)) (and (not (= in15 95)) (= in15 45)) (and (not (= in16 95)) (= in16 45)) (and (not (= in17 95)) (= in17 45)) (and (not (= in18 95)) (= in18 45)) (and (not (= in19 95)) (= in19 45)) (and (not (= in20 95)) (= in20 45)) (and (not (= in21 95)) (= in21 45))))",
        "equivalent": false
      },
      "23": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45)) (and (not (= in5 95)) (= in5 45)) (and (not (= in6 95)) (= in6 45)) (and (not (= in7 95)) (= in7 45)) (and (not (= in8 95)) (= in8 45)) (and (not (= in9 95)) (= in9 45)) (and (not (= in10 95)) (= in10 45)) (and (not (= in11 95)) (= in11 45)) (and (not (= in12 95)) (= in12 45)) (and (not (= in13 95)) (= in13 45)) (and (not (= in14 95)) (= in14 45)) (and (not (= in15 95)) (= in15 45)) (and (not (= in16 95)) (= in16 45)) (and (not (= in17 95)) (= in17 45)) (and (not (= in18 95)) (= in18 45)) (and (not (= in19 95)) (= in19 45)) (and (not (= in20 95)) (= in20 45)) (and (not (= in21 95)) (= in21 45)) (and (not (= in22 95)) (= in22 45))))",
        "equivalent": false
      },
      "24": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45)) (and (not (= in5 95)) (= in5 45)) (and (not (= in6 95)) (= in6 45)) (and (not (= in7 95)) (= in7 45)) (and (not (= in8 95)) (= in8 45)) (and (not (= in9 95)) (= in9 45)) (and (not (= in10 95)) (= in10 45)) (and (not (= in11 95)) (= in11 45)) (and (not (= in12 95)) (= in12 45)) (and (not (= in13 95)) (= in13 45)) (and (not (= in14 95)) (= in14 45)) (and (not (= in15 95)) (= in15 45)) (and (not (= in16 95)) (= in16 45)) (and (not (= in17 95)) (= in17 45)) (and (not (= in18 95)) (= in18 45)) (and (not (= in19 95)) (= in19 45)) (and (not (= in20 95)) (= in20 45)) (and (not (= in21 95)) (= in21 45)) (and (not (= in22 95)) (= in22 45)) (and (not (= in23 95)) (= in23 45))))",
        "equivalent": false
      },
      "25": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45)) (and (not (= in5 95)) (= in5 45)) (and (not (= in6 95)) (= in6 45)) (and (not (= in7 95)) (= in7 45)) (and (not (= in8 95)) (= in8 45)) (and (not (= in9 95)) (= in9 45)) (and (not (= in10 95)) (= in10 45)) (and (not (= in11 95)) (= in11 45)) (and (not (= in12 95)) (= in12 45)) (and (not (= in13 95)) (= in13 45)) (and (not (= in14 95)) (= in14 45)) (and (not (= in15 95)) (= in15 45)) (and (not (= in16 95)) (= in16 45)) (and (not (= in17 95)) (= in17 45)) (and (not (= in18 95)) (= in18 45)) (and (not (= in19 95)) (= in19 45)) (and (not (= in20 95)) (= in20 45)) (and (not (= in21 95)) (= in21 45)) (and (not (= in22 95)) (= in22 45)) (and (not (= in23 95)) (= in23 45)) (and (not (= in24 95)) (= in24 45))))",
        "equivalent": false
      },
      "26": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45)) (and (not (= in5 95)) (= in5 45)) (and (not (= in6 95)) (= in6 45)) (and (not (= in7 95)) (= in7 45)) (and (not (= in8 95)) (= in8 45)) (and (not (= in9 95)) (= in9 45)) (and (not (= in10 95)) (= in10 45)) (and (not (= in11 95)) (= in11 45)) (and (not (= in12 95)) (= in12 45)) (and (not (= in13 95)) (= in13 45)) (and (not (= in14 95)) (= in14 45)) (and (not (= in15 95)) (= in15 45)) (and (not (= in16 95)) (= in16 45)) (and (not (= in17 95)) (= in17 45)) (and (not (= in18 95)) (= in18 45)) (and (not (= in19 95)) (= in19 45)) (and (not (= in20 95)) (= in20 45)) (and (not (= in21 95)) (= in21 45)) (and (not (= in22 95)) (= in22 45)) (and (not (= in23 95)) (= in23 45)) (and (not (= in24 95)) (= in24 45)) (and (not (= in25 95)) (= in25 45))))",
        "equivalent": false
      },
      "27": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45)) (and (not (= in5 95)) (= in5 45)) (and (not (= in6 95)) (= in6 45)) (and (not (= in7 95)) (= in7 45)) (and (not (= in8 95)) (= in8 45)) (and (not (= in9 95)) (= in9 45)) (and (not (= in10 95)) (= in10 45)) (and (not (= in11 95)) (= in11 45)) (and (not (= in12 95)) (= in12 45)) (and (not (= in13 95)) (= in13 45)) (and (not (= in14 95)) (= in14 45)) (and (not (= in15 95)) (= in15 45)) (and (not (= in16 95)) (= in16 45)) (and (not (= in17 95)) (= in17 45)) (and (not (= in18 95)) (= in18 45)) (and (not (= in19 95)) (= in19 45)) (and (not (= in20 95)) (= in20 45)) (and (not (= in21 95)) (= in21 45)) (and (not (= in22 95)) (= in22 45)) (and (not (= in23 95)) (= in23 45)) (and (not (= in24 95)) (= in24 45)) (and (not (= in25 95)) (= in25 45)) (and (not (= in26 95)) (= in26 45))))",
        "equivalent": false
      },
      "28": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45)) (and (not (= in5 95)) (= in5 45)) (and (not (= in6 95)) (= in6 45)) (and (not (= in7 95)) (= in7 45)) (and (not (= in8 95)) (= in8 45)) (and (not (= in9 95)) (= in9 45)) (and (not (= in10 95)) (= in10 45)) (and (not (= in11 95)) (= in11 45)) (and (not (= in12 95)) (= in12 45)) (and (not (= in13 95)) (= in13 45)) (and (not (= in14 95)) (= in14 45)) (and (not (= in15 95)) (= in15 45)) (and (not (= in16 95)) (= in16 45)) (and (not (= in17 95)) (= in17 45)) (and (not (= in18 95)) (= in18 45)) (and (not (= in19 95)) (= in19 45)) (and (not (= in20 95)) (= in20 45)) (and (not (= in21 95)) (= in21 45)) (and (not (= in22 95)) (= in22 45)) (and (not (= in23 95)) (= in23 45)) (and (not (= in24 95)) (= in24 45)) (and (not (= in25 95)) (= in25 45)) (and (not (= in26 95)) (= in26 45)) (and (not (= in27 95)) (= in27 45))))",
        "equivalent": false
      },
      "29": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45)) (and (not (= in5 95)) (= in5 45)) (and (not (= in6 95)) (= in6 45)) (and (not (= in7 95)) (= in7 45)) (and (not (= in8 95)) (= in8 45)) (and (not (= in9 95)) (= in9 45)) (and (not (= in10 95)) (= in10 45)) (and (not (= in11 95)) (= in11 45)) (and (not (= in12 95)) (= in12 45)) (and (not (= in13 95)) (= in13 45)) (and (not (= in14 95)) (= in14 45)) (and (not (= in15 95)) (= in15 45)) (and (not (= in16 95)) (= in16 45)) (and (not (= in17 95)) (= in17 45)) (and (not (= in18 95)) (= in18 45)) (and (not (= in19 95)) (= in19 45)) (and (not (= in20 95)) (= in20 45)) (and (not (= in21 95)) (= in21 45)) (and (not (= in22 95)) (= in22 45)) (and (not (= in23 95)) (= in23 45)) (and (not (= in24 95)) (= in24 45)) (and (not (= in25 95)) (= in25 45)) (and (not (= in26 95)) (= in26 45)) (and (not (= in27 95)) (= in27 45)) (and (not (= in28 95)) (= in28 45))))",
        "equivalent": false
      },
      "30": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (and (not (= in0 95)) (= in0 45)) (and (not (= in1 95)) (= in1 45)) (and (not (= in2 95)) (= in2 45)) (and (not (= in3 95)) (= in3 45)) (and (not (= in4 95)) (= in4 45)) (and (not (= in5 95)) (= in5 45)) (and (not (= in6 95)) (= in6 45)) (and (not (= in7 95)) (= in7 45)) (and (not (= in8 95)) (= in8 45)) (and (not (= in9 95)) (= in9 45)) (and (not (= in10 95)) (= in10 45)) (and (not (= in11 95)) (= in11 45)) (and (not (= in12 95)) (= in12 45)) (and (not (= in13 95)) (= in13 45)) (and (not (= in14 95)) (= in14 45)) (and (not (= in15 95)) (= in15 45)) (and (not (= in16 95)) (= in16 45)) (and (not (= in17 95)) (= in17 45)) (and (not (= in18 95)) (= in18 45)) (and (not (= in19 95)) (= in19 45)) (and (not (= in20 95)) (= in20 45)) (and (not (= in21 95)) (= in21 45)) (and (not (= in22 95)) (= in22 45)) (and (not (= in23 95)) (= in23 45)) (and (not (= in24 95)) (= in24 45)) (and (not (= in25 95)) (= in25 45)) (and (not (= in26 95)) (= in26 45)) (and (not (= in27 95)) (= in27 45)) (and (not (= in28 95)) (= in28 45)) (and (not (= in29 95)) (= in29 45))))",
        "equivalent": false
      }
    }
  },
  "ComplexFlipPos_2": {
    "succeeded": true,
    "attempts": 2,
    "examples_right": 30,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert  ( <  in1 in0))"
          ]
        },
        "predicted": "(assert (and ( < in1 in0 )) )",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and  ( <  in0 in2)  ( <  in1 in0)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in2 ) ( < in1 in0 )) )",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in3 in2)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in3 in2 )) )",
        "equivalent": true
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in4))  ( <  in3 in2)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in4 ) ( < in3 in2 )) )",
        "equivalent": true
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in5))  ( <  in3 in2))  ( <  in5 in4)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in5 ) ( < in3 in2 ) ( < in5 in4 )) )",
        "equivalent": true
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in5))  ( <  in3 in2))  ( <  in4 in6))  ( <  in5 in4)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in5 ) ( < in3 in2 ) ( < in4 in6 ) ( < in5 in4 )) )",
        "equivalent": true
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in5))  ( <  in3 in2))  ( <  in4 in7))  ( <  in5 in4))  ( <  in7 in6)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in5 ) ( < in3 in2 ) ( < in4 in7 ) ( < in5 in4 ) ( < in7 in6 )) )",
        "equivalent": true
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in5))  ( <  in3 in2))  ( <  in4 in7))  ( <  in5 in4))  ( <  in6 in8))  ( <  in7 in6)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in5 ) ( < in3 in2 ) ( < in4 in7 ) ( < in5 in4 ) ( < in6 in8 ) ( < in7 in6 )) )",
        "equivalent": true
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in5))  ( <  in3 in2))  ( <  in4 in7))  ( <  in5 in4))  ( <  in6 in9))  ( <  in7 in6))  ( <  in9 in8)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in5 ) ( < in3 in2 ) ( < in4 in7 ) ( < in5 in4 ) ( < in6 in9 ) ( < in7 in6 ) ( < in9 in8 )) )",
        "equivalent": true
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in5))  ( <  in3 in2))  ( <  in4 in7))  ( <  in5 in4))  ( <  in6 in9))  ( <  in7 in6))  ( <  in8 in10))  ( <  in9 in8)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in5 ) ( < in3 in2 ) ( < in4 in7 ) ( < in5 in4 ) ( < in6 in9 ) ( < in7 in6 ) ( < in8 in10 ) ( < in9 in8 )) )",
        "equivalent": true
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in5))  ( <  in3 in2))  ( <  in4 in7))  ( <  in5 in4))  ( <  in6 in9))  ( <  in7 in6))  ( <  in8 in11))  ( <  in9 in8))  ( <  in11 in10)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in5 ) ( < in3 in2 ) ( < in4 in7 ) ( < in5 in4 ) ( < in6 in9 ) ( < in7 in6 ) ( < in8 in11 ) ( < in9 in8 ) ( < in11 in10 )) )",
        "equivalent": true
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in5))  ( <  in3 in2))  ( <  in4 in7))  ( <  in5 in4))  ( <  in6 in9))  ( <  in7 in6))  ( <  in8 in11))  ( <  in9 in8))  ( <  in10 in12))  ( <  in11 in10)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in5 ) ( < in3 in2 ) ( < in4 in7 ) ( < in5 in4 ) ( < in6 in9 ) ( < in7 in6 ) ( < in8 in11 ) ( < in9 in8 ) ( < in10 in12 ) ( < in11 in10 )) )",
        "equivalent": true
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in5))  ( <  in3 in2))  ( <  in4 in7))  ( <  in5 in4))  ( <  in6 in9))  ( <  in7 in6))  ( <  in8 in11))  ( <  in9 in8))  ( <  in10 in13))  ( <  in11 in10))  ( <  in13 in12)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in5 ) ( < in3 in2 ) ( < in4 in7 ) ( < in5 in4 ) ( < in6 in9 ) ( < in7 in6 ) ( < in8 in11 ) ( < in9 in8 ) ( < in10 in13 ) ( < in11 in10 ) ( < in13 in12 )) )",
        "equivalent": true
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in5))  ( <  in3 in2))  ( <  in4 in7))  ( <  in5 in4))  ( <  in6 in9))  ( <  in7 in6))  ( <  in8 in11))  ( <  in9 in8))  ( <  in10 in13))  ( <  in11 in10))  ( <  in12 in14))  ( <  in13 in12)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in5 ) ( < in3 in2 ) ( < in4 in7 ) ( < in5 in4 ) ( < in6 in9 ) ( < in7 in6 ) ( < in8 in11 ) ( < in9 in8 ) ( < in10 in13 ) ( < in11 in10 ) ( < in12 in14 ) ( < in13 in12 )) )",
        "equivalent": true
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in5))  ( <  in3 in2))  ( <  in4 in7))  ( <  in5 in4))  ( <  in6 in9))  ( <  in7 in6))  ( <  in8 in11))  ( <  in9 in8))  ( <  in10 in13))  ( <  in11 in10))  ( <  in12 in15))  ( <  in13 in12))  ( <  in15 in14)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in5 ) ( < in3 in2 ) ( < in4 in7 ) ( < in5 in4 ) ( < in6 in9 ) ( < in7 in6 ) ( < in8 in11 ) ( < in9 in8 ) ( < in10 in13 ) ( < in11 in10 ) ( < in12 in15 ) ( < in13 in12 ) ( < in15 in14 )) )",
        "equivalent": true
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in5))  ( <  in3 in2))  ( <  in4 in7))  ( <  in5 in4))  ( <  in6 in9))  ( <  in7 in6))  ( <  in8 in11))  ( <  in9 in8))  ( <  in10 in13))  ( <  in11 in10))  ( <  in12 in15))  ( <  in13 in12))  ( <  in14 in16))  ( <  in15 in14)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in5 ) ( < in3 in2 ) ( < in4 in7 ) ( < in5 in4 ) ( < in6 in9 ) ( < in7 in6 ) ( < in8 in11 ) ( < in9 in8 ) ( < in10 in13 ) ( < in11 in10 ) ( < in12 in15 ) ( < in13 in12 ) ( < in14 in16 ) ( < in15 in14 )) )",
        "equivalent": true
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in5))  ( <  in3 in2))  ( <  in4 in7))  ( <  in5 in4))  ( <  in6 in9))  ( <  in7 in6))  ( <  in8 in11))  ( <  in9 in8))  ( <  in10 in13))  ( <  in11 in10))  ( <  in12 in15))  ( <  in13 in12))  ( <  in14 in17))  ( <  in15 in14))  ( <  in17 in16)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in5 ) ( < in3 in2 ) ( < in4 in7 ) ( < in5 in4 ) ( < in6 in9 ) ( < in7 in6 ) ( < in8 in11 ) ( < in9 in8 ) ( < in10 in13 ) ( < in11 in10 ) ( < in12 in15 ) ( < in13 in12 ) ( < in14 in17 ) ( < in15 in14 ) ( < in17 in16 )) )",
        "equivalent": true
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in5))  ( <  in3 in2))  ( <  in4 in7))  ( <  in5 in4))  ( <  in6 in9))  ( <  in7 in6))  ( <  in8 in11))  ( <  in9 in8))  ( <  in10 in13))  ( <  in11 in10))  ( <  in12 in15))  ( <  in13 in12))  ( <  in14 in17))  ( <  in15 in14))  ( <  in16 in18))  ( <  in17 in16)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in5 ) ( < in3 in2 ) ( < in4 in7 ) ( < in5 in4 ) ( < in6 in9 ) ( < in7 in6 ) ( < in8 in11 ) ( < in9 in8 ) ( < in10 in13 ) ( < in11 in10 ) ( < in12 in15 ) ( < in13 in12 ) ( < in14 in17 ) ( < in15 in14 ) ( < in16 in18 ) ( < in17 in16 )) )",
        "equivalent": true
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in5))  ( <  in3 in2))  ( <  in4 in7))  ( <  in5 in4))  ( <  in6 in9))  ( <  in7 in6))  ( <  in8 in11))  ( <  in9 in8))  ( <  in10 in13))  ( <  in11 in10))  ( <  in12 in15))  ( <  in13 in12))  ( <  in14 in17))  ( <  in15 in14))  ( <  in16 in19))  ( <  in17 in16))  ( <  in19 in18)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in5 ) ( < in3 in2 ) ( < in4 in7 ) ( < in5 in4 ) ( < in6 in9 ) ( < in7 in6 ) ( < in8 in11 ) ( < in9 in8 ) ( < in10 in13 ) ( < in11 in10 ) ( < in12 in15 ) ( < in13 in12 ) ( < in14 in17 ) ( < in15 in14 ) ( < in16 in19 ) ( < in17 in16 ) ( < in19 in18 )) )",
        "equivalent": true
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in5))  ( <  in3 in2))  ( <  in4 in7))  ( <  in5 in4))  ( <  in6 in9))  ( <  in7 in6))  ( <  in8 in11))  ( <  in9 in8))  ( <  in10 in13))  ( <  in11 in10))  ( <  in12 in15))  ( <  in13 in12))  ( <  in14 in17))  ( <  in15 in14))  ( <  in16 in19))  ( <  in17 in16))  ( <  in18 in20))  ( <  in19 in18)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in5 ) ( < in3 in2 ) ( < in4 in7 ) ( < in5 in4 ) ( < in6 in9 ) ( < in7 in6 ) ( < in8 in11 ) ( < in9 in8 ) ( < in10 in13 ) ( < in11 in10 ) ( < in12 in15 ) ( < in13 in12 ) ( < in14 in17 ) ( < in15 in14 ) ( < in16 in19 ) ( < in17 in16 ) ( < in18 in20 ) ( < in19 in18 )) )",
        "equivalent": true
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in5))  ( <  in3 in2))  ( <  in4 in7))  ( <  in5 in4))  ( <  in6 in9))  ( <  in7 in6))  ( <  in8 in11))  ( <  in9 in8))  ( <  in10 in13))  ( <  in11 in10))  ( <  in12 in15))  ( <  in13 in12))  ( <  in14 in17))  ( <  in15 in14))  ( <  in16 in19))  ( <  in17 in16))  ( <  in18 in21))  ( <  in19 in18))  ( <  in21 in20)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in5 ) ( < in3 in2 ) ( < in4 in7 ) ( < in5 in4 ) ( < in6 in9 ) ( < in7 in6 ) ( < in8 in11 ) ( < in9 in8 ) ( < in10 in13 ) ( < in11 in10 ) ( < in12 in15 ) ( < in13 in12 ) ( < in14 in17 ) ( < in15 in14 ) ( < in16 in19 ) ( < in17 in16 ) ( < in18 in21 ) ( < in19 in18 ) ( < in21 in20 )) )",
        "equivalent": true
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in5))  ( <  in3 in2))  ( <  in4 in7))  ( <  in5 in4))  ( <  in6 in9))  ( <  in7 in6))  ( <  in8 in11))  ( <  in9 in8))  ( <  in10 in13))  ( <  in11 in10))  ( <  in12 in15))  ( <  in13 in12))  ( <  in14 in17))  ( <  in15 in14))  ( <  in16 in19))  ( <  in17 in16))  ( <  in18 in21))  ( <  in19 in18))  ( <  in20 in22))  ( <  in21 in20)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in5 ) ( < in3 in2 ) ( < in4 in7 ) ( < in5 in4 ) ( < in6 in9 ) ( < in7 in6 ) ( < in8 in11 ) ( < in9 in8 ) ( < in10 in13 ) ( < in11 in10 ) ( < in12 in15 ) ( < in13 in12 ) ( < in14 in17 ) ( < in15 in14 ) ( < in16 in19 ) ( < in17 in16 ) ( < in18 in21 ) ( < in19 in18 ) ( < in20 in22 ) ( < in21 in20 )) )",
        "equivalent": true
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in5))  ( <  in3 in2))  ( <  in4 in7))  ( <  in5 in4))  ( <  in6 in9))  ( <  in7 in6))  ( <  in8 in11))  ( <  in9 in8))  ( <  in10 in13))  ( <  in11 in10))  ( <  in12 in15))  ( <  in13 in12))  ( <  in14 in17))  ( <  in15 in14))  ( <  in16 in19))  ( <  in17 in16))  ( <  in18 in21))  ( <  in19 in18))  ( <  in20 in23))  ( <  in21 in20))  ( <  in23 in22)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in5 ) ( < in3 in2 ) ( < in4 in7 ) ( < in5 in4 ) ( < in6 in9 ) ( < in7 in6 ) ( < in8 in11 ) ( < in9 in8 ) ( < in10 in13 ) ( < in11 in10 ) ( < in12 in15 ) ( < in13 in12 ) ( < in14 in17 ) ( < in15 in14 ) ( < in16 in19 ) ( < in17 in16 ) ( < in18 in21 ) ( < in19 in18 ) ( < in20 in23 ) ( < in21 in20 ) ( < in23 in22 )) )",
        "equivalent": true
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in5))  ( <  in3 in2))  ( <  in4 in7))  ( <  in5 in4))  ( <  in6 in9))  ( <  in7 in6))  ( <  in8 in11))  ( <  in9 in8))  ( <  in10 in13))  ( <  in11 in10))  ( <  in12 in15))  ( <  in13 in12))  ( <  in14 in17))  ( <  in15 in14))  ( <  in16 in19))  ( <  in17 in16))  ( <  in18 in21))  ( <  in19 in18))  ( <  in20 in23))  ( <  in21 in20))  ( <  in22 in24))  ( <  in23 in22)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in5 ) ( < in3 in2 ) ( < in4 in7 ) ( < in5 in4 ) ( < in6 in9 ) ( < in7 in6 ) ( < in8 in11 ) ( < in9 in8 ) ( < in10 in13 ) ( < in11 in10 ) ( < in12 in15 ) ( < in13 in12 ) ( < in14 in17 ) ( < in15 in14 ) ( < in16 in19 ) ( < in17 in16 ) ( < in18 in21 ) ( < in19 in18 ) ( < in20 in23 ) ( < in21 in20 ) ( < in22 in24 ) ( < in23 in22 )) )",
        "equivalent": true
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in5))  ( <  in3 in2))  ( <  in4 in7))  ( <  in5 in4))  ( <  in6 in9))  ( <  in7 in6))  ( <  in8 in11))  ( <  in9 in8))  ( <  in10 in13))  ( <  in11 in10))  ( <  in12 in15))  ( <  in13 in12))  ( <  in14 in17))  ( <  in15 in14))  ( <  in16 in19))  ( <  in17 in16))  ( <  in18 in21))  ( <  in19 in18))  ( <  in20 in23))  ( <  in21 in20))  ( <  in22 in25))  ( <  in23 in22))  ( <  in25 in24)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in5 ) ( < in3 in2 ) ( < in4 in7 ) ( < in5 in4 ) ( < in6 in9 ) ( < in7 in6 ) ( < in8 in11 ) ( < in9 in8 ) ( < in10 in13 ) ( < in11 in10 ) ( < in12 in15 ) ( < in13 in12 ) ( < in14 in17 ) ( < in15 in14 ) ( < in16 in19 ) ( < in17 in16 ) ( < in18 in21 ) ( < in19 in18 ) ( < in20 in23 ) ( < in21 in20 ) ( < in22 in25 ) ( < in23 in22 ) ( < in25 in24 )) )",
        "equivalent": true
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in5))  ( <  in3 in2))  ( <  in4 in7))  ( <  in5 in4))  ( <  in6 in9))  ( <  in7 in6))  ( <  in8 in11))  ( <  in9 in8))  ( <  in10 in13))  ( <  in11 in10))  ( <  in12 in15))  ( <  in13 in12))  ( <  in14 in17))  ( <  in15 in14))  ( <  in16 in19))  ( <  in17 in16))  ( <  in18 in21))  ( <  in19 in18))  ( <  in20 in23))  ( <  in21 in20))  ( <  in22 in25))  ( <  in23 in22))  ( <  in24 in26))  ( <  in25 in24)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in5 ) ( < in3 in2 ) ( < in4 in7 ) ( < in5 in4 ) ( < in6 in9 ) ( < in7 in6 ) ( < in8 in11 ) ( < in9 in8 ) ( < in10 in13 ) ( < in11 in10 ) ( < in12 in15 ) ( < in13 in12 ) ( < in14 in17 ) ( < in15 in14 ) ( < in16 in19 ) ( < in17 in16 ) ( < in18 in21 ) ( < in19 in18 ) ( < in20 in23 ) ( < in21 in20 ) ( < in22 in25 ) ( < in23 in22 ) ( < in24 in26 ) ( < in25 in24 )) )",
        "equivalent": true
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in5))  ( <  in3 in2))  ( <  in4 in7))  ( <  in5 in4))  ( <  in6 in9))  ( <  in7 in6))  ( <  in8 in11))  ( <  in9 in8))  ( <  in10 in13))  ( <  in11 in10))  ( <  in12 in15))  ( <  in13 in12))  ( <  in14 in17))  ( <  in15 in14))  ( <  in16 in19))  ( <  in17 in16))  ( <  in18 in21))  ( <  in19 in18))  ( <  in20 in23))  ( <  in21 in20))  ( <  in22 in25))  ( <  in23 in22))  ( <  in24 in27))  ( <  in25 in24))  ( <  in27 in26)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in5 ) ( < in3 in2 ) ( < in4 in7 ) ( < in5 in4 ) ( < in6 in9 ) ( < in7 in6 ) ( < in8 in11 ) ( < in9 in8 ) ( < in10 in13 ) ( < in11 in10 ) ( < in12 in15 ) ( < in13 in12 ) ( < in14 in17 ) ( < in15 in14 ) ( < in16 in19 ) ( < in17 in16 ) ( < in18 in21 ) ( < in19 in18 ) ( < in20 in23 ) ( < in21 in20 ) ( < in22 in25 ) ( < in23 in22 ) ( < in24 in27 ) ( < in25 in24 ) ( < in27 in26 )) )",
        "equivalent": true
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in5))  ( <  in3 in2))  ( <  in4 in7))  ( <  in5 in4))  ( <  in6 in9))  ( <  in7 in6))  ( <  in8 in11))  ( <  in9 in8))  ( <  in10 in13))  ( <  in11 in10))  ( <  in12 in15))  ( <  in13 in12))  ( <  in14 in17))  ( <  in15 in14))  ( <  in16 in19))  ( <  in17 in16))  ( <  in18 in21))  ( <  in19 in18))  ( <  in20 in23))  ( <  in21 in20))  ( <  in22 in25))  ( <  in23 in22))  ( <  in24 in27))  ( <  in25 in24))  ( <  in26 in28))  ( <  in27 in26)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in5 ) ( < in3 in2 ) ( < in4 in7 ) ( < in5 in4 ) ( < in6 in9 ) ( < in7 in6 ) ( < in8 in11 ) ( < in9 in8 ) ( < in10 in13 ) ( < in11 in10 ) ( < in12 in15 ) ( < in13 in12 ) ( < in14 in17 ) ( < in15 in14 ) ( < in16 in19 ) ( < in17 in16 ) ( < in18 in21 ) ( < in19 in18 ) ( < in20 in23 ) ( < in21 in20 ) ( < in22 in25 ) ( < in23 in22 ) ( < in24 in27 ) ( < in25 in24 ) ( < in26 in28 ) ( < in27 in26 )) )",
        "equivalent": true
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in3)  ( <  in1 in0))  ( <  in2 in5))  ( <  in3 in2))  ( <  in4 in7))  ( <  in5 in4))  ( <  in6 in9))  ( <  in7 in6))  ( <  in8 in11))  ( <  in9 in8))  ( <  in10 in13))  ( <  in11 in10))  ( <  in12 in15))  ( <  in13 in12))  ( <  in14 in17))  ( <  in15 in14))  ( <  in16 in19))  ( <  in17 in16))  ( <  in18 in21))  ( <  in19 in18))  ( <  in20 in23))  ( <  in21 in20))  ( <  in22 in25))  ( <  in23 in22))  ( <  in24 in27))  ( <  in25 in24))  ( <  in26 in29))  ( <  in27 in26))  ( <  in29 in28)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3 ) ( < in1 in0 ) ( < in2 in5 ) ( < in3 in2 ) ( < in4 in7 ) ( < in5 in4 ) ( < in6 in9 ) ( < in7 in6 ) ( < in8 in11 ) ( < in9 in8 ) ( < in10 in13 ) ( < in11 in10 ) ( < in12 in15 ) ( < in13 in12 ) ( < in14 in17 ) ( < in15 in14 ) ( < in16 in19 ) ( < in17 in16 ) ( < in18 in21 ) ( < in19 in18 ) ( < in20 in23 ) ( < in21 in20 ) ( < in22 in25 ) ( < in23 in22 ) ( < in24 in27 ) ( < in25 in24 ) ( < in26 in29 ) ( < in27 in26 ) ( < in29 in28 )) )",
        "equivalent": true
      }
    }
  },
  "ComplexHalfEqual": {
    "succeeded": true,
    "attempts": 1,
    "examples_right": 30,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert  ( =  in0 in1))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 )))",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and  ( =  in0 in1)  ( <  in1 in2)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( < in1 in2 )))",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( =  in0 in1)  ( =  in1 in2))  ( <  in2 in3)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( < in2 in3 )))",
        "equivalent": true
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( <  in2 in3))  ( <  in3 in4)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( < in2 in3 ) ( < in3 in4 )))",
        "equivalent": true
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( <  in4 in5)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( = in2 in3 ) ( < in3 in4 ) ( < in4 in5 )))",
        "equivalent": true
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( = in2 in3 ) ( < in3 in4 ) ( < in4 in5 ) ( < in5 in6 )))",
        "equivalent": true
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( = in2 in3 ) ( = in3 in4 ) ( < in4 in5 ) ( < in5 in6 ) ( < in6 in7 )))",
        "equivalent": true
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( = in2 in3 ) ( = in3 in4 ) ( < in4 in5 ) ( < in5 in6 ) ( < in6 in7 ) ( < in7 in8 )))",
        "equivalent": true
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( = in2 in3 ) ( = in3 in4 ) ( = in4 in5 ) ( < in5 in6 ) ( < in6 in7 ) ( < in7 in8 ) ( < in8 in9 )))",
        "equivalent": true
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( = in2 in3 ) ( = in3 in4 ) ( = in4 in5 ) ( < in5 in6 ) ( < in6 in7 ) ( < in7 in8 ) ( < in8 in9 ) ( < in9 in10 )))",
        "equivalent": true
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( = in2 in3 ) ( = in3 in4 ) ( = in4 in5 ) ( = in5 in6 ) ( < in6 in7 ) ( < in7 in8 ) ( < in8 in9 ) ( < in9 in10 ) ( < in10 in11 )))",
        "equivalent": true
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( = in2 in3 ) ( = in3 in4 ) ( = in4 in5 ) ( = in5 in6 ) ( < in6 in7 ) ( < in7 in8 ) ( < in8 in9 ) ( < in9 in10 ) ( < in10 in11 ) ( < in11 in12 )))",
        "equivalent": true
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( = in2 in3 ) ( = in3 in4 ) ( = in4 in5 ) ( = in5 in6 ) ( = in6 in7 ) ( < in7 in8 ) ( < in8 in9 ) ( < in9 in10 ) ( < in10 in11 ) ( < in11 in12 ) ( < in12 in13 )))",
        "equivalent": true
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( = in2 in3 ) ( = in3 in4 ) ( = in4 in5 ) ( = in5 in6 ) ( = in6 in7 ) ( < in7 in8 ) ( < in8 in9 ) ( < in9 in10 ) ( < in10 in11 ) ( < in11 in12 ) ( < in12 in13 ) ( < in13 in14 )))",
        "equivalent": true
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( = in2 in3 ) ( = in3 in4 ) ( = in4 in5 ) ( = in5 in6 ) ( = in6 in7 ) ( = in7 in8 ) ( < in8 in9 ) ( < in9 in10 ) ( < in10 in11 ) ( < in11 in12 ) ( < in12 in13 ) ( < in13 in14 ) ( < in14 in15 )))",
        "equivalent": true
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( = in2 in3 ) ( = in3 in4 ) ( = in4 in5 ) ( = in5 in6 ) ( = in6 in7 ) ( = in7 in8 ) ( < in8 in9 ) ( < in9 in10 ) ( < in10 in11 ) ( < in11 in12 ) ( < in12 in13 ) ( < in13 in14 ) ( < in14 in15 ) ( < in15 in16 )))",
        "equivalent": true
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( = in2 in3 ) ( = in3 in4 ) ( = in4 in5 ) ( = in5 in6 ) ( = in6 in7 ) ( = in7 in8 ) ( = in8 in9 ) ( < in9 in10 ) ( < in10 in11 ) ( < in11 in12 ) ( < in12 in13 ) ( < in13 in14 ) ( < in14 in15 ) ( < in15 in16 ) ( < in16 in17 )))",
        "equivalent": true
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( = in2 in3 ) ( = in3 in4 ) ( = in4 in5 ) ( = in5 in6 ) ( = in6 in7 ) ( = in7 in8 ) ( = in8 in9 ) ( < in9 in10 ) ( < in10 in11 ) ( < in11 in12 ) ( < in12 in13 ) ( < in13 in14 ) ( < in14 in15 ) ( < in15 in16 ) ( < in16 in17 ) ( < in17 in18 )))",
        "equivalent": true
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( =  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( = in2 in3 ) ( = in3 in4 ) ( = in4 in5 ) ( = in5 in6 ) ( = in6 in7 ) ( = in7 in8 ) ( = in8 in9 ) ( = in9 in10 ) ( < in10 in11 ) ( < in11 in12 ) ( < in12 in13 ) ( < in13 in14 ) ( < in14 in15 ) ( < in15 in16 ) ( < in16 in17 ) ( < in17 in18 ) ( < in18 in19 )))",
        "equivalent": true
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( =  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( = in2 in3 ) ( = in3 in4 ) ( = in4 in5 ) ( = in5 in6 ) ( = in6 in7 ) ( = in7 in8 ) ( = in8 in9 ) ( = in9 in10 ) ( < in10 in11 ) ( < in11 in12 ) ( < in12 in13 ) ( < in13 in14 ) ( < in14 in15 ) ( < in15 in16 ) ( < in16 in17 ) ( < in17 in18 ) ( < in18 in19 ) ( < in19 in20 )))",
        "equivalent": true
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( =  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( = in2 in3 ) ( = in3 in4 ) ( = in4 in5 ) ( = in5 in6 ) ( = in6 in7 ) ( = in7 in8 ) ( = in8 in9 ) ( = in9 in10 ) ( = in10 in11 ) ( < in11 in12 ) ( < in12 in13 ) ( < in13 in14 ) ( < in14 in15 ) ( < in15 in16 ) ( < in16 in17 ) ( < in17 in18 ) ( < in18 in19 ) ( < in19 in20 ) ( < in20 in21 )))",
        "equivalent": true
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( =  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21))  ( <  in21 in22)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( = in2 in3 ) ( = in3 in4 ) ( = in4 in5 ) ( = in5 in6 ) ( = in6 in7 ) ( = in7 in8 ) ( = in8 in9 ) ( = in9 in10 ) ( = in10 in11 ) ( < in11 in12 ) ( < in12 in13 ) ( < in13 in14 ) ( < in14 in15 ) ( < in15 in16 ) ( < in16 in17 ) ( < in17 in18 ) ( < in18 in19 ) ( < in19 in20 ) ( < in20 in21 ) ( < in21 in22 )))",
        "equivalent": true
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( =  in9 in10))  ( =  in10 in11))  ( =  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21))  ( <  in21 in22))  ( <  in22 in23)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( = in2 in3 ) ( = in3 in4 ) ( = in4 in5 ) ( = in5 in6 ) ( = in6 in7 ) ( = in7 in8 ) ( = in8 in9 ) ( = in9 in10 ) ( = in10 in11 ) ( = in11 in12 ) ( < in12 in13 ) ( < in13 in14 ) ( < in14 in15 ) ( < in15 in16 ) ( < in16 in17 ) ( < in17 in18 ) ( < in18 in19 ) ( < in19 in20 ) ( < in20 in21 ) ( < in21 in22 ) ( < in22 in23 )))",
        "equivalent": true
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( =  in9 in10))  ( =  in10 in11))  ( =  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21))  ( <  in21 in22))  ( <  in22 in23))  ( <  in23 in24)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( = in2 in3 ) ( = in3 in4 ) ( = in4 in5 ) ( = in5 in6 ) ( = in6 in7 ) ( = in7 in8 ) ( = in8 in9 ) ( = in9 in10 ) ( = in10 in11 ) ( = in11 in12 ) ( < in12 in13 ) ( < in13 in14 ) ( < in14 in15 ) ( < in15 in16 ) ( < in16 in17 ) ( < in17 in18 ) ( < in18 in19 ) ( < in19 in20 ) ( < in20 in21 ) ( < in21 in22 ) ( < in22 in23 ) ( < in23 in24 )))",
        "equivalent": true
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( =  in9 in10))  ( =  in10 in11))  ( =  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21))  ( <  in21 in22))  ( <  in22 in23))  ( <  in23 in24))  ( <  in24 in25)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( = in2 in3 ) ( = in3 in4 ) ( = in4 in5 ) ( = in5 in6 ) ( = in6 in7 ) ( = in7 in8 ) ( = in8 in9 ) ( = in9 in10 ) ( = in10 in11 ) ( = in11 in12 ) ( = in12 in13 ) ( < in13 in14 ) ( < in14 in15 ) ( < in15 in16 ) ( < in16 in17 ) ( < in17 in18 ) ( < in18 in19 ) ( < in19 in20 ) ( < in20 in21 ) ( < in21 in22 ) ( < in22 in23 ) ( < in23 in24 ) ( < in24 in25 )))",
        "equivalent": true
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( =  in9 in10))  ( =  in10 in11))  ( =  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21))  ( <  in21 in22))  ( <  in22 in23))  ( <  in23 in24))  ( <  in24 in25))  ( <  in25 in26)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( = in2 in3 ) ( = in3 in4 ) ( = in4 in5 ) ( = in5 in6 ) ( = in6 in7 ) ( = in7 in8 ) ( = in8 in9 ) ( = in9 in10 ) ( = in10 in11 ) ( = in11 in12 ) ( = in12 in13 ) ( < in13 in14 ) ( < in14 in15 ) ( < in15 in16 ) ( < in16 in17 ) ( < in17 in18 ) ( < in18 in19 ) ( < in19 in20 ) ( < in20 in21 ) ( < in21 in22 ) ( < in22 in23 ) ( < in23 in24 ) ( < in24 in25 ) ( < in25 in26 )))",
        "equivalent": true
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( =  in9 in10))  ( =  in10 in11))  ( =  in11 in12))  ( =  in12 in13))  ( =  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21))  ( <  in21 in22))  ( <  in22 in23))  ( <  in23 in24))  ( <  in24 in25))  ( <  in25 in26))  ( <  in26 in27)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( = in2 in3 ) ( = in3 in4 ) ( = in4 in5 ) ( = in5 in6 ) ( = in6 in7 ) ( = in7 in8 ) ( = in8 in9 ) ( = in9 in10 ) ( = in10 in11 ) ( = in11 in12 ) ( = in12 in13 ) ( = in13 in14 ) ( < in14 in15 ) ( < in15 in16 ) ( < in16 in17 ) ( < in17 in18 ) ( < in18 in19 ) ( < in19 in20 ) ( < in20 in21 ) ( < in21 in22 ) ( < in22 in23 ) ( < in23 in24 ) ( < in24 in25 ) ( < in25 in26 ) ( < in26 in27 )))",
        "equivalent": true
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( =  in9 in10))  ( =  in10 in11))  ( =  in11 in12))  ( =  in12 in13))  ( =  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21))  ( <  in21 in22))  ( <  in22 in23))  ( <  in23 in24))  ( <  in24 in25))  ( <  in25 in26))  ( <  in26 in27))  ( <  in27 in28)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( = in2 in3 ) ( = in3 in4 ) ( = in4 in5 ) ( = in5 in6 ) ( = in6 in7 ) ( = in7 in8 ) ( = in8 in9 ) ( = in9 in10 ) ( = in10 in11 ) ( = in11 in12 ) ( = in12 in13 ) ( = in13 in14 ) ( < in14 in15 ) ( < in15 in16 ) ( < in16 in17 ) ( < in17 in18 ) ( < in18 in19 ) ( < in19 in20 ) ( < in20 in21 ) ( < in21 in22 ) ( < in22 in23 ) ( < in23 in24 ) ( < in24 in25 ) ( < in25 in26 ) ( < in26 in27 ) ( < in27 in28 )))",
        "equivalent": true
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( =  in9 in10))  ( =  in10 in11))  ( =  in11 in12))  ( =  in12 in13))  ( =  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21))  ( <  in21 in22))  ( <  in22 in23))  ( <  in23 in24))  ( <  in24 in25))  ( <  in25 in26))  ( <  in26 in27))  ( <  in27 in28))  ( <  in28 in29)))"
          ]
        },
        "predicted": "(assert (and ( = in0 in1 ) ( = in1 in2 ) ( = in2 in3 ) ( = in3 in4 ) ( = in4 in5 ) ( = in5 in6 ) ( = in6 in7 ) ( = in7 in8 ) ( = in8 in9 ) ( = in9 in10 ) ( = in10 in11 ) ( = in11 in12 ) ( = in12 in13 ) ( = in13 in14 ) ( = in14 in15 ) ( < in15 in16 ) ( < in16 in17 ) ( < in17 in18 ) ( < in18 in19 ) ( < in19 in20 ) ( < in20 in21 ) ( < in21 in22 ) ( < in22 in23 ) ( < in23 in24 ) ( < in24 in25 ) ( < in25 in26 ) ( < in26 in27 ) ( < in27 in28 ) ( < in28 in29 )))",
        "equivalent": true
      }
    }
  },
  "ComplexMidPeak": {
    "succeeded": true,
    "attempts": 2,
    "examples_right": 30,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert  ( <  in0 in1))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1))))",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and  ( <  in0 in1)  ( >  in1 in2)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( > in1 in2)))))",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( <  in0 in1)  ( <  in1 in2))  ( >  in2 in3)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( > in2 in3))))))",
        "equivalent": true
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( >  in2 in3))  ( >  in3 in4)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( > in2 in3) (and ( > in3 in4)))))))",
        "equivalent": true
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( >  in3 in4))  ( >  in4 in5)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( < in2 in3) (and ( > in3 in4) (and ( > in4 in5))))))))",
        "equivalent": true
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( >  in3 in4))  ( >  in4 in5))  ( >  in5 in6)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( < in2 in3) (and ( > in3 in4) (and ( > in4 in5) (and ( > in5 in6)))))))))",
        "equivalent": true
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( >  in4 in5))  ( >  in5 in6))  ( >  in6 in7)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( < in2 in3) (and ( < in3 in4) (and ( > in4 in5) (and ( > in5 in6) (and ( > in6 in7))))))))))",
        "equivalent": true
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( >  in4 in5))  ( >  in5 in6))  ( >  in6 in7))  ( >  in7 in8)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( < in2 in3) (and ( < in3 in4) (and ( > in4 in5) (and ( > in5 in6) (and ( > in6 in7) (and ( > in7 in8)))))))))))",
        "equivalent": true
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( >  in5 in6))  ( >  in6 in7))  ( >  in7 in8))  ( >  in8 in9)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( < in2 in3) (and ( < in3 in4) (and ( < in4 in5) (and ( > in5 in6) (and ( > in6 in7) (and ( > in7 in8) (and ( > in8 in9))))))))))))",
        "equivalent": true
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( >  in5 in6))  ( >  in6 in7))  ( >  in7 in8))  ( >  in8 in9))  ( >  in9 in10)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( < in2 in3) (and ( < in3 in4) (and ( < in4 in5) (and ( > in5 in6) (and ( > in6 in7) (and ( > in7 in8) (and ( > in8 in9) (and ( > in9 in10)))))))))))))",
        "equivalent": true
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( >  in6 in7))  ( >  in7 in8))  ( >  in8 in9))  ( >  in9 in10))  ( >  in10 in11)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( < in2 in3) (and ( < in3 in4) (and ( < in4 in5) (and ( < in5 in6) (and ( > in6 in7) (and ( > in7 in8) (and ( > in8 in9) (and ( > in9 in10) (and ( > in10 in11))))))))))))))",
        "equivalent": true
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( >  in6 in7))  ( >  in7 in8))  ( >  in8 in9))  ( >  in9 in10))  ( >  in10 in11))  ( >  in11 in12)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( < in2 in3) (and ( < in3 in4) (and ( < in4 in5) (and ( < in5 in6) (and ( > in6 in7) (and ( > in7 in8) (and ( > in8 in9) (and ( > in9 in10) (and ( > in10 in11) (and ( > in11 in12)))))))))))))))",
        "equivalent": true
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( >  in7 in8))  ( >  in8 in9))  ( >  in9 in10))  ( >  in10 in11))  ( >  in11 in12))  ( >  in12 in13)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( < in2 in3) (and ( < in3 in4) (and ( < in4 in5) (and ( < in5 in6) (and ( < in6 in7) (and ( > in7 in8) (and ( > in8 in9) (and ( > in9 in10) (and ( > in10 in11) (and ( > in11 in12) (and ( > in12 in13))))))))))))))))",
        "equivalent": true
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( >  in7 in8))  ( >  in8 in9))  ( >  in9 in10))  ( >  in10 in11))  ( >  in11 in12))  ( >  in12 in13))  ( >  in13 in14)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( < in2 in3) (and ( < in3 in4) (and ( < in4 in5) (and ( < in5 in6) (and ( < in6 in7) (and ( > in7 in8) (and ( > in8 in9) (and ( > in9 in10) (and ( > in10 in11) (and ( > in11 in12) (and ( > in12 in13) (and ( > in13 in14)))))))))))))))))",
        "equivalent": true
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( >  in8 in9))  ( >  in9 in10))  ( >  in10 in11))  ( >  in11 in12))  ( >  in12 in13))  ( >  in13 in14))  ( >  in14 in15)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( < in2 in3) (and ( < in3 in4) (and ( < in4 in5) (and ( < in5 in6) (and ( < in6 in7) (and ( < in7 in8) (and ( > in8 in9) (and ( > in9 in10) (and ( > in10 in11) (and ( > in11 in12) (and ( > in12 in13) (and ( > in13 in14) (and ( > in14 in15))))))))))))))))))",
        "equivalent": true
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( >  in8 in9))  ( >  in9 in10))  ( >  in10 in11))  ( >  in11 in12))  ( >  in12 in13))  ( >  in13 in14))  ( >  in14 in15))  ( >  in15 in16)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( < in2 in3) (and ( < in3 in4) (and ( < in4 in5) (and ( < in5 in6) (and ( < in6 in7) (and ( < in7 in8) (and ( > in8 in9) (and ( > in9 in10) (and ( > in10 in11) (and ( > in11 in12) (and ( > in12 in13) (and ( > in13 in14) (and ( > in14 in15) (and ( > in15 in16)))))))))))))))))))",
        "equivalent": true
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( >  in9 in10))  ( >  in10 in11))  ( >  in11 in12))  ( >  in12 in13))  ( >  in13 in14))  ( >  in14 in15))  ( >  in15 in16))  ( >  in16 in17)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( < in2 in3) (and ( < in3 in4) (and ( < in4 in5) (and ( < in5 in6) (and ( < in6 in7) (and ( < in7 in8) (and ( < in8 in9) (and ( > in9 in10) (and ( > in10 in11) (and ( > in11 in12) (and ( > in12 in13) (and ( > in13 in14) (and ( > in14 in15) (and ( > in15 in16) (and ( > in16 in17))))))))))))))))))))",
        "equivalent": true
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( >  in9 in10))  ( >  in10 in11))  ( >  in11 in12))  ( >  in12 in13))  ( >  in13 in14))  ( >  in14 in15))  ( >  in15 in16))  ( >  in16 in17))  ( >  in17 in18)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( < in2 in3) (and ( < in3 in4) (and ( < in4 in5) (and ( < in5 in6) (and ( < in6 in7) (and ( < in7 in8) (and ( < in8 in9) (and ( > in9 in10) (and ( > in10 in11) (and ( > in11 in12) (and ( > in12 in13) (and ( > in13 in14) (and ( > in14 in15) (and ( > in15 in16) (and ( > in16 in17) (and ( > in17 in18)))))))))))))))))))))",
        "equivalent": true
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( >  in10 in11))  ( >  in11 in12))  ( >  in12 in13))  ( >  in13 in14))  ( >  in14 in15))  ( >  in15 in16))  ( >  in16 in17))  ( >  in17 in18))  ( >  in18 in19)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( < in2 in3) (and ( < in3 in4) (and ( < in4 in5) (and ( < in5 in6) (and ( < in6 in7) (and ( < in7 in8) (and ( < in8 in9) (and ( < in9 in10) (and ( > in10 in11) (and ( > in11 in12) (and ( > in12 in13) (and ( > in13 in14) (and ( > in14 in15) (and ( > in15 in16) (and ( > in16 in17) (and ( > in17 in18) (and ( > in18 in19))))))))))))))))))))))",
        "equivalent": true
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( >  in10 in11))  ( >  in11 in12))  ( >  in12 in13))  ( >  in13 in14))  ( >  in14 in15))  ( >  in15 in16))  ( >  in16 in17))  ( >  in17 in18))  ( >  in18 in19))  ( >  in19 in20)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( < in2 in3) (and ( < in3 in4) (and ( < in4 in5) (and ( < in5 in6) (and ( < in6 in7) (and ( < in7 in8) (and ( < in8 in9) (and ( < in9 in10) (and ( > in10 in11) (and ( > in11 in12) (and ( > in12 in13) (and ( > in13 in14) (and ( > in14 in15) (and ( > in15 in16) (and ( > in16 in17) (and ( > in17 in18) (and ( > in18 in19) (and ( > in19 in20)))))))))))))))))))))))",
        "equivalent": true
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( >  in11 in12))  ( >  in12 in13))  ( >  in13 in14))  ( >  in14 in15))  ( >  in15 in16))  ( >  in16 in17))  ( >  in17 in18))  ( >  in18 in19))  ( >  in19 in20))  ( >  in20 in21)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( < in2 in3) (and ( < in3 in4) (and ( < in4 in5) (and ( < in5 in6) (and ( < in6 in7) (and ( < in7 in8) (and ( < in8 in9) (and ( < in9 in10) (and ( < in10 in11) (and ( > in11 in12) (and ( > in12 in13) (and ( > in13 in14) (and ( > in14 in15) (and ( > in15 in16) (and ( > in16 in17) (and ( > in17 in18) (and ( > in18 in19) (and ( > in19 in20) (and ( > in20 in21))))))))))))))))))))))))",
        "equivalent": true
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( >  in11 in12))  ( >  in12 in13))  ( >  in13 in14))  ( >  in14 in15))  ( >  in15 in16))  ( >  in16 in17))  ( >  in17 in18))  ( >  in18 in19))  ( >  in19 in20))  ( >  in20 in21))  ( >  in21 in22)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( < in2 in3) (and ( < in3 in4) (and ( < in4 in5) (and ( < in5 in6) (and ( < in6 in7) (and ( < in7 in8) (and ( < in8 in9) (and ( < in9 in10) (and ( < in10 in11) (and ( > in11 in12) (and ( > in12 in13) (and ( > in13 in14) (and ( > in14 in15) (and ( > in15 in16) (and ( > in16 in17) (and ( > in17 in18) (and ( > in18 in19) (and ( > in19 in20) (and ( > in20 in21) (and ( > in21 in22)))))))))))))))))))))))))",
        "equivalent": true
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( >  in12 in13))  ( >  in13 in14))  ( >  in14 in15))  ( >  in15 in16))  ( >  in16 in17))  ( >  in17 in18))  ( >  in18 in19))  ( >  in19 in20))  ( >  in20 in21))  ( >  in21 in22))  ( >  in22 in23)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( < in2 in3) (and ( < in3 in4) (and ( < in4 in5) (and ( < in5 in6) (and ( < in6 in7) (and ( < in7 in8) (and ( < in8 in9) (and ( < in9 in10) (and ( < in10 in11) (and ( < in11 in12) (and ( > in12 in13) (and ( > in13 in14) (and ( > in14 in15) (and ( > in15 in16) (and ( > in16 in17) (and ( > in17 in18) (and ( > in18 in19) (and ( > in19 in20) (and ( > in20 in21) (and ( > in21 in22) (and ( > in22 in23))))))))))))))))))))))))))",
        "equivalent": true
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( >  in12 in13))  ( >  in13 in14))  ( >  in14 in15))  ( >  in15 in16))  ( >  in16 in17))  ( >  in17 in18))  ( >  in18 in19))  ( >  in19 in20))  ( >  in20 in21))  ( >  in21 in22))  ( >  in22 in23))  ( >  in23 in24)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( < in2 in3) (and ( < in3 in4) (and ( < in4 in5) (and ( < in5 in6) (and ( < in6 in7) (and ( < in7 in8) (and ( < in8 in9) (and ( < in9 in10) (and ( < in10 in11) (and ( < in11 in12) (and ( > in12 in13) (and ( > in13 in14) (and ( > in14 in15) (and ( > in15 in16) (and ( > in16 in17) (and ( > in17 in18) (and ( > in18 in19) (and ( > in19 in20) (and ( > in20 in21) (and ( > in21 in22) (and ( > in22 in23) (and ( > in23 in24)))))))))))))))))))))))))))",
        "equivalent": true
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( >  in13 in14))  ( >  in14 in15))  ( >  in15 in16))  ( >  in16 in17))  ( >  in17 in18))  ( >  in18 in19))  ( >  in19 in20))  ( >  in20 in21))  ( >  in21 in22))  ( >  in22 in23))  ( >  in23 in24))  ( >  in24 in25)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( < in2 in3) (and ( < in3 in4) (and ( < in4 in5) (and ( < in5 in6) (and ( < in6 in7) (and ( < in7 in8) (and ( < in8 in9) (and ( < in9 in10) (and ( < in10 in11) (and ( < in11 in12) (and ( < in12 in13) (and ( > in13 in14) (and ( > in14 in15) (and ( > in15 in16) (and ( > in16 in17) (and ( > in17 in18) (and ( > in18 in19) (and ( > in19 in20) (and ( > in20 in21) (and ( > in21 in22) (and ( > in22 in23) (and ( > in23 in24) (and ( > in24 in25))))))))))))))))))))))))))))",
        "equivalent": true
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( >  in13 in14))  ( >  in14 in15))  ( >  in15 in16))  ( >  in16 in17))  ( >  in17 in18))  ( >  in18 in19))  ( >  in19 in20))  ( >  in20 in21))  ( >  in21 in22))  ( >  in22 in23))  ( >  in23 in24))  ( >  in24 in25))  ( >  in25 in26)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( < in2 in3) (and ( < in3 in4) (and ( < in4 in5) (and ( < in5 in6) (and ( < in6 in7) (and ( < in7 in8) (and ( < in8 in9) (and ( < in9 in10) (and ( < in10 in11) (and ( < in11 in12) (and ( < in12 in13) (and ( > in13 in14) (and ( > in14 in15) (and ( > in15 in16) (and ( > in16 in17) (and ( > in17 in18) (and ( > in18 in19) (and ( > in19 in20) (and ( > in20 in21) (and ( > in21 in22) (and ( > in22 in23) (and ( > in23 in24) (and ( > in24 in25) (and ( > in25 in26)))))))))))))))))))))))))))))",
        "equivalent": true
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( >  in14 in15))  ( >  in15 in16))  ( >  in16 in17))  ( >  in17 in18))  ( >  in18 in19))  ( >  in19 in20))  ( >  in20 in21))  ( >  in21 in22))  ( >  in22 in23))  ( >  in23 in24))  ( >  in24 in25))  ( >  in25 in26))  ( >  in26 in27)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( < in2 in3) (and ( < in3 in4) (and ( < in4 in5) (and ( < in5 in6) (and ( < in6 in7) (and ( < in7 in8) (and ( < in8 in9) (and ( < in9 in10) (and ( < in10 in11) (and ( < in11 in12) (and ( < in12 in13) (and ( < in13 in14) (and ( > in14 in15) (and ( > in15 in16) (and ( > in16 in17) (and ( > in17 in18) (and ( > in18 in19) (and ( > in19 in20) (and ( > in20 in21) (and ( > in21 in22) (and ( > in22 in23) (and ( > in23 in24) (and ( > in24 in25) (and ( > in25 in26) (and ( > in26 in27))))))))))))))))))))))))))))))",
        "equivalent": true
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( >  in14 in15))  ( >  in15 in16))  ( >  in16 in17))  ( >  in17 in18))  ( >  in18 in19))  ( >  in19 in20))  ( >  in20 in21))  ( >  in21 in22))  ( >  in22 in23))  ( >  in23 in24))  ( >  in24 in25))  ( >  in25 in26))  ( >  in26 in27))  ( >  in27 in28)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( < in2 in3) (and ( < in3 in4) (and ( < in4 in5) (and ( < in5 in6) (and ( < in6 in7) (and ( < in7 in8) (and ( < in8 in9) (and ( < in9 in10) (and ( < in10 in11) (and ( < in11 in12) (and ( < in12 in13) (and ( < in13 in14) (and ( > in14 in15) (and ( > in15 in16) (and ( > in16 in17) (and ( > in17 in18) (and ( > in18 in19) (and ( > in19 in20) (and ( > in20 in21) (and ( > in21 in22) (and ( > in22 in23) (and ( > in23 in24) (and ( > in24 in25) (and ( > in25 in26) (and ( > in26 in27) (and ( > in27 in28)))))))))))))))))))))))))))))))",
        "equivalent": true
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( >  in15 in16))  ( >  in16 in17))  ( >  in17 in18))  ( >  in18 in19))  ( >  in19 in20))  ( >  in20 in21))  ( >  in21 in22))  ( >  in22 in23))  ( >  in23 in24))  ( >  in24 in25))  ( >  in25 in26))  ( >  in26 in27))  ( >  in27 in28))  ( >  in28 in29)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in1) (and ( < in1 in2) (and ( < in2 in3) (and ( < in3 in4) (and ( < in4 in5) (and ( < in5 in6) (and ( < in6 in7) (and ( < in7 in8) (and ( < in8 in9) (and ( < in9 in10) (and ( < in10 in11) (and ( < in11 in12) (and ( < in12 in13) (and ( < in13 in14) (and ( < in14 in15) (and ( > in15 in16) (and ( > in16 in17) (and ( > in17 in18) (and ( > in18 in19) (and ( > in19 in20) (and ( > in20 in21) (and ( > in21 in22) (and ( > in22 in23) (and ( > in23 in24) (and ( > in24 in25) (and ( > in25 in26) (and ( > in26 in27) (and ( > in27 in28) (and ( > in28 in29))))))))))))))))))))))))))))))))",
        "equivalent": true
      }
    }
  },
  "ComplexPalindrome": {
    "succeeded": true,
    "attempts": 1,
    "examples_right": 30,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert  ( <  in0 in1))"
          ]
        },
        "predicted": "(assert ( < in0 in1))",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( <  in0 in2))"
          ]
        },
        "predicted": "(assert ( < in0 in2))",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and  ( <  in0 in3)  ( <  in1 in2)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in3) ( < in1 in2)))",
        "equivalent": true
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and  ( <  in0 in4)  ( <  in1 in3)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in4) ( < in1 in3)))",
        "equivalent": true
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( <  in0 in5)  ( <  in1 in4))  ( <  in2 in3)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in5) ( < in1 in4) ( < in2 in3)))",
        "equivalent": true
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( <  in0 in6)  ( <  in1 in5))  ( <  in2 in4)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in6) ( < in1 in5) ( < in2 in4)))",
        "equivalent": true
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( <  in0 in7)  ( <  in1 in6))  ( <  in2 in5))  ( <  in3 in4)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in7) ( < in1 in6) ( < in2 in5) ( < in3 in4)))",
        "equivalent": true
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( <  in0 in8)  ( <  in1 in7))  ( <  in2 in6))  ( <  in3 in5)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in8) ( < in1 in7) ( < in2 in6) ( < in3 in5)))",
        "equivalent": true
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( <  in0 in9)  ( <  in1 in8))  ( <  in2 in7))  ( <  in3 in6))  ( <  in4 in5)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in9) ( < in1 in8) ( < in2 in7) ( < in3 in6) ( < in4 in5)))",
        "equivalent": true
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( <  in0 in10)  ( <  in1 in9))  ( <  in2 in8))  ( <  in3 in7))  ( <  in4 in6)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in10) ( < in1 in9) ( < in2 in8) ( < in3 in7) ( < in4 in6)))",
        "equivalent": true
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( <  in0 in11)  ( <  in1 in10))  ( <  in2 in9))  ( <  in3 in8))  ( <  in4 in7))  ( <  in5 in6)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in11) ( < in1 in10) ( < in2 in9) ( < in3 in8) ( < in4 in7) ( < in5 in6)))",
        "equivalent": true
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in12 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( <  in0 in12)  ( <  in1 in11))  ( <  in2 in10))  ( <  in3 in9))  ( <  in4 in8))  ( <  in5 in7)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in12) ( < in1 in11) ( < in2 in10) ( < in3 in9) ( < in4 in8) ( < in5 in7)))",
        "equivalent": true
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( <  in0 in13)  ( <  in1 in12))  ( <  in2 in11))  ( <  in3 in10))  ( <  in4 in9))  ( <  in5 in8))  ( <  in6 in7)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in13) ( < in1 in12) ( < in2 in11) ( < in3 in10) ( < in4 in9) ( < in5 in8) ( < in6 in7)))",
        "equivalent": true
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( <  in0 in14)  ( <  in1 in13))  ( <  in2 in12))  ( <  in3 in11))  ( <  in4 in10))  ( <  in5 in9))  ( <  in6 in8)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in14) ( < in1 in13) ( < in2 in12) ( < in3 in11) ( < in4 in10) ( < in5 in9) ( < in6 in8)))",
        "equivalent": true
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( <  in0 in15)  ( <  in1 in14))  ( <  in2 in13))  ( <  in3 in12))  ( <  in4 in11))  ( <  in5 in10))  ( <  in6 in9))  ( <  in7 in8)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in15) ( < in1 in14) ( < in2 in13) ( < in3 in12) ( < in4 in11) ( < in5 in10) ( < in6 in9) ( < in7 in8)))",
        "equivalent": true
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( <  in0 in16)  ( <  in1 in15))  ( <  in2 in14))  ( <  in3 in13))  ( <  in4 in12))  ( <  in5 in11))  ( <  in6 in10))  ( <  in7 in9)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in16) ( < in1 in15) ( < in2 in14) ( < in3 in13) ( < in4 in12) ( < in5 in11) ( < in6 in10) ( < in7 in9)))",
        "equivalent": true
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( <  in0 in17)  ( <  in1 in16))  ( <  in2 in15))  ( <  in3 in14))  ( <  in4 in13))  ( <  in5 in12))  ( <  in6 in11))  ( <  in7 in10))  ( <  in8 in9)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in17) ( < in1 in16) ( < in2 in15) ( < in3 in14) ( < in4 in13) ( < in5 in12) ( < in6 in11) ( < in7 in10) ( < in8 in9)))",
        "equivalent": true
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( <  in0 in18)  ( <  in1 in17))  ( <  in2 in16))  ( <  in3 in15))  ( <  in4 in14))  ( <  in5 in13))  ( <  in6 in12))  ( <  in7 in11))  ( <  in8 in10)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in18) ( < in1 in17) ( < in2 in16) ( < in3 in15) ( < in4 in14) ( < in5 in13) ( < in6 in12) ( < in7 in11) ( < in8 in10)))",
        "equivalent": true
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( <  in0 in19)  ( <  in1 in18))  ( <  in2 in17))  ( <  in3 in16))  ( <  in4 in15))  ( <  in5 in14))  ( <  in6 in13))  ( <  in7 in12))  ( <  in8 in11))  ( <  in9 in10)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in19) ( < in1 in18) ( < in2 in17) ( < in3 in16) ( < in4 in15) ( < in5 in14) ( < in6 in13) ( < in7 in12) ( < in8 in11) ( < in9 in10)))",
        "equivalent": true
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in20 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( <  in0 in20)  ( <  in1 in19))  ( <  in2 in18))  ( <  in3 in17))  ( <  in4 in16))  ( <  in5 in15))  ( <  in6 in14))  ( <  in7 in13))  ( <  in8 in12))  ( <  in9 in11)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in20) ( < in1 in19) ( < in2 in18) ( < in3 in17) ( < in4 in16) ( < in5 in15) ( < in6 in14) ( < in7 in13) ( < in8 in12) ( < in9 in11)))",
        "equivalent": true
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in20 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in21 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( <  in0 in21)  ( <  in1 in20))  ( <  in2 in19))  ( <  in3 in18))  ( <  in4 in17))  ( <  in5 in16))  ( <  in6 in15))  ( <  in7 in14))  ( <  in8 in13))  ( <  in9 in12))  ( <  in10 in11)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in21) ( < in1 in20) ( < in2 in19) ( < in3 in18) ( < in4 in17) ( < in5 in16) ( < in6 in15) ( < in7 in14) ( < in8 in13) ( < in9 in12) ( < in10 in11)))",
        "equivalent": true
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in20 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in21 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( <  in0 in22)  ( <  in1 in21))  ( <  in2 in20))  ( <  in3 in19))  ( <  in4 in18))  ( <  in5 in17))  ( <  in6 in16))  ( <  in7 in15))  ( <  in8 in14))  ( <  in9 in13))  ( <  in10 in12)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in22) ( < in1 in21) ( < in2 in20) ( < in3 in19) ( < in4 in18) ( < in5 in17) ( < in6 in16) ( < in7 in15) ( < in8 in14) ( < in9 in13) ( < in10 in12)))",
        "equivalent": true
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in20 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in22 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in21 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in23 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in23)  ( <  in1 in22))  ( <  in2 in21))  ( <  in3 in20))  ( <  in4 in19))  ( <  in5 in18))  ( <  in6 in17))  ( <  in7 in16))  ( <  in8 in15))  ( <  in9 in14))  ( <  in10 in13))  ( <  in11 in12)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in23) ( < in1 in22) ( < in2 in21) ( < in3 in20) ( < in4 in19) ( < in5 in18) ( < in6 in17) ( < in7 in16) ( < in8 in15) ( < in9 in14) ( < in10 in13) ( < in11 in12)))",
        "equivalent": true
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in20 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in22 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in21 Int)",
            "(declare-const in13 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in24)  ( <  in1 in23))  ( <  in2 in22))  ( <  in3 in21))  ( <  in4 in20))  ( <  in5 in19))  ( <  in6 in18))  ( <  in7 in17))  ( <  in8 in16))  ( <  in9 in15))  ( <  in10 in14))  ( <  in11 in13)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in24) ( < in1 in23) ( < in2 in22) ( < in3 in21) ( < in4 in20) ( < in5 in19) ( < in6 in18) ( < in7 in17) ( < in8 in16) ( < in9 in15) ( < in10 in14) ( < in11 in13)))",
        "equivalent": true
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in25)  ( <  in1 in24))  ( <  in2 in23))  ( <  in3 in22))  ( <  in4 in21))  ( <  in5 in20))  ( <  in6 in19))  ( <  in7 in18))  ( <  in8 in17))  ( <  in9 in16))  ( <  in10 in15))  ( <  in11 in14))  ( <  in12 in13)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in25) ( < in1 in24) ( < in2 in23) ( < in3 in22) ( < in4 in21) ( < in5 in20) ( < in6 in19) ( < in7 in18) ( < in8 in17) ( < in9 in16) ( < in10 in15) ( < in11 in14) ( < in12 in13)))",
        "equivalent": true
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in26)  ( <  in1 in25))  ( <  in2 in24))  ( <  in3 in23))  ( <  in4 in22))  ( <  in5 in21))  ( <  in6 in20))  ( <  in7 in19))  ( <  in8 in18))  ( <  in9 in17))  ( <  in10 in16))  ( <  in11 in15))  ( <  in12 in14)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in26) ( < in1 in25) ( < in2 in24) ( < in3 in23) ( < in4 in22) ( < in5 in21) ( < in6 in20) ( < in7 in19) ( < in8 in18) ( < in9 in17) ( < in10 in16) ( < in11 in15) ( < in12 in14)))",
        "equivalent": true
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in27)  ( <  in1 in26))  ( <  in2 in25))  ( <  in3 in24))  ( <  in4 in23))  ( <  in5 in22))  ( <  in6 in21))  ( <  in7 in20))  ( <  in8 in19))  ( <  in9 in18))  ( <  in10 in17))  ( <  in11 in16))  ( <  in12 in15))  ( <  in13 in14)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in27) ( < in1 in26) ( < in2 in25) ( < in3 in24) ( < in4 in23) ( < in5 in22) ( < in6 in21) ( < in7 in20) ( < in8 in19) ( < in9 in18) ( < in10 in17) ( < in11 in16) ( < in12 in15) ( < in13 in14)))",
        "equivalent": true
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in28)  ( <  in1 in27))  ( <  in2 in26))  ( <  in3 in25))  ( <  in4 in24))  ( <  in5 in23))  ( <  in6 in22))  ( <  in7 in21))  ( <  in8 in20))  ( <  in9 in19))  ( <  in10 in18))  ( <  in11 in17))  ( <  in12 in16))  ( <  in13 in15)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in28) ( < in1 in27) ( < in2 in26) ( < in3 in25) ( < in4 in24) ( < in5 in23) ( < in6 in22) ( < in7 in21) ( < in8 in20) ( < in9 in19) ( < in10 in18) ( < in11 in17) ( < in12 in16) ( < in13 in15)))",
        "equivalent": true
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in29)  ( <  in1 in28))  ( <  in2 in27))  ( <  in3 in26))  ( <  in4 in25))  ( <  in5 in24))  ( <  in6 in23))  ( <  in7 in22))  ( <  in8 in21))  ( <  in9 in20))  ( <  in10 in19))  ( <  in11 in18))  ( <  in12 in17))  ( <  in13 in16))  ( <  in14 in15)))"
          ]
        },
        "predicted": "(assert (and ( < in0 in29) ( < in1 in28) ( < in2 in27) ( < in3 in26) ( < in4 in25) ( < in5 in24) ( < in6 in23) ( < in7 in22) ( < in8 in21) ( < in9 in20) ( < in10 in19) ( < in11 in18) ( < in12 in17) ( < in13 in16) ( < in14 in15)))",
        "equivalent": true
      }
    }
  },
  "ComplexOddsEvens": {
    "succeeded": true,
    "attempts": 1,
    "examples_right": 30,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert  ( <  in1 in0))"
          ]
        },
        "predicted": "(assert (and ( < in1 in0 )))",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and  ( <  in1 in0)  ( <  in0 in2)))"
          ]
        },
        "predicted": "(assert (and ( < in1 in0 ) ( < in0 in2 )))",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( <  in3 in0)  ( <  in0 in2))  ( <  in1 in3)))"
          ]
        },
        "predicted": "(assert (and ( < in3 in0 ) ( < in0 in2 ) ( < in1 in3 )))",
        "equivalent": true
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( <  in3 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4)))"
          ]
        },
        "predicted": "(assert (and ( < in3 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 )))",
        "equivalent": true
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( <  in5 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4))  ( <  in3 in5)))"
          ]
        },
        "predicted": "(assert (and ( < in5 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 ) ( < in3 in5 )))",
        "equivalent": true
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( <  in5 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4))  ( <  in3 in5))  ( <  in4 in6)))"
          ]
        },
        "predicted": "(assert (and ( < in5 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 ) ( < in3 in5 ) ( < in4 in6 )))",
        "equivalent": true
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( <  in7 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4))  ( <  in3 in5))  ( <  in4 in6))  ( <  in5 in7)))"
          ]
        },
        "predicted": "(assert (and ( < in7 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 ) ( < in3 in5 ) ( < in4 in6 ) ( < in5 in7 )))",
        "equivalent": true
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( <  in7 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4))  ( <  in3 in5))  ( <  in4 in6))  ( <  in5 in7))  ( <  in6 in8)))"
          ]
        },
        "predicted": "(assert (and ( < in7 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 ) ( < in3 in5 ) ( < in4 in6 ) ( < in5 in7 ) ( < in6 in8 )))",
        "equivalent": true
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( <  in9 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4))  ( <  in3 in5))  ( <  in4 in6))  ( <  in5 in7))  ( <  in6 in8))  ( <  in7 in9)))"
          ]
        },
        "predicted": "(assert (and ( < in9 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 ) ( < in3 in5 ) ( < in4 in6 ) ( < in5 in7 ) ( < in6 in8 ) ( < in7 in9 )))",
        "equivalent": true
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( <  in9 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4))  ( <  in3 in5))  ( <  in4 in6))  ( <  in5 in7))  ( <  in6 in8))  ( <  in7 in9))  ( <  in8 in10)))"
          ]
        },
        "predicted": "(assert (and ( < in9 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 ) ( < in3 in5 ) ( < in4 in6 ) ( < in5 in7 ) ( < in6 in8 ) ( < in7 in9 ) ( < in8 in10 )))",
        "equivalent": true
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( <  in11 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4))  ( <  in3 in5))  ( <  in4 in6))  ( <  in5 in7))  ( <  in6 in8))  ( <  in7 in9))  ( <  in8 in10))  ( <  in9 in11)))"
          ]
        },
        "predicted": "(assert (and ( < in11 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 ) ( < in3 in5 ) ( < in4 in6 ) ( < in5 in7 ) ( < in6 in8 ) ( < in7 in9 ) ( < in8 in10 ) ( < in9 in11 )))",
        "equivalent": true
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( <  in11 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4))  ( <  in3 in5))  ( <  in4 in6))  ( <  in5 in7))  ( <  in6 in8))  ( <  in7 in9))  ( <  in8 in10))  ( <  in9 in11))  ( <  in10 in12)))"
          ]
        },
        "predicted": "(assert (and ( < in11 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 ) ( < in3 in5 ) ( < in4 in6 ) ( < in5 in7 ) ( < in6 in8 ) ( < in7 in9 ) ( < in8 in10 ) ( < in9 in11 ) ( < in10 in12 )))",
        "equivalent": true
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in13 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4))  ( <  in3 in5))  ( <  in4 in6))  ( <  in5 in7))  ( <  in6 in8))  ( <  in7 in9))  ( <  in8 in10))  ( <  in9 in11))  ( <  in10 in12))  ( <  in11 in13)))"
          ]
        },
        "predicted": "(assert (and ( < in13 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 ) ( < in3 in5 ) ( < in4 in6 ) ( < in5 in7 ) ( < in6 in8 ) ( < in7 in9 ) ( < in8 in10 ) ( < in9 in11 ) ( < in10 in12 ) ( < in11 in13 )))",
        "equivalent": true
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in13 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4))  ( <  in3 in5))  ( <  in4 in6))  ( <  in5 in7))  ( <  in6 in8))  ( <  in7 in9))  ( <  in8 in10))  ( <  in9 in11))  ( <  in10 in12))  ( <  in11 in13))  ( <  in12 in14)))"
          ]
        },
        "predicted": "(assert (and ( < in13 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 ) ( < in3 in5 ) ( < in4 in6 ) ( < in5 in7 ) ( < in6 in8 ) ( < in7 in9 ) ( < in8 in10 ) ( < in9 in11 ) ( < in10 in12 ) ( < in11 in13 ) ( < in12 in14 )))",
        "equivalent": true
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in15 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4))  ( <  in3 in5))  ( <  in4 in6))  ( <  in5 in7))  ( <  in6 in8))  ( <  in7 in9))  ( <  in8 in10))  ( <  in9 in11))  ( <  in10 in12))  ( <  in11 in13))  ( <  in12 in14))  ( <  in13 in15)))"
          ]
        },
        "predicted": "(assert (and ( < in15 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 ) ( < in3 in5 ) ( < in4 in6 ) ( < in5 in7 ) ( < in6 in8 ) ( < in7 in9 ) ( < in8 in10 ) ( < in9 in11 ) ( < in10 in12 ) ( < in11 in13 ) ( < in12 in14 ) ( < in13 in15 )))",
        "equivalent": true
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in15 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4))  ( <  in3 in5))  ( <  in4 in6))  ( <  in5 in7))  ( <  in6 in8))  ( <  in7 in9))  ( <  in8 in10))  ( <  in9 in11))  ( <  in10 in12))  ( <  in11 in13))  ( <  in12 in14))  ( <  in13 in15))  ( <  in14 in16)))"
          ]
        },
        "predicted": "(assert (and ( < in15 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 ) ( < in3 in5 ) ( < in4 in6 ) ( < in5 in7 ) ( < in6 in8 ) ( < in7 in9 ) ( < in8 in10 ) ( < in9 in11 ) ( < in10 in12 ) ( < in11 in13 ) ( < in12 in14 ) ( < in13 in15 ) ( < in14 in16 )))",
        "equivalent": true
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in17 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4))  ( <  in3 in5))  ( <  in4 in6))  ( <  in5 in7))  ( <  in6 in8))  ( <  in7 in9))  ( <  in8 in10))  ( <  in9 in11))  ( <  in10 in12))  ( <  in11 in13))  ( <  in12 in14))  ( <  in13 in15))  ( <  in14 in16))  ( <  in15 in17)))"
          ]
        },
        "predicted": "(assert (and ( < in17 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 ) ( < in3 in5 ) ( < in4 in6 ) ( < in5 in7 ) ( < in6 in8 ) ( < in7 in9 ) ( < in8 in10 ) ( < in9 in11 ) ( < in10 in12 ) ( < in11 in13 ) ( < in12 in14 ) ( < in13 in15 ) ( < in14 in16 ) ( < in15 in17 )))",
        "equivalent": true
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in17 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4))  ( <  in3 in5))  ( <  in4 in6))  ( <  in5 in7))  ( <  in6 in8))  ( <  in7 in9))  ( <  in8 in10))  ( <  in9 in11))  ( <  in10 in12))  ( <  in11 in13))  ( <  in12 in14))  ( <  in13 in15))  ( <  in14 in16))  ( <  in15 in17))  ( <  in16 in18)))"
          ]
        },
        "predicted": "(assert (and ( < in17 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 ) ( < in3 in5 ) ( < in4 in6 ) ( < in5 in7 ) ( < in6 in8 ) ( < in7 in9 ) ( < in8 in10 ) ( < in9 in11 ) ( < in10 in12 ) ( < in11 in13 ) ( < in12 in14 ) ( < in13 in15 ) ( < in14 in16 ) ( < in15 in17 ) ( < in16 in18 )))",
        "equivalent": true
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in19 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4))  ( <  in3 in5))  ( <  in4 in6))  ( <  in5 in7))  ( <  in6 in8))  ( <  in7 in9))  ( <  in8 in10))  ( <  in9 in11))  ( <  in10 in12))  ( <  in11 in13))  ( <  in12 in14))  ( <  in13 in15))  ( <  in14 in16))  ( <  in15 in17))  ( <  in16 in18))  ( <  in17 in19)))"
          ]
        },
        "predicted": "(assert (and ( < in19 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 ) ( < in3 in5 ) ( < in4 in6 ) ( < in5 in7 ) ( < in6 in8 ) ( < in7 in9 ) ( < in8 in10 ) ( < in9 in11 ) ( < in10 in12 ) ( < in11 in13 ) ( < in12 in14 ) ( < in13 in15 ) ( < in14 in16 ) ( < in15 in17 ) ( < in16 in18 ) ( < in17 in19 )))",
        "equivalent": true
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in19 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4))  ( <  in3 in5))  ( <  in4 in6))  ( <  in5 in7))  ( <  in6 in8))  ( <  in7 in9))  ( <  in8 in10))  ( <  in9 in11))  ( <  in10 in12))  ( <  in11 in13))  ( <  in12 in14))  ( <  in13 in15))  ( <  in14 in16))  ( <  in15 in17))  ( <  in16 in18))  ( <  in17 in19))  ( <  in18 in20)))"
          ]
        },
        "predicted": "(assert (and ( < in19 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 ) ( < in3 in5 ) ( < in4 in6 ) ( < in5 in7 ) ( < in6 in8 ) ( < in7 in9 ) ( < in8 in10 ) ( < in9 in11 ) ( < in10 in12 ) ( < in11 in13 ) ( < in12 in14 ) ( < in13 in15 ) ( < in14 in16 ) ( < in15 in17 ) ( < in16 in18 ) ( < in17 in19 ) ( < in18 in20 )))",
        "equivalent": true
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in21 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4))  ( <  in3 in5))  ( <  in4 in6))  ( <  in5 in7))  ( <  in6 in8))  ( <  in7 in9))  ( <  in8 in10))  ( <  in9 in11))  ( <  in10 in12))  ( <  in11 in13))  ( <  in12 in14))  ( <  in13 in15))  ( <  in14 in16))  ( <  in15 in17))  ( <  in16 in18))  ( <  in17 in19))  ( <  in18 in20))  ( <  in19 in21)))"
          ]
        },
        "predicted": "(assert (and ( < in21 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 ) ( < in3 in5 ) ( < in4 in6 ) ( < in5 in7 ) ( < in6 in8 ) ( < in7 in9 ) ( < in8 in10 ) ( < in9 in11 ) ( < in10 in12 ) ( < in11 in13 ) ( < in12 in14 ) ( < in13 in15 ) ( < in14 in16 ) ( < in15 in17 ) ( < in16 in18 ) ( < in17 in19 ) ( < in18 in20 ) ( < in19 in21 )))",
        "equivalent": true
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in21 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4))  ( <  in3 in5))  ( <  in4 in6))  ( <  in5 in7))  ( <  in6 in8))  ( <  in7 in9))  ( <  in8 in10))  ( <  in9 in11))  ( <  in10 in12))  ( <  in11 in13))  ( <  in12 in14))  ( <  in13 in15))  ( <  in14 in16))  ( <  in15 in17))  ( <  in16 in18))  ( <  in17 in19))  ( <  in18 in20))  ( <  in19 in21))  ( <  in20 in22)))"
          ]
        },
        "predicted": "(assert (and ( < in21 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 ) ( < in3 in5 ) ( < in4 in6 ) ( < in5 in7 ) ( < in6 in8 ) ( < in7 in9 ) ( < in8 in10 ) ( < in9 in11 ) ( < in10 in12 ) ( < in11 in13 ) ( < in12 in14 ) ( < in13 in15 ) ( < in14 in16 ) ( < in15 in17 ) ( < in16 in18 ) ( < in17 in19 ) ( < in18 in20 ) ( < in19 in21 ) ( < in20 in22 )))",
        "equivalent": true
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in23 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4))  ( <  in3 in5))  ( <  in4 in6))  ( <  in5 in7))  ( <  in6 in8))  ( <  in7 in9))  ( <  in8 in10))  ( <  in9 in11))  ( <  in10 in12))  ( <  in11 in13))  ( <  in12 in14))  ( <  in13 in15))  ( <  in14 in16))  ( <  in15 in17))  ( <  in16 in18))  ( <  in17 in19))  ( <  in18 in20))  ( <  in19 in21))  ( <  in20 in22))  ( <  in21 in23)))"
          ]
        },
        "predicted": "(assert (and ( < in23 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 ) ( < in3 in5 ) ( < in4 in6 ) ( < in5 in7 ) ( < in6 in8 ) ( < in7 in9 ) ( < in8 in10 ) ( < in9 in11 ) ( < in10 in12 ) ( < in11 in13 ) ( < in12 in14 ) ( < in13 in15 ) ( < in14 in16 ) ( < in15 in17 ) ( < in16 in18 ) ( < in17 in19 ) ( < in18 in20 ) ( < in19 in21 ) ( < in20 in22 ) ( < in21 in23 )))",
        "equivalent": true
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in23 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4))  ( <  in3 in5))  ( <  in4 in6))  ( <  in5 in7))  ( <  in6 in8))  ( <  in7 in9))  ( <  in8 in10))  ( <  in9 in11))  ( <  in10 in12))  ( <  in11 in13))  ( <  in12 in14))  ( <  in13 in15))  ( <  in14 in16))  ( <  in15 in17))  ( <  in16 in18))  ( <  in17 in19))  ( <  in18 in20))  ( <  in19 in21))  ( <  in20 in22))  ( <  in21 in23))  ( <  in22 in24)))"
          ]
        },
        "predicted": "(assert (and ( < in23 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 ) ( < in3 in5 ) ( < in4 in6 ) ( < in5 in7 ) ( < in6 in8 ) ( < in7 in9 ) ( < in8 in10 ) ( < in9 in11 ) ( < in10 in12 ) ( < in11 in13 ) ( < in12 in14 ) ( < in13 in15 ) ( < in14 in16 ) ( < in15 in17 ) ( < in16 in18 ) ( < in17 in19 ) ( < in18 in20 ) ( < in19 in21 ) ( < in20 in22 ) ( < in21 in23 ) ( < in22 in24 )))",
        "equivalent": true
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in25 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4))  ( <  in3 in5))  ( <  in4 in6))  ( <  in5 in7))  ( <  in6 in8))  ( <  in7 in9))  ( <  in8 in10))  ( <  in9 in11))  ( <  in10 in12))  ( <  in11 in13))  ( <  in12 in14))  ( <  in13 in15))  ( <  in14 in16))  ( <  in15 in17))  ( <  in16 in18))  ( <  in17 in19))  ( <  in18 in20))  ( <  in19 in21))  ( <  in20 in22))  ( <  in21 in23))  ( <  in22 in24))  ( <  in23 in25)))"
          ]
        },
        "predicted": "(assert (and ( < in25 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 ) ( < in3 in5 ) ( < in4 in6 ) ( < in5 in7 ) ( < in6 in8 ) ( < in7 in9 ) ( < in8 in10 ) ( < in9 in11 ) ( < in10 in12 ) ( < in11 in13 ) ( < in12 in14 ) ( < in13 in15 ) ( < in14 in16 ) ( < in15 in17 ) ( < in16 in18 ) ( < in17 in19 ) ( < in18 in20 ) ( < in19 in21 ) ( < in20 in22 ) ( < in21 in23 ) ( < in22 in24 ) ( < in23 in25 )))",
        "equivalent": true
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in25 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4))  ( <  in3 in5))  ( <  in4 in6))  ( <  in5 in7))  ( <  in6 in8))  ( <  in7 in9))  ( <  in8 in10))  ( <  in9 in11))  ( <  in10 in12))  ( <  in11 in13))  ( <  in12 in14))  ( <  in13 in15))  ( <  in14 in16))  ( <  in15 in17))  ( <  in16 in18))  ( <  in17 in19))  ( <  in18 in20))  ( <  in19 in21))  ( <  in20 in22))  ( <  in21 in23))  ( <  in22 in24))  ( <  in23 in25))  ( <  in24 in26)))"
          ]
        },
        "predicted": "(assert (and ( < in25 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 ) ( < in3 in5 ) ( < in4 in6 ) ( < in5 in7 ) ( < in6 in8 ) ( < in7 in9 ) ( < in8 in10 ) ( < in9 in11 ) ( < in10 in12 ) ( < in11 in13 ) ( < in12 in14 ) ( < in13 in15 ) ( < in14 in16 ) ( < in15 in17 ) ( < in16 in18 ) ( < in17 in19 ) ( < in18 in20 ) ( < in19 in21 ) ( < in20 in22 ) ( < in21 in23 ) ( < in22 in24 ) ( < in23 in25 ) ( < in24 in26 )))",
        "equivalent": true
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in27 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4))  ( <  in3 in5))  ( <  in4 in6))  ( <  in5 in7))  ( <  in6 in8))  ( <  in7 in9))  ( <  in8 in10))  ( <  in9 in11))  ( <  in10 in12))  ( <  in11 in13))  ( <  in12 in14))  ( <  in13 in15))  ( <  in14 in16))  ( <  in15 in17))  ( <  in16 in18))  ( <  in17 in19))  ( <  in18 in20))  ( <  in19 in21))  ( <  in20 in22))  ( <  in21 in23))  ( <  in22 in24))  ( <  in23 in25))  ( <  in24 in26))  ( <  in25 in27)))"
          ]
        },
        "predicted": "(assert (and ( < in27 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 ) ( < in3 in5 ) ( < in4 in6 ) ( < in5 in7 ) ( < in6 in8 ) ( < in7 in9 ) ( < in8 in10 ) ( < in9 in11 ) ( < in10 in12 ) ( < in11 in13 ) ( < in12 in14 ) ( < in13 in15 ) ( < in14 in16 ) ( < in15 in17 ) ( < in16 in18 ) ( < in17 in19 ) ( < in18 in20 ) ( < in19 in21 ) ( < in20 in22 ) ( < in21 in23 ) ( < in22 in24 ) ( < in23 in25 ) ( < in24 in26 ) ( < in25 in27 )))",
        "equivalent": true
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in27 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4))  ( <  in3 in5))  ( <  in4 in6))  ( <  in5 in7))  ( <  in6 in8))  ( <  in7 in9))  ( <  in8 in10))  ( <  in9 in11))  ( <  in10 in12))  ( <  in11 in13))  ( <  in12 in14))  ( <  in13 in15))  ( <  in14 in16))  ( <  in15 in17))  ( <  in16 in18))  ( <  in17 in19))  ( <  in18 in20))  ( <  in19 in21))  ( <  in20 in22))  ( <  in21 in23))  ( <  in22 in24))  ( <  in23 in25))  ( <  in24 in26))  ( <  in25 in27))  ( <  in26 in28)))"
          ]
        },
        "predicted": "(assert (and ( < in27 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 ) ( < in3 in5 ) ( < in4 in6 ) ( < in5 in7 ) ( < in6 in8 ) ( < in7 in9 ) ( < in8 in10 ) ( < in9 in11 ) ( < in10 in12 ) ( < in11 in13 ) ( < in12 in14 ) ( < in13 in15 ) ( < in14 in16 ) ( < in15 in17 ) ( < in16 in18 ) ( < in17 in19 ) ( < in18 in20 ) ( < in19 in21 ) ( < in20 in22 ) ( < in21 in23 ) ( < in22 in24 ) ( < in23 in25 ) ( < in24 in26 ) ( < in25 in27 ) ( < in26 in28 )))",
        "equivalent": true
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in29 in0)  ( <  in0 in2))  ( <  in1 in3))  ( <  in2 in4))  ( <  in3 in5))  ( <  in4 in6))  ( <  in5 in7))  ( <  in6 in8))  ( <  in7 in9))  ( <  in8 in10))  ( <  in9 in11))  ( <  in10 in12))  ( <  in11 in13))  ( <  in12 in14))  ( <  in13 in15))  ( <  in14 in16))  ( <  in15 in17))  ( <  in16 in18))  ( <  in17 in19))  ( <  in18 in20))  ( <  in19 in21))  ( <  in20 in22))  ( <  in21 in23))  ( <  in22 in24))  ( <  in23 in25))  ( <  in24 in26))  ( <  in25 in27))  ( <  in26 in28))  ( <  in27 in29)))"
          ]
        },
        "predicted": "(assert (and ( < in29 in0 ) ( < in0 in2 ) ( < in1 in3 ) ( < in2 in4 ) ( < in3 in5 ) ( < in4 in6 ) ( < in5 in7 ) ( < in6 in8 ) ( < in7 in9 ) ( < in8 in10 ) ( < in9 in11 ) ( < in10 in12 ) ( < in11 in13 ) ( < in12 in14 ) ( < in13 in15 ) ( < in14 in16 ) ( < in15 in17 ) ( < in16 in18 ) ( < in17 in19 ) ( < in18 in20 ) ( < in19 in21 ) ( < in20 in22 ) ( < in21 in23 ) ( < in22 in24 ) ( < in23 in25 ) ( < in24 in26 ) ( < in25 in27 ) ( < in26 in28 ) ( < in27 in29 )))",
        "equivalent": true
      }
    }
  },
  "WeirdHundred": {
    "succeeded": true,
    "attempts": 1,
    "examples_right": 30,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100)))",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100)))",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100)))",
        "equivalent": true
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100)))",
        "equivalent": true
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100) ( >= in5 100)))",
        "equivalent": true
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100) ( >= in5 100) ( >= in6 100)))",
        "equivalent": true
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100) ( >= in5 100) ( >= in6 100) ( >= in7 100)))",
        "equivalent": true
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100) ( >= in5 100) ( >= in6 100) ( >= in7 100) ( >= in8 100)))",
        "equivalent": true
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100) ( >= in5 100) ( >= in6 100) ( >= in7 100) ( >= in8 100) ( >= in9 100)))",
        "equivalent": true
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100) ( >= in5 100) ( >= in6 100) ( >= in7 100) ( >= in8 100) ( >= in9 100) ( >= in10 100)))",
        "equivalent": true
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100) ( >= in5 100) ( >= in6 100) ( >= in7 100) ( >= in8 100) ( >= in9 100) ( >= in10 100) ( >= in11 100)))",
        "equivalent": true
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100) ( >= in5 100) ( >= in6 100) ( >= in7 100) ( >= in8 100) ( >= in9 100) ( >= in10 100) ( >= in11 100) ( >= in12 100)))",
        "equivalent": true
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100) ( >= in5 100) ( >= in6 100) ( >= in7 100) ( >= in8 100) ( >= in9 100) ( >= in10 100) ( >= in11 100) ( >= in12 100) ( >= in13 100)))",
        "equivalent": true
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100) ( >= in5 100) ( >= in6 100) ( >= in7 100) ( >= in8 100) ( >= in9 100) ( >= in10 100) ( >= in11 100) ( >= in12 100) ( >= in13 100) ( >= in14 100)))",
        "equivalent": true
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100) ( >= in5 100) ( >= in6 100) ( >= in7 100) ( >= in8 100) ( >= in9 100) ( >= in10 100) ( >= in11 100) ( >= in12 100) ( >= in13 100) ( >= in14 100) ( >= in15 100)))",
        "equivalent": true
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100) ( >= in5 100) ( >= in6 100) ( >= in7 100) ( >= in8 100) ( >= in9 100) ( >= in10 100) ( >= in11 100) ( >= in12 100) ( >= in13 100) ( >= in14 100) ( >= in15 100) ( >= in16 100)))",
        "equivalent": true
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100) ( >= in5 100) ( >= in6 100) ( >= in7 100) ( >= in8 100) ( >= in9 100) ( >= in10 100) ( >= in11 100) ( >= in12 100) ( >= in13 100) ( >= in14 100) ( >= in15 100) ( >= in16 100) ( >= in17 100)))",
        "equivalent": true
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100))  ( >=  in18 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100) ( >= in5 100) ( >= in6 100) ( >= in7 100) ( >= in8 100) ( >= in9 100) ( >= in10 100) ( >= in11 100) ( >= in12 100) ( >= in13 100) ( >= in14 100) ( >= in15 100) ( >= in16 100) ( >= in17 100) ( >= in18 100)))",
        "equivalent": true
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100))  ( >=  in18 100))  ( >=  in19 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100) ( >= in5 100) ( >= in6 100) ( >= in7 100) ( >= in8 100) ( >= in9 100) ( >= in10 100) ( >= in11 100) ( >= in12 100) ( >= in13 100) ( >= in14 100) ( >= in15 100) ( >= in16 100) ( >= in17 100) ( >= in18 100) ( >= in19 100)))",
        "equivalent": true
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100))  ( >=  in18 100))  ( >=  in19 100))  ( >=  in20 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100) ( >= in5 100) ( >= in6 100) ( >= in7 100) ( >= in8 100) ( >= in9 100) ( >= in10 100) ( >= in11 100) ( >= in12 100) ( >= in13 100) ( >= in14 100) ( >= in15 100) ( >= in16 100) ( >= in17 100) ( >= in18 100) ( >= in19 100) ( >= in20 100)))",
        "equivalent": true
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100))  ( >=  in18 100))  ( >=  in19 100))  ( >=  in20 100))  ( >=  in21 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100) ( >= in5 100) ( >= in6 100) ( >= in7 100) ( >= in8 100) ( >= in9 100) ( >= in10 100) ( >= in11 100) ( >= in12 100) ( >= in13 100) ( >= in14 100) ( >= in15 100) ( >= in16 100) ( >= in17 100) ( >= in18 100) ( >= in19 100) ( >= in20 100) ( >= in21 100)))",
        "equivalent": true
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100))  ( >=  in18 100))  ( >=  in19 100))  ( >=  in20 100))  ( >=  in21 100))  ( >=  in22 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100) ( >= in5 100) ( >= in6 100) ( >= in7 100) ( >= in8 100) ( >= in9 100) ( >= in10 100) ( >= in11 100) ( >= in12 100) ( >= in13 100) ( >= in14 100) ( >= in15 100) ( >= in16 100) ( >= in17 100) ( >= in18 100) ( >= in19 100) ( >= in20 100) ( >= in21 100) ( >= in22 100)))",
        "equivalent": true
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100))  ( >=  in18 100))  ( >=  in19 100))  ( >=  in20 100))  ( >=  in21 100))  ( >=  in22 100))  ( >=  in23 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100) ( >= in5 100) ( >= in6 100) ( >= in7 100) ( >= in8 100) ( >= in9 100) ( >= in10 100) ( >= in11 100) ( >= in12 100) ( >= in13 100) ( >= in14 100) ( >= in15 100) ( >= in16 100) ( >= in17 100) ( >= in18 100) ( >= in19 100) ( >= in20 100) ( >= in21 100) ( >= in22 100) ( >= in23 100)))",
        "equivalent": true
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100))  ( >=  in18 100))  ( >=  in19 100))  ( >=  in20 100))  ( >=  in21 100))  ( >=  in22 100))  ( >=  in23 100))  ( >=  in24 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100) ( >= in5 100) ( >= in6 100) ( >= in7 100) ( >= in8 100) ( >= in9 100) ( >= in10 100) ( >= in11 100) ( >= in12 100) ( >= in13 100) ( >= in14 100) ( >= in15 100) ( >= in16 100) ( >= in17 100) ( >= in18 100) ( >= in19 100) ( >= in20 100) ( >= in21 100) ( >= in22 100) ( >= in23 100) ( >= in24 100)))",
        "equivalent": true
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100))  ( >=  in18 100))  ( >=  in19 100))  ( >=  in20 100))  ( >=  in21 100))  ( >=  in22 100))  ( >=  in23 100))  ( >=  in24 100))  ( >=  in25 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100) ( >= in5 100) ( >= in6 100) ( >= in7 100) ( >= in8 100) ( >= in9 100) ( >= in10 100) ( >= in11 100) ( >= in12 100) ( >= in13 100) ( >= in14 100) ( >= in15 100) ( >= in16 100) ( >= in17 100) ( >= in18 100) ( >= in19 100) ( >= in20 100) ( >= in21 100) ( >= in22 100) ( >= in23 100) ( >= in24 100) ( >= in25 100)))",
        "equivalent": true
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100))  ( >=  in18 100))  ( >=  in19 100))  ( >=  in20 100))  ( >=  in21 100))  ( >=  in22 100))  ( >=  in23 100))  ( >=  in24 100))  ( >=  in25 100))  ( >=  in26 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100) ( >= in5 100) ( >= in6 100) ( >= in7 100) ( >= in8 100) ( >= in9 100) ( >= in10 100) ( >= in11 100) ( >= in12 100) ( >= in13 100) ( >= in14 100) ( >= in15 100) ( >= in16 100) ( >= in17 100) ( >= in18 100) ( >= in19 100) ( >= in20 100) ( >= in21 100) ( >= in22 100) ( >= in23 100) ( >= in24 100) ( >= in25 100) ( >= in26 100)))",
        "equivalent": true
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100))  ( >=  in18 100))  ( >=  in19 100))  ( >=  in20 100))  ( >=  in21 100))  ( >=  in22 100))  ( >=  in23 100))  ( >=  in24 100))  ( >=  in25 100))  ( >=  in26 100))  ( >=  in27 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100) ( >= in5 100) ( >= in6 100) ( >= in7 100) ( >= in8 100) ( >= in9 100) ( >= in10 100) ( >= in11 100) ( >= in12 100) ( >= in13 100) ( >= in14 100) ( >= in15 100) ( >= in16 100) ( >= in17 100) ( >= in18 100) ( >= in19 100) ( >= in20 100) ( >= in21 100) ( >= in22 100) ( >= in23 100) ( >= in24 100) ( >= in25 100) ( >= in26 100) ( >= in27 100)))",
        "equivalent": true
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100))  ( >=  in18 100))  ( >=  in19 100))  ( >=  in20 100))  ( >=  in21 100))  ( >=  in22 100))  ( >=  in23 100))  ( >=  in24 100))  ( >=  in25 100))  ( >=  in26 100))  ( >=  in27 100))  ( >=  in28 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100) ( >= in5 100) ( >= in6 100) ( >= in7 100) ( >= in8 100) ( >= in9 100) ( >= in10 100) ( >= in11 100) ( >= in12 100) ( >= in13 100) ( >= in14 100) ( >= in15 100) ( >= in16 100) ( >= in17 100) ( >= in18 100) ( >= in19 100) ( >= in20 100) ( >= in21 100) ( >= in22 100) ( >= in23 100) ( >= in24 100) ( >= in25 100) ( >= in26 100) ( >= in27 100) ( >= in28 100)))",
        "equivalent": true
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100))  ( >=  in18 100))  ( >=  in19 100))  ( >=  in20 100))  ( >=  in21 100))  ( >=  in22 100))  ( >=  in23 100))  ( >=  in24 100))  ( >=  in25 100))  ( >=  in26 100))  ( >=  in27 100))  ( >=  in28 100))  ( >=  in29 100)))"
          ]
        },
        "predicted": "(assert (and (not ( = in0 1)) ( = in0 0) ( >= in1 100) ( >= in2 100) ( >= in3 100) ( >= in4 100) ( >= in5 100) ( >= in6 100) ( >= in7 100) ( >= in8 100) ( >= in9 100) ( >= in10 100) ( >= in11 100) ( >= in12 100) ( >= in13 100) ( >= in14 100) ( >= in15 100) ( >= in16 100) ( >= in17 100) ( >= in18 100) ( >= in19 100) ( >= in20 100) ( >= in21 100) ( >= in22 100) ( >= in23 100) ( >= in24 100) ( >= in25 100) ( >= in26 100) ( >= in27 100) ( >= in28 100) ( >= in29 100)))",
        "equivalent": true
      }
    }
  }
}