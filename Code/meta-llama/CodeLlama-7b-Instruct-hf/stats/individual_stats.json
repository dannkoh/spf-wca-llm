{
  "SameLowercase": {
    "succeeded": false,
    "attempts": 10,
    "examples_right": 1,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)"
          ],
          "assertions": [
            "(assert (and  ( >=  in0 97)  ( <=  in0 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))",
        "equivalent": false
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))",
        "equivalent": false
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))",
        "equivalent": false
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))",
        "equivalent": false
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))(assert (and (>= in5 97) (<= in5 122)))",
        "equivalent": false
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))(assert (and (>= in5 97) (<= in5 122)))(assert (and (>= in6 97) (<= in6 122)))",
        "equivalent": false
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))(assert (and (>= in5 97) (<= in5 122)))(assert (and (>= in6 97) (<= in6 122)))(assert (and (>= in7 97) (<= in7 122)))",
        "equivalent": false
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))(assert (and (>= in5 97) (<= in5 122)))(assert (and (>= in6 97) (<= in6 122)))(assert (and (>= in7 97) (<= in7 122)))(assert (and (>= in8 97) (<= in8 122)))",
        "equivalent": false
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))(assert (and (>= in5 97) (<= in5 122)))(assert (and (>= in6 97) (<= in6 122)))(assert (and (>= in7 97) (<= in7 122)))(assert (and (>= in8 97) (<= in8 122)))(assert (and (>= in9 97) (<= in9 122)))",
        "equivalent": false
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))(assert (and (>= in5 97) (<= in5 122)))(assert (and (>= in6 97) (<= in6 122)))(assert (and (>= in7 97) (<= in7 122)))(assert (and (>= in8 97) (<= in8 122)))(assert (and (>= in9 97) (<= in9 122)))(assert (and (>= in10 97) (<= in10 122)))",
        "equivalent": false
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))(assert (and (>= in5 97) (<= in5 122)))(assert (and (>= in6 97) (<= in6 122)))(assert (and (>= in7 97) (<= in7 122)))(assert (and (>= in8 97) (<= in8 122)))(assert (and (>= in9 97) (<= in9 122)))(assert (and (>= in10 97) (<= in10 122)))(assert (and (>= in11 97) (<= in11 122)))",
        "equivalent": false
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))(assert (and (>= in5 97) (<= in5 122)))(assert (and (>= in6 97) (<= in6 122)))(assert (and (>= in7 97) (<= in7 122)))(assert (and (>= in8 97) (<= in8 122)))(assert (and (>= in9 97) (<= in9 122)))(assert (and (>= in10 97) (<= in10 122)))(assert (and (>= in11 97) (<= in11 122)))(assert (and (>= in12 97) (<= in12 122)))",
        "equivalent": false
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))(assert (and (>= in5 97) (<= in5 122)))(assert (and (>= in6 97) (<= in6 122)))(assert (and (>= in7 97) (<= in7 122)))(assert (and (>= in8 97) (<= in8 122)))(assert (and (>= in9 97) (<= in9 122)))(assert (and (>= in10 97) (<= in10 122)))(assert (and (>= in11 97) (<= in11 122)))(assert (and (>= in12 97) (<= in12 122)))(assert (and (>= in13 97) (<= in13 122)))",
        "equivalent": false
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))(assert (and (>= in5 97) (<= in5 122)))(assert (and (>= in6 97) (<= in6 122)))(assert (and (>= in7 97) (<= in7 122)))(assert (and (>= in8 97) (<= in8 122)))(assert (and (>= in9 97) (<= in9 122)))(assert (and (>= in10 97) (<= in10 122)))(assert (and (>= in11 97) (<= in11 122)))(assert (and (>= in12 97) (<= in12 122)))(assert (and (>= in13 97) (<= in13 122)))(assert (and (>= in14 97) (<= in14 122)))",
        "equivalent": false
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))(assert (and (>= in5 97) (<= in5 122)))(assert (and (>= in6 97) (<= in6 122)))(assert (and (>= in7 97) (<= in7 122)))(assert (and (>= in8 97) (<= in8 122)))(assert (and (>= in9 97) (<= in9 122)))(assert (and (>= in10 97) (<= in10 122)))(assert (and (>= in11 97) (<= in11 122)))(assert (and (>= in12 97) (<= in12 122)))(assert (and (>= in13 97) (<= in13 122)))(assert (and (>= in14 97) (<= in14 122)))(assert (and (>= in15 97) (<= in15 122)))",
        "equivalent": false
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))(assert (and (>= in5 97) (<= in5 122)))(assert (and (>= in6 97) (<= in6 122)))(assert (and (>= in7 97) (<= in7 122)))(assert (and (>= in8 97) (<= in8 122)))(assert (and (>= in9 97) (<= in9 122)))(assert (and (>= in10 97) (<= in10 122)))(assert (and (>= in11 97) (<= in11 122)))(assert (and (>= in12 97) (<= in12 122)))(assert (and (>= in13 97) (<= in13 122)))(assert (and (>= in14 97) (<= in14 122)))(assert (and (>= in15 97) (<= in15 122)))(assert (and (>= in16 97) (<= in16 122)))",
        "equivalent": false
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))(assert (and (>= in5 97) (<= in5 122)))(assert (and (>= in6 97) (<= in6 122)))(assert (and (>= in7 97) (<= in7 122)))(assert (and (>= in8 97) (<= in8 122)))(assert (and (>= in9 97) (<= in9 122)))(assert (and (>= in10 97) (<= in10 122)))(assert (and (>= in11 97) (<= in11 122)))(assert (and (>= in12 97) (<= in12 122)))(assert (and (>= in13 97) (<= in13 122)))(assert (and (>= in14 97) (<= in14 122)))(assert (and (>= in15 97) (<= in15 122)))(assert (and (>= in16 97) (<= in16 122)))(assert (and (>= in17 97) (<= in17 122)))",
        "equivalent": false
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))(assert (and (>= in5 97) (<= in5 122)))(assert (and (>= in6 97) (<= in6 122)))(assert (and (>= in7 97) (<= in7 122)))(assert (and (>= in8 97) (<= in8 122)))(assert (and (>= in9 97) (<= in9 122)))(assert (and (>= in10 97) (<= in10 122)))(assert (and (>= in11 97) (<= in11 122)))(assert (and (>= in12 97) (<= in12 122)))(assert (and (>= in13 97) (<= in13 122)))(assert (and (>= in14 97) (<= in14 122)))(assert (and (>= in15 97) (<= in15 122)))(assert (and (>= in16 97) (<= in16 122)))(assert (and (>= in17 97) (<= in17 122)))(assert (and (>= in18 97) (<= in18 122)))",
        "equivalent": false
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))(assert (and (>= in5 97) (<= in5 122)))(assert (and (>= in6 97) (<= in6 122)))(assert (and (>= in7 97) (<= in7 122)))(assert (and (>= in8 97) (<= in8 122)))(assert (and (>= in9 97) (<= in9 122)))(assert (and (>= in10 97) (<= in10 122)))(assert (and (>= in11 97) (<= in11 122)))(assert (and (>= in12 97) (<= in12 122)))(assert (and (>= in13 97) (<= in13 122)))(assert (and (>= in14 97) (<= in14 122)))(assert (and (>= in15 97) (<= in15 122)))(assert (and (>= in16 97) (<= in16 122)))(assert (and (>= in17 97) (<= in17 122)))(assert (and (>= in18 97) (<= in18 122)))(assert (and (>= in19 97) (<= in19 122)))",
        "equivalent": false
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))(assert (and (>= in5 97) (<= in5 122)))(assert (and (>= in6 97) (<= in6 122)))(assert (and (>= in7 97) (<= in7 122)))(assert (and (>= in8 97) (<= in8 122)))(assert (and (>= in9 97) (<= in9 122)))(assert (and (>= in10 97) (<= in10 122)))(assert (and (>= in11 97) (<= in11 122)))(assert (and (>= in12 97) (<= in12 122)))(assert (and (>= in13 97) (<= in13 122)))(assert (and (>= in14 97) (<= in14 122)))(assert (and (>= in15 97) (<= in15 122)))(assert (and (>= in16 97) (<= in16 122)))(assert (and (>= in17 97) (<= in17 122)))(assert (and (>= in18 97) (<= in18 122)))(assert (and (>= in19 97) (<= in19 122)))(assert (and (>= in20 97) (<= in20 122)))",
        "equivalent": false
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))(assert (and (>= in5 97) (<= in5 122)))(assert (and (>= in6 97) (<= in6 122)))(assert (and (>= in7 97) (<= in7 122)))(assert (and (>= in8 97) (<= in8 122)))(assert (and (>= in9 97) (<= in9 122)))(assert (and (>= in10 97) (<= in10 122)))(assert (and (>= in11 97) (<= in11 122)))(assert (and (>= in12 97) (<= in12 122)))(assert (and (>= in13 97) (<= in13 122)))(assert (and (>= in14 97) (<= in14 122)))(assert (and (>= in15 97) (<= in15 122)))(assert (and (>= in16 97) (<= in16 122)))(assert (and (>= in17 97) (<= in17 122)))(assert (and (>= in18 97) (<= in18 122)))(assert (and (>= in19 97) (<= in19 122)))(assert (and (>= in20 97) (<= in20 122)))(assert (and (>= in21 97) (<= in21 122)))",
        "equivalent": false
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122))  ( >=  in22 97))  ( <=  in22 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))(assert (and (>= in5 97) (<= in5 122)))(assert (and (>= in6 97) (<= in6 122)))(assert (and (>= in7 97) (<= in7 122)))(assert (and (>= in8 97) (<= in8 122)))(assert (and (>= in9 97) (<= in9 122)))(assert (and (>= in10 97) (<= in10 122)))(assert (and (>= in11 97) (<= in11 122)))(assert (and (>= in12 97) (<= in12 122)))(assert (and (>= in13 97) (<= in13 122)))(assert (and (>= in14 97) (<= in14 122)))(assert (and (>= in15 97) (<= in15 122)))(assert (and (>= in16 97) (<= in16 122)))(assert (and (>= in17 97) (<= in17 122)))(assert (and (>= in18 97) (<= in18 122)))(assert (and (>= in19 97) (<= in19 122)))(assert (and (>= in20 97) (<= in20 122)))(assert (and (>= in21 97) (<= in21 122)))(assert (and (>= in22 97) (<= in22 122)))",
        "equivalent": false
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122))  ( >=  in22 97))  ( <=  in22 122))  ( >=  in23 97))  ( <=  in23 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))(assert (and (>= in5 97) (<= in5 122)))(assert (and (>= in6 97) (<= in6 122)))(assert (and (>= in7 97) (<= in7 122)))(assert (and (>= in8 97) (<= in8 122)))(assert (and (>= in9 97) (<= in9 122)))(assert (and (>= in10 97) (<= in10 122)))(assert (and (>= in11 97) (<= in11 122)))(assert (and (>= in12 97) (<= in12 122)))(assert (and (>= in13 97) (<= in13 122)))(assert (and (>= in14 97) (<= in14 122)))(assert (and (>= in15 97) (<= in15 122)))(assert (and (>= in16 97) (<= in16 122)))(assert (and (>= in17 97) (<= in17 122)))(assert (and (>= in18 97) (<= in18 122)))(assert (and (>= in19 97) (<= in19 122)))(assert (and (>= in20 97) (<= in20 122)))(assert (and (>= in21 97) (<= in21 122)))(assert (and (>= in22 97) (<= in22 122)))(assert (and (>= in23 97) (<= in23 122)))",
        "equivalent": false
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122))  ( >=  in22 97))  ( <=  in22 122))  ( >=  in23 97))  ( <=  in23 122))  ( >=  in24 97))  ( <=  in24 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))(assert (and (>= in5 97) (<= in5 122)))(assert (and (>= in6 97) (<= in6 122)))(assert (and (>= in7 97) (<= in7 122)))(assert (and (>= in8 97) (<= in8 122)))(assert (and (>= in9 97) (<= in9 122)))(assert (and (>= in10 97) (<= in10 122)))(assert (and (>= in11 97) (<= in11 122)))(assert (and (>= in12 97) (<= in12 122)))(assert (and (>= in13 97) (<= in13 122)))(assert (and (>= in14 97) (<= in14 122)))(assert (and (>= in15 97) (<= in15 122)))(assert (and (>= in16 97) (<= in16 122)))(assert (and (>= in17 97) (<= in17 122)))(assert (and (>= in18 97) (<= in18 122)))(assert (and (>= in19 97) (<= in19 122)))(assert (and (>= in20 97) (<= in20 122)))(assert (and (>= in21 97) (<= in21 122)))(assert (and (>= in22 97) (<= in22 122)))(assert (and (>= in23 97) (<= in23 122)))(assert (and (>= in24 97) (<= in24 122)))",
        "equivalent": false
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122))  ( >=  in22 97))  ( <=  in22 122))  ( >=  in23 97))  ( <=  in23 122))  ( >=  in24 97))  ( <=  in24 122))  ( >=  in25 97))  ( <=  in25 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))(assert (and (>= in5 97) (<= in5 122)))(assert (and (>= in6 97) (<= in6 122)))(assert (and (>= in7 97) (<= in7 122)))(assert (and (>= in8 97) (<= in8 122)))(assert (and (>= in9 97) (<= in9 122)))(assert (and (>= in10 97) (<= in10 122)))(assert (and (>= in11 97) (<= in11 122)))(assert (and (>= in12 97) (<= in12 122)))(assert (and (>= in13 97) (<= in13 122)))(assert (and (>= in14 97) (<= in14 122)))(assert (and (>= in15 97) (<= in15 122)))(assert (and (>= in16 97) (<= in16 122)))(assert (and (>= in17 97) (<= in17 122)))(assert (and (>= in18 97) (<= in18 122)))(assert (and (>= in19 97) (<= in19 122)))(assert (and (>= in20 97) (<= in20 122)))(assert (and (>= in21 97) (<= in21 122)))(assert (and (>= in22 97) (<= in22 122)))(assert (and (>= in23 97) (<= in23 122)))(assert (and (>= in24 97) (<= in24 122)))(assert (and (>= in25 97) (<= in25 122)))",
        "equivalent": false
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122))  ( >=  in22 97))  ( <=  in22 122))  ( >=  in23 97))  ( <=  in23 122))  ( >=  in24 97))  ( <=  in24 122))  ( >=  in25 97))  ( <=  in25 122))  ( >=  in26 97))  ( <=  in26 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))(assert (and (>= in5 97) (<= in5 122)))(assert (and (>= in6 97) (<= in6 122)))(assert (and (>= in7 97) (<= in7 122)))(assert (and (>= in8 97) (<= in8 122)))(assert (and (>= in9 97) (<= in9 122)))(assert (and (>= in10 97) (<= in10 122)))(assert (and (>= in11 97) (<= in11 122)))(assert (and (>= in12 97) (<= in12 122)))(assert (and (>= in13 97) (<= in13 122)))(assert (and (>= in14 97) (<= in14 122)))(assert (and (>= in15 97) (<= in15 122)))(assert (and (>= in16 97) (<= in16 122)))(assert (and (>= in17 97) (<= in17 122)))(assert (and (>= in18 97) (<= in18 122)))(assert (and (>= in19 97) (<= in19 122)))(assert (and (>= in20 97) (<= in20 122)))(assert (and (>= in21 97) (<= in21 122)))(assert (and (>= in22 97) (<= in22 122)))(assert (and (>= in23 97) (<= in23 122)))(assert (and (>= in24 97) (<= in24 122)))(assert (and (>= in25 97) (<= in25 122)))(assert (and (>= in26 97) (<= in26 122)))",
        "equivalent": false
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122))  ( >=  in22 97))  ( <=  in22 122))  ( >=  in23 97))  ( <=  in23 122))  ( >=  in24 97))  ( <=  in24 122))  ( >=  in25 97))  ( <=  in25 122))  ( >=  in26 97))  ( <=  in26 122))  ( >=  in27 97))  ( <=  in27 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))(assert (and (>= in5 97) (<= in5 122)))(assert (and (>= in6 97) (<= in6 122)))(assert (and (>= in7 97) (<= in7 122)))(assert (and (>= in8 97) (<= in8 122)))(assert (and (>= in9 97) (<= in9 122)))(assert (and (>= in10 97) (<= in10 122)))(assert (and (>= in11 97) (<= in11 122)))(assert (and (>= in12 97) (<= in12 122)))(assert (and (>= in13 97) (<= in13 122)))(assert (and (>= in14 97) (<= in14 122)))(assert (and (>= in15 97) (<= in15 122)))(assert (and (>= in16 97) (<= in16 122)))(assert (and (>= in17 97) (<= in17 122)))(assert (and (>= in18 97) (<= in18 122)))(assert (and (>= in19 97) (<= in19 122)))(assert (and (>= in20 97) (<= in20 122)))(assert (and (>= in21 97) (<= in21 122)))(assert (and (>= in22 97) (<= in22 122)))(assert (and (>= in23 97) (<= in23 122)))(assert (and (>= in24 97) (<= in24 122)))(assert (and (>= in25 97) (<= in25 122)))(assert (and (>= in26 97) (<= in26 122)))(assert (and (>= in27 97) (<= in27 122)))",
        "equivalent": false
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122))  ( >=  in22 97))  ( <=  in22 122))  ( >=  in23 97))  ( <=  in23 122))  ( >=  in24 97))  ( <=  in24 122))  ( >=  in25 97))  ( <=  in25 122))  ( >=  in26 97))  ( <=  in26 122))  ( >=  in27 97))  ( <=  in27 122))  ( >=  in28 97))  ( <=  in28 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))(assert (and (>= in5 97) (<= in5 122)))(assert (and (>= in6 97) (<= in6 122)))(assert (and (>= in7 97) (<= in7 122)))(assert (and (>= in8 97) (<= in8 122)))(assert (and (>= in9 97) (<= in9 122)))(assert (and (>= in10 97) (<= in10 122)))(assert (and (>= in11 97) (<= in11 122)))(assert (and (>= in12 97) (<= in12 122)))(assert (and (>= in13 97) (<= in13 122)))(assert (and (>= in14 97) (<= in14 122)))(assert (and (>= in15 97) (<= in15 122)))(assert (and (>= in16 97) (<= in16 122)))(assert (and (>= in17 97) (<= in17 122)))(assert (and (>= in18 97) (<= in18 122)))(assert (and (>= in19 97) (<= in19 122)))(assert (and (>= in20 97) (<= in20 122)))(assert (and (>= in21 97) (<= in21 122)))(assert (and (>= in22 97) (<= in22 122)))(assert (and (>= in23 97) (<= in23 122)))(assert (and (>= in24 97) (<= in24 122)))(assert (and (>= in25 97) (<= in25 122)))(assert (and (>= in26 97) (<= in26 122)))(assert (and (>= in27 97) (<= in27 122)))(assert (and (>= in28 97) (<= in28 122)))",
        "equivalent": false
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122))  ( >=  in22 97))  ( <=  in22 122))  ( >=  in23 97))  ( <=  in23 122))  ( >=  in24 97))  ( <=  in24 122))  ( >=  in25 97))  ( <=  in25 122))  ( >=  in26 97))  ( <=  in26 122))  ( >=  in27 97))  ( <=  in27 122))  ( >=  in28 97))  ( <=  in28 122))  ( >=  in29 97))  ( <=  in29 122)))"
          ]
        },
        "predicted": "(assert (and (>= in0 97) (<= in0 122)))(assert (and (>= in1 97) (<= in1 122)))(assert (and (>= in2 97) (<= in2 122)))(assert (and (>= in3 97) (<= in3 122)))(assert (and (>= in4 97) (<= in4 122)))(assert (and (>= in5 97) (<= in5 122)))(assert (and (>= in6 97) (<= in6 122)))(assert (and (>= in7 97) (<= in7 122)))(assert (and (>= in8 97) (<= in8 122)))(assert (and (>= in9 97) (<= in9 122)))(assert (and (>= in10 97) (<= in10 122)))(assert (and (>= in11 97) (<= in11 122)))(assert (and (>= in12 97) (<= in12 122)))(assert (and (>= in13 97) (<= in13 122)))(assert (and (>= in14 97) (<= in14 122)))(assert (and (>= in15 97) (<= in15 122)))(assert (and (>= in16 97) (<= in16 122)))(assert (and (>= in17 97) (<= in17 122)))(assert (and (>= in18 97) (<= in18 122)))(assert (and (>= in19 97) (<= in19 122)))(assert (and (>= in20 97) (<= in20 122)))(assert (and (>= in21 97) (<= in21 122)))(assert (and (>= in22 97) (<= in22 122)))(assert (and (>= in23 97) (<= in23 122)))(assert (and (>= in24 97) (<= in24 122)))(assert (and (>= in25 97) (<= in25 122)))(assert (and (>= in26 97) (<= in26 122)))(assert (and (>= in27 97) (<= in27 122)))(assert (and (>= in28 97) (<= in28 122)))(assert (and (>= in29 97) (<= in29 122)))",
        "equivalent": false
      }
    }
  },
  "SameOnlyThird": {
    "succeeded": false,
    "attempts": 10,
    "examples_right": 8,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "2": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert true)",
        "equivalent": false
      }
    }
  },
  "SimpleEveryThird": {
    "succeeded": false,
    "attempts": 10,
    "examples_right": 0,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (< in0 0))",
        "equivalent": false
      },
      "2": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))",
        "equivalent": false
      },
      "3": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))",
        "equivalent": false
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert  ( =  in3 0))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))",
        "equivalent": false
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert  ( =  in3 0))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))",
        "equivalent": false
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert  ( =  in3 0))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))\n(assert (< in5 0))",
        "equivalent": false
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and  ( =  in3 0)  ( =  in6 0)))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))\n(assert (< in5 0))\n(assert (< in6 0))",
        "equivalent": false
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and  ( =  in3 0)  ( =  in6 0)))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))\n(assert (< in5 0))\n(assert (< in6 0))\n(assert (< in7 0))",
        "equivalent": false
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and  ( =  in3 0)  ( =  in6 0)))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))\n(assert (< in5 0))\n(assert (< in6 0))\n(assert (< in7 0))\n(assert (< in8 0))",
        "equivalent": false
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in9 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0)))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))\n(assert (< in5 0))\n(assert (< in6 0))\n(assert (< in7 0))\n(assert (< in8 0))\n(assert (< in9 0))",
        "equivalent": false
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in9 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0)))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))\n(assert (< in5 0))\n(assert (< in6 0))\n(assert (< in7 0))\n(assert (< in8 0))\n(assert (< in9 0))\n(assert (< in10 0))",
        "equivalent": false
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in9 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0)))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))\n(assert (< in5 0))\n(assert (< in6 0))\n(assert (< in7 0))\n(assert (< in8 0))\n(assert (< in9 0))\n(assert (< in10 0))\n(assert (< in11 0))",
        "equivalent": false
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0)))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))\n(assert (< in5 0))\n(assert (< in6 0))\n(assert (< in7 0))\n(assert (< in8 0))\n(assert (< in9 0))\n(assert (< in10 0))\n(assert (< in11 0))\n(assert (< in12 0))",
        "equivalent": false
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0)))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))\n(assert (< in5 0))\n(assert (< in6 0))\n(assert (< in7 0))\n(assert (< in8 0))\n(assert (< in9 0))\n(assert (< in10 0))\n(assert (< in11 0))\n(assert (< in12 0))\n(assert (< in13 0))",
        "equivalent": false
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0)))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))\n(assert (< in5 0))\n(assert (< in6 0))\n(assert (< in7 0))\n(assert (< in8 0))\n(assert (< in9 0))\n(assert (< in10 0))\n(assert (< in11 0))\n(assert (< in12 0))\n(assert (< in13 0))\n(assert (< in14 0))",
        "equivalent": false
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0)))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))\n(assert (< in5 0))\n(assert (< in6 0))\n(assert (< in7 0))\n(assert (< in8 0))\n(assert (< in9 0))\n(assert (< in10 0))\n(assert (< in11 0))\n(assert (< in12 0))\n(assert (< in13 0))\n(assert (< in14 0))\n(assert (< in15 0))",
        "equivalent": false
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0)))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))\n(assert (< in5 0))\n(assert (< in6 0))\n(assert (< in7 0))\n(assert (< in8 0))\n(assert (< in9 0))\n(assert (< in10 0))\n(assert (< in11 0))\n(assert (< in12 0))\n(assert (< in13 0))\n(assert (< in14 0))\n(assert (< in15 0))\n(assert (< in16 0))",
        "equivalent": false
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0)))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))\n(assert (< in5 0))\n(assert (< in6 0))\n(assert (< in7 0))\n(assert (< in8 0))\n(assert (< in9 0))\n(assert (< in10 0))\n(assert (< in11 0))\n(assert (< in12 0))\n(assert (< in13 0))\n(assert (< in14 0))\n(assert (< in15 0))\n(assert (< in16 0))\n(assert (< in17 0))",
        "equivalent": false
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in18 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0))  ( =  in18 0)))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))\n(assert (< in5 0))\n(assert (< in6 0))\n(assert (< in7 0))\n(assert (< in8 0))\n(assert (< in9 0))\n(assert (< in10 0))\n(assert (< in11 0))\n(assert (< in12 0))\n(assert (< in13 0))\n(assert (< in14 0))\n(assert (< in15 0))\n(assert (< in16 0))\n(assert (< in17 0))\n(assert (< in18 0))",
        "equivalent": false
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in18 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0))  ( =  in18 0)))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))\n(assert (< in5 0))\n(assert (< in6 0))\n(assert (< in7 0))\n(assert (< in8 0))\n(assert (< in9 0))\n(assert (< in10 0))\n(assert (< in11 0))\n(assert (< in12 0))\n(assert (< in13 0))\n(assert (< in14 0))\n(assert (< in15 0))\n(assert (< in16 0))\n(assert (< in17 0))\n(assert (< in18 0))\n(assert (< in19 0))",
        "equivalent": false
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in18 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0))  ( =  in18 0)))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))\n(assert (< in5 0))\n(assert (< in6 0))\n(assert (< in7 0))\n(assert (< in8 0))\n(assert (< in9 0))\n(assert (< in10 0))\n(assert (< in11 0))\n(assert (< in12 0))\n(assert (< in13 0))\n(assert (< in14 0))\n(assert (< in15 0))\n(assert (< in16 0))\n(assert (< in17 0))\n(assert (< in18 0))\n(assert (< in19 0))\n(assert (< in20 0))",
        "equivalent": false
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in21 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in18 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0))  ( =  in18 0))  ( =  in21 0)))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))\n(assert (< in5 0))\n(assert (< in6 0))\n(assert (< in7 0))\n(assert (< in8 0))\n(assert (< in9 0))\n(assert (< in10 0))\n(assert (< in11 0))\n(assert (< in12 0))\n(assert (< in13 0))\n(assert (< in14 0))\n(assert (< in15 0))\n(assert (< in16 0))\n(assert (< in17 0))\n(assert (< in18 0))\n(assert (< in19 0))\n(assert (< in20 0))\n(assert (< in21 0))",
        "equivalent": false
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in21 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in18 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0))  ( =  in18 0))  ( =  in21 0)))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))\n(assert (< in5 0))\n(assert (< in6 0))\n(assert (< in7 0))\n(assert (< in8 0))\n(assert (< in9 0))\n(assert (< in10 0))\n(assert (< in11 0))\n(assert (< in12 0))\n(assert (< in13 0))\n(assert (< in14 0))\n(assert (< in15 0))\n(assert (< in16 0))\n(assert (< in17 0))\n(assert (< in18 0))\n(assert (< in19 0))\n(assert (< in20 0))\n(assert (< in21 0))\n(assert (< in22 0))",
        "equivalent": false
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in21 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in18 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0))  ( =  in18 0))  ( =  in21 0)))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))\n(assert (< in5 0))\n(assert (< in6 0))\n(assert (< in7 0))\n(assert (< in8 0))\n(assert (< in9 0))\n(assert (< in10 0))\n(assert (< in11 0))\n(assert (< in12 0))\n(assert (< in13 0))\n(assert (< in14 0))\n(assert (< in15 0))\n(assert (< in16 0))\n(assert (< in17 0))\n(assert (< in18 0))\n(assert (< in19 0))\n(assert (< in20 0))\n(assert (< in21 0))\n(assert (< in22 0))\n(assert (< in23 0))",
        "equivalent": false
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in21 Int)",
            "(declare-const in9 Int)",
            "(declare-const in24 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in18 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0))  ( =  in18 0))  ( =  in21 0))  ( =  in24 0)))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))\n(assert (< in5 0))\n(assert (< in6 0))\n(assert (< in7 0))\n(assert (< in8 0))\n(assert (< in9 0))\n(assert (< in10 0))\n(assert (< in11 0))\n(assert (< in12 0))\n(assert (< in13 0))\n(assert (< in14 0))\n(assert (< in15 0))\n(assert (< in16 0))\n(assert (< in17 0))\n(assert (< in18 0))\n(assert (< in19 0))\n(assert (< in20 0))\n(assert (< in21 0))\n(assert (< in22 0))\n(assert (< in23 0))\n(assert (< in24 0))",
        "equivalent": false
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in21 Int)",
            "(declare-const in9 Int)",
            "(declare-const in24 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in18 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0))  ( =  in18 0))  ( =  in21 0))  ( =  in24 0)))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))\n(assert (< in5 0))\n(assert (< in6 0))\n(assert (< in7 0))\n(assert (< in8 0))\n(assert (< in9 0))\n(assert (< in10 0))\n(assert (< in11 0))\n(assert (< in12 0))\n(assert (< in13 0))\n(assert (< in14 0))\n(assert (< in15 0))\n(assert (< in16 0))\n(assert (< in17 0))\n(assert (< in18 0))\n(assert (< in19 0))\n(assert (< in20 0))\n(assert (< in21 0))\n(assert (< in22 0))\n(assert (< in23 0))\n(assert (< in24 0))\n(assert (< in25 0))",
        "equivalent": false
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in21 Int)",
            "(declare-const in9 Int)",
            "(declare-const in24 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in18 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0))  ( =  in18 0))  ( =  in21 0))  ( =  in24 0)))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))\n(assert (< in5 0))\n(assert (< in6 0))\n(assert (< in7 0))\n(assert (< in8 0))\n(assert (< in9 0))\n(assert (< in10 0))\n(assert (< in11 0))\n(assert (< in12 0))\n(assert (< in13 0))\n(assert (< in14 0))\n(assert (< in15 0))\n(assert (< in16 0))\n(assert (< in17 0))\n(assert (< in18 0))\n(assert (< in19 0))\n(assert (< in20 0))\n(assert (< in21 0))\n(assert (< in22 0))\n(assert (< in23 0))\n(assert (< in24 0))\n(assert (< in25 0))\n(assert (< in26 0))",
        "equivalent": false
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in21 Int)",
            "(declare-const in9 Int)",
            "(declare-const in24 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in27 Int)",
            "(declare-const in18 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0))  ( =  in18 0))  ( =  in21 0))  ( =  in24 0))  ( =  in27 0)))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))\n(assert (< in5 0))\n(assert (< in6 0))\n(assert (< in7 0))\n(assert (< in8 0))\n(assert (< in9 0))\n(assert (< in10 0))\n(assert (< in11 0))\n(assert (< in12 0))\n(assert (< in13 0))\n(assert (< in14 0))\n(assert (< in15 0))\n(assert (< in16 0))\n(assert (< in17 0))\n(assert (< in18 0))\n(assert (< in19 0))\n(assert (< in20 0))\n(assert (< in21 0))\n(assert (< in22 0))\n(assert (< in23 0))\n(assert (< in24 0))\n(assert (< in25 0))\n(assert (< in26 0))\n(assert (< in27 0))",
        "equivalent": false
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in21 Int)",
            "(declare-const in9 Int)",
            "(declare-const in24 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in27 Int)",
            "(declare-const in18 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0))  ( =  in18 0))  ( =  in21 0))  ( =  in24 0))  ( =  in27 0)))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))\n(assert (< in5 0))\n(assert (< in6 0))\n(assert (< in7 0))\n(assert (< in8 0))\n(assert (< in9 0))\n(assert (< in10 0))\n(assert (< in11 0))\n(assert (< in12 0))\n(assert (< in13 0))\n(assert (< in14 0))\n(assert (< in15 0))\n(assert (< in16 0))\n(assert (< in17 0))\n(assert (< in18 0))\n(assert (< in19 0))\n(assert (< in20 0))\n(assert (< in21 0))\n(assert (< in22 0))\n(assert (< in23 0))\n(assert (< in24 0))\n(assert (< in25 0))\n(assert (< in26 0))\n(assert (< in27 0))\n(assert (< in28 0))",
        "equivalent": false
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in21 Int)",
            "(declare-const in9 Int)",
            "(declare-const in24 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in27 Int)",
            "(declare-const in18 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( =  in3 0)  ( =  in6 0))  ( =  in9 0))  ( =  in12 0))  ( =  in15 0))  ( =  in18 0))  ( =  in21 0))  ( =  in24 0))  ( =  in27 0)))"
          ]
        },
        "predicted": "(assert (< in0 0))\n(assert (< in1 0))\n(assert (< in2 0))\n(assert (< in3 0))\n(assert (< in4 0))\n(assert (< in5 0))\n(assert (< in6 0))\n(assert (< in7 0))\n(assert (< in8 0))\n(assert (< in9 0))\n(assert (< in10 0))\n(assert (< in11 0))\n(assert (< in12 0))\n(assert (< in13 0))\n(assert (< in14 0))\n(assert (< in15 0))\n(assert (< in16 0))\n(assert (< in17 0))\n(assert (< in18 0))\n(assert (< in19 0))\n(assert (< in20 0))\n(assert (< in21 0))\n(assert (< in22 0))\n(assert (< in23 0))\n(assert (< in24 0))\n(assert (< in25 0))\n(assert (< in26 0))\n(assert (< in27 0))\n(assert (< in28 0))\n(assert (< in29 0))",
        "equivalent": false
      }
    }
  },
  "SimpleSignFlip": {
    "succeeded": false,
    "attempts": 10,
    "examples_right": 0,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert  ( =  in0 in1))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and  ( =  in0 in1)  ( <  in1 in2)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17))  ( <  in17 in18)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17))  ( <  in17 in18))  ( =  in18 in19)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17))  ( <  in17 in18))  ( =  in18 in19))  ( <  in19 in20)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17))  ( <  in17 in18))  ( =  in18 in19))  ( <  in19 in20))  ( =  in20 in21)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17))  ( <  in17 in18))  ( =  in18 in19))  ( <  in19 in20))  ( =  in20 in21))  ( <  in21 in22)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17))  ( <  in17 in18))  ( =  in18 in19))  ( <  in19 in20))  ( =  in20 in21))  ( <  in21 in22))  ( =  in22 in23)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17))  ( <  in17 in18))  ( =  in18 in19))  ( <  in19 in20))  ( =  in20 in21))  ( <  in21 in22))  ( =  in22 in23))  ( <  in23 in24)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17))  ( <  in17 in18))  ( =  in18 in19))  ( <  in19 in20))  ( =  in20 in21))  ( <  in21 in22))  ( =  in22 in23))  ( <  in23 in24))  ( =  in24 in25)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17))  ( <  in17 in18))  ( =  in18 in19))  ( <  in19 in20))  ( =  in20 in21))  ( <  in21 in22))  ( =  in22 in23))  ( <  in23 in24))  ( =  in24 in25))  ( <  in25 in26)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17))  ( <  in17 in18))  ( =  in18 in19))  ( <  in19 in20))  ( =  in20 in21))  ( <  in21 in22))  ( =  in22 in23))  ( <  in23 in24))  ( =  in24 in25))  ( <  in25 in26))  ( =  in26 in27)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17))  ( <  in17 in18))  ( =  in18 in19))  ( <  in19 in20))  ( =  in20 in21))  ( <  in21 in22))  ( =  in22 in23))  ( <  in23 in24))  ( =  in24 in25))  ( <  in25 in26))  ( =  in26 in27))  ( <  in27 in28)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( <  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( =  in16 in17))  ( <  in17 in18))  ( =  in18 in19))  ( <  in19 in20))  ( =  in20 in21))  ( <  in21 in22))  ( =  in22 in23))  ( <  in23 in24))  ( =  in24 in25))  ( <  in25 in26))  ( =  in26 in27))  ( <  in27 in28))  ( =  in28 in29)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select in x) (select in y)) (not (= x y))))(assert (and (= (select in 0) (select in N-1))))",
        "equivalent": false
      }
    }
  },
  "WeirdTimes": {
    "succeeded": false,
    "attempts": 10,
    "examples_right": 1,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert  ( =  in1 ( *  in0 2)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22)))  ( =  in22 ( *  in0 23))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22)))  ( =  in22 ( *  in0 23)))  ( =  in23 ( *  in0 24))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22)))  ( =  in22 ( *  in0 23)))  ( =  in23 ( *  in0 24)))  ( =  in24 ( *  in0 25))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22)))  ( =  in22 ( *  in0 23)))  ( =  in23 ( *  in0 24)))  ( =  in24 ( *  in0 25)))  ( =  in25 ( *  in0 26))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22)))  ( =  in22 ( *  in0 23)))  ( =  in23 ( *  in0 24)))  ( =  in24 ( *  in0 25)))  ( =  in25 ( *  in0 26)))  ( =  in26 ( *  in0 27))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22)))  ( =  in22 ( *  in0 23)))  ( =  in23 ( *  in0 24)))  ( =  in24 ( *  in0 25)))  ( =  in25 ( *  in0 26)))  ( =  in26 ( *  in0 27)))  ( =  in27 ( *  in0 28))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22)))  ( =  in22 ( *  in0 23)))  ( =  in23 ( *  in0 24)))  ( =  in24 ( *  in0 25)))  ( =  in25 ( *  in0 26)))  ( =  in26 ( *  in0 27)))  ( =  in27 ( *  in0 28)))  ( =  in28 ( *  in0 29))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22)))  ( =  in22 ( *  in0 23)))  ( =  in23 ( *  in0 24)))  ( =  in24 ( *  in0 25)))  ( =  in25 ( *  in0 26)))  ( =  in26 ( *  in0 27)))  ( =  in27 ( *  in0 28)))  ( =  in28 ( *  in0 29)))  ( =  in29 ( *  in0 30))))"
          ]
        },
        "predicted": "",
        "equivalent": false
      }
    }
  },
  "BadgerPassword": {
    "succeeded": false,
    "attempts": 10,
    "examples_right": 0,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op5 in0 in1 in2 in3... in0))",
        "equivalent": false
      },
      "2": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op5 in0 in1 in2 in3... in1))",
        "equivalent": false
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 64)) (not ( = in0 35))) (not ( = in0 36)))  ( =  in0 37)) (not ( = in1 64))) (not ( = in1 35))) (not ( = in1 36)))  ( =  in1 37)) (not ( = in2 64))) (not ( = in2 35))) (not ( = in2 36)))  ( =  in2 37)))"
          ]
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op5 in0 in1 in2 in3... in2))",
        "equivalent": false
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 64)) (not ( = in0 35))) (not ( = in0 36)))  ( =  in0 37)) (not ( = in1 64))) (not ( = in1 35))) (not ( = in1 36)))  ( =  in1 37)) (not ( = in2 64))) (not ( = in2 35))) (not ( = in2 36)))  ( =  in2 37)) (not ( = in3 64))) (not ( = in3 35))) (not ( = in3 36)))  ( =  in3 37)))"
          ]
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op5 in0 in1 in2 in3... in3))",
        "equivalent": false
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 64)) (not ( = in0 35))) (not ( = in0 36)))  ( =  in0 37)) (not ( = in1 64))) (not ( = in1 35))) (not ( = in1 36)))  ( =  in1 37)) (not ( = in2 64))) (not ( = in2 35))) (not ( = in2 36)))  ( =  in2 37)) (not ( = in3 64))) (not ( = in3 35))) (not ( = in3 36)))  ( =  in3 37)) (not ( = in4 64))) (not ( = in4 35))) (not ( = in4 36)))  ( =  in4 37)))"
          ]
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op5 in0 in1 in2 in3... in4))",
        "equivalent": false
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 64)) (not ( = in0 35))) (not ( = in0 36)))  ( =  in0 37)) (not ( = in1 64))) (not ( = in1 35))) (not ( = in1 36)))  ( =  in1 37)) (not ( = in2 64))) (not ( = in2 35))) (not ( = in2 36)))  ( =  in2 37)) (not ( = in3 64))) (not ( = in3 35))) (not ( = in3 36)))  ( =  in3 37)) (not ( = in4 64))) (not ( = in4 35))) (not ( = in4 36)))  ( =  in4 37)) (not ( = in5 64))) (not ( = in5 35))) (not ( = in5 36)))  ( =  in5 37)))"
          ]
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op1 in5 digit)) (assert (and (op2 in5 lowercase)) (assert (and (op3 in5 uppercase)) (assert (and (op4 in5 special_char)) (assert (and (op5 in0 in1 in2 in3... in5))",
        "equivalent": false
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 64)) (not ( = in0 35))) (not ( = in0 36)))  ( =  in0 37)) (not ( = in1 64))) (not ( = in1 35))) (not ( = in1 36)))  ( =  in1 37)) (not ( = in2 64))) (not ( = in2 35))) (not ( = in2 36)))  ( =  in2 37)) (not ( = in3 64))) (not ( = in3 35))) (not ( = in3 36)))  ( =  in3 37)) (not ( = in4 64))) (not ( = in4 35))) (not ( = in4 36)))  ( =  in4 37)) (not ( = in5 64))) (not ( = in5 35))) (not ( = in5 36)))  ( =  in5 37)) (not ( = in6 64))) (not ( = in6 35))) (not ( = in6 36)))  ( =  in6 37)))"
          ]
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op1 in5 digit)) (assert (and (op2 in5 lowercase)) (assert (and (op3 in5 uppercase)) (assert (and (op4 in5 special_char)) (assert (and (op1 in6 digit)) (assert (and (op2 in6 lowercase)) (assert (and (op3 in6 uppercase)) (assert (and (op4 in6 special_char)) (assert (and (op5 in0 in1 in2 in3... in6))",
        "equivalent": false
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 64)) (not ( = in0 35))) (not ( = in0 36)))  ( =  in0 37)) (not ( = in1 64))) (not ( = in1 35))) (not ( = in1 36)))  ( =  in1 37)) (not ( = in2 64))) (not ( = in2 35))) (not ( = in2 36)))  ( =  in2 37)) (not ( = in3 64))) (not ( = in3 35))) (not ( = in3 36)))  ( =  in3 37)) (not ( = in4 64))) (not ( = in4 35))) (not ( = in4 36)))  ( =  in4 37)) (not ( = in5 64))) (not ( = in5 35))) (not ( = in5 36)))  ( =  in5 37)) (not ( = in6 64))) (not ( = in6 35))) (not ( = in6 36)))  ( =  in6 37)) (not ( = in7 64))) (not ( = in7 35))) (not ( = in7 36)))  ( =  in7 37)))"
          ]
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op1 in5 digit)) (assert (and (op2 in5 lowercase)) (assert (and (op3 in5 uppercase)) (assert (and (op4 in5 special_char)) (assert (and (op1 in6 digit)) (assert (and (op2 in6 lowercase)) (assert (and (op3 in6 uppercase)) (assert (and (op4 in6 special_char)) (assert (and (op1 in7 digit)) (assert (and (op2 in7 lowercase)) (assert (and (op3 in7 uppercase)) (assert (and (op4 in7 special_char)) (assert (and (op5 in0 in1 in2 in3... in7))",
        "equivalent": false
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 64)) (not ( = in0 35))) (not ( = in0 36)))  ( =  in0 37)) (not ( = in1 64))) (not ( = in1 35))) (not ( = in1 36)))  ( =  in1 37)) (not ( = in2 64))) (not ( = in2 35))) (not ( = in2 36)))  ( =  in2 37)) (not ( = in3 64))) (not ( = in3 35))) (not ( = in3 36)))  ( =  in3 37)) (not ( = in4 64))) (not ( = in4 35))) (not ( = in4 36)))  ( =  in4 37)) (not ( = in5 64))) (not ( = in5 35))) (not ( = in5 36)))  ( =  in5 37)) (not ( = in6 64))) (not ( = in6 35))) (not ( = in6 36)))  ( =  in6 37)) (not ( = in7 64))) (not ( = in7 35))) (not ( = in7 36)))  ( =  in7 37)) (not ( = in8 64))) (not ( = in8 35))) (not ( = in8 36)))  ( =  in8 37)))"
          ]
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op1 in5 digit)) (assert (and (op2 in5 lowercase)) (assert (and (op3 in5 uppercase)) (assert (and (op4 in5 special_char)) (assert (and (op1 in6 digit)) (assert (and (op2 in6 lowercase)) (assert (and (op3 in6 uppercase)) (assert (and (op4 in6 special_char)) (assert (and (op1 in7 digit)) (assert (and (op2 in7 lowercase)) (assert (and (op3 in7 uppercase)) (assert (and (op4 in7 special_char)) (assert (and (op1 in8 digit)) (assert (and (op2 in8 lowercase)) (assert (and (op3 in8 uppercase)) (assert (and (op4 in8 special_char)) (assert (and (op5 in0 in1 in2 in3... in8))",
        "equivalent": false
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 64)) (not ( = in0 35))) (not ( = in0 36)))  ( =  in0 37)) (not ( = in1 64))) (not ( = in1 35))) (not ( = in1 36)))  ( =  in1 37)) (not ( = in2 64))) (not ( = in2 35))) (not ( = in2 36)))  ( =  in2 37)) (not ( = in3 64))) (not ( = in3 35))) (not ( = in3 36)))  ( =  in3 37)) (not ( = in4 64))) (not ( = in4 35))) (not ( = in4 36)))  ( =  in4 37)) (not ( = in5 64))) (not ( = in5 35))) (not ( = in5 36)))  ( =  in5 37)) (not ( = in6 64))) (not ( = in6 35))) (not ( = in6 36)))  ( =  in6 37)) (not ( = in7 64))) (not ( = in7 35))) (not ( = in7 36)))  ( =  in7 37)) (not ( = in8 64))) (not ( = in8 35))) (not ( = in8 36)))  ( =  in8 37)) (not ( = in9 64))) (not ( = in9 35))) (not ( = in9 36)))  ( =  in9 37)))"
          ]
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op1 in5 digit)) (assert (and (op2 in5 lowercase)) (assert (and (op3 in5 uppercase)) (assert (and (op4 in5 special_char)) (assert (and (op1 in6 digit)) (assert (and (op2 in6 lowercase)) (assert (and (op3 in6 uppercase)) (assert (and (op4 in6 special_char)) (assert (and (op1 in7 digit)) (assert (and (op2 in7 lowercase)) (assert (and (op3 in7 uppercase)) (assert (and (op4 in7 special_char)) (assert (and (op1 in8 digit)) (assert (and (op2 in8 lowercase)) (assert (and (op3 in8 uppercase)) (assert (and (op4 in8 special_char)) (assert (and (op1 in9 digit)) (assert (and (op2 in9 lowercase)) (assert (and (op3 in9 uppercase)) (assert (and (op4 in9 special_char)) (assert (and (op5 in0 in1 in2 in3... in9))",
        "equivalent": false
      },
      "11": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op1 in5 digit)) (assert (and (op2 in5 lowercase)) (assert (and (op3 in5 uppercase)) (assert (and (op4 in5 special_char)) (assert (and (op1 in6 digit)) (assert (and (op2 in6 lowercase)) (assert (and (op3 in6 uppercase)) (assert (and (op4 in6 special_char)) (assert (and (op1 in7 digit)) (assert (and (op2 in7 lowercase)) (assert (and (op3 in7 uppercase)) (assert (and (op4 in7 special_char)) (assert (and (op1 in8 digit)) (assert (and (op2 in8 lowercase)) (assert (and (op3 in8 uppercase)) (assert (and (op4 in8 special_char)) (assert (and (op1 in9 digit)) (assert (and (op2 in9 lowercase)) (assert (and (op3 in9 uppercase)) (assert (and (op4 in9 special_char)) (assert (and (op1 in10 digit)) (assert (and (op2 in10 lowercase)) (assert (and (op3 in10 uppercase)) (assert (and (op4 in10 special_char)) (assert (and (op5 in0 in1 in2 in3... in10))",
        "equivalent": false
      },
      "12": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op1 in5 digit)) (assert (and (op2 in5 lowercase)) (assert (and (op3 in5 uppercase)) (assert (and (op4 in5 special_char)) (assert (and (op1 in6 digit)) (assert (and (op2 in6 lowercase)) (assert (and (op3 in6 uppercase)) (assert (and (op4 in6 special_char)) (assert (and (op1 in7 digit)) (assert (and (op2 in7 lowercase)) (assert (and (op3 in7 uppercase)) (assert (and (op4 in7 special_char)) (assert (and (op1 in8 digit)) (assert (and (op2 in8 lowercase)) (assert (and (op3 in8 uppercase)) (assert (and (op4 in8 special_char)) (assert (and (op1 in9 digit)) (assert (and (op2 in9 lowercase)) (assert (and (op3 in9 uppercase)) (assert (and (op4 in9 special_char)) (assert (and (op1 in10 digit)) (assert (and (op2 in10 lowercase)) (assert (and (op3 in10 uppercase)) (assert (and (op4 in10 special_char)) (assert (and (op1 in11 digit)) (assert (and (op2 in11 lowercase)) (assert (and (op3 in11 uppercase)) (assert (and (op4 in11 special_char)) (assert (and (op5 in0 in1 in2 in3... in11))",
        "equivalent": false
      },
      "13": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op1 in5 digit)) (assert (and (op2 in5 lowercase)) (assert (and (op3 in5 uppercase)) (assert (and (op4 in5 special_char)) (assert (and (op1 in6 digit)) (assert (and (op2 in6 lowercase)) (assert (and (op3 in6 uppercase)) (assert (and (op4 in6 special_char)) (assert (and (op1 in7 digit)) (assert (and (op2 in7 lowercase)) (assert (and (op3 in7 uppercase)) (assert (and (op4 in7 special_char)) (assert (and (op1 in8 digit)) (assert (and (op2 in8 lowercase)) (assert (and (op3 in8 uppercase)) (assert (and (op4 in8 special_char)) (assert (and (op1 in9 digit)) (assert (and (op2 in9 lowercase)) (assert (and (op3 in9 uppercase)) (assert (and (op4 in9 special_char)) (assert (and (op1 in10 digit)) (assert (and (op2 in10 lowercase)) (assert (and (op3 in10 uppercase)) (assert (and (op4 in10 special_char)) (assert (and (op1 in11 digit)) (assert (and (op2 in11 lowercase)) (assert (and (op3 in11 uppercase)) (assert (and (op4 in11 special_char)) (assert (and (op1 in12 digit)) (assert (and (op2 in12 lowercase)) (assert (and (op3 in12 uppercase)) (assert (and (op4 in12 special_char)) (assert (and (op5 in0 in1 in2 in3... in12))",
        "equivalent": false
      },
      "14": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op1 in5 digit)) (assert (and (op2 in5 lowercase)) (assert (and (op3 in5 uppercase)) (assert (and (op4 in5 special_char)) (assert (and (op1 in6 digit)) (assert (and (op2 in6 lowercase)) (assert (and (op3 in6 uppercase)) (assert (and (op4 in6 special_char)) (assert (and (op1 in7 digit)) (assert (and (op2 in7 lowercase)) (assert (and (op3 in7 uppercase)) (assert (and (op4 in7 special_char)) (assert (and (op1 in8 digit)) (assert (and (op2 in8 lowercase)) (assert (and (op3 in8 uppercase)) (assert (and (op4 in8 special_char)) (assert (and (op1 in9 digit)) (assert (and (op2 in9 lowercase)) (assert (and (op3 in9 uppercase)) (assert (and (op4 in9 special_char)) (assert (and (op1 in10 digit)) (assert (and (op2 in10 lowercase)) (assert (and (op3 in10 uppercase)) (assert (and (op4 in10 special_char)) (assert (and (op1 in11 digit)) (assert (and (op2 in11 lowercase)) (assert (and (op3 in11 uppercase)) (assert (and (op4 in11 special_char)) (assert (and (op1 in12 digit)) (assert (and (op2 in12 lowercase)) (assert (and (op3 in12 uppercase)) (assert (and (op4 in12 special_char)) (assert (and (op1 in13 digit)) (assert (and (op2 in13 lowercase)) (assert (and (op3 in13 uppercase)) (assert (and (op4 in13 special_char)) (assert (and (op5 in0 in1 in2 in3... in13))",
        "equivalent": false
      },
      "15": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op1 in5 digit)) (assert (and (op2 in5 lowercase)) (assert (and (op3 in5 uppercase)) (assert (and (op4 in5 special_char)) (assert (and (op1 in6 digit)) (assert (and (op2 in6 lowercase)) (assert (and (op3 in6 uppercase)) (assert (and (op4 in6 special_char)) (assert (and (op1 in7 digit)) (assert (and (op2 in7 lowercase)) (assert (and (op3 in7 uppercase)) (assert (and (op4 in7 special_char)) (assert (and (op1 in8 digit)) (assert (and (op2 in8 lowercase)) (assert (and (op3 in8 uppercase)) (assert (and (op4 in8 special_char)) (assert (and (op1 in9 digit)) (assert (and (op2 in9 lowercase)) (assert (and (op3 in9 uppercase)) (assert (and (op4 in9 special_char)) (assert (and (op1 in10 digit)) (assert (and (op2 in10 lowercase)) (assert (and (op3 in10 uppercase)) (assert (and (op4 in10 special_char)) (assert (and (op1 in11 digit)) (assert (and (op2 in11 lowercase)) (assert (and (op3 in11 uppercase)) (assert (and (op4 in11 special_char)) (assert (and (op1 in12 digit)) (assert (and (op2 in12 lowercase)) (assert (and (op3 in12 uppercase)) (assert (and (op4 in12 special_char)) (assert (and (op1 in13 digit)) (assert (and (op2 in13 lowercase)) (assert (and (op3 in13 uppercase)) (assert (and (op4 in13 special_char)) (assert (and (op1 in14 digit)) (assert (and (op2 in14 lowercase)) (assert (and (op3 in14 uppercase)) (assert (and (op4 in14 special_char)) (assert (and (op5 in0 in1 in2 in3... in14))",
        "equivalent": false
      },
      "16": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op1 in5 digit)) (assert (and (op2 in5 lowercase)) (assert (and (op3 in5 uppercase)) (assert (and (op4 in5 special_char)) (assert (and (op1 in6 digit)) (assert (and (op2 in6 lowercase)) (assert (and (op3 in6 uppercase)) (assert (and (op4 in6 special_char)) (assert (and (op1 in7 digit)) (assert (and (op2 in7 lowercase)) (assert (and (op3 in7 uppercase)) (assert (and (op4 in7 special_char)) (assert (and (op1 in8 digit)) (assert (and (op2 in8 lowercase)) (assert (and (op3 in8 uppercase)) (assert (and (op4 in8 special_char)) (assert (and (op1 in9 digit)) (assert (and (op2 in9 lowercase)) (assert (and (op3 in9 uppercase)) (assert (and (op4 in9 special_char)) (assert (and (op1 in10 digit)) (assert (and (op2 in10 lowercase)) (assert (and (op3 in10 uppercase)) (assert (and (op4 in10 special_char)) (assert (and (op1 in11 digit)) (assert (and (op2 in11 lowercase)) (assert (and (op3 in11 uppercase)) (assert (and (op4 in11 special_char)) (assert (and (op1 in12 digit)) (assert (and (op2 in12 lowercase)) (assert (and (op3 in12 uppercase)) (assert (and (op4 in12 special_char)) (assert (and (op1 in13 digit)) (assert (and (op2 in13 lowercase)) (assert (and (op3 in13 uppercase)) (assert (and (op4 in13 special_char)) (assert (and (op1 in14 digit)) (assert (and (op2 in14 lowercase)) (assert (and (op3 in14 uppercase)) (assert (and (op4 in14 special_char)) (assert (and (op1 in15 digit)) (assert (and (op2 in15 lowercase)) (assert (and (op3 in15 uppercase)) (assert (and (op4 in15 special_char)) (assert (and (op5 in0 in1 in2 in3... in15))",
        "equivalent": false
      },
      "17": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op1 in5 digit)) (assert (and (op2 in5 lowercase)) (assert (and (op3 in5 uppercase)) (assert (and (op4 in5 special_char)) (assert (and (op1 in6 digit)) (assert (and (op2 in6 lowercase)) (assert (and (op3 in6 uppercase)) (assert (and (op4 in6 special_char)) (assert (and (op1 in7 digit)) (assert (and (op2 in7 lowercase)) (assert (and (op3 in7 uppercase)) (assert (and (op4 in7 special_char)) (assert (and (op1 in8 digit)) (assert (and (op2 in8 lowercase)) (assert (and (op3 in8 uppercase)) (assert (and (op4 in8 special_char)) (assert (and (op1 in9 digit)) (assert (and (op2 in9 lowercase)) (assert (and (op3 in9 uppercase)) (assert (and (op4 in9 special_char)) (assert (and (op1 in10 digit)) (assert (and (op2 in10 lowercase)) (assert (and (op3 in10 uppercase)) (assert (and (op4 in10 special_char)) (assert (and (op1 in11 digit)) (assert (and (op2 in11 lowercase)) (assert (and (op3 in11 uppercase)) (assert (and (op4 in11 special_char)) (assert (and (op1 in12 digit)) (assert (and (op2 in12 lowercase)) (assert (and (op3 in12 uppercase)) (assert (and (op4 in12 special_char)) (assert (and (op1 in13 digit)) (assert (and (op2 in13 lowercase)) (assert (and (op3 in13 uppercase)) (assert (and (op4 in13 special_char)) (assert (and (op1 in14 digit)) (assert (and (op2 in14 lowercase)) (assert (and (op3 in14 uppercase)) (assert (and (op4 in14 special_char)) (assert (and (op1 in15 digit)) (assert (and (op2 in15 lowercase)) (assert (and (op3 in15 uppercase)) (assert (and (op4 in15 special_char)) (assert (and (op1 in16 digit)) (assert (and (op2 in16 lowercase)) (assert (and (op3 in16 uppercase)) (assert (and (op4 in16 special_char)) (assert (and (op5 in0 in1 in2 in3... in16))",
        "equivalent": false
      },
      "18": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op1 in5 digit)) (assert (and (op2 in5 lowercase)) (assert (and (op3 in5 uppercase)) (assert (and (op4 in5 special_char)) (assert (and (op1 in6 digit)) (assert (and (op2 in6 lowercase)) (assert (and (op3 in6 uppercase)) (assert (and (op4 in6 special_char)) (assert (and (op1 in7 digit)) (assert (and (op2 in7 lowercase)) (assert (and (op3 in7 uppercase)) (assert (and (op4 in7 special_char)) (assert (and (op1 in8 digit)) (assert (and (op2 in8 lowercase)) (assert (and (op3 in8 uppercase)) (assert (and (op4 in8 special_char)) (assert (and (op1 in9 digit)) (assert (and (op2 in9 lowercase)) (assert (and (op3 in9 uppercase)) (assert (and (op4 in9 special_char)) (assert (and (op1 in10 digit)) (assert (and (op2 in10 lowercase)) (assert (and (op3 in10 uppercase)) (assert (and (op4 in10 special_char)) (assert (and (op1 in11 digit)) (assert (and (op2 in11 lowercase)) (assert (and (op3 in11 uppercase)) (assert (and (op4 in11 special_char)) (assert (and (op1 in12 digit)) (assert (and (op2 in12 lowercase)) (assert (and (op3 in12 uppercase)) (assert (and (op4 in12 special_char)) (assert (and (op1 in13 digit)) (assert (and (op2 in13 lowercase)) (assert (and (op3 in13 uppercase)) (assert (and (op4 in13 special_char)) (assert (and (op1 in14 digit)) (assert (and (op2 in14 lowercase)) (assert (and (op3 in14 uppercase)) (assert (and (op4 in14 special_char)) (assert (and (op1 in15 digit)) (assert (and (op2 in15 lowercase)) (assert (and (op3 in15 uppercase)) (assert (and (op4 in15 special_char)) (assert (and (op1 in16 digit)) (assert (and (op2 in16 lowercase)) (assert (and (op3 in16 uppercase)) (assert (and (op4 in16 special_char)) (assert (and (op1 in17 digit)) (assert (and (op2 in17 lowercase)) (assert (and (op3 in17 uppercase)) (assert (and (op4 in17 special_char)) (assert (and (op5 in0 in1 in2 in3... in17))",
        "equivalent": false
      },
      "19": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op1 in5 digit)) (assert (and (op2 in5 lowercase)) (assert (and (op3 in5 uppercase)) (assert (and (op4 in5 special_char)) (assert (and (op1 in6 digit)) (assert (and (op2 in6 lowercase)) (assert (and (op3 in6 uppercase)) (assert (and (op4 in6 special_char)) (assert (and (op1 in7 digit)) (assert (and (op2 in7 lowercase)) (assert (and (op3 in7 uppercase)) (assert (and (op4 in7 special_char)) (assert (and (op1 in8 digit)) (assert (and (op2 in8 lowercase)) (assert (and (op3 in8 uppercase)) (assert (and (op4 in8 special_char)) (assert (and (op1 in9 digit)) (assert (and (op2 in9 lowercase)) (assert (and (op3 in9 uppercase)) (assert (and (op4 in9 special_char)) (assert (and (op1 in10 digit)) (assert (and (op2 in10 lowercase)) (assert (and (op3 in10 uppercase)) (assert (and (op4 in10 special_char)) (assert (and (op1 in11 digit)) (assert (and (op2 in11 lowercase)) (assert (and (op3 in11 uppercase)) (assert (and (op4 in11 special_char)) (assert (and (op1 in12 digit)) (assert (and (op2 in12 lowercase)) (assert (and (op3 in12 uppercase)) (assert (and (op4 in12 special_char)) (assert (and (op1 in13 digit)) (assert (and (op2 in13 lowercase)) (assert (and (op3 in13 uppercase)) (assert (and (op4 in13 special_char)) (assert (and (op1 in14 digit)) (assert (and (op2 in14 lowercase)) (assert (and (op3 in14 uppercase)) (assert (and (op4 in14 special_char)) (assert (and (op1 in15 digit)) (assert (and (op2 in15 lowercase)) (assert (and (op3 in15 uppercase)) (assert (and (op4 in15 special_char)) (assert (and (op1 in16 digit)) (assert (and (op2 in16 lowercase)) (assert (and (op3 in16 uppercase)) (assert (and (op4 in16 special_char)) (assert (and (op1 in17 digit)) (assert (and (op2 in17 lowercase)) (assert (and (op3 in17 uppercase)) (assert (and (op4 in17 special_char)) (assert (and (op1 in18 digit)) (assert (and (op2 in18 lowercase)) (assert (and (op3 in18 uppercase)) (assert (and (op4 in18 special_char)) (assert (and (op5 in0 in1 in2 in3... in18))",
        "equivalent": false
      },
      "20": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op1 in5 digit)) (assert (and (op2 in5 lowercase)) (assert (and (op3 in5 uppercase)) (assert (and (op4 in5 special_char)) (assert (and (op1 in6 digit)) (assert (and (op2 in6 lowercase)) (assert (and (op3 in6 uppercase)) (assert (and (op4 in6 special_char)) (assert (and (op1 in7 digit)) (assert (and (op2 in7 lowercase)) (assert (and (op3 in7 uppercase)) (assert (and (op4 in7 special_char)) (assert (and (op1 in8 digit)) (assert (and (op2 in8 lowercase)) (assert (and (op3 in8 uppercase)) (assert (and (op4 in8 special_char)) (assert (and (op1 in9 digit)) (assert (and (op2 in9 lowercase)) (assert (and (op3 in9 uppercase)) (assert (and (op4 in9 special_char)) (assert (and (op1 in10 digit)) (assert (and (op2 in10 lowercase)) (assert (and (op3 in10 uppercase)) (assert (and (op4 in10 special_char)) (assert (and (op1 in11 digit)) (assert (and (op2 in11 lowercase)) (assert (and (op3 in11 uppercase)) (assert (and (op4 in11 special_char)) (assert (and (op1 in12 digit)) (assert (and (op2 in12 lowercase)) (assert (and (op3 in12 uppercase)) (assert (and (op4 in12 special_char)) (assert (and (op1 in13 digit)) (assert (and (op2 in13 lowercase)) (assert (and (op3 in13 uppercase)) (assert (and (op4 in13 special_char)) (assert (and (op1 in14 digit)) (assert (and (op2 in14 lowercase)) (assert (and (op3 in14 uppercase)) (assert (and (op4 in14 special_char)) (assert (and (op1 in15 digit)) (assert (and (op2 in15 lowercase)) (assert (and (op3 in15 uppercase)) (assert (and (op4 in15 special_char)) (assert (and (op1 in16 digit)) (assert (and (op2 in16 lowercase)) (assert (and (op3 in16 uppercase)) (assert (and (op4 in16 special_char)) (assert (and (op1 in17 digit)) (assert (and (op2 in17 lowercase)) (assert (and (op3 in17 uppercase)) (assert (and (op4 in17 special_char)) (assert (and (op1 in18 digit)) (assert (and (op2 in18 lowercase)) (assert (and (op3 in18 uppercase)) (assert (and (op4 in18 special_char)) (assert (and (op1 in19 digit)) (assert (and (op2 in19 lowercase)) (assert (and (op3 in19 uppercase)) (assert (and (op4 in19 special_char)) (assert (and (op5 in0 in1 in2 in3... in19))",
        "equivalent": false
      },
      "21": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op1 in5 digit)) (assert (and (op2 in5 lowercase)) (assert (and (op3 in5 uppercase)) (assert (and (op4 in5 special_char)) (assert (and (op1 in6 digit)) (assert (and (op2 in6 lowercase)) (assert (and (op3 in6 uppercase)) (assert (and (op4 in6 special_char)) (assert (and (op1 in7 digit)) (assert (and (op2 in7 lowercase)) (assert (and (op3 in7 uppercase)) (assert (and (op4 in7 special_char)) (assert (and (op1 in8 digit)) (assert (and (op2 in8 lowercase)) (assert (and (op3 in8 uppercase)) (assert (and (op4 in8 special_char)) (assert (and (op1 in9 digit)) (assert (and (op2 in9 lowercase)) (assert (and (op3 in9 uppercase)) (assert (and (op4 in9 special_char)) (assert (and (op1 in10 digit)) (assert (and (op2 in10 lowercase)) (assert (and (op3 in10 uppercase)) (assert (and (op4 in10 special_char)) (assert (and (op1 in11 digit)) (assert (and (op2 in11 lowercase)) (assert (and (op3 in11 uppercase)) (assert (and (op4 in11 special_char)) (assert (and (op1 in12 digit)) (assert (and (op2 in12 lowercase)) (assert (and (op3 in12 uppercase)) (assert (and (op4 in12 special_char)) (assert (and (op1 in13 digit)) (assert (and (op2 in13 lowercase)) (assert (and (op3 in13 uppercase)) (assert (and (op4 in13 special_char)) (assert (and (op1 in14 digit)) (assert (and (op2 in14 lowercase)) (assert (and (op3 in14 uppercase)) (assert (and (op4 in14 special_char)) (assert (and (op1 in15 digit)) (assert (and (op2 in15 lowercase)) (assert (and (op3 in15 uppercase)) (assert (and (op4 in15 special_char)) (assert (and (op1 in16 digit)) (assert (and (op2 in16 lowercase)) (assert (and (op3 in16 uppercase)) (assert (and (op4 in16 special_char)) (assert (and (op1 in17 digit)) (assert (and (op2 in17 lowercase)) (assert (and (op3 in17 uppercase)) (assert (and (op4 in17 special_char)) (assert (and (op1 in18 digit)) (assert (and (op2 in18 lowercase)) (assert (and (op3 in18 uppercase)) (assert (and (op4 in18 special_char)) (assert (and (op1 in19 digit)) (assert (and (op2 in19 lowercase)) (assert (and (op3 in19 uppercase)) (assert (and (op4 in19 special_char)) (assert (and (op1 in20 digit)) (assert (and (op2 in20 lowercase)) (assert (and (op3 in20 uppercase)) (assert (and (op4 in20 special_char)) (assert (and (op5 in0 in1 in2 in3... in20))",
        "equivalent": false
      },
      "22": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op1 in5 digit)) (assert (and (op2 in5 lowercase)) (assert (and (op3 in5 uppercase)) (assert (and (op4 in5 special_char)) (assert (and (op1 in6 digit)) (assert (and (op2 in6 lowercase)) (assert (and (op3 in6 uppercase)) (assert (and (op4 in6 special_char)) (assert (and (op1 in7 digit)) (assert (and (op2 in7 lowercase)) (assert (and (op3 in7 uppercase)) (assert (and (op4 in7 special_char)) (assert (and (op1 in8 digit)) (assert (and (op2 in8 lowercase)) (assert (and (op3 in8 uppercase)) (assert (and (op4 in8 special_char)) (assert (and (op1 in9 digit)) (assert (and (op2 in9 lowercase)) (assert (and (op3 in9 uppercase)) (assert (and (op4 in9 special_char)) (assert (and (op1 in10 digit)) (assert (and (op2 in10 lowercase)) (assert (and (op3 in10 uppercase)) (assert (and (op4 in10 special_char)) (assert (and (op1 in11 digit)) (assert (and (op2 in11 lowercase)) (assert (and (op3 in11 uppercase)) (assert (and (op4 in11 special_char)) (assert (and (op1 in12 digit)) (assert (and (op2 in12 lowercase)) (assert (and (op3 in12 uppercase)) (assert (and (op4 in12 special_char)) (assert (and (op1 in13 digit)) (assert (and (op2 in13 lowercase)) (assert (and (op3 in13 uppercase)) (assert (and (op4 in13 special_char)) (assert (and (op1 in14 digit)) (assert (and (op2 in14 lowercase)) (assert (and (op3 in14 uppercase)) (assert (and (op4 in14 special_char)) (assert (and (op1 in15 digit)) (assert (and (op2 in15 lowercase)) (assert (and (op3 in15 uppercase)) (assert (and (op4 in15 special_char)) (assert (and (op1 in16 digit)) (assert (and (op2 in16 lowercase)) (assert (and (op3 in16 uppercase)) (assert (and (op4 in16 special_char)) (assert (and (op1 in17 digit)) (assert (and (op2 in17 lowercase)) (assert (and (op3 in17 uppercase)) (assert (and (op4 in17 special_char)) (assert (and (op1 in18 digit)) (assert (and (op2 in18 lowercase)) (assert (and (op3 in18 uppercase)) (assert (and (op4 in18 special_char)) (assert (and (op1 in19 digit)) (assert (and (op2 in19 lowercase)) (assert (and (op3 in19 uppercase)) (assert (and (op4 in19 special_char)) (assert (and (op1 in20 digit)) (assert (and (op2 in20 lowercase)) (assert (and (op3 in20 uppercase)) (assert (and (op4 in20 special_char)) (assert (and (op1 in21 digit)) (assert (and (op2 in21 lowercase)) (assert (and (op3 in21 uppercase)) (assert (and (op4 in21 special_char)) (assert (and (op5 in0 in1 in2 in3... in21))",
        "equivalent": false
      },
      "23": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op1 in5 digit)) (assert (and (op2 in5 lowercase)) (assert (and (op3 in5 uppercase)) (assert (and (op4 in5 special_char)) (assert (and (op1 in6 digit)) (assert (and (op2 in6 lowercase)) (assert (and (op3 in6 uppercase)) (assert (and (op4 in6 special_char)) (assert (and (op1 in7 digit)) (assert (and (op2 in7 lowercase)) (assert (and (op3 in7 uppercase)) (assert (and (op4 in7 special_char)) (assert (and (op1 in8 digit)) (assert (and (op2 in8 lowercase)) (assert (and (op3 in8 uppercase)) (assert (and (op4 in8 special_char)) (assert (and (op1 in9 digit)) (assert (and (op2 in9 lowercase)) (assert (and (op3 in9 uppercase)) (assert (and (op4 in9 special_char)) (assert (and (op1 in10 digit)) (assert (and (op2 in10 lowercase)) (assert (and (op3 in10 uppercase)) (assert (and (op4 in10 special_char)) (assert (and (op1 in11 digit)) (assert (and (op2 in11 lowercase)) (assert (and (op3 in11 uppercase)) (assert (and (op4 in11 special_char)) (assert (and (op1 in12 digit)) (assert (and (op2 in12 lowercase)) (assert (and (op3 in12 uppercase)) (assert (and (op4 in12 special_char)) (assert (and (op1 in13 digit)) (assert (and (op2 in13 lowercase)) (assert (and (op3 in13 uppercase)) (assert (and (op4 in13 special_char)) (assert (and (op1 in14 digit)) (assert (and (op2 in14 lowercase)) (assert (and (op3 in14 uppercase)) (assert (and (op4 in14 special_char)) (assert (and (op1 in15 digit)) (assert (and (op2 in15 lowercase)) (assert (and (op3 in15 uppercase)) (assert (and (op4 in15 special_char)) (assert (and (op1 in16 digit)) (assert (and (op2 in16 lowercase)) (assert (and (op3 in16 uppercase)) (assert (and (op4 in16 special_char)) (assert (and (op1 in17 digit)) (assert (and (op2 in17 lowercase)) (assert (and (op3 in17 uppercase)) (assert (and (op4 in17 special_char)) (assert (and (op1 in18 digit)) (assert (and (op2 in18 lowercase)) (assert (and (op3 in18 uppercase)) (assert (and (op4 in18 special_char)) (assert (and (op1 in19 digit)) (assert (and (op2 in19 lowercase)) (assert (and (op3 in19 uppercase)) (assert (and (op4 in19 special_char)) (assert (and (op1 in20 digit)) (assert (and (op2 in20 lowercase)) (assert (and (op3 in20 uppercase)) (assert (and (op4 in20 special_char)) (assert (and (op1 in21 digit)) (assert (and (op2 in21 lowercase)) (assert (and (op3 in21 uppercase)) (assert (and (op4 in21 special_char)) (assert (and (op1 in22 digit)) (assert (and (op2 in22 lowercase)) (assert (and (op3 in22 uppercase)) (assert (and (op4 in22 special_char)) (assert (and (op5 in0 in1 in2 in3... in22))",
        "equivalent": false
      },
      "24": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op1 in5 digit)) (assert (and (op2 in5 lowercase)) (assert (and (op3 in5 uppercase)) (assert (and (op4 in5 special_char)) (assert (and (op1 in6 digit)) (assert (and (op2 in6 lowercase)) (assert (and (op3 in6 uppercase)) (assert (and (op4 in6 special_char)) (assert (and (op1 in7 digit)) (assert (and (op2 in7 lowercase)) (assert (and (op3 in7 uppercase)) (assert (and (op4 in7 special_char)) (assert (and (op1 in8 digit)) (assert (and (op2 in8 lowercase)) (assert (and (op3 in8 uppercase)) (assert (and (op4 in8 special_char)) (assert (and (op1 in9 digit)) (assert (and (op2 in9 lowercase)) (assert (and (op3 in9 uppercase)) (assert (and (op4 in9 special_char)) (assert (and (op1 in10 digit)) (assert (and (op2 in10 lowercase)) (assert (and (op3 in10 uppercase)) (assert (and (op4 in10 special_char)) (assert (and (op1 in11 digit)) (assert (and (op2 in11 lowercase)) (assert (and (op3 in11 uppercase)) (assert (and (op4 in11 special_char)) (assert (and (op1 in12 digit)) (assert (and (op2 in12 lowercase)) (assert (and (op3 in12 uppercase)) (assert (and (op4 in12 special_char)) (assert (and (op1 in13 digit)) (assert (and (op2 in13 lowercase)) (assert (and (op3 in13 uppercase)) (assert (and (op4 in13 special_char)) (assert (and (op1 in14 digit)) (assert (and (op2 in14 lowercase)) (assert (and (op3 in14 uppercase)) (assert (and (op4 in14 special_char)) (assert (and (op1 in15 digit)) (assert (and (op2 in15 lowercase)) (assert (and (op3 in15 uppercase)) (assert (and (op4 in15 special_char)) (assert (and (op1 in16 digit)) (assert (and (op2 in16 lowercase)) (assert (and (op3 in16 uppercase)) (assert (and (op4 in16 special_char)) (assert (and (op1 in17 digit)) (assert (and (op2 in17 lowercase)) (assert (and (op3 in17 uppercase)) (assert (and (op4 in17 special_char)) (assert (and (op1 in18 digit)) (assert (and (op2 in18 lowercase)) (assert (and (op3 in18 uppercase)) (assert (and (op4 in18 special_char)) (assert (and (op1 in19 digit)) (assert (and (op2 in19 lowercase)) (assert (and (op3 in19 uppercase)) (assert (and (op4 in19 special_char)) (assert (and (op1 in20 digit)) (assert (and (op2 in20 lowercase)) (assert (and (op3 in20 uppercase)) (assert (and (op4 in20 special_char)) (assert (and (op1 in21 digit)) (assert (and (op2 in21 lowercase)) (assert (and (op3 in21 uppercase)) (assert (and (op4 in21 special_char)) (assert (and (op1 in22 digit)) (assert (and (op2 in22 lowercase)) (assert (and (op3 in22 uppercase)) (assert (and (op4 in22 special_char)) (assert (and (op1 in23 digit)) (assert (and (op2 in23 lowercase)) (assert (and (op3 in23 uppercase)) (assert (and (op4 in23 special_char)) (assert (and (op5 in0 in1 in2 in3... in23))",
        "equivalent": false
      },
      "25": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op1 in5 digit)) (assert (and (op2 in5 lowercase)) (assert (and (op3 in5 uppercase)) (assert (and (op4 in5 special_char)) (assert (and (op1 in6 digit)) (assert (and (op2 in6 lowercase)) (assert (and (op3 in6 uppercase)) (assert (and (op4 in6 special_char)) (assert (and (op1 in7 digit)) (assert (and (op2 in7 lowercase)) (assert (and (op3 in7 uppercase)) (assert (and (op4 in7 special_char)) (assert (and (op1 in8 digit)) (assert (and (op2 in8 lowercase)) (assert (and (op3 in8 uppercase)) (assert (and (op4 in8 special_char)) (assert (and (op1 in9 digit)) (assert (and (op2 in9 lowercase)) (assert (and (op3 in9 uppercase)) (assert (and (op4 in9 special_char)) (assert (and (op1 in10 digit)) (assert (and (op2 in10 lowercase)) (assert (and (op3 in10 uppercase)) (assert (and (op4 in10 special_char)) (assert (and (op1 in11 digit)) (assert (and (op2 in11 lowercase)) (assert (and (op3 in11 uppercase)) (assert (and (op4 in11 special_char)) (assert (and (op1 in12 digit)) (assert (and (op2 in12 lowercase)) (assert (and (op3 in12 uppercase)) (assert (and (op4 in12 special_char)) (assert (and (op1 in13 digit)) (assert (and (op2 in13 lowercase)) (assert (and (op3 in13 uppercase)) (assert (and (op4 in13 special_char)) (assert (and (op1 in14 digit)) (assert (and (op2 in14 lowercase)) (assert (and (op3 in14 uppercase)) (assert (and (op4 in14 special_char)) (assert (and (op1 in15 digit)) (assert (and (op2 in15 lowercase)) (assert (and (op3 in15 uppercase)) (assert (and (op4 in15 special_char)) (assert (and (op1 in16 digit)) (assert (and (op2 in16 lowercase)) (assert (and (op3 in16 uppercase)) (assert (and (op4 in16 special_char)) (assert (and (op1 in17 digit)) (assert (and (op2 in17 lowercase)) (assert (and (op3 in17 uppercase)) (assert (and (op4 in17 special_char)) (assert (and (op1 in18 digit)) (assert (and (op2 in18 lowercase)) (assert (and (op3 in18 uppercase)) (assert (and (op4 in18 special_char)) (assert (and (op1 in19 digit)) (assert (and (op2 in19 lowercase)) (assert (and (op3 in19 uppercase)) (assert (and (op4 in19 special_char)) (assert (and (op1 in20 digit)) (assert (and (op2 in20 lowercase)) (assert (and (op3 in20 uppercase)) (assert (and (op4 in20 special_char)) (assert (and (op1 in21 digit)) (assert (and (op2 in21 lowercase)) (assert (and (op3 in21 uppercase)) (assert (and (op4 in21 special_char)) (assert (and (op1 in22 digit)) (assert (and (op2 in22 lowercase)) (assert (and (op3 in22 uppercase)) (assert (and (op4 in22 special_char)) (assert (and (op1 in23 digit)) (assert (and (op2 in23 lowercase)) (assert (and (op3 in23 uppercase)) (assert (and (op4 in23 special_char)) (assert (and (op1 in24 digit)) (assert (and (op2 in24 lowercase)) (assert (and (op3 in24 uppercase)) (assert (and (op4 in24 special_char)) (assert (and (op5 in0 in1 in2 in3... in24))",
        "equivalent": false
      },
      "26": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op1 in5 digit)) (assert (and (op2 in5 lowercase)) (assert (and (op3 in5 uppercase)) (assert (and (op4 in5 special_char)) (assert (and (op1 in6 digit)) (assert (and (op2 in6 lowercase)) (assert (and (op3 in6 uppercase)) (assert (and (op4 in6 special_char)) (assert (and (op1 in7 digit)) (assert (and (op2 in7 lowercase)) (assert (and (op3 in7 uppercase)) (assert (and (op4 in7 special_char)) (assert (and (op1 in8 digit)) (assert (and (op2 in8 lowercase)) (assert (and (op3 in8 uppercase)) (assert (and (op4 in8 special_char)) (assert (and (op1 in9 digit)) (assert (and (op2 in9 lowercase)) (assert (and (op3 in9 uppercase)) (assert (and (op4 in9 special_char)) (assert (and (op1 in10 digit)) (assert (and (op2 in10 lowercase)) (assert (and (op3 in10 uppercase)) (assert (and (op4 in10 special_char)) (assert (and (op1 in11 digit)) (assert (and (op2 in11 lowercase)) (assert (and (op3 in11 uppercase)) (assert (and (op4 in11 special_char)) (assert (and (op1 in12 digit)) (assert (and (op2 in12 lowercase)) (assert (and (op3 in12 uppercase)) (assert (and (op4 in12 special_char)) (assert (and (op1 in13 digit)) (assert (and (op2 in13 lowercase)) (assert (and (op3 in13 uppercase)) (assert (and (op4 in13 special_char)) (assert (and (op1 in14 digit)) (assert (and (op2 in14 lowercase)) (assert (and (op3 in14 uppercase)) (assert (and (op4 in14 special_char)) (assert (and (op1 in15 digit)) (assert (and (op2 in15 lowercase)) (assert (and (op3 in15 uppercase)) (assert (and (op4 in15 special_char)) (assert (and (op1 in16 digit)) (assert (and (op2 in16 lowercase)) (assert (and (op3 in16 uppercase)) (assert (and (op4 in16 special_char)) (assert (and (op1 in17 digit)) (assert (and (op2 in17 lowercase)) (assert (and (op3 in17 uppercase)) (assert (and (op4 in17 special_char)) (assert (and (op1 in18 digit)) (assert (and (op2 in18 lowercase)) (assert (and (op3 in18 uppercase)) (assert (and (op4 in18 special_char)) (assert (and (op1 in19 digit)) (assert (and (op2 in19 lowercase)) (assert (and (op3 in19 uppercase)) (assert (and (op4 in19 special_char)) (assert (and (op1 in20 digit)) (assert (and (op2 in20 lowercase)) (assert (and (op3 in20 uppercase)) (assert (and (op4 in20 special_char)) (assert (and (op1 in21 digit)) (assert (and (op2 in21 lowercase)) (assert (and (op3 in21 uppercase)) (assert (and (op4 in21 special_char)) (assert (and (op1 in22 digit)) (assert (and (op2 in22 lowercase)) (assert (and (op3 in22 uppercase)) (assert (and (op4 in22 special_char)) (assert (and (op1 in23 digit)) (assert (and (op2 in23 lowercase)) (assert (and (op3 in23 uppercase)) (assert (and (op4 in23 special_char)) (assert (and (op1 in24 digit)) (assert (and (op2 in24 lowercase)) (assert (and (op3 in24 uppercase)) (assert (and (op4 in24 special_char)) (assert (and (op1 in25 digit)) (assert (and (op2 in25 lowercase)) (assert (and (op3 in25 uppercase)) (assert (and (op4 in25 special_char)) (assert (and (op5 in0 in1 in2 in3... in25))",
        "equivalent": false
      },
      "27": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op1 in5 digit)) (assert (and (op2 in5 lowercase)) (assert (and (op3 in5 uppercase)) (assert (and (op4 in5 special_char)) (assert (and (op1 in6 digit)) (assert (and (op2 in6 lowercase)) (assert (and (op3 in6 uppercase)) (assert (and (op4 in6 special_char)) (assert (and (op1 in7 digit)) (assert (and (op2 in7 lowercase)) (assert (and (op3 in7 uppercase)) (assert (and (op4 in7 special_char)) (assert (and (op1 in8 digit)) (assert (and (op2 in8 lowercase)) (assert (and (op3 in8 uppercase)) (assert (and (op4 in8 special_char)) (assert (and (op1 in9 digit)) (assert (and (op2 in9 lowercase)) (assert (and (op3 in9 uppercase)) (assert (and (op4 in9 special_char)) (assert (and (op1 in10 digit)) (assert (and (op2 in10 lowercase)) (assert (and (op3 in10 uppercase)) (assert (and (op4 in10 special_char)) (assert (and (op1 in11 digit)) (assert (and (op2 in11 lowercase)) (assert (and (op3 in11 uppercase)) (assert (and (op4 in11 special_char)) (assert (and (op1 in12 digit)) (assert (and (op2 in12 lowercase)) (assert (and (op3 in12 uppercase)) (assert (and (op4 in12 special_char)) (assert (and (op1 in13 digit)) (assert (and (op2 in13 lowercase)) (assert (and (op3 in13 uppercase)) (assert (and (op4 in13 special_char)) (assert (and (op1 in14 digit)) (assert (and (op2 in14 lowercase)) (assert (and (op3 in14 uppercase)) (assert (and (op4 in14 special_char)) (assert (and (op1 in15 digit)) (assert (and (op2 in15 lowercase)) (assert (and (op3 in15 uppercase)) (assert (and (op4 in15 special_char)) (assert (and (op1 in16 digit)) (assert (and (op2 in16 lowercase)) (assert (and (op3 in16 uppercase)) (assert (and (op4 in16 special_char)) (assert (and (op1 in17 digit)) (assert (and (op2 in17 lowercase)) (assert (and (op3 in17 uppercase)) (assert (and (op4 in17 special_char)) (assert (and (op1 in18 digit)) (assert (and (op2 in18 lowercase)) (assert (and (op3 in18 uppercase)) (assert (and (op4 in18 special_char)) (assert (and (op1 in19 digit)) (assert (and (op2 in19 lowercase)) (assert (and (op3 in19 uppercase)) (assert (and (op4 in19 special_char)) (assert (and (op1 in20 digit)) (assert (and (op2 in20 lowercase)) (assert (and (op3 in20 uppercase)) (assert (and (op4 in20 special_char)) (assert (and (op1 in21 digit)) (assert (and (op2 in21 lowercase)) (assert (and (op3 in21 uppercase)) (assert (and (op4 in21 special_char)) (assert (and (op1 in22 digit)) (assert (and (op2 in22 lowercase)) (assert (and (op3 in22 uppercase)) (assert (and (op4 in22 special_char)) (assert (and (op1 in23 digit)) (assert (and (op2 in23 lowercase)) (assert (and (op3 in23 uppercase)) (assert (and (op4 in23 special_char)) (assert (and (op1 in24 digit)) (assert (and (op2 in24 lowercase)) (assert (and (op3 in24 uppercase)) (assert (and (op4 in24 special_char)) (assert (and (op1 in25 digit)) (assert (and (op2 in25 lowercase)) (assert (and (op3 in25 uppercase)) (assert (and (op4 in25 special_char)) (assert (and (op1 in26 digit)) (assert (and (op2 in26 lowercase)) (assert (and (op3 in26 uppercase)) (assert (and (op4 in26 special_char)) (assert (and (op5 in0 in1 in2 in3... in26))",
        "equivalent": false
      },
      "28": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op1 in5 digit)) (assert (and (op2 in5 lowercase)) (assert (and (op3 in5 uppercase)) (assert (and (op4 in5 special_char)) (assert (and (op1 in6 digit)) (assert (and (op2 in6 lowercase)) (assert (and (op3 in6 uppercase)) (assert (and (op4 in6 special_char)) (assert (and (op1 in7 digit)) (assert (and (op2 in7 lowercase)) (assert (and (op3 in7 uppercase)) (assert (and (op4 in7 special_char)) (assert (and (op1 in8 digit)) (assert (and (op2 in8 lowercase)) (assert (and (op3 in8 uppercase)) (assert (and (op4 in8 special_char)) (assert (and (op1 in9 digit)) (assert (and (op2 in9 lowercase)) (assert (and (op3 in9 uppercase)) (assert (and (op4 in9 special_char)) (assert (and (op1 in10 digit)) (assert (and (op2 in10 lowercase)) (assert (and (op3 in10 uppercase)) (assert (and (op4 in10 special_char)) (assert (and (op1 in11 digit)) (assert (and (op2 in11 lowercase)) (assert (and (op3 in11 uppercase)) (assert (and (op4 in11 special_char)) (assert (and (op1 in12 digit)) (assert (and (op2 in12 lowercase)) (assert (and (op3 in12 uppercase)) (assert (and (op4 in12 special_char)) (assert (and (op1 in13 digit)) (assert (and (op2 in13 lowercase)) (assert (and (op3 in13 uppercase)) (assert (and (op4 in13 special_char)) (assert (and (op1 in14 digit)) (assert (and (op2 in14 lowercase)) (assert (and (op3 in14 uppercase)) (assert (and (op4 in14 special_char)) (assert (and (op1 in15 digit)) (assert (and (op2 in15 lowercase)) (assert (and (op3 in15 uppercase)) (assert (and (op4 in15 special_char)) (assert (and (op1 in16 digit)) (assert (and (op2 in16 lowercase)) (assert (and (op3 in16 uppercase)) (assert (and (op4 in16 special_char)) (assert (and (op1 in17 digit)) (assert (and (op2 in17 lowercase)) (assert (and (op3 in17 uppercase)) (assert (and (op4 in17 special_char)) (assert (and (op1 in18 digit)) (assert (and (op2 in18 lowercase)) (assert (and (op3 in18 uppercase)) (assert (and (op4 in18 special_char)) (assert (and (op1 in19 digit)) (assert (and (op2 in19 lowercase)) (assert (and (op3 in19 uppercase)) (assert (and (op4 in19 special_char)) (assert (and (op1 in20 digit)) (assert (and (op2 in20 lowercase)) (assert (and (op3 in20 uppercase)) (assert (and (op4 in20 special_char)) (assert (and (op1 in21 digit)) (assert (and (op2 in21 lowercase)) (assert (and (op3 in21 uppercase)) (assert (and (op4 in21 special_char)) (assert (and (op1 in22 digit)) (assert (and (op2 in22 lowercase)) (assert (and (op3 in22 uppercase)) (assert (and (op4 in22 special_char)) (assert (and (op1 in23 digit)) (assert (and (op2 in23 lowercase)) (assert (and (op3 in23 uppercase)) (assert (and (op4 in23 special_char)) (assert (and (op1 in24 digit)) (assert (and (op2 in24 lowercase)) (assert (and (op3 in24 uppercase)) (assert (and (op4 in24 special_char)) (assert (and (op1 in25 digit)) (assert (and (op2 in25 lowercase)) (assert (and (op3 in25 uppercase)) (assert (and (op4 in25 special_char)) (assert (and (op1 in26 digit)) (assert (and (op2 in26 lowercase)) (assert (and (op3 in26 uppercase)) (assert (and (op4 in26 special_char)) (assert (and (op1 in27 digit)) (assert (and (op2 in27 lowercase)) (assert (and (op3 in27 uppercase)) (assert (and (op4 in27 special_char)) (assert (and (op5 in0 in1 in2 in3... in27))",
        "equivalent": false
      },
      "29": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op1 in5 digit)) (assert (and (op2 in5 lowercase)) (assert (and (op3 in5 uppercase)) (assert (and (op4 in5 special_char)) (assert (and (op1 in6 digit)) (assert (and (op2 in6 lowercase)) (assert (and (op3 in6 uppercase)) (assert (and (op4 in6 special_char)) (assert (and (op1 in7 digit)) (assert (and (op2 in7 lowercase)) (assert (and (op3 in7 uppercase)) (assert (and (op4 in7 special_char)) (assert (and (op1 in8 digit)) (assert (and (op2 in8 lowercase)) (assert (and (op3 in8 uppercase)) (assert (and (op4 in8 special_char)) (assert (and (op1 in9 digit)) (assert (and (op2 in9 lowercase)) (assert (and (op3 in9 uppercase)) (assert (and (op4 in9 special_char)) (assert (and (op1 in10 digit)) (assert (and (op2 in10 lowercase)) (assert (and (op3 in10 uppercase)) (assert (and (op4 in10 special_char)) (assert (and (op1 in11 digit)) (assert (and (op2 in11 lowercase)) (assert (and (op3 in11 uppercase)) (assert (and (op4 in11 special_char)) (assert (and (op1 in12 digit)) (assert (and (op2 in12 lowercase)) (assert (and (op3 in12 uppercase)) (assert (and (op4 in12 special_char)) (assert (and (op1 in13 digit)) (assert (and (op2 in13 lowercase)) (assert (and (op3 in13 uppercase)) (assert (and (op4 in13 special_char)) (assert (and (op1 in14 digit)) (assert (and (op2 in14 lowercase)) (assert (and (op3 in14 uppercase)) (assert (and (op4 in14 special_char)) (assert (and (op1 in15 digit)) (assert (and (op2 in15 lowercase)) (assert (and (op3 in15 uppercase)) (assert (and (op4 in15 special_char)) (assert (and (op1 in16 digit)) (assert (and (op2 in16 lowercase)) (assert (and (op3 in16 uppercase)) (assert (and (op4 in16 special_char)) (assert (and (op1 in17 digit)) (assert (and (op2 in17 lowercase)) (assert (and (op3 in17 uppercase)) (assert (and (op4 in17 special_char)) (assert (and (op1 in18 digit)) (assert (and (op2 in18 lowercase)) (assert (and (op3 in18 uppercase)) (assert (and (op4 in18 special_char)) (assert (and (op1 in19 digit)) (assert (and (op2 in19 lowercase)) (assert (and (op3 in19 uppercase)) (assert (and (op4 in19 special_char)) (assert (and (op1 in20 digit)) (assert (and (op2 in20 lowercase)) (assert (and (op3 in20 uppercase)) (assert (and (op4 in20 special_char)) (assert (and (op1 in21 digit)) (assert (and (op2 in21 lowercase)) (assert (and (op3 in21 uppercase)) (assert (and (op4 in21 special_char)) (assert (and (op1 in22 digit)) (assert (and (op2 in22 lowercase)) (assert (and (op3 in22 uppercase)) (assert (and (op4 in22 special_char)) (assert (and (op1 in23 digit)) (assert (and (op2 in23 lowercase)) (assert (and (op3 in23 uppercase)) (assert (and (op4 in23 special_char)) (assert (and (op1 in24 digit)) (assert (and (op2 in24 lowercase)) (assert (and (op3 in24 uppercase)) (assert (and (op4 in24 special_char)) (assert (and (op1 in25 digit)) (assert (and (op2 in25 lowercase)) (assert (and (op3 in25 uppercase)) (assert (and (op4 in25 special_char)) (assert (and (op1 in26 digit)) (assert (and (op2 in26 lowercase)) (assert (and (op3 in26 uppercase)) (assert (and (op4 in26 special_char)) (assert (and (op1 in27 digit)) (assert (and (op2 in27 lowercase)) (assert (and (op3 in27 uppercase)) (assert (and (op4 in27 special_char)) (assert (and (op1 in28 digit)) (assert (and (op2 in28 lowercase)) (assert (and (op3 in28 uppercase)) (assert (and (op4 in28 special_char)) (assert (and (op5 in0 in1 in2 in3... in28))",
        "equivalent": false
      },
      "30": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (op1 in0 digit)) (assert (and (op2 in0 lowercase)) (assert (and (op3 in0 uppercase)) (assert (and (op4 in0 special_char)) (assert (and (op1 in1 digit)) (assert (and (op2 in1 lowercase)) (assert (and (op3 in1 uppercase)) (assert (and (op4 in1 special_char)) (assert (and (op1 in2 digit)) (assert (and (op2 in2 lowercase)) (assert (and (op3 in2 uppercase)) (assert (and (op4 in2 special_char)) (assert (and (op1 in3 digit)) (assert (and (op2 in3 lowercase)) (assert (and (op3 in3 uppercase)) (assert (and (op4 in3 special_char)) (assert (and (op1 in4 digit)) (assert (and (op2 in4 lowercase)) (assert (and (op3 in4 uppercase)) (assert (and (op4 in4 special_char)) (assert (and (op1 in5 digit)) (assert (and (op2 in5 lowercase)) (assert (and (op3 in5 uppercase)) (assert (and (op4 in5 special_char)) (assert (and (op1 in6 digit)) (assert (and (op2 in6 lowercase)) (assert (and (op3 in6 uppercase)) (assert (and (op4 in6 special_char)) (assert (and (op1 in7 digit)) (assert (and (op2 in7 lowercase)) (assert (and (op3 in7 uppercase)) (assert (and (op4 in7 special_char)) (assert (and (op1 in8 digit)) (assert (and (op2 in8 lowercase)) (assert (and (op3 in8 uppercase)) (assert (and (op4 in8 special_char)) (assert (and (op1 in9 digit)) (assert (and (op2 in9 lowercase)) (assert (and (op3 in9 uppercase)) (assert (and (op4 in9 special_char)) (assert (and (op1 in10 digit)) (assert (and (op2 in10 lowercase)) (assert (and (op3 in10 uppercase)) (assert (and (op4 in10 special_char)) (assert (and (op1 in11 digit)) (assert (and (op2 in11 lowercase)) (assert (and (op3 in11 uppercase)) (assert (and (op4 in11 special_char)) (assert (and (op1 in12 digit)) (assert (and (op2 in12 lowercase)) (assert (and (op3 in12 uppercase)) (assert (and (op4 in12 special_char)) (assert (and (op1 in13 digit)) (assert (and (op2 in13 lowercase)) (assert (and (op3 in13 uppercase)) (assert (and (op4 in13 special_char)) (assert (and (op1 in14 digit)) (assert (and (op2 in14 lowercase)) (assert (and (op3 in14 uppercase)) (assert (and (op4 in14 special_char)) (assert (and (op1 in15 digit)) (assert (and (op2 in15 lowercase)) (assert (and (op3 in15 uppercase)) (assert (and (op4 in15 special_char)) (assert (and (op1 in16 digit)) (assert (and (op2 in16 lowercase)) (assert (and (op3 in16 uppercase)) (assert (and (op4 in16 special_char)) (assert (and (op1 in17 digit)) (assert (and (op2 in17 lowercase)) (assert (and (op3 in17 uppercase)) (assert (and (op4 in17 special_char)) (assert (and (op1 in18 digit)) (assert (and (op2 in18 lowercase)) (assert (and (op3 in18 uppercase)) (assert (and (op4 in18 special_char)) (assert (and (op1 in19 digit)) (assert (and (op2 in19 lowercase)) (assert (and (op3 in19 uppercase)) (assert (and (op4 in19 special_char)) (assert (and (op1 in20 digit)) (assert (and (op2 in20 lowercase)) (assert (and (op3 in20 uppercase)) (assert (and (op4 in20 special_char)) (assert (and (op1 in21 digit)) (assert (and (op2 in21 lowercase)) (assert (and (op3 in21 uppercase)) (assert (and (op4 in21 special_char)) (assert (and (op1 in22 digit)) (assert (and (op2 in22 lowercase)) (assert (and (op3 in22 uppercase)) (assert (and (op4 in22 special_char)) (assert (and (op1 in23 digit)) (assert (and (op2 in23 lowercase)) (assert (and (op3 in23 uppercase)) (assert (and (op4 in23 special_char)) (assert (and (op1 in24 digit)) (assert (and (op2 in24 lowercase)) (assert (and (op3 in24 uppercase)) (assert (and (op4 in24 special_char)) (assert (and (op1 in25 digit)) (assert (and (op2 in25 lowercase)) (assert (and (op3 in25 uppercase)) (assert (and (op4 in25 special_char)) (assert (and (op1 in26 digit)) (assert (and (op2 in26 lowercase)) (assert (and (op3 in26 uppercase)) (assert (and (op4 in26 special_char)) (assert (and (op1 in27 digit)) (assert (and (op2 in27 lowercase)) (assert (and (op3 in27 uppercase)) (assert (and (op4 in27 special_char)) (assert (and (op1 in28 digit)) (assert (and (op2 in28 lowercase)) (assert (and (op3 in28 uppercase)) (assert (and (op4 in28 special_char)) (assert (and (op1 in29 digit)) (assert (and (op2 in29 lowercase)) (assert (and (op3 in29 uppercase)) (assert (and (op4 in29 special_char)) (assert (and (op5 in0 in1 in2 in3... in29))",
        "equivalent": false
      }
    }
  },
  "BadgerUsername": {
    "succeeded": false,
    "attempts": 10,
    "examples_right": 0,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))",
        "equivalent": false
      },
      "2": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))",
        "equivalent": false
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)))"
          ]
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))",
        "equivalent": false
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)))"
          ]
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))",
        "equivalent": false
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)))"
          ]
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))",
        "equivalent": false
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)))"
          ]
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))\n(assert (not (= in5 95)) (= in5 45))",
        "equivalent": false
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)))"
          ]
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))\n(assert (not (= in5 95)) (= in5 45))\n(assert (not (= in6 95)) (= in6 45))",
        "equivalent": false
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)) (not ( = in7 95)))  ( =  in7 45)))"
          ]
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))\n(assert (not (= in5 95)) (= in5 45))\n(assert (not (= in6 95)) (= in6 45))\n(assert (not (= in7 95)) (= in7 45))",
        "equivalent": false
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)) (not ( = in7 95)))  ( =  in7 45)) (not ( = in8 95)))  ( =  in8 45)))"
          ]
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))\n(assert (not (= in5 95)) (= in5 45))\n(assert (not (= in6 95)) (= in6 45))\n(assert (not (= in7 95)) (= in7 45))\n(assert (not (= in8 95)) (= in8 45))",
        "equivalent": false
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)) (not ( = in7 95)))  ( =  in7 45)) (not ( = in8 95)))  ( =  in8 45)) (not ( = in9 95)))  ( =  in9 45)))"
          ]
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))\n(assert (not (= in5 95)) (= in5 45))\n(assert (not (= in6 95)) (= in6 45))\n(assert (not (= in7 95)) (= in7 45))\n(assert (not (= in8 95)) (= in8 45))\n(assert (not (= in9 95)) (= in9 45))",
        "equivalent": false
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)) (not ( = in7 95)))  ( =  in7 45)) (not ( = in8 95)))  ( =  in8 45)) (not ( = in9 95)))  ( =  in9 45)) (not ( = in10 95)))  ( =  in10 45)))"
          ]
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))\n(assert (not (= in5 95)) (= in5 45))\n(assert (not (= in6 95)) (= in6 45))\n(assert (not (= in7 95)) (= in7 45))\n(assert (not (= in8 95)) (= in8 45))\n(assert (not (= in9 95)) (= in9 45))\n(assert (not (= in10 95)) (= in10 45))",
        "equivalent": false
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)) (not ( = in7 95)))  ( =  in7 45)) (not ( = in8 95)))  ( =  in8 45)) (not ( = in9 95)))  ( =  in9 45)) (not ( = in10 95)))  ( =  in10 45)) (not ( = in11 95)))  ( =  in11 45)))"
          ]
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))\n(assert (not (= in5 95)) (= in5 45))\n(assert (not (= in6 95)) (= in6 45))\n(assert (not (= in7 95)) (= in7 45))\n(assert (not (= in8 95)) (= in8 45))\n(assert (not (= in9 95)) (= in9 45))\n(assert (not (= in10 95)) (= in10 45))\n(assert (not (= in11 95)) (= in11 45))",
        "equivalent": false
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)) (not ( = in7 95)))  ( =  in7 45)) (not ( = in8 95)))  ( =  in8 45)) (not ( = in9 95)))  ( =  in9 45)) (not ( = in10 95)))  ( =  in10 45)) (not ( = in11 95)))  ( =  in11 45)) (not ( = in12 95)))  ( =  in12 45)))"
          ]
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))\n(assert (not (= in5 95)) (= in5 45))\n(assert (not (= in6 95)) (= in6 45))\n(assert (not (= in7 95)) (= in7 45))\n(assert (not (= in8 95)) (= in8 45))\n(assert (not (= in9 95)) (= in9 45))\n(assert (not (= in10 95)) (= in10 45))\n(assert (not (= in11 95)) (= in11 45))\n(assert (not (= in12 95)) (= in12 45))",
        "equivalent": false
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)) (not ( = in7 95)))  ( =  in7 45)) (not ( = in8 95)))  ( =  in8 45)) (not ( = in9 95)))  ( =  in9 45)) (not ( = in10 95)))  ( =  in10 45)) (not ( = in11 95)))  ( =  in11 45)) (not ( = in12 95)))  ( =  in12 45)) (not ( = in13 95)))  ( =  in13 45)))"
          ]
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))\n(assert (not (= in5 95)) (= in5 45))\n(assert (not (= in6 95)) (= in6 45))\n(assert (not (= in7 95)) (= in7 45))\n(assert (not (= in8 95)) (= in8 45))\n(assert (not (= in9 95)) (= in9 45))\n(assert (not (= in10 95)) (= in10 45))\n(assert (not (= in11 95)) (= in11 45))\n(assert (not (= in12 95)) (= in12 45))\n(assert (not (= in13 95)) (= in13 45))",
        "equivalent": false
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)) (not ( = in7 95)))  ( =  in7 45)) (not ( = in8 95)))  ( =  in8 45)) (not ( = in9 95)))  ( =  in9 45)) (not ( = in10 95)))  ( =  in10 45)) (not ( = in11 95)))  ( =  in11 45)) (not ( = in12 95)))  ( =  in12 45)) (not ( = in13 95)))  ( =  in13 45)) (not ( = in14 95)))  ( =  in14 45)))"
          ]
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))\n(assert (not (= in5 95)) (= in5 45))\n(assert (not (= in6 95)) (= in6 45))\n(assert (not (= in7 95)) (= in7 45))\n(assert (not (= in8 95)) (= in8 45))\n(assert (not (= in9 95)) (= in9 45))\n(assert (not (= in10 95)) (= in10 45))\n(assert (not (= in11 95)) (= in11 45))\n(assert (not (= in12 95)) (= in12 45))\n(assert (not (= in13 95)) (= in13 45))\n(assert (not (= in14 95)) (= in14 45))",
        "equivalent": false
      },
      "16": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))\n(assert (not (= in5 95)) (= in5 45))\n(assert (not (= in6 95)) (= in6 45))\n(assert (not (= in7 95)) (= in7 45))\n(assert (not (= in8 95)) (= in8 45))\n(assert (not (= in9 95)) (= in9 45))\n(assert (not (= in10 95)) (= in10 45))\n(assert (not (= in11 95)) (= in11 45))\n(assert (not (= in12 95)) (= in12 45))\n(assert (not (= in13 95)) (= in13 45))\n(assert (not (= in14 95)) (= in14 45))\n(assert (not (= in15 95)) (= in15 45))",
        "equivalent": false
      },
      "17": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))\n(assert (not (= in5 95)) (= in5 45))\n(assert (not (= in6 95)) (= in6 45))\n(assert (not (= in7 95)) (= in7 45))\n(assert (not (= in8 95)) (= in8 45))\n(assert (not (= in9 95)) (= in9 45))\n(assert (not (= in10 95)) (= in10 45))\n(assert (not (= in11 95)) (= in11 45))\n(assert (not (= in12 95)) (= in12 45))\n(assert (not (= in13 95)) (= in13 45))\n(assert (not (= in14 95)) (= in14 45))\n(assert (not (= in15 95)) (= in15 45))\n(assert (not (= in16 95)) (= in16 45))",
        "equivalent": false
      },
      "18": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))\n(assert (not (= in5 95)) (= in5 45))\n(assert (not (= in6 95)) (= in6 45))\n(assert (not (= in7 95)) (= in7 45))\n(assert (not (= in8 95)) (= in8 45))\n(assert (not (= in9 95)) (= in9 45))\n(assert (not (= in10 95)) (= in10 45))\n(assert (not (= in11 95)) (= in11 45))\n(assert (not (= in12 95)) (= in12 45))\n(assert (not (= in13 95)) (= in13 45))\n(assert (not (= in14 95)) (= in14 45))\n(assert (not (= in15 95)) (= in15 45))\n(assert (not (= in16 95)) (= in16 45))\n(assert (not (= in17 95)) (= in17 45))",
        "equivalent": false
      },
      "19": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))\n(assert (not (= in5 95)) (= in5 45))\n(assert (not (= in6 95)) (= in6 45))\n(assert (not (= in7 95)) (= in7 45))\n(assert (not (= in8 95)) (= in8 45))\n(assert (not (= in9 95)) (= in9 45))\n(assert (not (= in10 95)) (= in10 45))\n(assert (not (= in11 95)) (= in11 45))\n(assert (not (= in12 95)) (= in12 45))\n(assert (not (= in13 95)) (= in13 45))\n(assert (not (= in14 95)) (= in14 45))\n(assert (not (= in15 95)) (= in15 45))\n(assert (not (= in16 95)) (= in16 45))\n(assert (not (= in17 95)) (= in17 45))\n(assert (not (= in18 95)) (= in18 45))",
        "equivalent": false
      },
      "20": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))\n(assert (not (= in5 95)) (= in5 45))\n(assert (not (= in6 95)) (= in6 45))\n(assert (not (= in7 95)) (= in7 45))\n(assert (not (= in8 95)) (= in8 45))\n(assert (not (= in9 95)) (= in9 45))\n(assert (not (= in10 95)) (= in10 45))\n(assert (not (= in11 95)) (= in11 45))\n(assert (not (= in12 95)) (= in12 45))\n(assert (not (= in13 95)) (= in13 45))\n(assert (not (= in14 95)) (= in14 45))\n(assert (not (= in15 95)) (= in15 45))\n(assert (not (= in16 95)) (= in16 45))\n(assert (not (= in17 95)) (= in17 45))\n(assert (not (= in18 95)) (= in18 45))\n(assert (not (= in19 95)) (= in19 45))",
        "equivalent": false
      },
      "21": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))\n(assert (not (= in5 95)) (= in5 45))\n(assert (not (= in6 95)) (= in6 45))\n(assert (not (= in7 95)) (= in7 45))\n(assert (not (= in8 95)) (= in8 45))\n(assert (not (= in9 95)) (= in9 45))\n(assert (not (= in10 95)) (= in10 45))\n(assert (not (= in11 95)) (= in11 45))\n(assert (not (= in12 95)) (= in12 45))\n(assert (not (= in13 95)) (= in13 45))\n(assert (not (= in14 95)) (= in14 45))\n(assert (not (= in15 95)) (= in15 45))\n(assert (not (= in16 95)) (= in16 45))\n(assert (not (= in17 95)) (= in17 45))\n(assert (not (= in18 95)) (= in18 45))\n(assert (not (= in19 95)) (= in19 45))\n(assert (not (= in20 95)) (= in20 45))",
        "equivalent": false
      },
      "22": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))\n(assert (not (= in5 95)) (= in5 45))\n(assert (not (= in6 95)) (= in6 45))\n(assert (not (= in7 95)) (= in7 45))\n(assert (not (= in8 95)) (= in8 45))\n(assert (not (= in9 95)) (= in9 45))\n(assert (not (= in10 95)) (= in10 45))\n(assert (not (= in11 95)) (= in11 45))\n(assert (not (= in12 95)) (= in12 45))\n(assert (not (= in13 95)) (= in13 45))\n(assert (not (= in14 95)) (= in14 45))\n(assert (not (= in15 95)) (= in15 45))\n(assert (not (= in16 95)) (= in16 45))\n(assert (not (= in17 95)) (= in17 45))\n(assert (not (= in18 95)) (= in18 45))\n(assert (not (= in19 95)) (= in19 45))\n(assert (not (= in20 95)) (= in20 45))\n(assert (not (= in21 95)) (= in21 45))",
        "equivalent": false
      },
      "23": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))\n(assert (not (= in5 95)) (= in5 45))\n(assert (not (= in6 95)) (= in6 45))\n(assert (not (= in7 95)) (= in7 45))\n(assert (not (= in8 95)) (= in8 45))\n(assert (not (= in9 95)) (= in9 45))\n(assert (not (= in10 95)) (= in10 45))\n(assert (not (= in11 95)) (= in11 45))\n(assert (not (= in12 95)) (= in12 45))\n(assert (not (= in13 95)) (= in13 45))\n(assert (not (= in14 95)) (= in14 45))\n(assert (not (= in15 95)) (= in15 45))\n(assert (not (= in16 95)) (= in16 45))\n(assert (not (= in17 95)) (= in17 45))\n(assert (not (= in18 95)) (= in18 45))\n(assert (not (= in19 95)) (= in19 45))\n(assert (not (= in20 95)) (= in20 45))\n(assert (not (= in21 95)) (= in21 45))\n(assert (not (= in22 95)) (= in22 45))",
        "equivalent": false
      },
      "24": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))\n(assert (not (= in5 95)) (= in5 45))\n(assert (not (= in6 95)) (= in6 45))\n(assert (not (= in7 95)) (= in7 45))\n(assert (not (= in8 95)) (= in8 45))\n(assert (not (= in9 95)) (= in9 45))\n(assert (not (= in10 95)) (= in10 45))\n(assert (not (= in11 95)) (= in11 45))\n(assert (not (= in12 95)) (= in12 45))\n(assert (not (= in13 95)) (= in13 45))\n(assert (not (= in14 95)) (= in14 45))\n(assert (not (= in15 95)) (= in15 45))\n(assert (not (= in16 95)) (= in16 45))\n(assert (not (= in17 95)) (= in17 45))\n(assert (not (= in18 95)) (= in18 45))\n(assert (not (= in19 95)) (= in19 45))\n(assert (not (= in20 95)) (= in20 45))\n(assert (not (= in21 95)) (= in21 45))\n(assert (not (= in22 95)) (= in22 45))\n(assert (not (= in23 95)) (= in23 45))",
        "equivalent": false
      },
      "25": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))\n(assert (not (= in5 95)) (= in5 45))\n(assert (not (= in6 95)) (= in6 45))\n(assert (not (= in7 95)) (= in7 45))\n(assert (not (= in8 95)) (= in8 45))\n(assert (not (= in9 95)) (= in9 45))\n(assert (not (= in10 95)) (= in10 45))\n(assert (not (= in11 95)) (= in11 45))\n(assert (not (= in12 95)) (= in12 45))\n(assert (not (= in13 95)) (= in13 45))\n(assert (not (= in14 95)) (= in14 45))\n(assert (not (= in15 95)) (= in15 45))\n(assert (not (= in16 95)) (= in16 45))\n(assert (not (= in17 95)) (= in17 45))\n(assert (not (= in18 95)) (= in18 45))\n(assert (not (= in19 95)) (= in19 45))\n(assert (not (= in20 95)) (= in20 45))\n(assert (not (= in21 95)) (= in21 45))\n(assert (not (= in22 95)) (= in22 45))\n(assert (not (= in23 95)) (= in23 45))\n(assert (not (= in24 95)) (= in24 45))",
        "equivalent": false
      },
      "26": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))\n(assert (not (= in5 95)) (= in5 45))\n(assert (not (= in6 95)) (= in6 45))\n(assert (not (= in7 95)) (= in7 45))\n(assert (not (= in8 95)) (= in8 45))\n(assert (not (= in9 95)) (= in9 45))\n(assert (not (= in10 95)) (= in10 45))\n(assert (not (= in11 95)) (= in11 45))\n(assert (not (= in12 95)) (= in12 45))\n(assert (not (= in13 95)) (= in13 45))\n(assert (not (= in14 95)) (= in14 45))\n(assert (not (= in15 95)) (= in15 45))\n(assert (not (= in16 95)) (= in16 45))\n(assert (not (= in17 95)) (= in17 45))\n(assert (not (= in18 95)) (= in18 45))\n(assert (not (= in19 95)) (= in19 45))\n(assert (not (= in20 95)) (= in20 45))\n(assert (not (= in21 95)) (= in21 45))\n(assert (not (= in22 95)) (= in22 45))\n(assert (not (= in23 95)) (= in23 45))\n(assert (not (= in24 95)) (= in24 45))\n(assert (not (= in25 95)) (= in25 45))",
        "equivalent": false
      },
      "27": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))\n(assert (not (= in5 95)) (= in5 45))\n(assert (not (= in6 95)) (= in6 45))\n(assert (not (= in7 95)) (= in7 45))\n(assert (not (= in8 95)) (= in8 45))\n(assert (not (= in9 95)) (= in9 45))\n(assert (not (= in10 95)) (= in10 45))\n(assert (not (= in11 95)) (= in11 45))\n(assert (not (= in12 95)) (= in12 45))\n(assert (not (= in13 95)) (= in13 45))\n(assert (not (= in14 95)) (= in14 45))\n(assert (not (= in15 95)) (= in15 45))\n(assert (not (= in16 95)) (= in16 45))\n(assert (not (= in17 95)) (= in17 45))\n(assert (not (= in18 95)) (= in18 45))\n(assert (not (= in19 95)) (= in19 45))\n(assert (not (= in20 95)) (= in20 45))\n(assert (not (= in21 95)) (= in21 45))\n(assert (not (= in22 95)) (= in22 45))\n(assert (not (= in23 95)) (= in23 45))\n(assert (not (= in24 95)) (= in24 45))\n(assert (not (= in25 95)) (= in25 45))\n(assert (not (= in26 95)) (= in26 45))",
        "equivalent": false
      },
      "28": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))\n(assert (not (= in5 95)) (= in5 45))\n(assert (not (= in6 95)) (= in6 45))\n(assert (not (= in7 95)) (= in7 45))\n(assert (not (= in8 95)) (= in8 45))\n(assert (not (= in9 95)) (= in9 45))\n(assert (not (= in10 95)) (= in10 45))\n(assert (not (= in11 95)) (= in11 45))\n(assert (not (= in12 95)) (= in12 45))\n(assert (not (= in13 95)) (= in13 45))\n(assert (not (= in14 95)) (= in14 45))\n(assert (not (= in15 95)) (= in15 45))\n(assert (not (= in16 95)) (= in16 45))\n(assert (not (= in17 95)) (= in17 45))\n(assert (not (= in18 95)) (= in18 45))\n(assert (not (= in19 95)) (= in19 45))\n(assert (not (= in20 95)) (= in20 45))\n(assert (not (= in21 95)) (= in21 45))\n(assert (not (= in22 95)) (= in22 45))\n(assert (not (= in23 95)) (= in23 45))\n(assert (not (= in24 95)) (= in24 45))\n(assert (not (= in25 95)) (= in25 45))\n(assert (not (= in26 95)) (= in26 45))\n(assert (not (= in27 95)) (= in27 45))",
        "equivalent": false
      },
      "29": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))\n(assert (not (= in5 95)) (= in5 45))\n(assert (not (= in6 95)) (= in6 45))\n(assert (not (= in7 95)) (= in7 45))\n(assert (not (= in8 95)) (= in8 45))\n(assert (not (= in9 95)) (= in9 45))\n(assert (not (= in10 95)) (= in10 45))\n(assert (not (= in11 95)) (= in11 45))\n(assert (not (= in12 95)) (= in12 45))\n(assert (not (= in13 95)) (= in13 45))\n(assert (not (= in14 95)) (= in14 45))\n(assert (not (= in15 95)) (= in15 45))\n(assert (not (= in16 95)) (= in16 45))\n(assert (not (= in17 95)) (= in17 45))\n(assert (not (= in18 95)) (= in18 45))\n(assert (not (= in19 95)) (= in19 45))\n(assert (not (= in20 95)) (= in20 45))\n(assert (not (= in21 95)) (= in21 45))\n(assert (not (= in22 95)) (= in22 45))\n(assert (not (= in23 95)) (= in23 45))\n(assert (not (= in24 95)) (= in24 45))\n(assert (not (= in25 95)) (= in25 45))\n(assert (not (= in26 95)) (= in26 45))\n(assert (not (= in27 95)) (= in27 45))\n(assert (not (= in28 95)) (= in28 45))",
        "equivalent": false
      },
      "30": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (not (= in0 95)) (= in0 45))\n(assert (not (= in1 95)) (= in1 45))\n(assert (not (= in2 95)) (= in2 45))\n(assert (not (= in3 95)) (= in3 45))\n(assert (not (= in4 95)) (= in4 45))\n(assert (not (= in5 95)) (= in5 45))\n(assert (not (= in6 95)) (= in6 45))\n(assert (not (= in7 95)) (= in7 45))\n(assert (not (= in8 95)) (= in8 45))\n(assert (not (= in9 95)) (= in9 45))\n(assert (not (= in10 95)) (= in10 45))\n(assert (not (= in11 95)) (= in11 45))\n(assert (not (= in12 95)) (= in12 45))\n(assert (not (= in13 95)) (= in13 45))\n(assert (not (= in14 95)) (= in14 45))\n(assert (not (= in15 95)) (= in15 45))\n(assert (not (= in16 95)) (= in16 45))\n(assert (not (= in17 95)) (= in17 45))\n(assert (not (= in18 95)) (= in18 45))\n(assert (not (= in19 95)) (= in19 45))\n(assert (not (= in20 95)) (= in20 45))\n(assert (not (= in21 95)) (= in21 45))\n(assert (not (= in22 95)) (= in22 45))\n(assert (not (= in23 95)) (= in23 45))\n(assert (not (= in24 95)) (= in24 45))\n(assert (not (= in25 95)) (= in25 45))\n(assert (not (= in26 95)) (= in26 45))\n(assert (not (= in27 95)) (= in27 45))\n(assert (not (= in28 95)) (= in28 45))\n(assert (not (= in29 95)) (= in29 45))",
        "equivalent": false
      }
    }
  },
  "ComplexFlipPos_2": {
    "succeeded": false,
    "attempts": 10,
    "examples_right": 0,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "2": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "3": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "4": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "5": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "6": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "7": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "8": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "9": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "10": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "11": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "12": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "13": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "14": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "15": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "16": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "17": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "18": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "19": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "20": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "21": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "22": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "23": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "24": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "25": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "26": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "27": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "28": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "29": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      },
      "30": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert true)",
        "equivalent": false
      }
    }
  },
  "ComplexHalfEqual": {
    "succeeded": false,
    "attempts": 10,
    "examples_right": 0,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert  ( =  in0 in1))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and  ( =  in0 in1)  ( <  in1 in2)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( =  in0 in1)  ( =  in1 in2))  ( <  in2 in3)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( <  in2 in3))  ( <  in3 in4)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( <  in4 in5)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( =  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( =  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( =  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( =  in9 in10))  ( =  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21))  ( <  in21 in22)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( =  in9 in10))  ( =  in10 in11))  ( =  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21))  ( <  in21 in22))  ( <  in22 in23)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( =  in9 in10))  ( =  in10 in11))  ( =  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21))  ( <  in21 in22))  ( <  in22 in23))  ( <  in23 in24)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( =  in9 in10))  ( =  in10 in11))  ( =  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21))  ( <  in21 in22))  ( <  in22 in23))  ( <  in23 in24))  ( <  in24 in25)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( =  in9 in10))  ( =  in10 in11))  ( =  in11 in12))  ( =  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21))  ( <  in21 in22))  ( <  in22 in23))  ( <  in23 in24))  ( <  in24 in25))  ( <  in25 in26)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( =  in9 in10))  ( =  in10 in11))  ( =  in11 in12))  ( =  in12 in13))  ( =  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21))  ( <  in21 in22))  ( <  in22 in23))  ( <  in23 in24))  ( <  in24 in25))  ( <  in25 in26))  ( <  in26 in27)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( =  in9 in10))  ( =  in10 in11))  ( =  in11 in12))  ( =  in12 in13))  ( =  in13 in14))  ( <  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21))  ( <  in21 in22))  ( <  in22 in23))  ( <  in23 in24))  ( <  in24 in25))  ( <  in25 in26))  ( <  in26 in27))  ( <  in27 in28)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 in1)  ( =  in1 in2))  ( =  in2 in3))  ( =  in3 in4))  ( =  in4 in5))  ( =  in5 in6))  ( =  in6 in7))  ( =  in7 in8))  ( =  in8 in9))  ( =  in9 in10))  ( =  in10 in11))  ( =  in11 in12))  ( =  in12 in13))  ( =  in13 in14))  ( =  in14 in15))  ( <  in15 in16))  ( <  in16 in17))  ( <  in17 in18))  ( <  in18 in19))  ( <  in19 in20))  ( <  in20 in21))  ( <  in21 in22))  ( <  in22 in23))  ( <  in23 in24))  ( <  in24 in25))  ( <  in25 in26))  ( <  in26 in27))  ( <  in27 in28))  ( <  in28 in29)))"
          ]
        },
        "predicted": "(assert (and (forall (x Int) (y Int) (>= x 0) (< x N) (>= y 0) (< y N) (= (select a x) (select a y)) (< (select a x) (select a y)))))",
        "equivalent": false
      }
    }
  },
  "ComplexMidPeak": {
    "succeeded": false,
    "attempts": 10,
    "examples_right": 0,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert  ( <  in0 in1))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and  ( <  in0 in1)  ( >  in1 in2)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( <  in0 in1)  ( <  in1 in2))  ( >  in2 in3)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( >  in2 in3))  ( >  in3 in4)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( >  in3 in4))  ( >  in4 in5)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( >  in3 in4))  ( >  in4 in5))  ( >  in5 in6)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( >  in4 in5))  ( >  in5 in6))  ( >  in6 in7)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( >  in4 in5))  ( >  in5 in6))  ( >  in6 in7))  ( >  in7 in8)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( >  in5 in6))  ( >  in6 in7))  ( >  in7 in8))  ( >  in8 in9)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( >  in5 in6))  ( >  in6 in7))  ( >  in7 in8))  ( >  in8 in9))  ( >  in9 in10)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( >  in6 in7))  ( >  in7 in8))  ( >  in8 in9))  ( >  in9 in10))  ( >  in10 in11)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( >  in6 in7))  ( >  in7 in8))  ( >  in8 in9))  ( >  in9 in10))  ( >  in10 in11))  ( >  in11 in12)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( >  in7 in8))  ( >  in8 in9))  ( >  in9 in10))  ( >  in10 in11))  ( >  in11 in12))  ( >  in12 in13)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( >  in7 in8))  ( >  in8 in9))  ( >  in9 in10))  ( >  in10 in11))  ( >  in11 in12))  ( >  in12 in13))  ( >  in13 in14)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( >  in8 in9))  ( >  in9 in10))  ( >  in10 in11))  ( >  in11 in12))  ( >  in12 in13))  ( >  in13 in14))  ( >  in14 in15)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( >  in8 in9))  ( >  in9 in10))  ( >  in10 in11))  ( >  in11 in12))  ( >  in12 in13))  ( >  in13 in14))  ( >  in14 in15))  ( >  in15 in16)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( >  in9 in10))  ( >  in10 in11))  ( >  in11 in12))  ( >  in12 in13))  ( >  in13 in14))  ( >  in14 in15))  ( >  in15 in16))  ( >  in16 in17)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( >  in9 in10))  ( >  in10 in11))  ( >  in11 in12))  ( >  in12 in13))  ( >  in13 in14))  ( >  in14 in15))  ( >  in15 in16))  ( >  in16 in17))  ( >  in17 in18)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( >  in10 in11))  ( >  in11 in12))  ( >  in12 in13))  ( >  in13 in14))  ( >  in14 in15))  ( >  in15 in16))  ( >  in16 in17))  ( >  in17 in18))  ( >  in18 in19)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( >  in10 in11))  ( >  in11 in12))  ( >  in12 in13))  ( >  in13 in14))  ( >  in14 in15))  ( >  in15 in16))  ( >  in16 in17))  ( >  in17 in18))  ( >  in18 in19))  ( >  in19 in20)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( >  in11 in12))  ( >  in12 in13))  ( >  in13 in14))  ( >  in14 in15))  ( >  in15 in16))  ( >  in16 in17))  ( >  in17 in18))  ( >  in18 in19))  ( >  in19 in20))  ( >  in20 in21)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( >  in11 in12))  ( >  in12 in13))  ( >  in13 in14))  ( >  in14 in15))  ( >  in15 in16))  ( >  in16 in17))  ( >  in17 in18))  ( >  in18 in19))  ( >  in19 in20))  ( >  in20 in21))  ( >  in21 in22)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( >  in12 in13))  ( >  in13 in14))  ( >  in14 in15))  ( >  in15 in16))  ( >  in16 in17))  ( >  in17 in18))  ( >  in18 in19))  ( >  in19 in20))  ( >  in20 in21))  ( >  in21 in22))  ( >  in22 in23)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( >  in12 in13))  ( >  in13 in14))  ( >  in14 in15))  ( >  in15 in16))  ( >  in16 in17))  ( >  in17 in18))  ( >  in18 in19))  ( >  in19 in20))  ( >  in20 in21))  ( >  in21 in22))  ( >  in22 in23))  ( >  in23 in24)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( >  in13 in14))  ( >  in14 in15))  ( >  in15 in16))  ( >  in16 in17))  ( >  in17 in18))  ( >  in18 in19))  ( >  in19 in20))  ( >  in20 in21))  ( >  in21 in22))  ( >  in22 in23))  ( >  in23 in24))  ( >  in24 in25)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( >  in13 in14))  ( >  in14 in15))  ( >  in15 in16))  ( >  in16 in17))  ( >  in17 in18))  ( >  in18 in19))  ( >  in19 in20))  ( >  in20 in21))  ( >  in21 in22))  ( >  in22 in23))  ( >  in23 in24))  ( >  in24 in25))  ( >  in25 in26)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( >  in14 in15))  ( >  in15 in16))  ( >  in16 in17))  ( >  in17 in18))  ( >  in18 in19))  ( >  in19 in20))  ( >  in20 in21))  ( >  in21 in22))  ( >  in22 in23))  ( >  in23 in24))  ( >  in24 in25))  ( >  in25 in26))  ( >  in26 in27)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( >  in14 in15))  ( >  in15 in16))  ( >  in16 in17))  ( >  in17 in18))  ( >  in18 in19))  ( >  in19 in20))  ( >  in20 in21))  ( >  in21 in22))  ( >  in22 in23))  ( >  in23 in24))  ( >  in24 in25))  ( >  in25 in26))  ( >  in26 in27))  ( >  in27 in28)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in1)  ( <  in1 in2))  ( <  in2 in3))  ( <  in3 in4))  ( <  in4 in5))  ( <  in5 in6))  ( <  in6 in7))  ( <  in7 in8))  ( <  in8 in9))  ( <  in9 in10))  ( <  in10 in11))  ( <  in11 in12))  ( <  in12 in13))  ( <  in13 in14))  ( <  in14 in15))  ( >  in15 in16))  ( >  in16 in17))  ( >  in17 in18))  ( >  in18 in19))  ( >  in19 in20))  ( >  in20 in21))  ( >  in21 in22))  ( >  in22 in23))  ( >  in23 in24))  ( >  in24 in25))  ( >  in25 in26))  ( >  in26 in27))  ( >  in27 in28))  ( >  in28 in29)))"
          ]
        },
        "predicted": "(assert (and (forall (x) (y) (>= x y)) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i})) (and (< x{i} x{i+1}) (> x{i+1} x{i}))))(assert (< in0 in1))(assert (= (len in) N))",
        "equivalent": false
      }
    }
  },
  "ComplexPalindrome": {
    "succeeded": false,
    "attempts": 10,
    "examples_right": 1,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert  ( <  in0 in1))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( <  in0 in2))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and  ( <  in0 in3)  ( <  in1 in2)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and  ( <  in0 in4)  ( <  in1 in3)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( <  in0 in5)  ( <  in1 in4))  ( <  in2 in3)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( <  in0 in6)  ( <  in1 in5))  ( <  in2 in4)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( <  in0 in7)  ( <  in1 in6))  ( <  in2 in5))  ( <  in3 in4)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( <  in0 in8)  ( <  in1 in7))  ( <  in2 in6))  ( <  in3 in5)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( <  in0 in9)  ( <  in1 in8))  ( <  in2 in7))  ( <  in3 in6))  ( <  in4 in5)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( <  in0 in10)  ( <  in1 in9))  ( <  in2 in8))  ( <  in3 in7))  ( <  in4 in6)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( <  in0 in11)  ( <  in1 in10))  ( <  in2 in9))  ( <  in3 in8))  ( <  in4 in7))  ( <  in5 in6)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in12 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( <  in0 in12)  ( <  in1 in11))  ( <  in2 in10))  ( <  in3 in9))  ( <  in4 in8))  ( <  in5 in7)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( <  in0 in13)  ( <  in1 in12))  ( <  in2 in11))  ( <  in3 in10))  ( <  in4 in9))  ( <  in5 in8))  ( <  in6 in7)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( <  in0 in14)  ( <  in1 in13))  ( <  in2 in12))  ( <  in3 in11))  ( <  in4 in10))  ( <  in5 in9))  ( <  in6 in8)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( <  in0 in15)  ( <  in1 in14))  ( <  in2 in13))  ( <  in3 in12))  ( <  in4 in11))  ( <  in5 in10))  ( <  in6 in9))  ( <  in7 in8)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( <  in0 in16)  ( <  in1 in15))  ( <  in2 in14))  ( <  in3 in13))  ( <  in4 in12))  ( <  in5 in11))  ( <  in6 in10))  ( <  in7 in9)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( <  in0 in17)  ( <  in1 in16))  ( <  in2 in15))  ( <  in3 in14))  ( <  in4 in13))  ( <  in5 in12))  ( <  in6 in11))  ( <  in7 in10))  ( <  in8 in9)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( <  in0 in18)  ( <  in1 in17))  ( <  in2 in16))  ( <  in3 in15))  ( <  in4 in14))  ( <  in5 in13))  ( <  in6 in12))  ( <  in7 in11))  ( <  in8 in10)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( <  in0 in19)  ( <  in1 in18))  ( <  in2 in17))  ( <  in3 in16))  ( <  in4 in15))  ( <  in5 in14))  ( <  in6 in13))  ( <  in7 in12))  ( <  in8 in11))  ( <  in9 in10)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in20 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( <  in0 in20)  ( <  in1 in19))  ( <  in2 in18))  ( <  in3 in17))  ( <  in4 in16))  ( <  in5 in15))  ( <  in6 in14))  ( <  in7 in13))  ( <  in8 in12))  ( <  in9 in11)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in20 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in21 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( <  in0 in21)  ( <  in1 in20))  ( <  in2 in19))  ( <  in3 in18))  ( <  in4 in17))  ( <  in5 in16))  ( <  in6 in15))  ( <  in7 in14))  ( <  in8 in13))  ( <  in9 in12))  ( <  in10 in11)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in20 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in21 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( <  in0 in22)  ( <  in1 in21))  ( <  in2 in20))  ( <  in3 in19))  ( <  in4 in18))  ( <  in5 in17))  ( <  in6 in16))  ( <  in7 in15))  ( <  in8 in14))  ( <  in9 in13))  ( <  in10 in12)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in20 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in22 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in21 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in23 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in23)  ( <  in1 in22))  ( <  in2 in21))  ( <  in3 in20))  ( <  in4 in19))  ( <  in5 in18))  ( <  in6 in17))  ( <  in7 in16))  ( <  in8 in15))  ( <  in9 in14))  ( <  in10 in13))  ( <  in11 in12)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in20 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in22 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in21 Int)",
            "(declare-const in13 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in24)  ( <  in1 in23))  ( <  in2 in22))  ( <  in3 in21))  ( <  in4 in20))  ( <  in5 in19))  ( <  in6 in18))  ( <  in7 in17))  ( <  in8 in16))  ( <  in9 in15))  ( <  in10 in14))  ( <  in11 in13)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in25)  ( <  in1 in24))  ( <  in2 in23))  ( <  in3 in22))  ( <  in4 in21))  ( <  in5 in20))  ( <  in6 in19))  ( <  in7 in18))  ( <  in8 in17))  ( <  in9 in16))  ( <  in10 in15))  ( <  in11 in14))  ( <  in12 in13)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in26)  ( <  in1 in25))  ( <  in2 in24))  ( <  in3 in23))  ( <  in4 in22))  ( <  in5 in21))  ( <  in6 in20))  ( <  in7 in19))  ( <  in8 in18))  ( <  in9 in17))  ( <  in10 in16))  ( <  in11 in15))  ( <  in12 in14)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in27)  ( <  in1 in26))  ( <  in2 in25))  ( <  in3 in24))  ( <  in4 in23))  ( <  in5 in22))  ( <  in6 in21))  ( <  in7 in20))  ( <  in8 in19))  ( <  in9 in18))  ( <  in10 in17))  ( <  in11 in16))  ( <  in12 in15))  ( <  in13 in14)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in28)  ( <  in1 in27))  ( <  in2 in26))  ( <  in3 in25))  ( <  in4 in24))  ( <  in5 in23))  ( <  in6 in22))  ( <  in7 in21))  ( <  in8 in20))  ( <  in9 in19))  ( <  in10 in18))  ( <  in11 in17))  ( <  in12 in16))  ( <  in13 in15)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in29)  ( <  in1 in28))  ( <  in2 in27))  ( <  in3 in26))  ( <  in4 in25))  ( <  in5 in24))  ( <  in6 in23))  ( <  in7 in22))  ( <  in8 in21))  ( <  in9 in20))  ( <  in10 in19))  ( <  in11 in18))  ( <  in12 in17))  ( <  in13 in16))  ( <  in14 in15)))"
          ]
        },
        "predicted": "",
        "equivalent": false
      }
    }
  }
}