{
  "SameOnlyThird": {
    "succeeded": true,
    "attempts": 1,
    "examples_right": 30,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( =  in2 0))"
          ]
        },
        "predicted": "(assert (= in2 0))",
        "equivalent": true
      }
    }
  },
  "WeirdConstDiff": {
    "succeeded": false,
    "attempts": 10,
    "examples_right": 2,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert  ( =  ( -  in2 in1) ( -  in1 in0)))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0))",
        "equivalent": false
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1))",
        "equivalent": false
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2))",
        "equivalent": false
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2) and (= ( - in5 in4) ( - in4 in3))",
        "equivalent": false
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2) and (= ( - in5 in4) ( - in4 in3) and (= ( - in6 in5) ( - in5 in4))",
        "equivalent": false
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2) and (= ( - in5 in4) ( - in4 in3) and (= ( - in6 in5) ( - in5 in4) and (= ( - in7 in6) ( - in6 in5))",
        "equivalent": false
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2) and (= ( - in5 in4) ( - in4 in3) and (= ( - in6 in5) ( - in5 in4) and (= ( - in7 in6) ( - in6 in5) and (= ( - in8 in7) ( - in7 in6))",
        "equivalent": false
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2) and (= ( - in5 in4) ( - in4 in3) and (= ( - in6 in5) ( - in5 in4) and (= ( - in7 in6) ( - in6 in5) and (= ( - in8 in7) ( - in7 in6) and (= ( - in9 in8) ( - in8 in7))",
        "equivalent": false
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2) and (= ( - in5 in4) ( - in4 in3) and (= ( - in6 in5) ( - in5 in4) and (= ( - in7 in6) ( - in6 in5) and (= ( - in8 in7) ( - in7 in6) and (= ( - in9 in8) ( - in8 in7) and (= ( - in10 in9) ( - in9 in8))",
        "equivalent": false
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2) and (= ( - in5 in4) ( - in4 in3) and (= ( - in6 in5) ( - in5 in4) and (= ( - in7 in6) ( - in6 in5) and (= ( - in8 in7) ( - in7 in6) and (= ( - in9 in8) ( - in8 in7) and (= ( - in10 in9) ( - in9 in8) and (= ( - in11 in10) ( - in10 in9))",
        "equivalent": false
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2) and (= ( - in5 in4) ( - in4 in3) and (= ( - in6 in5) ( - in5 in4) and (= ( - in7 in6) ( - in6 in5) and (= ( - in8 in7) ( - in7 in6) and (= ( - in9 in8) ( - in8 in7) and (= ( - in10 in9) ( - in9 in8) and (= ( - in11 in10) ( - in10 in9) and (= ( - in12 in11) ( - in11 in10))",
        "equivalent": false
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2) and (= ( - in5 in4) ( - in4 in3) and (= ( - in6 in5) ( - in5 in4) and (= ( - in7 in6) ( - in6 in5) and (= ( - in8 in7) ( - in7 in6) and (= ( - in9 in8) ( - in8 in7) and (= ( - in10 in9) ( - in9 in8) and (= ( - in11 in10) ( - in10 in9) and (= ( - in12 in11) ( - in11 in10) and (= ( - in13 in12) ( - in12 in11))",
        "equivalent": false
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2) and (= ( - in5 in4) ( - in4 in3) and (= ( - in6 in5) ( - in5 in4) and (= ( - in7 in6) ( - in6 in5) and (= ( - in8 in7) ( - in7 in6) and (= ( - in9 in8) ( - in8 in7) and (= ( - in10 in9) ( - in9 in8) and (= ( - in11 in10) ( - in10 in9) and (= ( - in12 in11) ( - in11 in10) and (= ( - in13 in12) ( - in12 in11) and (= ( - in14 in13) ( - in13 in12))",
        "equivalent": false
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2) and (= ( - in5 in4) ( - in4 in3) and (= ( - in6 in5) ( - in5 in4) and (= ( - in7 in6) ( - in6 in5) and (= ( - in8 in7) ( - in7 in6) and (= ( - in9 in8) ( - in8 in7) and (= ( - in10 in9) ( - in9 in8) and (= ( - in11 in10) ( - in10 in9) and (= ( - in12 in11) ( - in11 in10) and (= ( - in13 in12) ( - in12 in11) and (= ( - in14 in13) ( - in13 in12) and (= ( - in15 in14) ( - in14 in13))",
        "equivalent": false
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2) and (= ( - in5 in4) ( - in4 in3) and (= ( - in6 in5) ( - in5 in4) and (= ( - in7 in6) ( - in6 in5) and (= ( - in8 in7) ( - in7 in6) and (= ( - in9 in8) ( - in8 in7) and (= ( - in10 in9) ( - in9 in8) and (= ( - in11 in10) ( - in10 in9) and (= ( - in12 in11) ( - in11 in10) and (= ( - in13 in12) ( - in12 in11) and (= ( - in14 in13) ( - in13 in12) and (= ( - in15 in14) ( - in14 in13) and (= ( - in16 in15) ( - in15 in14))",
        "equivalent": false
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2) and (= ( - in5 in4) ( - in4 in3) and (= ( - in6 in5) ( - in5 in4) and (= ( - in7 in6) ( - in6 in5) and (= ( - in8 in7) ( - in7 in6) and (= ( - in9 in8) ( - in8 in7) and (= ( - in10 in9) ( - in9 in8) and (= ( - in11 in10) ( - in10 in9) and (= ( - in12 in11) ( - in11 in10) and (= ( - in13 in12) ( - in12 in11) and (= ( - in14 in13) ( - in13 in12) and (= ( - in15 in14) ( - in14 in13) and (= ( - in16 in15) ( - in15 in14) and (= ( - in17 in16) ( - in16 in15))",
        "equivalent": false
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15)))  ( =  ( -  in18 in17) ( -  in17 in16))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2) and (= ( - in5 in4) ( - in4 in3) and (= ( - in6 in5) ( - in5 in4) and (= ( - in7 in6) ( - in6 in5) and (= ( - in8 in7) ( - in7 in6) and (= ( - in9 in8) ( - in8 in7) and (= ( - in10 in9) ( - in9 in8) and (= ( - in11 in10) ( - in10 in9) and (= ( - in12 in11) ( - in11 in10) and (= ( - in13 in12) ( - in12 in11) and (= ( - in14 in13) ( - in13 in12) and (= ( - in15 in14) ( - in14 in13) and (= ( - in16 in15) ( - in15 in14) and (= ( - in17 in16) ( - in16 in15) and (= ( - in18 in17) ( - in17 in16))",
        "equivalent": false
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15)))  ( =  ( -  in18 in17) ( -  in17 in16)))  ( =  ( -  in19 in18) ( -  in18 in17))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2) and (= ( - in5 in4) ( - in4 in3) and (= ( - in6 in5) ( - in5 in4) and (= ( - in7 in6) ( - in6 in5) and (= ( - in8 in7) ( - in7 in6) and (= ( - in9 in8) ( - in8 in7) and (= ( - in10 in9) ( - in9 in8) and (= ( - in11 in10) ( - in10 in9) and (= ( - in12 in11) ( - in11 in10) and (= ( - in13 in12) ( - in12 in11) and (= ( - in14 in13) ( - in13 in12) and (= ( - in15 in14) ( - in14 in13) and (= ( - in16 in15) ( - in15 in14) and (= ( - in17 in16) ( - in16 in15) and (= ( - in18 in17) ( - in17 in16) and (= ( - in19 in18) ( - in18 in17))",
        "equivalent": false
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15)))  ( =  ( -  in18 in17) ( -  in17 in16)))  ( =  ( -  in19 in18) ( -  in18 in17)))  ( =  ( -  in20 in19) ( -  in19 in18))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2) and (= ( - in5 in4) ( - in4 in3) and (= ( - in6 in5) ( - in5 in4) and (= ( - in7 in6) ( - in6 in5) and (= ( - in8 in7) ( - in7 in6) and (= ( - in9 in8) ( - in8 in7) and (= ( - in10 in9) ( - in9 in8) and (= ( - in11 in10) ( - in10 in9) and (= ( - in12 in11) ( - in11 in10) and (= ( - in13 in12) ( - in12 in11) and (= ( - in14 in13) ( - in13 in12) and (= ( - in15 in14) ( - in14 in13) and (= ( - in16 in15) ( - in15 in14) and (= ( - in17 in16) ( - in16 in15) and (= ( - in18 in17) ( - in17 in16) and (= ( - in19 in18) ( - in18 in17) and (= ( - in20 in19) ( - in19 in18))",
        "equivalent": false
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15)))  ( =  ( -  in18 in17) ( -  in17 in16)))  ( =  ( -  in19 in18) ( -  in18 in17)))  ( =  ( -  in20 in19) ( -  in19 in18)))  ( =  ( -  in21 in20) ( -  in20 in19))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2) and (= ( - in5 in4) ( - in4 in3) and (= ( - in6 in5) ( - in5 in4) and (= ( - in7 in6) ( - in6 in5) and (= ( - in8 in7) ( - in7 in6) and (= ( - in9 in8) ( - in8 in7) and (= ( - in10 in9) ( - in9 in8) and (= ( - in11 in10) ( - in10 in9) and (= ( - in12 in11) ( - in11 in10) and (= ( - in13 in12) ( - in12 in11) and (= ( - in14 in13) ( - in13 in12) and (= ( - in15 in14) ( - in14 in13) and (= ( - in16 in15) ( - in15 in14) and (= ( - in17 in16) ( - in16 in15) and (= ( - in18 in17) ( - in17 in16) and (= ( - in19 in18) ( - in18 in17) and (= ( - in20 in19) ( - in19 in18) and (= ( - in21 in20) ( - in20 in19))",
        "equivalent": false
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15)))  ( =  ( -  in18 in17) ( -  in17 in16)))  ( =  ( -  in19 in18) ( -  in18 in17)))  ( =  ( -  in20 in19) ( -  in19 in18)))  ( =  ( -  in21 in20) ( -  in20 in19)))  ( =  ( -  in22 in21) ( -  in21 in20))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2) and (= ( - in5 in4) ( - in4 in3) and (= ( - in6 in5) ( - in5 in4) and (= ( - in7 in6) ( - in6 in5) and (= ( - in8 in7) ( - in7 in6) and (= ( - in9 in8) ( - in8 in7) and (= ( - in10 in9) ( - in9 in8) and (= ( - in11 in10) ( - in10 in9) and (= ( - in12 in11) ( - in11 in10) and (= ( - in13 in12) ( - in12 in11) and (= ( - in14 in13) ( - in13 in12) and (= ( - in15 in14) ( - in14 in13) and (= ( - in16 in15) ( - in15 in14) and (= ( - in17 in16) ( - in16 in15) and (= ( - in18 in17) ( - in17 in16) and (= ( - in19 in18) ( - in18 in17) and (= ( - in20 in19) ( - in19 in18) and (= ( - in21 in20) ( - in20 in19) and (= ( - in22 in21) ( - in21 in20))",
        "equivalent": false
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15)))  ( =  ( -  in18 in17) ( -  in17 in16)))  ( =  ( -  in19 in18) ( -  in18 in17)))  ( =  ( -  in20 in19) ( -  in19 in18)))  ( =  ( -  in21 in20) ( -  in20 in19)))  ( =  ( -  in22 in21) ( -  in21 in20)))  ( =  ( -  in23 in22) ( -  in22 in21))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2) and (= ( - in5 in4) ( - in4 in3) and (= ( - in6 in5) ( - in5 in4) and (= ( - in7 in6) ( - in6 in5) and (= ( - in8 in7) ( - in7 in6) and (= ( - in9 in8) ( - in8 in7) and (= ( - in10 in9) ( - in9 in8) and (= ( - in11 in10) ( - in10 in9) and (= ( - in12 in11) ( - in11 in10) and (= ( - in13 in12) ( - in12 in11) and (= ( - in14 in13) ( - in13 in12) and (= ( - in15 in14) ( - in14 in13) and (= ( - in16 in15) ( - in15 in14) and (= ( - in17 in16) ( - in16 in15) and (= ( - in18 in17) ( - in17 in16) and (= ( - in19 in18) ( - in18 in17) and (= ( - in20 in19) ( - in19 in18) and (= ( - in21 in20) ( - in20 in19) and (= ( - in22 in21) ( - in21 in20) and (= ( - in23 in22) ( - in22 in21))",
        "equivalent": false
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15)))  ( =  ( -  in18 in17) ( -  in17 in16)))  ( =  ( -  in19 in18) ( -  in18 in17)))  ( =  ( -  in20 in19) ( -  in19 in18)))  ( =  ( -  in21 in20) ( -  in20 in19)))  ( =  ( -  in22 in21) ( -  in21 in20)))  ( =  ( -  in23 in22) ( -  in22 in21)))  ( =  ( -  in24 in23) ( -  in23 in22))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2) and (= ( - in5 in4) ( - in4 in3) and (= ( - in6 in5) ( - in5 in4) and (= ( - in7 in6) ( - in6 in5) and (= ( - in8 in7) ( - in7 in6) and (= ( - in9 in8) ( - in8 in7) and (= ( - in10 in9) ( - in9 in8) and (= ( - in11 in10) ( - in10 in9) and (= ( - in12 in11) ( - in11 in10) and (= ( - in13 in12) ( - in12 in11) and (= ( - in14 in13) ( - in13 in12) and (= ( - in15 in14) ( - in14 in13) and (= ( - in16 in15) ( - in15 in14) and (= ( - in17 in16) ( - in16 in15) and (= ( - in18 in17) ( - in17 in16) and (= ( - in19 in18) ( - in18 in17) and (= ( - in20 in19) ( - in19 in18) and (= ( - in21 in20) ( - in20 in19) and (= ( - in22 in21) ( - in21 in20) and (= ( - in23 in22) ( - in22 in21) and (= ( - in24 in23) ( - in23 in22))",
        "equivalent": false
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15)))  ( =  ( -  in18 in17) ( -  in17 in16)))  ( =  ( -  in19 in18) ( -  in18 in17)))  ( =  ( -  in20 in19) ( -  in19 in18)))  ( =  ( -  in21 in20) ( -  in20 in19)))  ( =  ( -  in22 in21) ( -  in21 in20)))  ( =  ( -  in23 in22) ( -  in22 in21)))  ( =  ( -  in24 in23) ( -  in23 in22)))  ( =  ( -  in25 in24) ( -  in24 in23))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2) and (= ( - in5 in4) ( - in4 in3) and (= ( - in6 in5) ( - in5 in4) and (= ( - in7 in6) ( - in6 in5) and (= ( - in8 in7) ( - in7 in6) and (= ( - in9 in8) ( - in8 in7) and (= ( - in10 in9) ( - in9 in8) and (= ( - in11 in10) ( - in10 in9) and (= ( - in12 in11) ( - in11 in10) and (= ( - in13 in12) ( - in12 in11) and (= ( - in14 in13) ( - in13 in12) and (= ( - in15 in14) ( - in14 in13) and (= ( - in16 in15) ( - in15 in14) and (= ( - in17 in16) ( - in16 in15) and (= ( - in18 in17) ( - in17 in16) and (= ( - in19 in18) ( - in18 in17) and (= ( - in20 in19) ( - in19 in18) and (= ( - in21 in20) ( - in20 in19) and (= ( - in22 in21) ( - in21 in20) and (= ( - in23 in22) ( - in22 in21) and (= ( - in24 in23) ( - in23 in22) and (= ( - in25 in24) ( - in24 in23))",
        "equivalent": false
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15)))  ( =  ( -  in18 in17) ( -  in17 in16)))  ( =  ( -  in19 in18) ( -  in18 in17)))  ( =  ( -  in20 in19) ( -  in19 in18)))  ( =  ( -  in21 in20) ( -  in20 in19)))  ( =  ( -  in22 in21) ( -  in21 in20)))  ( =  ( -  in23 in22) ( -  in22 in21)))  ( =  ( -  in24 in23) ( -  in23 in22)))  ( =  ( -  in25 in24) ( -  in24 in23)))  ( =  ( -  in26 in25) ( -  in25 in24))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2) and (= ( - in5 in4) ( - in4 in3) and (= ( - in6 in5) ( - in5 in4) and (= ( - in7 in6) ( - in6 in5) and (= ( - in8 in7) ( - in7 in6) and (= ( - in9 in8) ( - in8 in7) and (= ( - in10 in9) ( - in9 in8) and (= ( - in11 in10) ( - in10 in9) and (= ( - in12 in11) ( - in11 in10) and (= ( - in13 in12) ( - in12 in11) and (= ( - in14 in13) ( - in13 in12) and (= ( - in15 in14) ( - in14 in13) and (= ( - in16 in15) ( - in15 in14) and (= ( - in17 in16) ( - in16 in15) and (= ( - in18 in17) ( - in17 in16) and (= ( - in19 in18) ( - in18 in17) and (= ( - in20 in19) ( - in19 in18) and (= ( - in21 in20) ( - in20 in19) and (= ( - in22 in21) ( - in21 in20) and (= ( - in23 in22) ( - in22 in21) and (= ( - in24 in23) ( - in23 in22) and (= ( - in25 in24) ( - in24 in23) and (= ( - in26 in25) ( - in25 in24))",
        "equivalent": false
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15)))  ( =  ( -  in18 in17) ( -  in17 in16)))  ( =  ( -  in19 in18) ( -  in18 in17)))  ( =  ( -  in20 in19) ( -  in19 in18)))  ( =  ( -  in21 in20) ( -  in20 in19)))  ( =  ( -  in22 in21) ( -  in21 in20)))  ( =  ( -  in23 in22) ( -  in22 in21)))  ( =  ( -  in24 in23) ( -  in23 in22)))  ( =  ( -  in25 in24) ( -  in24 in23)))  ( =  ( -  in26 in25) ( -  in25 in24)))  ( =  ( -  in27 in26) ( -  in26 in25))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2) and (= ( - in5 in4) ( - in4 in3) and (= ( - in6 in5) ( - in5 in4) and (= ( - in7 in6) ( - in6 in5) and (= ( - in8 in7) ( - in7 in6) and (= ( - in9 in8) ( - in8 in7) and (= ( - in10 in9) ( - in9 in8) and (= ( - in11 in10) ( - in10 in9) and (= ( - in12 in11) ( - in11 in10) and (= ( - in13 in12) ( - in12 in11) and (= ( - in14 in13) ( - in13 in12) and (= ( - in15 in14) ( - in14 in13) and (= ( - in16 in15) ( - in15 in14) and (= ( - in17 in16) ( - in16 in15) and (= ( - in18 in17) ( - in17 in16) and (= ( - in19 in18) ( - in18 in17) and (= ( - in20 in19) ( - in19 in18) and (= ( - in21 in20) ( - in20 in19) and (= ( - in22 in21) ( - in21 in20) and (= ( - in23 in22) ( - in22 in21) and (= ( - in24 in23) ( - in23 in22) and (= ( - in25 in24) ( - in24 in23) and (= ( - in26 in25) ( - in25 in24) and (= ( - in27 in26) ( - in26 in25))",
        "equivalent": false
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15)))  ( =  ( -  in18 in17) ( -  in17 in16)))  ( =  ( -  in19 in18) ( -  in18 in17)))  ( =  ( -  in20 in19) ( -  in19 in18)))  ( =  ( -  in21 in20) ( -  in20 in19)))  ( =  ( -  in22 in21) ( -  in21 in20)))  ( =  ( -  in23 in22) ( -  in22 in21)))  ( =  ( -  in24 in23) ( -  in23 in22)))  ( =  ( -  in25 in24) ( -  in24 in23)))  ( =  ( -  in26 in25) ( -  in25 in24)))  ( =  ( -  in27 in26) ( -  in26 in25)))  ( =  ( -  in28 in27) ( -  in27 in26))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2) and (= ( - in5 in4) ( - in4 in3) and (= ( - in6 in5) ( - in5 in4) and (= ( - in7 in6) ( - in6 in5) and (= ( - in8 in7) ( - in7 in6) and (= ( - in9 in8) ( - in8 in7) and (= ( - in10 in9) ( - in9 in8) and (= ( - in11 in10) ( - in10 in9) and (= ( - in12 in11) ( - in11 in10) and (= ( - in13 in12) ( - in12 in11) and (= ( - in14 in13) ( - in13 in12) and (= ( - in15 in14) ( - in14 in13) and (= ( - in16 in15) ( - in15 in14) and (= ( - in17 in16) ( - in16 in15) and (= ( - in18 in17) ( - in17 in16) and (= ( - in19 in18) ( - in18 in17) and (= ( - in20 in19) ( - in19 in18) and (= ( - in21 in20) ( - in20 in19) and (= ( - in22 in21) ( - in21 in20) and (= ( - in23 in22) ( - in22 in21) and (= ( - in24 in23) ( - in23 in22) and (= ( - in25 in24) ( - in24 in23) and (= ( - in26 in25) ( - in25 in24) and (= ( - in27 in26) ( - in26 in25) and (= ( - in28 in27) ( - in27 in26))",
        "equivalent": false
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  ( -  in2 in1) ( -  in1 in0))  ( =  ( -  in3 in2) ( -  in2 in1)))  ( =  ( -  in4 in3) ( -  in3 in2)))  ( =  ( -  in5 in4) ( -  in4 in3)))  ( =  ( -  in6 in5) ( -  in5 in4)))  ( =  ( -  in7 in6) ( -  in6 in5)))  ( =  ( -  in8 in7) ( -  in7 in6)))  ( =  ( -  in9 in8) ( -  in8 in7)))  ( =  ( -  in10 in9) ( -  in9 in8)))  ( =  ( -  in11 in10) ( -  in10 in9)))  ( =  ( -  in12 in11) ( -  in11 in10)))  ( =  ( -  in13 in12) ( -  in12 in11)))  ( =  ( -  in14 in13) ( -  in13 in12)))  ( =  ( -  in15 in14) ( -  in14 in13)))  ( =  ( -  in16 in15) ( -  in15 in14)))  ( =  ( -  in17 in16) ( -  in16 in15)))  ( =  ( -  in18 in17) ( -  in17 in16)))  ( =  ( -  in19 in18) ( -  in18 in17)))  ( =  ( -  in20 in19) ( -  in19 in18)))  ( =  ( -  in21 in20) ( -  in20 in19)))  ( =  ( -  in22 in21) ( -  in21 in20)))  ( =  ( -  in23 in22) ( -  in22 in21)))  ( =  ( -  in24 in23) ( -  in23 in22)))  ( =  ( -  in25 in24) ( -  in24 in23)))  ( =  ( -  in26 in25) ( -  in25 in24)))  ( =  ( -  in27 in26) ( -  in26 in25)))  ( =  ( -  in28 in27) ( -  in27 in26)))  ( =  ( -  in29 in28) ( -  in28 in27))))"
          ]
        },
        "predicted": "(assert (= ( - in2 in1) ( - in1 in0) and (= ( - in3 in2) ( - in2 in1) and (= ( - in4 in3) ( - in3 in2) and (= ( - in5 in4) ( - in4 in3) and (= ( - in6 in5) ( - in5 in4) and (= ( - in7 in6) ( - in6 in5) and (= ( - in8 in7) ( - in7 in6) and (= ( - in9 in8) ( - in8 in7) and (= ( - in10 in9) ( - in9 in8) and (= ( - in11 in10) ( - in10 in9) and (= ( - in12 in11) ( - in11 in10) and (= ( - in13 in12) ( - in12 in11) and (= ( - in14 in13) ( - in13 in12) and (= ( - in15 in14) ( - in14 in13) and (= ( - in16 in15) ( - in15 in14) and (= ( - in17 in16) ( - in16 in15) and (= ( - in18 in17) ( - in17 in16) and (= ( - in19 in18) ( - in18 in17) and (= ( - in20 in19) ( - in19 in18) and (= ( - in21 in20) ( - in20 in19) and (= ( - in22 in21) ( - in21 in20) and (= ( - in23 in22) ( - in22 in21) and (= ( - in24 in23) ( - in23 in22) and (= ( - in25 in24) ( - in24 in23) and (= ( - in26 in25) ( - in25 in24) and (= ( - in27 in26) ( - in26 in25) and (= ( - in28 in27) ( - in27 in26) and (= ( - in29 in28) ( - in28 in27))",
        "equivalent": false
      }
    }
  },
  "WeirdTimes": {
    "succeeded": false,
    "attempts": 10,
    "examples_right": 1,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert  ( =  in1 ( *  in0 2)))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 ))))",
        "equivalent": false
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 ))))",
        "equivalent": false
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 ))))",
        "equivalent": false
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 ))))",
        "equivalent": false
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 )) and ( = in5 ( * in0 6 ))))",
        "equivalent": false
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 )) and ( = in5 ( * in0 6 )) and ( = in6 ( * in0 7 ))))",
        "equivalent": false
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 )) and ( = in5 ( * in0 6 )) and ( = in6 ( * in0 7 )) and ( = in7 ( * in0 8 ))))",
        "equivalent": false
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 )) and ( = in5 ( * in0 6 )) and ( = in6 ( * in0 7 )) and ( = in7 ( * in0 8 )) and ( = in8 ( * in0 9 ))))",
        "equivalent": false
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 )) and ( = in5 ( * in0 6 )) and ( = in6 ( * in0 7 )) and ( = in7 ( * in0 8 )) and ( = in8 ( * in0 9 )) and ( = in9 ( * in0 10 ))))",
        "equivalent": false
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 )) and ( = in5 ( * in0 6 )) and ( = in6 ( * in0 7 )) and ( = in7 ( * in0 8 )) and ( = in8 ( * in0 9 )) and ( = in9 ( * in0 10 )) and ( = in10 ( * in0 11 ))))",
        "equivalent": false
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 )) and ( = in5 ( * in0 6 )) and ( = in6 ( * in0 7 )) and ( = in7 ( * in0 8 )) and ( = in8 ( * in0 9 )) and ( = in9 ( * in0 10 )) and ( = in10 ( * in0 11 )) and ( = in11 ( * in0 12 ))))",
        "equivalent": false
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 )) and ( = in5 ( * in0 6 )) and ( = in6 ( * in0 7 )) and ( = in7 ( * in0 8 )) and ( = in8 ( * in0 9 )) and ( = in9 ( * in0 10 )) and ( = in10 ( * in0 11 )) and ( = in11 ( * in0 12 )) and ( = in12 ( * in0 13 ))))",
        "equivalent": false
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 )) and ( = in5 ( * in0 6 )) and ( = in6 ( * in0 7 )) and ( = in7 ( * in0 8 )) and ( = in8 ( * in0 9 )) and ( = in9 ( * in0 10 )) and ( = in10 ( * in0 11 )) and ( = in11 ( * in0 12 )) and ( = in12 ( * in0 13 )) and ( = in13 ( * in0 14 ))))",
        "equivalent": false
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 )) and ( = in5 ( * in0 6 )) and ( = in6 ( * in0 7 )) and ( = in7 ( * in0 8 )) and ( = in8 ( * in0 9 )) and ( = in9 ( * in0 10 )) and ( = in10 ( * in0 11 )) and ( = in11 ( * in0 12 )) and ( = in12 ( * in0 13 )) and ( = in13 ( * in0 14 )) and ( = in14 ( * in0 15 ))))",
        "equivalent": false
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 )) and ( = in5 ( * in0 6 )) and ( = in6 ( * in0 7 )) and ( = in7 ( * in0 8 )) and ( = in8 ( * in0 9 )) and ( = in9 ( * in0 10 )) and ( = in10 ( * in0 11 )) and ( = in11 ( * in0 12 )) and ( = in12 ( * in0 13 )) and ( = in13 ( * in0 14 )) and ( = in14 ( * in0 15 )) and ( = in15 ( * in0 16 ))))",
        "equivalent": false
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 )) and ( = in5 ( * in0 6 )) and ( = in6 ( * in0 7 )) and ( = in7 ( * in0 8 )) and ( = in8 ( * in0 9 )) and ( = in9 ( * in0 10 )) and ( = in10 ( * in0 11 )) and ( = in11 ( * in0 12 )) and ( = in12 ( * in0 13 )) and ( = in13 ( * in0 14 )) and ( = in14 ( * in0 15 )) and ( = in15 ( * in0 16 )) and ( = in16 ( * in0 17 ))))",
        "equivalent": false
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 )) and ( = in5 ( * in0 6 )) and ( = in6 ( * in0 7 )) and ( = in7 ( * in0 8 )) and ( = in8 ( * in0 9 )) and ( = in9 ( * in0 10 )) and ( = in10 ( * in0 11 )) and ( = in11 ( * in0 12 )) and ( = in12 ( * in0 13 )) and ( = in13 ( * in0 14 )) and ( = in14 ( * in0 15 )) and ( = in15 ( * in0 16 )) and ( = in16 ( * in0 17 )) and ( = in17 ( * in0 18 ))))",
        "equivalent": false
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 )) and ( = in5 ( * in0 6 )) and ( = in6 ( * in0 7 )) and ( = in7 ( * in0 8 )) and ( = in8 ( * in0 9 )) and ( = in9 ( * in0 10 )) and ( = in10 ( * in0 11 )) and ( = in11 ( * in0 12 )) and ( = in12 ( * in0 13 )) and ( = in13 ( * in0 14 )) and ( = in14 ( * in0 15 )) and ( = in15 ( * in0 16 )) and ( = in16 ( * in0 17 )) and ( = in17 ( * in0 18 )) and ( = in18 ( * in0 19 ))))",
        "equivalent": false
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 )) and ( = in5 ( * in0 6 )) and ( = in6 ( * in0 7 )) and ( = in7 ( * in0 8 )) and ( = in8 ( * in0 9 )) and ( = in9 ( * in0 10 )) and ( = in10 ( * in0 11 )) and ( = in11 ( * in0 12 )) and ( = in12 ( * in0 13 )) and ( = in13 ( * in0 14 )) and ( = in14 ( * in0 15 )) and ( = in15 ( * in0 16 )) and ( = in16 ( * in0 17 )) and ( = in17 ( * in0 18 )) and ( = in18 ( * in0 19 )) and ( = in19 ( * in0 20 ))))",
        "equivalent": false
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 )) and ( = in5 ( * in0 6 )) and ( = in6 ( * in0 7 )) and ( = in7 ( * in0 8 )) and ( = in8 ( * in0 9 )) and ( = in9 ( * in0 10 )) and ( = in10 ( * in0 11 )) and ( = in11 ( * in0 12 )) and ( = in12 ( * in0 13 )) and ( = in13 ( * in0 14 )) and ( = in14 ( * in0 15 )) and ( = in15 ( * in0 16 )) and ( = in16 ( * in0 17 )) and ( = in17 ( * in0 18 )) and ( = in18 ( * in0 19 )) and ( = in19 ( * in0 20 )) and ( = in20 ( * in0 21 ))))",
        "equivalent": false
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 )) and ( = in5 ( * in0 6 )) and ( = in6 ( * in0 7 )) and ( = in7 ( * in0 8 )) and ( = in8 ( * in0 9 )) and ( = in9 ( * in0 10 )) and ( = in10 ( * in0 11 )) and ( = in11 ( * in0 12 )) and ( = in12 ( * in0 13 )) and ( = in13 ( * in0 14 )) and ( = in14 ( * in0 15 )) and ( = in15 ( * in0 16 )) and ( = in16 ( * in0 17 )) and ( = in17 ( * in0 18 )) and ( = in18 ( * in0 19 )) and ( = in19 ( * in0 20 )) and ( = in20 ( * in0 21 )) and ( = in21 ( * in0 22 ))))",
        "equivalent": false
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22)))  ( =  in22 ( *  in0 23))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 )) and ( = in5 ( * in0 6 )) and ( = in6 ( * in0 7 )) and ( = in7 ( * in0 8 )) and ( = in8 ( * in0 9 )) and ( = in9 ( * in0 10 )) and ( = in10 ( * in0 11 )) and ( = in11 ( * in0 12 )) and ( = in12 ( * in0 13 )) and ( = in13 ( * in0 14 )) and ( = in14 ( * in0 15 )) and ( = in15 ( * in0 16 )) and ( = in16 ( * in0 17 )) and ( = in17 ( * in0 18 )) and ( = in18 ( * in0 19 )) and ( = in19 ( * in0 20 )) and ( = in20 ( * in0 21 )) and ( = in21 ( * in0 22 )) and ( = in22 ( * in0 23 ))))",
        "equivalent": false
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22)))  ( =  in22 ( *  in0 23)))  ( =  in23 ( *  in0 24))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 )) and ( = in5 ( * in0 6 )) and ( = in6 ( * in0 7 )) and ( = in7 ( * in0 8 )) and ( = in8 ( * in0 9 )) and ( = in9 ( * in0 10 )) and ( = in10 ( * in0 11 )) and ( = in11 ( * in0 12 )) and ( = in12 ( * in0 13 )) and ( = in13 ( * in0 14 )) and ( = in14 ( * in0 15 )) and ( = in15 ( * in0 16 )) and ( = in16 ( * in0 17 )) and ( = in17 ( * in0 18 )) and ( = in18 ( * in0 19 )) and ( = in19 ( * in0 20 )) and ( = in20 ( * in0 21 )) and ( = in21 ( * in0 22 )) and ( = in22 ( * in0 23 )) and ( = in23 ( * in0 24 ))))",
        "equivalent": false
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22)))  ( =  in22 ( *  in0 23)))  ( =  in23 ( *  in0 24)))  ( =  in24 ( *  in0 25))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 )) and ( = in5 ( * in0 6 )) and ( = in6 ( * in0 7 )) and ( = in7 ( * in0 8 )) and ( = in8 ( * in0 9 )) and ( = in9 ( * in0 10 )) and ( = in10 ( * in0 11 )) and ( = in11 ( * in0 12 )) and ( = in12 ( * in0 13 )) and ( = in13 ( * in0 14 )) and ( = in14 ( * in0 15 )) and ( = in15 ( * in0 16 )) and ( = in16 ( * in0 17 )) and ( = in17 ( * in0 18 )) and ( = in18 ( * in0 19 )) and ( = in19 ( * in0 20 )) and ( = in20 ( * in0 21 )) and ( = in21 ( * in0 22 )) and ( = in22 ( * in0 23 )) and ( = in23 ( * in0 24 )) and ( = in24 ( * in0 25 ))))",
        "equivalent": false
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22)))  ( =  in22 ( *  in0 23)))  ( =  in23 ( *  in0 24)))  ( =  in24 ( *  in0 25)))  ( =  in25 ( *  in0 26))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 )) and ( = in5 ( * in0 6 )) and ( = in6 ( * in0 7 )) and ( = in7 ( * in0 8 )) and ( = in8 ( * in0 9 )) and ( = in9 ( * in0 10 )) and ( = in10 ( * in0 11 )) and ( = in11 ( * in0 12 )) and ( = in12 ( * in0 13 )) and ( = in13 ( * in0 14 )) and ( = in14 ( * in0 15 )) and ( = in15 ( * in0 16 )) and ( = in16 ( * in0 17 )) and ( = in17 ( * in0 18 )) and ( = in18 ( * in0 19 )) and ( = in19 ( * in0 20 )) and ( = in20 ( * in0 21 )) and ( = in21 ( * in0 22 )) and ( = in22 ( * in0 23 )) and ( = in23 ( * in0 24 )) and ( = in24 ( * in0 25 )) and ( = in25 ( * in0 26 ))))",
        "equivalent": false
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22)))  ( =  in22 ( *  in0 23)))  ( =  in23 ( *  in0 24)))  ( =  in24 ( *  in0 25)))  ( =  in25 ( *  in0 26)))  ( =  in26 ( *  in0 27))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 )) and ( = in5 ( * in0 6 )) and ( = in6 ( * in0 7 )) and ( = in7 ( * in0 8 )) and ( = in8 ( * in0 9 )) and ( = in9 ( * in0 10 )) and ( = in10 ( * in0 11 )) and ( = in11 ( * in0 12 )) and ( = in12 ( * in0 13 )) and ( = in13 ( * in0 14 )) and ( = in14 ( * in0 15 )) and ( = in15 ( * in0 16 )) and ( = in16 ( * in0 17 )) and ( = in17 ( * in0 18 )) and ( = in18 ( * in0 19 )) and ( = in19 ( * in0 20 )) and ( = in20 ( * in0 21 )) and ( = in21 ( * in0 22 )) and ( = in22 ( * in0 23 )) and ( = in23 ( * in0 24 )) and ( = in24 ( * in0 25 )) and ( = in25 ( * in0 26 )) and ( = in26 ( * in0 27 ))))",
        "equivalent": false
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22)))  ( =  in22 ( *  in0 23)))  ( =  in23 ( *  in0 24)))  ( =  in24 ( *  in0 25)))  ( =  in25 ( *  in0 26)))  ( =  in26 ( *  in0 27)))  ( =  in27 ( *  in0 28))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 )) and ( = in5 ( * in0 6 )) and ( = in6 ( * in0 7 )) and ( = in7 ( * in0 8 )) and ( = in8 ( * in0 9 )) and ( = in9 ( * in0 10 )) and ( = in10 ( * in0 11 )) and ( = in11 ( * in0 12 )) and ( = in12 ( * in0 13 )) and ( = in13 ( * in0 14 )) and ( = in14 ( * in0 15 )) and ( = in15 ( * in0 16 )) and ( = in16 ( * in0 17 )) and ( = in17 ( * in0 18 )) and ( = in18 ( * in0 19 )) and ( = in19 ( * in0 20 )) and ( = in20 ( * in0 21 )) and ( = in21 ( * in0 22 )) and ( = in22 ( * in0 23 )) and ( = in23 ( * in0 24 )) and ( = in24 ( * in0 25 )) and ( = in25 ( * in0 26 )) and ( = in26 ( * in0 27 )) and ( = in27 ( * in0 28 ))))",
        "equivalent": false
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22)))  ( =  in22 ( *  in0 23)))  ( =  in23 ( *  in0 24)))  ( =  in24 ( *  in0 25)))  ( =  in25 ( *  in0 26)))  ( =  in26 ( *  in0 27)))  ( =  in27 ( *  in0 28)))  ( =  in28 ( *  in0 29))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 )) and ( = in5 ( * in0 6 )) and ( = in6 ( * in0 7 )) and ( = in7 ( * in0 8 )) and ( = in8 ( * in0 9 )) and ( = in9 ( * in0 10 )) and ( = in10 ( * in0 11 )) and ( = in11 ( * in0 12 )) and ( = in12 ( * in0 13 )) and ( = in13 ( * in0 14 )) and ( = in14 ( * in0 15 )) and ( = in15 ( * in0 16 )) and ( = in16 ( * in0 17 )) and ( = in17 ( * in0 18 )) and ( = in18 ( * in0 19 )) and ( = in19 ( * in0 20 )) and ( = in20 ( * in0 21 )) and ( = in21 ( * in0 22 )) and ( = in22 ( * in0 23 )) and ( = in23 ( * in0 24 )) and ( = in24 ( * in0 25 )) and ( = in25 ( * in0 26 )) and ( = in26 ( * in0 27 )) and ( = in27 ( * in0 28 )) and ( = in28 ( * in0 29 ))))",
        "equivalent": false
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1 ( *  in0 2))  ( =  in2 ( *  in0 3)))  ( =  in3 ( *  in0 4)))  ( =  in4 ( *  in0 5)))  ( =  in5 ( *  in0 6)))  ( =  in6 ( *  in0 7)))  ( =  in7 ( *  in0 8)))  ( =  in8 ( *  in0 9)))  ( =  in9 ( *  in0 10)))  ( =  in10 ( *  in0 11)))  ( =  in11 ( *  in0 12)))  ( =  in12 ( *  in0 13)))  ( =  in13 ( *  in0 14)))  ( =  in14 ( *  in0 15)))  ( =  in15 ( *  in0 16)))  ( =  in16 ( *  in0 17)))  ( =  in17 ( *  in0 18)))  ( =  in18 ( *  in0 19)))  ( =  in19 ( *  in0 20)))  ( =  in20 ( *  in0 21)))  ( =  in21 ( *  in0 22)))  ( =  in22 ( *  in0 23)))  ( =  in23 ( *  in0 24)))  ( =  in24 ( *  in0 25)))  ( =  in25 ( *  in0 26)))  ( =  in26 ( *  in0 27)))  ( =  in27 ( *  in0 28)))  ( =  in28 ( *  in0 29)))  ( =  in29 ( *  in0 30))))"
          ]
        },
        "predicted": "(assert (( = in1 ( * in0 2 )) and ( = in2 ( * in0 3 )) and ( = in3 ( * in0 4 )) and ( = in4 ( * in0 5 )) and ( = in5 ( * in0 6 )) and ( = in6 ( * in0 7 )) and ( = in7 ( * in0 8 )) and ( = in8 ( * in0 9 )) and ( = in9 ( * in0 10 )) and ( = in10 ( * in0 11 )) and ( = in11 ( * in0 12 )) and ( = in12 ( * in0 13 )) and ( = in13 ( * in0 14 )) and ( = in14 ( * in0 15 )) and ( = in15 ( * in0 16 )) and ( = in16 ( * in0 17 )) and ( = in17 ( * in0 18 )) and ( = in18 ( * in0 19 )) and ( = in19 ( * in0 20 )) and ( = in20 ( * in0 21 )) and ( = in21 ( * in0 22 )) and ( = in22 ( * in0 23 )) and ( = in23 ( * in0 24 )) and ( = in24 ( * in0 25 )) and ( = in25 ( * in0 26 )) and ( = in26 ( * in0 27 )) and ( = in27 ( * in0 28 )) and ( = in28 ( * in0 29 )) and ( = in29 ( * in0 30 ))))",
        "equivalent": false
      }
    }
  },
  "BadgerUsername": {
    "succeeded": false,
    "attempts": 10,
    "examples_right": 2,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45))",
        "equivalent": false
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45))",
        "equivalent": false
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45))",
        "equivalent": false
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45) (not (= in5 95)) (= in5 45))",
        "equivalent": false
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45) (not (= in5 95)) (= in5 45) (not (= in6 95)) (= in6 45))",
        "equivalent": false
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)) (not ( = in7 95)))  ( =  in7 45)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45) (not (= in5 95)) (= in5 45) (not (= in6 95)) (= in6 45) (not (= in7 95)) (= in7 45))",
        "equivalent": false
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)) (not ( = in7 95)))  ( =  in7 45)) (not ( = in8 95)))  ( =  in8 45)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45) (not (= in5 95)) (= in5 45) (not (= in6 95)) (= in6 45) (not (= in7 95)) (= in7 45) (not (= in8 95)) (= in8 45))",
        "equivalent": false
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)) (not ( = in7 95)))  ( =  in7 45)) (not ( = in8 95)))  ( =  in8 45)) (not ( = in9 95)))  ( =  in9 45)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45) (not (= in5 95)) (= in5 45) (not (= in6 95)) (= in6 45) (not (= in7 95)) (= in7 45) (not (= in8 95)) (= in8 45) (not (= in9 95)) (= in9 45))",
        "equivalent": false
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)) (not ( = in7 95)))  ( =  in7 45)) (not ( = in8 95)))  ( =  in8 45)) (not ( = in9 95)))  ( =  in9 45)) (not ( = in10 95)))  ( =  in10 45)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45) (not (= in5 95)) (= in5 45) (not (= in6 95)) (= in6 45) (not (= in7 95)) (= in7 45) (not (= in8 95)) (= in8 45) (not (= in9 95)) (= in9 45) (not (= in10 95)) (= in10 45))",
        "equivalent": false
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)) (not ( = in7 95)))  ( =  in7 45)) (not ( = in8 95)))  ( =  in8 45)) (not ( = in9 95)))  ( =  in9 45)) (not ( = in10 95)))  ( =  in10 45)) (not ( = in11 95)))  ( =  in11 45)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45) (not (= in5 95)) (= in5 45) (not (= in6 95)) (= in6 45) (not (= in7 95)) (= in7 45) (not (= in8 95)) (= in8 45) (not (= in9 95)) (= in9 45) (not (= in10 95)) (= in10 45) (not (= in11 95)) (= in11 45))",
        "equivalent": false
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)) (not ( = in7 95)))  ( =  in7 45)) (not ( = in8 95)))  ( =  in8 45)) (not ( = in9 95)))  ( =  in9 45)) (not ( = in10 95)))  ( =  in10 45)) (not ( = in11 95)))  ( =  in11 45)) (not ( = in12 95)))  ( =  in12 45)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45) (not (= in5 95)) (= in5 45) (not (= in6 95)) (= in6 45) (not (= in7 95)) (= in7 45) (not (= in8 95)) (= in8 45) (not (= in9 95)) (= in9 45) (not (= in10 95)) (= in10 45) (not (= in11 95)) (= in11 45) (not (= in12 95)) (= in12 45))",
        "equivalent": false
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)) (not ( = in7 95)))  ( =  in7 45)) (not ( = in8 95)))  ( =  in8 45)) (not ( = in9 95)))  ( =  in9 45)) (not ( = in10 95)))  ( =  in10 45)) (not ( = in11 95)))  ( =  in11 45)) (not ( = in12 95)))  ( =  in12 45)) (not ( = in13 95)))  ( =  in13 45)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45) (not (= in5 95)) (= in5 45) (not (= in6 95)) (= in6 45) (not (= in7 95)) (= in7 45) (not (= in8 95)) (= in8 45) (not (= in9 95)) (= in9 45) (not (= in10 95)) (= in10 45) (not (= in11 95)) (= in11 45) (not (= in12 95)) (= in12 45) (not (= in13 95)) (= in13 45))",
        "equivalent": false
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 95))  ( =  in0 45)) (not ( = in1 95)))  ( =  in1 45)) (not ( = in2 95)))  ( =  in2 45)) (not ( = in3 95)))  ( =  in3 45)) (not ( = in4 95)))  ( =  in4 45)) (not ( = in5 95)))  ( =  in5 45)) (not ( = in6 95)))  ( =  in6 45)) (not ( = in7 95)))  ( =  in7 45)) (not ( = in8 95)))  ( =  in8 45)) (not ( = in9 95)))  ( =  in9 45)) (not ( = in10 95)))  ( =  in10 45)) (not ( = in11 95)))  ( =  in11 45)) (not ( = in12 95)))  ( =  in12 45)) (not ( = in13 95)))  ( =  in13 45)) (not ( = in14 95)))  ( =  in14 45)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45) (not (= in5 95)) (= in5 45) (not (= in6 95)) (= in6 45) (not (= in7 95)) (= in7 45) (not (= in8 95)) (= in8 45) (not (= in9 95)) (= in9 45) (not (= in10 95)) (= in10 45) (not (= in11 95)) (= in11 45) (not (= in12 95)) (= in12 45) (not (= in13 95)) (= in13 45) (not (= in14 95)) (= in14 45))",
        "equivalent": false
      },
      "16": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45) (not (= in5 95)) (= in5 45) (not (= in6 95)) (= in6 45) (not (= in7 95)) (= in7 45) (not (= in8 95)) (= in8 45) (not (= in9 95)) (= in9 45) (not (= in10 95)) (= in10 45) (not (= in11 95)) (= in11 45) (not (= in12 95)) (= in12 45) (not (= in13 95)) (= in13 45) (not (= in14 95)) (= in14 45) (not (= in15 95)) (= in15 45))",
        "equivalent": false
      },
      "17": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45) (not (= in5 95)) (= in5 45) (not (= in6 95)) (= in6 45) (not (= in7 95)) (= in7 45) (not (= in8 95)) (= in8 45) (not (= in9 95)) (= in9 45) (not (= in10 95)) (= in10 45) (not (= in11 95)) (= in11 45) (not (= in12 95)) (= in12 45) (not (= in13 95)) (= in13 45) (not (= in14 95)) (= in14 45) (not (= in15 95)) (= in15 45) (not (= in16 95)) (= in16 45))",
        "equivalent": false
      },
      "18": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45) (not (= in5 95)) (= in5 45) (not (= in6 95)) (= in6 45) (not (= in7 95)) (= in7 45) (not (= in8 95)) (= in8 45) (not (= in9 95)) (= in9 45) (not (= in10 95)) (= in10 45) (not (= in11 95)) (= in11 45) (not (= in12 95)) (= in12 45) (not (= in13 95)) (= in13 45) (not (= in14 95)) (= in14 45) (not (= in15 95)) (= in15 45) (not (= in16 95)) (= in16 45) (not (= in17 95)) (= in17 45))",
        "equivalent": false
      },
      "19": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45) (not (= in5 95)) (= in5 45) (not (= in6 95)) (= in6 45) (not (= in7 95)) (= in7 45) (not (= in8 95)) (= in8 45) (not (= in9 95)) (= in9 45) (not (= in10 95)) (= in10 45) (not (= in11 95)) (= in11 45) (not (= in12 95)) (= in12 45) (not (= in13 95)) (= in13 45) (not (= in14 95)) (= in14 45) (not (= in15 95)) (= in15 45) (not (= in16 95)) (= in16 45) (not (= in17 95)) (= in17 45) (not (= in18 95)) (= in18 45))",
        "equivalent": false
      },
      "20": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45) (not (= in5 95)) (= in5 45) (not (= in6 95)) (= in6 45) (not (= in7 95)) (= in7 45) (not (= in8 95)) (= in8 45) (not (= in9 95)) (= in9 45) (not (= in10 95)) (= in10 45) (not (= in11 95)) (= in11 45) (not (= in12 95)) (= in12 45) (not (= in13 95)) (= in13 45) (not (= in14 95)) (= in14 45) (not (= in15 95)) (= in15 45) (not (= in16 95)) (= in16 45) (not (= in17 95)) (= in17 45) (not (= in18 95)) (= in18 45) (not (= in19 95)) (= in19 45))",
        "equivalent": false
      },
      "21": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45) (not (= in5 95)) (= in5 45) (not (= in6 95)) (= in6 45) (not (= in7 95)) (= in7 45) (not (= in8 95)) (= in8 45) (not (= in9 95)) (= in9 45) (not (= in10 95)) (= in10 45) (not (= in11 95)) (= in11 45) (not (= in12 95)) (= in12 45) (not (= in13 95)) (= in13 45) (not (= in14 95)) (= in14 45) (not (= in15 95)) (= in15 45) (not (= in16 95)) (= in16 45) (not (= in17 95)) (= in17 45) (not (= in18 95)) (= in18 45) (not (= in19 95)) (= in19 45) (not (= in20 95)) (= in20 45))",
        "equivalent": false
      },
      "22": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45) (not (= in5 95)) (= in5 45) (not (= in6 95)) (= in6 45) (not (= in7 95)) (= in7 45) (not (= in8 95)) (= in8 45) (not (= in9 95)) (= in9 45) (not (= in10 95)) (= in10 45) (not (= in11 95)) (= in11 45) (not (= in12 95)) (= in12 45) (not (= in13 95)) (= in13 45) (not (= in14 95)) (= in14 45) (not (= in15 95)) (= in15 45) (not (= in16 95)) (= in16 45) (not (= in17 95)) (= in17 45) (not (= in18 95)) (= in18 45) (not (= in19 95)) (= in19 45) (not (= in20 95)) (= in20 45) (not (= in21 95)) (= in21 45))",
        "equivalent": false
      },
      "23": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45) (not (= in5 95)) (= in5 45) (not (= in6 95)) (= in6 45) (not (= in7 95)) (= in7 45) (not (= in8 95)) (= in8 45) (not (= in9 95)) (= in9 45) (not (= in10 95)) (= in10 45) (not (= in11 95)) (= in11 45) (not (= in12 95)) (= in12 45) (not (= in13 95)) (= in13 45) (not (= in14 95)) (= in14 45) (not (= in15 95)) (= in15 45) (not (= in16 95)) (= in16 45) (not (= in17 95)) (= in17 45) (not (= in18 95)) (= in18 45) (not (= in19 95)) (= in19 45) (not (= in20 95)) (= in20 45) (not (= in21 95)) (= in21 45) (not (= in22 95)) (= in22 45))",
        "equivalent": false
      },
      "24": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45) (not (= in5 95)) (= in5 45) (not (= in6 95)) (= in6 45) (not (= in7 95)) (= in7 45) (not (= in8 95)) (= in8 45) (not (= in9 95)) (= in9 45) (not (= in10 95)) (= in10 45) (not (= in11 95)) (= in11 45) (not (= in12 95)) (= in12 45) (not (= in13 95)) (= in13 45) (not (= in14 95)) (= in14 45) (not (= in15 95)) (= in15 45) (not (= in16 95)) (= in16 45) (not (= in17 95)) (= in17 45) (not (= in18 95)) (= in18 45) (not (= in19 95)) (= in19 45) (not (= in20 95)) (= in20 45) (not (= in21 95)) (= in21 45) (not (= in22 95)) (= in22 45) (not (= in23 95)) (= in23 45))",
        "equivalent": false
      },
      "25": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45) (not (= in5 95)) (= in5 45) (not (= in6 95)) (= in6 45) (not (= in7 95)) (= in7 45) (not (= in8 95)) (= in8 45) (not (= in9 95)) (= in9 45) (not (= in10 95)) (= in10 45) (not (= in11 95)) (= in11 45) (not (= in12 95)) (= in12 45) (not (= in13 95)) (= in13 45) (not (= in14 95)) (= in14 45) (not (= in15 95)) (= in15 45) (not (= in16 95)) (= in16 45) (not (= in17 95)) (= in17 45) (not (= in18 95)) (= in18 45) (not (= in19 95)) (= in19 45) (not (= in20 95)) (= in20 45) (not (= in21 95)) (= in21 45) (not (= in22 95)) (= in22 45) (not (= in23 95)) (= in23 45) (not (= in24 95)) (= in24 45))",
        "equivalent": false
      },
      "26": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45) (not (= in5 95)) (= in5 45) (not (= in6 95)) (= in6 45) (not (= in7 95)) (= in7 45) (not (= in8 95)) (= in8 45) (not (= in9 95)) (= in9 45) (not (= in10 95)) (= in10 45) (not (= in11 95)) (= in11 45) (not (= in12 95)) (= in12 45) (not (= in13 95)) (= in13 45) (not (= in14 95)) (= in14 45) (not (= in15 95)) (= in15 45) (not (= in16 95)) (= in16 45) (not (= in17 95)) (= in17 45) (not (= in18 95)) (= in18 45) (not (= in19 95)) (= in19 45) (not (= in20 95)) (= in20 45) (not (= in21 95)) (= in21 45) (not (= in22 95)) (= in22 45) (not (= in23 95)) (= in23 45) (not (= in24 95)) (= in24 45) (not (= in25 95)) (= in25 45))",
        "equivalent": false
      },
      "27": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45) (not (= in5 95)) (= in5 45) (not (= in6 95)) (= in6 45) (not (= in7 95)) (= in7 45) (not (= in8 95)) (= in8 45) (not (= in9 95)) (= in9 45) (not (= in10 95)) (= in10 45) (not (= in11 95)) (= in11 45) (not (= in12 95)) (= in12 45) (not (= in13 95)) (= in13 45) (not (= in14 95)) (= in14 45) (not (= in15 95)) (= in15 45) (not (= in16 95)) (= in16 45) (not (= in17 95)) (= in17 45) (not (= in18 95)) (= in18 45) (not (= in19 95)) (= in19 45) (not (= in20 95)) (= in20 45) (not (= in21 95)) (= in21 45) (not (= in22 95)) (= in22 45) (not (= in23 95)) (= in23 45) (not (= in24 95)) (= in24 45) (not (= in25 95)) (= in25 45) (not (= in26 95)) (= in26 45))",
        "equivalent": false
      },
      "28": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45) (not (= in5 95)) (= in5 45) (not (= in6 95)) (= in6 45) (not (= in7 95)) (= in7 45) (not (= in8 95)) (= in8 45) (not (= in9 95)) (= in9 45) (not (= in10 95)) (= in10 45) (not (= in11 95)) (= in11 45) (not (= in12 95)) (= in12 45) (not (= in13 95)) (= in13 45) (not (= in14 95)) (= in14 45) (not (= in15 95)) (= in15 45) (not (= in16 95)) (= in16 45) (not (= in17 95)) (= in17 45) (not (= in18 95)) (= in18 45) (not (= in19 95)) (= in19 45) (not (= in20 95)) (= in20 45) (not (= in21 95)) (= in21 45) (not (= in22 95)) (= in22 45) (not (= in23 95)) (= in23 45) (not (= in24 95)) (= in24 45) (not (= in25 95)) (= in25 45) (not (= in26 95)) (= in26 45) (not (= in27 95)) (= in27 45))",
        "equivalent": false
      },
      "29": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45) (not (= in5 95)) (= in5 45) (not (= in6 95)) (= in6 45) (not (= in7 95)) (= in7 45) (not (= in8 95)) (= in8 45) (not (= in9 95)) (= in9 45) (not (= in10 95)) (= in10 45) (not (= in11 95)) (= in11 45) (not (= in12 95)) (= in12 45) (not (= in13 95)) (= in13 45) (not (= in14 95)) (= in14 45) (not (= in15 95)) (= in15 45) (not (= in16 95)) (= in16 45) (not (= in17 95)) (= in17 45) (not (= in18 95)) (= in18 45) (not (= in19 95)) (= in19 45) (not (= in20 95)) (= in20 45) (not (= in21 95)) (= in21 45) (not (= in22 95)) (= in22 45) (not (= in23 95)) (= in23 45) (not (= in24 95)) (= in24 45) (not (= in25 95)) (= in25 45) (not (= in26 95)) (= in26 45) (not (= in27 95)) (= in27 45) (not (= in28 95)) (= in28 45))",
        "equivalent": false
      },
      "30": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "(assert (and (not (= in0 95)) (= in0 45) (not (= in1 95)) (= in1 45) (not (= in2 95)) (= in2 45) (not (= in3 95)) (= in3 45) (not (= in4 95)) (= in4 45) (not (= in5 95)) (= in5 45) (not (= in6 95)) (= in6 45) (not (= in7 95)) (= in7 45) (not (= in8 95)) (= in8 45) (not (= in9 95)) (= in9 45) (not (= in10 95)) (= in10 45) (not (= in11 95)) (= in11 45) (not (= in12 95)) (= in12 45) (not (= in13 95)) (= in13 45) (not (= in14 95)) (= in14 45) (not (= in15 95)) (= in15 45) (not (= in16 95)) (= in16 45) (not (= in17 95)) (= in17 45) (not (= in18 95)) (= in18 45) (not (= in19 95)) (= in19 45) (not (= in20 95)) (= in20 45) (not (= in21 95)) (= in21 45) (not (= in22 95)) (= in22 45) (not (= in23 95)) (= in23 45) (not (= in24 95)) (= in24 45) (not (= in25 95)) (= in25 45) (not (= in26 95)) (= in26 45) (not (= in27 95)) (= in27 45) (not (= in28 95)) (= in28 45) (not (= in29 95)) (= in29 45))",
        "equivalent": false
      }
    }
  },
  "ComplexPalindrome": {
    "succeeded": false,
    "attempts": 10,
    "examples_right": 3,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert  ( <  in0 in1))"
          ]
        },
        "predicted": "(assert ( < in0 in1))",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)"
          ],
          "assertions": [
            "(assert  ( <  in0 in2))"
          ]
        },
        "predicted": "(assert ( < in0 in2))",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and  ( <  in0 in3)  ( <  in1 in2)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in3))and (assert ( < in1 in2)))",
        "equivalent": false
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and  ( <  in0 in4)  ( <  in1 in3)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in4))and (assert ( < in1 in3)))",
        "equivalent": false
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( <  in0 in5)  ( <  in1 in4))  ( <  in2 in3)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in5))and (assert ( < in1 in4))and (assert ( < in2 in3)))",
        "equivalent": false
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( <  in0 in6)  ( <  in1 in5))  ( <  in2 in4)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in6))and (assert ( < in1 in5))and (assert ( < in2 in4)))",
        "equivalent": false
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( <  in0 in7)  ( <  in1 in6))  ( <  in2 in5))  ( <  in3 in4)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in7))and (assert ( < in1 in6))and (assert ( < in2 in5))and (assert ( < in3 in4)))",
        "equivalent": false
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( <  in0 in8)  ( <  in1 in7))  ( <  in2 in6))  ( <  in3 in5)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in8))and (assert ( < in1 in7))and (assert ( < in2 in6))and (assert ( < in3 in5)))",
        "equivalent": false
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( <  in0 in9)  ( <  in1 in8))  ( <  in2 in7))  ( <  in3 in6))  ( <  in4 in5)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in9))and (assert ( < in1 in8))and (assert ( < in2 in7))and (assert ( < in3 in6))and (assert ( < in4 in5)))",
        "equivalent": false
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( <  in0 in10)  ( <  in1 in9))  ( <  in2 in8))  ( <  in3 in7))  ( <  in4 in6)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in10))and (assert ( < in1 in9))and (assert ( < in2 in8))and (assert ( < in3 in7))and (assert ( < in4 in6)))",
        "equivalent": false
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( <  in0 in11)  ( <  in1 in10))  ( <  in2 in9))  ( <  in3 in8))  ( <  in4 in7))  ( <  in5 in6)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in11))and (assert ( < in1 in10))and (assert ( < in2 in9))and (assert ( < in3 in8))and (assert ( < in4 in7))and (assert ( < in5 in6)))",
        "equivalent": false
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in12 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( <  in0 in12)  ( <  in1 in11))  ( <  in2 in10))  ( <  in3 in9))  ( <  in4 in8))  ( <  in5 in7)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in12))and (assert ( < in1 in11))and (assert ( < in2 in10))and (assert ( < in3 in9))and (assert ( < in4 in8))and (assert ( < in5 in7)))",
        "equivalent": false
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( <  in0 in13)  ( <  in1 in12))  ( <  in2 in11))  ( <  in3 in10))  ( <  in4 in9))  ( <  in5 in8))  ( <  in6 in7)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in13))and (assert ( < in1 in12))and (assert ( < in2 in11))and (assert ( < in3 in10))and (assert ( < in4 in9))and (assert ( < in5 in8))and (assert ( < in6 in7)))",
        "equivalent": false
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( <  in0 in14)  ( <  in1 in13))  ( <  in2 in12))  ( <  in3 in11))  ( <  in4 in10))  ( <  in5 in9))  ( <  in6 in8)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in14))and (assert ( < in1 in13))and (assert ( < in2 in12))and (assert ( < in3 in11))and (assert ( < in4 in10))and (assert ( < in5 in9))and (assert ( < in6 in8)))",
        "equivalent": false
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( <  in0 in15)  ( <  in1 in14))  ( <  in2 in13))  ( <  in3 in12))  ( <  in4 in11))  ( <  in5 in10))  ( <  in6 in9))  ( <  in7 in8)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in15))and (assert ( < in1 in14))and (assert ( < in2 in13))and (assert ( < in3 in12))and (assert ( < in4 in11))and (assert ( < in5 in10))and (assert ( < in6 in9))and (assert ( < in7 in8)))",
        "equivalent": false
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( <  in0 in16)  ( <  in1 in15))  ( <  in2 in14))  ( <  in3 in13))  ( <  in4 in12))  ( <  in5 in11))  ( <  in6 in10))  ( <  in7 in9)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in16))and (assert ( < in1 in15))and (assert ( < in2 in14))and (assert ( < in3 in13))and (assert ( < in4 in12))and (assert ( < in5 in11))and (assert ( < in6 in10))and (assert ( < in7 in9)))",
        "equivalent": false
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( <  in0 in17)  ( <  in1 in16))  ( <  in2 in15))  ( <  in3 in14))  ( <  in4 in13))  ( <  in5 in12))  ( <  in6 in11))  ( <  in7 in10))  ( <  in8 in9)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in17))and (assert ( < in1 in16))and (assert ( < in2 in15))and (assert ( < in3 in14))and (assert ( < in4 in13))and (assert ( < in5 in12))and (assert ( < in6 in11))and (assert ( < in7 in10))and (assert ( < in8 in9)))",
        "equivalent": false
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( <  in0 in18)  ( <  in1 in17))  ( <  in2 in16))  ( <  in3 in15))  ( <  in4 in14))  ( <  in5 in13))  ( <  in6 in12))  ( <  in7 in11))  ( <  in8 in10)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in18))and (assert ( < in1 in17))and (assert ( < in2 in16))and (assert ( < in3 in15))and (assert ( < in4 in14))and (assert ( < in5 in13))and (assert ( < in6 in12))and (assert ( < in7 in11))and (assert ( < in8 in10)))",
        "equivalent": false
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( <  in0 in19)  ( <  in1 in18))  ( <  in2 in17))  ( <  in3 in16))  ( <  in4 in15))  ( <  in5 in14))  ( <  in6 in13))  ( <  in7 in12))  ( <  in8 in11))  ( <  in9 in10)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in19))and (assert ( < in1 in18))and (assert ( < in2 in17))and (assert ( < in3 in16))and (assert ( < in4 in15))and (assert ( < in5 in14))and (assert ( < in6 in13))and (assert ( < in7 in12))and (assert ( < in8 in11))and (assert ( < in9 in10)))",
        "equivalent": false
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in20 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( <  in0 in20)  ( <  in1 in19))  ( <  in2 in18))  ( <  in3 in17))  ( <  in4 in16))  ( <  in5 in15))  ( <  in6 in14))  ( <  in7 in13))  ( <  in8 in12))  ( <  in9 in11)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in20))and (assert ( < in1 in19))and (assert ( < in2 in18))and (assert ( < in3 in17))and (assert ( < in4 in16))and (assert ( < in5 in15))and (assert ( < in6 in14))and (assert ( < in7 in13))and (assert ( < in8 in12))and (assert ( < in9 in11)))",
        "equivalent": false
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in20 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in21 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( <  in0 in21)  ( <  in1 in20))  ( <  in2 in19))  ( <  in3 in18))  ( <  in4 in17))  ( <  in5 in16))  ( <  in6 in15))  ( <  in7 in14))  ( <  in8 in13))  ( <  in9 in12))  ( <  in10 in11)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in21))and (assert ( < in1 in20))and (assert ( < in2 in19))and (assert ( < in3 in18))and (assert ( < in4 in17))and (assert ( < in5 in16))and (assert ( < in6 in15))and (assert ( < in7 in14))and (assert ( < in8 in13))and (assert ( < in9 in12))and (assert ( < in10 in11)))",
        "equivalent": false
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in20 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in21 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( <  in0 in22)  ( <  in1 in21))  ( <  in2 in20))  ( <  in3 in19))  ( <  in4 in18))  ( <  in5 in17))  ( <  in6 in16))  ( <  in7 in15))  ( <  in8 in14))  ( <  in9 in13))  ( <  in10 in12)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in22))and (assert ( < in1 in21))and (assert ( < in2 in20))and (assert ( < in3 in19))and (assert ( < in4 in18))and (assert ( < in5 in17))and (assert ( < in6 in16))and (assert ( < in7 in15))and (assert ( < in8 in14))and (assert ( < in9 in13))and (assert ( < in10 in12)))",
        "equivalent": false
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in20 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in22 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in21 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in23 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in23)  ( <  in1 in22))  ( <  in2 in21))  ( <  in3 in20))  ( <  in4 in19))  ( <  in5 in18))  ( <  in6 in17))  ( <  in7 in16))  ( <  in8 in15))  ( <  in9 in14))  ( <  in10 in13))  ( <  in11 in12)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in23))and (assert ( < in1 in22))and (assert ( < in2 in21))and (assert ( < in3 in20))and (assert ( < in4 in19))and (assert ( < in5 in18))and (assert ( < in6 in17))and (assert ( < in7 in16))and (assert ( < in8 in15))and (assert ( < in9 in14))and (assert ( < in10 in13))and (assert ( < in11 in12)))",
        "equivalent": false
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in20 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in22 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in21 Int)",
            "(declare-const in13 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in24)  ( <  in1 in23))  ( <  in2 in22))  ( <  in3 in21))  ( <  in4 in20))  ( <  in5 in19))  ( <  in6 in18))  ( <  in7 in17))  ( <  in8 in16))  ( <  in9 in15))  ( <  in10 in14))  ( <  in11 in13)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in24))and (assert ( < in1 in23))and (assert ( < in2 in22))and (assert ( < in3 in21))and (assert ( < in4 in20))and (assert ( < in5 in19))and (assert ( < in6 in18))and (assert ( < in7 in17))and (assert ( < in8 in16))and (assert ( < in9 in15))and (assert ( < in10 in14))and (assert ( < in11 in13)))",
        "equivalent": false
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in25)  ( <  in1 in24))  ( <  in2 in23))  ( <  in3 in22))  ( <  in4 in21))  ( <  in5 in20))  ( <  in6 in19))  ( <  in7 in18))  ( <  in8 in17))  ( <  in9 in16))  ( <  in10 in15))  ( <  in11 in14))  ( <  in12 in13)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in25))and (assert ( < in1 in24))and (assert ( < in2 in23))and (assert ( < in3 in22))and (assert ( < in4 in21))and (assert ( < in5 in20))and (assert ( < in6 in19))and (assert ( < in7 in18))and (assert ( < in8 in17))and (assert ( < in9 in16))and (assert ( < in10 in15))and (assert ( < in11 in14))and (assert ( < in12 in13)))",
        "equivalent": false
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in26)  ( <  in1 in25))  ( <  in2 in24))  ( <  in3 in23))  ( <  in4 in22))  ( <  in5 in21))  ( <  in6 in20))  ( <  in7 in19))  ( <  in8 in18))  ( <  in9 in17))  ( <  in10 in16))  ( <  in11 in15))  ( <  in12 in14)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in26))and (assert ( < in1 in25))and (assert ( < in2 in24))and (assert ( < in3 in23))and (assert ( < in4 in22))and (assert ( < in5 in21))and (assert ( < in6 in20))and (assert ( < in7 in19))and (assert ( < in8 in18))and (assert ( < in9 in17))and (assert ( < in10 in16))and (assert ( < in11 in15))and (assert ( < in12 in14)))",
        "equivalent": false
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in27)  ( <  in1 in26))  ( <  in2 in25))  ( <  in3 in24))  ( <  in4 in23))  ( <  in5 in22))  ( <  in6 in21))  ( <  in7 in20))  ( <  in8 in19))  ( <  in9 in18))  ( <  in10 in17))  ( <  in11 in16))  ( <  in12 in15))  ( <  in13 in14)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in27))and (assert ( < in1 in26))and (assert ( < in2 in25))and (assert ( < in3 in24))and (assert ( < in4 in23))and (assert ( < in5 in22))and (assert ( < in6 in21))and (assert ( < in7 in20))and (assert ( < in8 in19))and (assert ( < in9 in18))and (assert ( < in10 in17))and (assert ( < in11 in16))and (assert ( < in12 in15))and (assert ( < in13 in14)))",
        "equivalent": false
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in28)  ( <  in1 in27))  ( <  in2 in26))  ( <  in3 in25))  ( <  in4 in24))  ( <  in5 in23))  ( <  in6 in22))  ( <  in7 in21))  ( <  in8 in20))  ( <  in9 in19))  ( <  in10 in18))  ( <  in11 in17))  ( <  in12 in16))  ( <  in13 in15)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in28))and (assert ( < in1 in27))and (assert ( < in2 in26))and (assert ( < in3 in25))and (assert ( < in4 in24))and (assert ( < in5 in23))and (assert ( < in6 in22))and (assert ( < in7 in21))and (assert ( < in8 in20))and (assert ( < in9 in19))and (assert ( < in10 in18))and (assert ( < in11 in17))and (assert ( < in12 in16))and (assert ( < in13 in15)))",
        "equivalent": false
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( <  in0 in29)  ( <  in1 in28))  ( <  in2 in27))  ( <  in3 in26))  ( <  in4 in25))  ( <  in5 in24))  ( <  in6 in23))  ( <  in7 in22))  ( <  in8 in21))  ( <  in9 in20))  ( <  in10 in19))  ( <  in11 in18))  ( <  in12 in17))  ( <  in13 in16))  ( <  in14 in15)))"
          ]
        },
        "predicted": "(assert (assert ( < in0 in29))and (assert ( < in1 in28))and (assert ( < in2 in27))and (assert ( < in3 in26))and (assert ( < in4 in25))and (assert ( < in5 in24))and (assert ( < in6 in23))and (assert ( < in7 in22))and (assert ( < in8 in21))and (assert ( < in9 in20))and (assert ( < in10 in19))and (assert ( < in11 in18))and (assert ( < in12 in17))and (assert ( < in13 in16))and (assert ( < in14 in15)))",
        "equivalent": false
      }
    }
  },
  "WeirdHundred": {
    "succeeded": false,
    "attempts": 10,
    "examples_right": 1,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100))",
        "equivalent": false
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))",
        "equivalent": false
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))",
        "equivalent": false
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))",
        "equivalent": false
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))(assert (>= in5 100)) (assert (distinct in5 in4))",
        "equivalent": false
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))(assert (>= in5 100)) (assert (distinct in5 in4))(assert (>= in6 100)) (assert (distinct in6 in5))",
        "equivalent": false
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))(assert (>= in5 100)) (assert (distinct in5 in4))(assert (>= in6 100)) (assert (distinct in6 in5))(assert (>= in7 100)) (assert (distinct in7 in6))",
        "equivalent": false
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))(assert (>= in5 100)) (assert (distinct in5 in4))(assert (>= in6 100)) (assert (distinct in6 in5))(assert (>= in7 100)) (assert (distinct in7 in6))(assert (>= in8 100)) (assert (distinct in8 in7))",
        "equivalent": false
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))(assert (>= in5 100)) (assert (distinct in5 in4))(assert (>= in6 100)) (assert (distinct in6 in5))(assert (>= in7 100)) (assert (distinct in7 in6))(assert (>= in8 100)) (assert (distinct in8 in7))(assert (>= in9 100)) (assert (distinct in9 in8))",
        "equivalent": false
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))(assert (>= in5 100)) (assert (distinct in5 in4))(assert (>= in6 100)) (assert (distinct in6 in5))(assert (>= in7 100)) (assert (distinct in7 in6))(assert (>= in8 100)) (assert (distinct in8 in7))(assert (>= in9 100)) (assert (distinct in9 in8))(assert (>= in10 100)) (assert (distinct in10 in9))",
        "equivalent": false
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))(assert (>= in5 100)) (assert (distinct in5 in4))(assert (>= in6 100)) (assert (distinct in6 in5))(assert (>= in7 100)) (assert (distinct in7 in6))(assert (>= in8 100)) (assert (distinct in8 in7))(assert (>= in9 100)) (assert (distinct in9 in8))(assert (>= in10 100)) (assert (distinct in10 in9))(assert (>= in11 100)) (assert (distinct in11 in10))",
        "equivalent": false
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))(assert (>= in5 100)) (assert (distinct in5 in4))(assert (>= in6 100)) (assert (distinct in6 in5))(assert (>= in7 100)) (assert (distinct in7 in6))(assert (>= in8 100)) (assert (distinct in8 in7))(assert (>= in9 100)) (assert (distinct in9 in8))(assert (>= in10 100)) (assert (distinct in10 in9))(assert (>= in11 100)) (assert (distinct in11 in10))(assert (>= in12 100)) (assert (distinct in12 in11))",
        "equivalent": false
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))(assert (>= in5 100)) (assert (distinct in5 in4))(assert (>= in6 100)) (assert (distinct in6 in5))(assert (>= in7 100)) (assert (distinct in7 in6))(assert (>= in8 100)) (assert (distinct in8 in7))(assert (>= in9 100)) (assert (distinct in9 in8))(assert (>= in10 100)) (assert (distinct in10 in9))(assert (>= in11 100)) (assert (distinct in11 in10))(assert (>= in12 100)) (assert (distinct in12 in11))(assert (>= in13 100)) (assert (distinct in13 in12))",
        "equivalent": false
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))(assert (>= in5 100)) (assert (distinct in5 in4))(assert (>= in6 100)) (assert (distinct in6 in5))(assert (>= in7 100)) (assert (distinct in7 in6))(assert (>= in8 100)) (assert (distinct in8 in7))(assert (>= in9 100)) (assert (distinct in9 in8))(assert (>= in10 100)) (assert (distinct in10 in9))(assert (>= in11 100)) (assert (distinct in11 in10))(assert (>= in12 100)) (assert (distinct in12 in11))(assert (>= in13 100)) (assert (distinct in13 in12))(assert (>= in14 100)) (assert (distinct in14 in13))",
        "equivalent": false
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))(assert (>= in5 100)) (assert (distinct in5 in4))(assert (>= in6 100)) (assert (distinct in6 in5))(assert (>= in7 100)) (assert (distinct in7 in6))(assert (>= in8 100)) (assert (distinct in8 in7))(assert (>= in9 100)) (assert (distinct in9 in8))(assert (>= in10 100)) (assert (distinct in10 in9))(assert (>= in11 100)) (assert (distinct in11 in10))(assert (>= in12 100)) (assert (distinct in12 in11))(assert (>= in13 100)) (assert (distinct in13 in12))(assert (>= in14 100)) (assert (distinct in14 in13))(assert (>= in15 100)) (assert (distinct in15 in14))",
        "equivalent": false
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))(assert (>= in5 100)) (assert (distinct in5 in4))(assert (>= in6 100)) (assert (distinct in6 in5))(assert (>= in7 100)) (assert (distinct in7 in6))(assert (>= in8 100)) (assert (distinct in8 in7))(assert (>= in9 100)) (assert (distinct in9 in8))(assert (>= in10 100)) (assert (distinct in10 in9))(assert (>= in11 100)) (assert (distinct in11 in10))(assert (>= in12 100)) (assert (distinct in12 in11))(assert (>= in13 100)) (assert (distinct in13 in12))(assert (>= in14 100)) (assert (distinct in14 in13))(assert (>= in15 100)) (assert (distinct in15 in14))(assert (>= in16 100)) (assert (distinct in16 in15))",
        "equivalent": false
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))(assert (>= in5 100)) (assert (distinct in5 in4))(assert (>= in6 100)) (assert (distinct in6 in5))(assert (>= in7 100)) (assert (distinct in7 in6))(assert (>= in8 100)) (assert (distinct in8 in7))(assert (>= in9 100)) (assert (distinct in9 in8))(assert (>= in10 100)) (assert (distinct in10 in9))(assert (>= in11 100)) (assert (distinct in11 in10))(assert (>= in12 100)) (assert (distinct in12 in11))(assert (>= in13 100)) (assert (distinct in13 in12))(assert (>= in14 100)) (assert (distinct in14 in13))(assert (>= in15 100)) (assert (distinct in15 in14))(assert (>= in16 100)) (assert (distinct in16 in15))(assert (>= in17 100)) (assert (distinct in17 in16))",
        "equivalent": false
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100))  ( >=  in18 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))(assert (>= in5 100)) (assert (distinct in5 in4))(assert (>= in6 100)) (assert (distinct in6 in5))(assert (>= in7 100)) (assert (distinct in7 in6))(assert (>= in8 100)) (assert (distinct in8 in7))(assert (>= in9 100)) (assert (distinct in9 in8))(assert (>= in10 100)) (assert (distinct in10 in9))(assert (>= in11 100)) (assert (distinct in11 in10))(assert (>= in12 100)) (assert (distinct in12 in11))(assert (>= in13 100)) (assert (distinct in13 in12))(assert (>= in14 100)) (assert (distinct in14 in13))(assert (>= in15 100)) (assert (distinct in15 in14))(assert (>= in16 100)) (assert (distinct in16 in15))(assert (>= in17 100)) (assert (distinct in17 in16))(assert (>= in18 100)) (assert (distinct in18 in17))",
        "equivalent": false
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100))  ( >=  in18 100))  ( >=  in19 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))(assert (>= in5 100)) (assert (distinct in5 in4))(assert (>= in6 100)) (assert (distinct in6 in5))(assert (>= in7 100)) (assert (distinct in7 in6))(assert (>= in8 100)) (assert (distinct in8 in7))(assert (>= in9 100)) (assert (distinct in9 in8))(assert (>= in10 100)) (assert (distinct in10 in9))(assert (>= in11 100)) (assert (distinct in11 in10))(assert (>= in12 100)) (assert (distinct in12 in11))(assert (>= in13 100)) (assert (distinct in13 in12))(assert (>= in14 100)) (assert (distinct in14 in13))(assert (>= in15 100)) (assert (distinct in15 in14))(assert (>= in16 100)) (assert (distinct in16 in15))(assert (>= in17 100)) (assert (distinct in17 in16))(assert (>= in18 100)) (assert (distinct in18 in17))(assert (>= in19 100)) (assert (distinct in19 in18))",
        "equivalent": false
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100))  ( >=  in18 100))  ( >=  in19 100))  ( >=  in20 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))(assert (>= in5 100)) (assert (distinct in5 in4))(assert (>= in6 100)) (assert (distinct in6 in5))(assert (>= in7 100)) (assert (distinct in7 in6))(assert (>= in8 100)) (assert (distinct in8 in7))(assert (>= in9 100)) (assert (distinct in9 in8))(assert (>= in10 100)) (assert (distinct in10 in9))(assert (>= in11 100)) (assert (distinct in11 in10))(assert (>= in12 100)) (assert (distinct in12 in11))(assert (>= in13 100)) (assert (distinct in13 in12))(assert (>= in14 100)) (assert (distinct in14 in13))(assert (>= in15 100)) (assert (distinct in15 in14))(assert (>= in16 100)) (assert (distinct in16 in15))(assert (>= in17 100)) (assert (distinct in17 in16))(assert (>= in18 100)) (assert (distinct in18 in17))(assert (>= in19 100)) (assert (distinct in19 in18))(assert (>= in20 100)) (assert (distinct in20 in19))",
        "equivalent": false
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100))  ( >=  in18 100))  ( >=  in19 100))  ( >=  in20 100))  ( >=  in21 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))(assert (>= in5 100)) (assert (distinct in5 in4))(assert (>= in6 100)) (assert (distinct in6 in5))(assert (>= in7 100)) (assert (distinct in7 in6))(assert (>= in8 100)) (assert (distinct in8 in7))(assert (>= in9 100)) (assert (distinct in9 in8))(assert (>= in10 100)) (assert (distinct in10 in9))(assert (>= in11 100)) (assert (distinct in11 in10))(assert (>= in12 100)) (assert (distinct in12 in11))(assert (>= in13 100)) (assert (distinct in13 in12))(assert (>= in14 100)) (assert (distinct in14 in13))(assert (>= in15 100)) (assert (distinct in15 in14))(assert (>= in16 100)) (assert (distinct in16 in15))(assert (>= in17 100)) (assert (distinct in17 in16))(assert (>= in18 100)) (assert (distinct in18 in17))(assert (>= in19 100)) (assert (distinct in19 in18))(assert (>= in20 100)) (assert (distinct in20 in19))(assert (>= in21 100)) (assert (distinct in21 in20))",
        "equivalent": false
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100))  ( >=  in18 100))  ( >=  in19 100))  ( >=  in20 100))  ( >=  in21 100))  ( >=  in22 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))(assert (>= in5 100)) (assert (distinct in5 in4))(assert (>= in6 100)) (assert (distinct in6 in5))(assert (>= in7 100)) (assert (distinct in7 in6))(assert (>= in8 100)) (assert (distinct in8 in7))(assert (>= in9 100)) (assert (distinct in9 in8))(assert (>= in10 100)) (assert (distinct in10 in9))(assert (>= in11 100)) (assert (distinct in11 in10))(assert (>= in12 100)) (assert (distinct in12 in11))(assert (>= in13 100)) (assert (distinct in13 in12))(assert (>= in14 100)) (assert (distinct in14 in13))(assert (>= in15 100)) (assert (distinct in15 in14))(assert (>= in16 100)) (assert (distinct in16 in15))(assert (>= in17 100)) (assert (distinct in17 in16))(assert (>= in18 100)) (assert (distinct in18 in17))(assert (>= in19 100)) (assert (distinct in19 in18))(assert (>= in20 100)) (assert (distinct in20 in19))(assert (>= in21 100)) (assert (distinct in21 in20))(assert (>= in22 100)) (assert (distinct in22 in21))",
        "equivalent": false
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100))  ( >=  in18 100))  ( >=  in19 100))  ( >=  in20 100))  ( >=  in21 100))  ( >=  in22 100))  ( >=  in23 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))(assert (>= in5 100)) (assert (distinct in5 in4))(assert (>= in6 100)) (assert (distinct in6 in5))(assert (>= in7 100)) (assert (distinct in7 in6))(assert (>= in8 100)) (assert (distinct in8 in7))(assert (>= in9 100)) (assert (distinct in9 in8))(assert (>= in10 100)) (assert (distinct in10 in9))(assert (>= in11 100)) (assert (distinct in11 in10))(assert (>= in12 100)) (assert (distinct in12 in11))(assert (>= in13 100)) (assert (distinct in13 in12))(assert (>= in14 100)) (assert (distinct in14 in13))(assert (>= in15 100)) (assert (distinct in15 in14))(assert (>= in16 100)) (assert (distinct in16 in15))(assert (>= in17 100)) (assert (distinct in17 in16))(assert (>= in18 100)) (assert (distinct in18 in17))(assert (>= in19 100)) (assert (distinct in19 in18))(assert (>= in20 100)) (assert (distinct in20 in19))(assert (>= in21 100)) (assert (distinct in21 in20))(assert (>= in22 100)) (assert (distinct in22 in21))(assert (>= in23 100)) (assert (distinct in23 in22))",
        "equivalent": false
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100))  ( >=  in18 100))  ( >=  in19 100))  ( >=  in20 100))  ( >=  in21 100))  ( >=  in22 100))  ( >=  in23 100))  ( >=  in24 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))(assert (>= in5 100)) (assert (distinct in5 in4))(assert (>= in6 100)) (assert (distinct in6 in5))(assert (>= in7 100)) (assert (distinct in7 in6))(assert (>= in8 100)) (assert (distinct in8 in7))(assert (>= in9 100)) (assert (distinct in9 in8))(assert (>= in10 100)) (assert (distinct in10 in9))(assert (>= in11 100)) (assert (distinct in11 in10))(assert (>= in12 100)) (assert (distinct in12 in11))(assert (>= in13 100)) (assert (distinct in13 in12))(assert (>= in14 100)) (assert (distinct in14 in13))(assert (>= in15 100)) (assert (distinct in15 in14))(assert (>= in16 100)) (assert (distinct in16 in15))(assert (>= in17 100)) (assert (distinct in17 in16))(assert (>= in18 100)) (assert (distinct in18 in17))(assert (>= in19 100)) (assert (distinct in19 in18))(assert (>= in20 100)) (assert (distinct in20 in19))(assert (>= in21 100)) (assert (distinct in21 in20))(assert (>= in22 100)) (assert (distinct in22 in21))(assert (>= in23 100)) (assert (distinct in23 in22))(assert (>= in24 100)) (assert (distinct in24 in23))",
        "equivalent": false
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100))  ( >=  in18 100))  ( >=  in19 100))  ( >=  in20 100))  ( >=  in21 100))  ( >=  in22 100))  ( >=  in23 100))  ( >=  in24 100))  ( >=  in25 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))(assert (>= in5 100)) (assert (distinct in5 in4))(assert (>= in6 100)) (assert (distinct in6 in5))(assert (>= in7 100)) (assert (distinct in7 in6))(assert (>= in8 100)) (assert (distinct in8 in7))(assert (>= in9 100)) (assert (distinct in9 in8))(assert (>= in10 100)) (assert (distinct in10 in9))(assert (>= in11 100)) (assert (distinct in11 in10))(assert (>= in12 100)) (assert (distinct in12 in11))(assert (>= in13 100)) (assert (distinct in13 in12))(assert (>= in14 100)) (assert (distinct in14 in13))(assert (>= in15 100)) (assert (distinct in15 in14))(assert (>= in16 100)) (assert (distinct in16 in15))(assert (>= in17 100)) (assert (distinct in17 in16))(assert (>= in18 100)) (assert (distinct in18 in17))(assert (>= in19 100)) (assert (distinct in19 in18))(assert (>= in20 100)) (assert (distinct in20 in19))(assert (>= in21 100)) (assert (distinct in21 in20))(assert (>= in22 100)) (assert (distinct in22 in21))(assert (>= in23 100)) (assert (distinct in23 in22))(assert (>= in24 100)) (assert (distinct in24 in23))(assert (>= in25 100)) (assert (distinct in25 in24))",
        "equivalent": false
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100))  ( >=  in18 100))  ( >=  in19 100))  ( >=  in20 100))  ( >=  in21 100))  ( >=  in22 100))  ( >=  in23 100))  ( >=  in24 100))  ( >=  in25 100))  ( >=  in26 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))(assert (>= in5 100)) (assert (distinct in5 in4))(assert (>= in6 100)) (assert (distinct in6 in5))(assert (>= in7 100)) (assert (distinct in7 in6))(assert (>= in8 100)) (assert (distinct in8 in7))(assert (>= in9 100)) (assert (distinct in9 in8))(assert (>= in10 100)) (assert (distinct in10 in9))(assert (>= in11 100)) (assert (distinct in11 in10))(assert (>= in12 100)) (assert (distinct in12 in11))(assert (>= in13 100)) (assert (distinct in13 in12))(assert (>= in14 100)) (assert (distinct in14 in13))(assert (>= in15 100)) (assert (distinct in15 in14))(assert (>= in16 100)) (assert (distinct in16 in15))(assert (>= in17 100)) (assert (distinct in17 in16))(assert (>= in18 100)) (assert (distinct in18 in17))(assert (>= in19 100)) (assert (distinct in19 in18))(assert (>= in20 100)) (assert (distinct in20 in19))(assert (>= in21 100)) (assert (distinct in21 in20))(assert (>= in22 100)) (assert (distinct in22 in21))(assert (>= in23 100)) (assert (distinct in23 in22))(assert (>= in24 100)) (assert (distinct in24 in23))(assert (>= in25 100)) (assert (distinct in25 in24))(assert (>= in26 100)) (assert (distinct in26 in25))",
        "equivalent": false
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100))  ( >=  in18 100))  ( >=  in19 100))  ( >=  in20 100))  ( >=  in21 100))  ( >=  in22 100))  ( >=  in23 100))  ( >=  in24 100))  ( >=  in25 100))  ( >=  in26 100))  ( >=  in27 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))(assert (>= in5 100)) (assert (distinct in5 in4))(assert (>= in6 100)) (assert (distinct in6 in5))(assert (>= in7 100)) (assert (distinct in7 in6))(assert (>= in8 100)) (assert (distinct in8 in7))(assert (>= in9 100)) (assert (distinct in9 in8))(assert (>= in10 100)) (assert (distinct in10 in9))(assert (>= in11 100)) (assert (distinct in11 in10))(assert (>= in12 100)) (assert (distinct in12 in11))(assert (>= in13 100)) (assert (distinct in13 in12))(assert (>= in14 100)) (assert (distinct in14 in13))(assert (>= in15 100)) (assert (distinct in15 in14))(assert (>= in16 100)) (assert (distinct in16 in15))(assert (>= in17 100)) (assert (distinct in17 in16))(assert (>= in18 100)) (assert (distinct in18 in17))(assert (>= in19 100)) (assert (distinct in19 in18))(assert (>= in20 100)) (assert (distinct in20 in19))(assert (>= in21 100)) (assert (distinct in21 in20))(assert (>= in22 100)) (assert (distinct in22 in21))(assert (>= in23 100)) (assert (distinct in23 in22))(assert (>= in24 100)) (assert (distinct in24 in23))(assert (>= in25 100)) (assert (distinct in25 in24))(assert (>= in26 100)) (assert (distinct in26 in25))(assert (>= in27 100)) (assert (distinct in27 in26))",
        "equivalent": false
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100))  ( >=  in18 100))  ( >=  in19 100))  ( >=  in20 100))  ( >=  in21 100))  ( >=  in22 100))  ( >=  in23 100))  ( >=  in24 100))  ( >=  in25 100))  ( >=  in26 100))  ( >=  in27 100))  ( >=  in28 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))(assert (>= in5 100)) (assert (distinct in5 in4))(assert (>= in6 100)) (assert (distinct in6 in5))(assert (>= in7 100)) (assert (distinct in7 in6))(assert (>= in8 100)) (assert (distinct in8 in7))(assert (>= in9 100)) (assert (distinct in9 in8))(assert (>= in10 100)) (assert (distinct in10 in9))(assert (>= in11 100)) (assert (distinct in11 in10))(assert (>= in12 100)) (assert (distinct in12 in11))(assert (>= in13 100)) (assert (distinct in13 in12))(assert (>= in14 100)) (assert (distinct in14 in13))(assert (>= in15 100)) (assert (distinct in15 in14))(assert (>= in16 100)) (assert (distinct in16 in15))(assert (>= in17 100)) (assert (distinct in17 in16))(assert (>= in18 100)) (assert (distinct in18 in17))(assert (>= in19 100)) (assert (distinct in19 in18))(assert (>= in20 100)) (assert (distinct in20 in19))(assert (>= in21 100)) (assert (distinct in21 in20))(assert (>= in22 100)) (assert (distinct in22 in21))(assert (>= in23 100)) (assert (distinct in23 in22))(assert (>= in24 100)) (assert (distinct in24 in23))(assert (>= in25 100)) (assert (distinct in25 in24))(assert (>= in26 100)) (assert (distinct in26 in25))(assert (>= in27 100)) (assert (distinct in27 in26))(assert (>= in28 100)) (assert (distinct in28 in27))",
        "equivalent": false
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 1))  ( =  in0 0))  ( >=  in1 100))  ( >=  in2 100))  ( >=  in3 100))  ( >=  in4 100))  ( >=  in5 100))  ( >=  in6 100))  ( >=  in7 100))  ( >=  in8 100))  ( >=  in9 100))  ( >=  in10 100))  ( >=  in11 100))  ( >=  in12 100))  ( >=  in13 100))  ( >=  in14 100))  ( >=  in15 100))  ( >=  in16 100))  ( >=  in17 100))  ( >=  in18 100))  ( >=  in19 100))  ( >=  in20 100))  ( >=  in21 100))  ( >=  in22 100))  ( >=  in23 100))  ( >=  in24 100))  ( >=  in25 100))  ( >=  in26 100))  ( >=  in27 100))  ( >=  in28 100))  ( >=  in29 100)))"
          ]
        },
        "predicted": "(assert (and (not (= in0 1)) (= in0 0)))(assert (>= in1 100)) (assert (>= in2 100)) (assert (distinct in2 in1))(assert (>= in3 100)) (assert (distinct in3 in2))(assert (>= in4 100)) (assert (distinct in4 in3))(assert (>= in5 100)) (assert (distinct in5 in4))(assert (>= in6 100)) (assert (distinct in6 in5))(assert (>= in7 100)) (assert (distinct in7 in6))(assert (>= in8 100)) (assert (distinct in8 in7))(assert (>= in9 100)) (assert (distinct in9 in8))(assert (>= in10 100)) (assert (distinct in10 in9))(assert (>= in11 100)) (assert (distinct in11 in10))(assert (>= in12 100)) (assert (distinct in12 in11))(assert (>= in13 100)) (assert (distinct in13 in12))(assert (>= in14 100)) (assert (distinct in14 in13))(assert (>= in15 100)) (assert (distinct in15 in14))(assert (>= in16 100)) (assert (distinct in16 in15))(assert (>= in17 100)) (assert (distinct in17 in16))(assert (>= in18 100)) (assert (distinct in18 in17))(assert (>= in19 100)) (assert (distinct in19 in18))(assert (>= in20 100)) (assert (distinct in20 in19))(assert (>= in21 100)) (assert (distinct in21 in20))(assert (>= in22 100)) (assert (distinct in22 in21))(assert (>= in23 100)) (assert (distinct in23 in22))(assert (>= in24 100)) (assert (distinct in24 in23))(assert (>= in25 100)) (assert (distinct in25 in24))(assert (>= in26 100)) (assert (distinct in26 in25))(assert (>= in27 100)) (assert (distinct in27 in26))(assert (>= in28 100)) (assert (distinct in28 in27))(assert (>= in29 100)) (assert (distinct in29 in28))",
        "equivalent": false
      }
    }
  }
}