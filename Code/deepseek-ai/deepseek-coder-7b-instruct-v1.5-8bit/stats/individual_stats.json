{
  "SameLowercase": {
    "succeeded": true,
    "attempts": 1,
    "examples_right": 30,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)"
          ],
          "assertions": [
            "(assert (and  ( >=  in0 97)  ( <=  in0 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122))))",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122))))",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122))))",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122))))",
        "equivalent": true
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122))))",
        "equivalent": true
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122))))",
        "equivalent": true
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122))))",
        "equivalent": true
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122))))",
        "equivalent": true
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122))))",
        "equivalent": true
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122))))",
        "equivalent": true
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122))))",
        "equivalent": true
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122))))",
        "equivalent": true
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122))))",
        "equivalent": true
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122))))",
        "equivalent": true
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122))))",
        "equivalent": true
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122))))",
        "equivalent": true
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122))))",
        "equivalent": true
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122))))",
        "equivalent": true
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122)) (and (>= in18 97) (<= in18 122))))",
        "equivalent": true
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122)) (and (>= in18 97) (<= in18 122)) (and (>= in19 97) (<= in19 122))))",
        "equivalent": true
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122)) (and (>= in18 97) (<= in18 122)) (and (>= in19 97) (<= in19 122)) (and (>= in20 97) (<= in20 122))))",
        "equivalent": true
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122)) (and (>= in18 97) (<= in18 122)) (and (>= in19 97) (<= in19 122)) (and (>= in20 97) (<= in20 122)) (and (>= in21 97) (<= in21 122))))",
        "equivalent": true
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122))  ( >=  in22 97))  ( <=  in22 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122)) (and (>= in18 97) (<= in18 122)) (and (>= in19 97) (<= in19 122)) (and (>= in20 97) (<= in20 122)) (and (>= in21 97) (<= in21 122)) (and (>= in22 97) (<= in22 122))))",
        "equivalent": true
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122))  ( >=  in22 97))  ( <=  in22 122))  ( >=  in23 97))  ( <=  in23 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122)) (and (>= in18 97) (<= in18 122)) (and (>= in19 97) (<= in19 122)) (and (>= in20 97) (<= in20 122)) (and (>= in21 97) (<= in21 122)) (and (>= in22 97) (<= in22 122)) (and (>= in23 97) (<= in23 122))))",
        "equivalent": true
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122))  ( >=  in22 97))  ( <=  in22 122))  ( >=  in23 97))  ( <=  in23 122))  ( >=  in24 97))  ( <=  in24 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122)) (and (>= in18 97) (<= in18 122)) (and (>= in19 97) (<= in19 122)) (and (>= in20 97) (<= in20 122)) (and (>= in21 97) (<= in21 122)) (and (>= in22 97) (<= in22 122)) (and (>= in23 97) (<= in23 122)) (and (>= in24 97) (<= in24 122))))",
        "equivalent": true
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122))  ( >=  in22 97))  ( <=  in22 122))  ( >=  in23 97))  ( <=  in23 122))  ( >=  in24 97))  ( <=  in24 122))  ( >=  in25 97))  ( <=  in25 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122)) (and (>= in18 97) (<= in18 122)) (and (>= in19 97) (<= in19 122)) (and (>= in20 97) (<= in20 122)) (and (>= in21 97) (<= in21 122)) (and (>= in22 97) (<= in22 122)) (and (>= in23 97) (<= in23 122)) (and (>= in24 97) (<= in24 122)) (and (>= in25 97) (<= in25 122))))",
        "equivalent": true
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122))  ( >=  in22 97))  ( <=  in22 122))  ( >=  in23 97))  ( <=  in23 122))  ( >=  in24 97))  ( <=  in24 122))  ( >=  in25 97))  ( <=  in25 122))  ( >=  in26 97))  ( <=  in26 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122)) (and (>= in18 97) (<= in18 122)) (and (>= in19 97) (<= in19 122)) (and (>= in20 97) (<= in20 122)) (and (>= in21 97) (<= in21 122)) (and (>= in22 97) (<= in22 122)) (and (>= in23 97) (<= in23 122)) (and (>= in24 97) (<= in24 122)) (and (>= in25 97) (<= in25 122)) (and (>= in26 97) (<= in26 122))))",
        "equivalent": true
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122))  ( >=  in22 97))  ( <=  in22 122))  ( >=  in23 97))  ( <=  in23 122))  ( >=  in24 97))  ( <=  in24 122))  ( >=  in25 97))  ( <=  in25 122))  ( >=  in26 97))  ( <=  in26 122))  ( >=  in27 97))  ( <=  in27 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122)) (and (>= in18 97) (<= in18 122)) (and (>= in19 97) (<= in19 122)) (and (>= in20 97) (<= in20 122)) (and (>= in21 97) (<= in21 122)) (and (>= in22 97) (<= in22 122)) (and (>= in23 97) (<= in23 122)) (and (>= in24 97) (<= in24 122)) (and (>= in25 97) (<= in25 122)) (and (>= in26 97) (<= in26 122)) (and (>= in27 97) (<= in27 122))))",
        "equivalent": true
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122))  ( >=  in22 97))  ( <=  in22 122))  ( >=  in23 97))  ( <=  in23 122))  ( >=  in24 97))  ( <=  in24 122))  ( >=  in25 97))  ( <=  in25 122))  ( >=  in26 97))  ( <=  in26 122))  ( >=  in27 97))  ( <=  in27 122))  ( >=  in28 97))  ( <=  in28 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122)) (and (>= in18 97) (<= in18 122)) (and (>= in19 97) (<= in19 122)) (and (>= in20 97) (<= in20 122)) (and (>= in21 97) (<= in21 122)) (and (>= in22 97) (<= in22 122)) (and (>= in23 97) (<= in23 122)) (and (>= in24 97) (<= in24 122)) (and (>= in25 97) (<= in25 122)) (and (>= in26 97) (<= in26 122)) (and (>= in27 97) (<= in27 122)) (and (>= in28 97) (<= in28 122))))",
        "equivalent": true
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( >=  in0 97)  ( <=  in0 122))  ( >=  in1 97))  ( <=  in1 122))  ( >=  in2 97))  ( <=  in2 122))  ( >=  in3 97))  ( <=  in3 122))  ( >=  in4 97))  ( <=  in4 122))  ( >=  in5 97))  ( <=  in5 122))  ( >=  in6 97))  ( <=  in6 122))  ( >=  in7 97))  ( <=  in7 122))  ( >=  in8 97))  ( <=  in8 122))  ( >=  in9 97))  ( <=  in9 122))  ( >=  in10 97))  ( <=  in10 122))  ( >=  in11 97))  ( <=  in11 122))  ( >=  in12 97))  ( <=  in12 122))  ( >=  in13 97))  ( <=  in13 122))  ( >=  in14 97))  ( <=  in14 122))  ( >=  in15 97))  ( <=  in15 122))  ( >=  in16 97))  ( <=  in16 122))  ( >=  in17 97))  ( <=  in17 122))  ( >=  in18 97))  ( <=  in18 122))  ( >=  in19 97))  ( <=  in19 122))  ( >=  in20 97))  ( <=  in20 122))  ( >=  in21 97))  ( <=  in21 122))  ( >=  in22 97))  ( <=  in22 122))  ( >=  in23 97))  ( <=  in23 122))  ( >=  in24 97))  ( <=  in24 122))  ( >=  in25 97))  ( <=  in25 122))  ( >=  in26 97))  ( <=  in26 122))  ( >=  in27 97))  ( <=  in27 122))  ( >=  in28 97))  ( <=  in28 122))  ( >=  in29 97))  ( <=  in29 122)))"
          ]
        },
        "predicted": "(assert (and (and (>= in0 97) (<= in0 122)) (and (>= in1 97) (<= in1 122)) (and (>= in2 97) (<= in2 122)) (and (>= in3 97) (<= in3 122)) (and (>= in4 97) (<= in4 122)) (and (>= in5 97) (<= in5 122)) (and (>= in6 97) (<= in6 122)) (and (>= in7 97) (<= in7 122)) (and (>= in8 97) (<= in8 122)) (and (>= in9 97) (<= in9 122)) (and (>= in10 97) (<= in10 122)) (and (>= in11 97) (<= in11 122)) (and (>= in12 97) (<= in12 122)) (and (>= in13 97) (<= in13 122)) (and (>= in14 97) (<= in14 122)) (and (>= in15 97) (<= in15 122)) (and (>= in16 97) (<= in16 122)) (and (>= in17 97) (<= in17 122)) (and (>= in18 97) (<= in18 122)) (and (>= in19 97) (<= in19 122)) (and (>= in20 97) (<= in20 122)) (and (>= in21 97) (<= in21 122)) (and (>= in22 97) (<= in22 122)) (and (>= in23 97) (<= in23 122)) (and (>= in24 97) (<= in24 122)) (and (>= in25 97) (<= in25 122)) (and (>= in26 97) (<= in26 122)) (and (>= in27 97) (<= in27 122)) (and (>= in28 97) (<= in28 122)) (and (>= in29 97) (<= in29 122))))",
        "equivalent": true
      }
    }
  },
  "SameString": {
    "succeeded": false,
    "attempts": 10,
    "examples_right": 0,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)"
          ],
          "assertions": [
            "(assert  ( =  in0 120))"
          ]
        },
        "predicted": "(assert (= in0 'x))",
        "equivalent": false
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and  ( =  in0 120)  ( =  in1 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x))",
        "equivalent": false
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x))",
        "equivalent": false
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x))",
        "equivalent": false
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x))",
        "equivalent": false
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x) (= in5 'x))",
        "equivalent": false
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x) (= in5 'x) (= in6 'x))",
        "equivalent": false
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x) (= in5 'x) (= in6 'x) (= in7 'x))",
        "equivalent": false
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x) (= in5 'x) (= in6 'x) (= in7 'x) (= in8 'x))",
        "equivalent": false
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x) (= in5 'x) (= in6 'x) (= in7 'x) (= in8 'x) (= in9 'x))",
        "equivalent": false
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x) (= in5 'x) (= in6 'x) (= in7 'x) (= in8 'x) (= in9 'x) (= in10 'x))",
        "equivalent": false
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x) (= in5 'x) (= in6 'x) (= in7 'x) (= in8 'x) (= in9 'x) (= in10 'x) (= in11 'x))",
        "equivalent": false
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x) (= in5 'x) (= in6 'x) (= in7 'x) (= in8 'x) (= in9 'x) (= in10 'x) (= in11 'x) (= in12 'x))",
        "equivalent": false
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x) (= in5 'x) (= in6 'x) (= in7 'x) (= in8 'x) (= in9 'x) (= in10 'x) (= in11 'x) (= in12 'x) (= in13 'x))",
        "equivalent": false
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x) (= in5 'x) (= in6 'x) (= in7 'x) (= in8 'x) (= in9 'x) (= in10 'x) (= in11 'x) (= in12 'x) (= in13 'x) (= in14 'x))",
        "equivalent": false
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x) (= in5 'x) (= in6 'x) (= in7 'x) (= in8 'x) (= in9 'x) (= in10 'x) (= in11 'x) (= in12 'x) (= in13 'x) (= in14 'x) (= in15 'x))",
        "equivalent": false
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x) (= in5 'x) (= in6 'x) (= in7 'x) (= in8 'x) (= in9 'x) (= in10 'x) (= in11 'x) (= in12 'x) (= in13 'x) (= in14 'x) (= in15 'x) (= in16 'x))",
        "equivalent": false
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x) (= in5 'x) (= in6 'x) (= in7 'x) (= in8 'x) (= in9 'x) (= in10 'x) (= in11 'x) (= in12 'x) (= in13 'x) (= in14 'x) (= in15 'x) (= in16 'x) (= in17 'x))",
        "equivalent": false
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120))  ( =  in18 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x) (= in5 'x) (= in6 'x) (= in7 'x) (= in8 'x) (= in9 'x) (= in10 'x) (= in11 'x) (= in12 'x) (= in13 'x) (= in14 'x) (= in15 'x) (= in16 'x) (= in17 'x) (= in18 'x))",
        "equivalent": false
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120))  ( =  in18 120))  ( =  in19 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x) (= in5 'x) (= in6 'x) (= in7 'x) (= in8 'x) (= in9 'x) (= in10 'x) (= in11 'x) (= in12 'x) (= in13 'x) (= in14 'x) (= in15 'x) (= in16 'x) (= in17 'x) (= in18 'x) (= in19 'x))",
        "equivalent": false
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120))  ( =  in18 120))  ( =  in19 120))  ( =  in20 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x) (= in5 'x) (= in6 'x) (= in7 'x) (= in8 'x) (= in9 'x) (= in10 'x) (= in11 'x) (= in12 'x) (= in13 'x) (= in14 'x) (= in15 'x) (= in16 'x) (= in17 'x) (= in18 'x) (= in19 'x) (= in20 'x))",
        "equivalent": false
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120))  ( =  in18 120))  ( =  in19 120))  ( =  in20 120))  ( =  in21 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x) (= in5 'x) (= in6 'x) (= in7 'x) (= in8 'x) (= in9 'x) (= in10 'x) (= in11 'x) (= in12 'x) (= in13 'x) (= in14 'x) (= in15 'x) (= in16 'x) (= in17 'x) (= in18 'x) (= in19 'x) (= in20 'x) (= in21 'x))",
        "equivalent": false
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120))  ( =  in18 120))  ( =  in19 120))  ( =  in20 120))  ( =  in21 120))  ( =  in22 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x) (= in5 'x) (= in6 'x) (= in7 'x) (= in8 'x) (= in9 'x) (= in10 'x) (= in11 'x) (= in12 'x) (= in13 'x) (= in14 'x) (= in15 'x) (= in16 'x) (= in17 'x) (= in18 'x) (= in19 'x) (= in20 'x) (= in21 'x) (= in22 'x))",
        "equivalent": false
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120))  ( =  in18 120))  ( =  in19 120))  ( =  in20 120))  ( =  in21 120))  ( =  in22 120))  ( =  in23 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x) (= in5 'x) (= in6 'x) (= in7 'x) (= in8 'x) (= in9 'x) (= in10 'x) (= in11 'x) (= in12 'x) (= in13 'x) (= in14 'x) (= in15 'x) (= in16 'x) (= in17 'x) (= in18 'x) (= in19 'x) (= in20 'x) (= in21 'x) (= in22 'x) (= in23 'x))",
        "equivalent": false
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120))  ( =  in18 120))  ( =  in19 120))  ( =  in20 120))  ( =  in21 120))  ( =  in22 120))  ( =  in23 120))  ( =  in24 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x) (= in5 'x) (= in6 'x) (= in7 'x) (= in8 'x) (= in9 'x) (= in10 'x) (= in11 'x) (= in12 'x) (= in13 'x) (= in14 'x) (= in15 'x) (= in16 'x) (= in17 'x) (= in18 'x) (= in19 'x) (= in20 'x) (= in21 'x) (= in22 'x) (= in23 'x) (= in24 'x))",
        "equivalent": false
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120))  ( =  in18 120))  ( =  in19 120))  ( =  in20 120))  ( =  in21 120))  ( =  in22 120))  ( =  in23 120))  ( =  in24 120))  ( =  in25 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x) (= in5 'x) (= in6 'x) (= in7 'x) (= in8 'x) (= in9 'x) (= in10 'x) (= in11 'x) (= in12 'x) (= in13 'x) (= in14 'x) (= in15 'x) (= in16 'x) (= in17 'x) (= in18 'x) (= in19 'x) (= in20 'x) (= in21 'x) (= in22 'x) (= in23 'x) (= in24 'x) (= in25 'x))",
        "equivalent": false
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120))  ( =  in18 120))  ( =  in19 120))  ( =  in20 120))  ( =  in21 120))  ( =  in22 120))  ( =  in23 120))  ( =  in24 120))  ( =  in25 120))  ( =  in26 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x) (= in5 'x) (= in6 'x) (= in7 'x) (= in8 'x) (= in9 'x) (= in10 'x) (= in11 'x) (= in12 'x) (= in13 'x) (= in14 'x) (= in15 'x) (= in16 'x) (= in17 'x) (= in18 'x) (= in19 'x) (= in20 'x) (= in21 'x) (= in22 'x) (= in23 'x) (= in24 'x) (= in25 'x) (= in26 'x))",
        "equivalent": false
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120))  ( =  in18 120))  ( =  in19 120))  ( =  in20 120))  ( =  in21 120))  ( =  in22 120))  ( =  in23 120))  ( =  in24 120))  ( =  in25 120))  ( =  in26 120))  ( =  in27 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x) (= in5 'x) (= in6 'x) (= in7 'x) (= in8 'x) (= in9 'x) (= in10 'x) (= in11 'x) (= in12 'x) (= in13 'x) (= in14 'x) (= in15 'x) (= in16 'x) (= in17 'x) (= in18 'x) (= in19 'x) (= in20 'x) (= in21 'x) (= in22 'x) (= in23 'x) (= in24 'x) (= in25 'x) (= in26 'x) (= in27 'x))",
        "equivalent": false
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120))  ( =  in18 120))  ( =  in19 120))  ( =  in20 120))  ( =  in21 120))  ( =  in22 120))  ( =  in23 120))  ( =  in24 120))  ( =  in25 120))  ( =  in26 120))  ( =  in27 120))  ( =  in28 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x) (= in5 'x) (= in6 'x) (= in7 'x) (= in8 'x) (= in9 'x) (= in10 'x) (= in11 'x) (= in12 'x) (= in13 'x) (= in14 'x) (= in15 'x) (= in16 'x) (= in17 'x) (= in18 'x) (= in19 'x) (= in20 'x) (= in21 'x) (= in22 'x) (= in23 'x) (= in24 'x) (= in25 'x) (= in26 'x) (= in27 'x) (= in28 'x))",
        "equivalent": false
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 120)  ( =  in1 120))  ( =  in2 120))  ( =  in3 120))  ( =  in4 120))  ( =  in5 120))  ( =  in6 120))  ( =  in7 120))  ( =  in8 120))  ( =  in9 120))  ( =  in10 120))  ( =  in11 120))  ( =  in12 120))  ( =  in13 120))  ( =  in14 120))  ( =  in15 120))  ( =  in16 120))  ( =  in17 120))  ( =  in18 120))  ( =  in19 120))  ( =  in20 120))  ( =  in21 120))  ( =  in22 120))  ( =  in23 120))  ( =  in24 120))  ( =  in25 120))  ( =  in26 120))  ( =  in27 120))  ( =  in28 120))  ( =  in29 120)))"
          ]
        },
        "predicted": "(assert (= in0 'x) (= in1 'x) (= in2 'x) (= in3 'x) (= in4 'x) (= in5 'x) (= in6 'x) (= in7 'x) (= in8 'x) (= in9 'x) (= in10 'x) (= in11 'x) (= in12 'x) (= in13 'x) (= in14 'x) (= in15 'x) (= in16 'x) (= in17 'x) (= in18 'x) (= in19 'x) (= in20 'x) (= in21 'x) (= in22 'x) (= in23 'x) (= in24 'x) (= in25 'x) (= in26 'x) (= in27 'x) (= in28 'x) (= in29 'x))",
        "equivalent": false
      }
    }
  },
  "SimpleTrueFalse": {
    "succeeded": false,
    "attempts": 10,
    "examples_right": 0,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)"
          ],
          "assertions": [
            "(assert  ( =  in0 1))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)))",
        "equivalent": false
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and  ( =  in0 1)  ( =  in1 0)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)))",
        "equivalent": false
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)))",
        "equivalent": false
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)))",
        "equivalent": false
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)))",
        "equivalent": false
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)) (= (ite (= in5 1) false true) (ite (= in5 0) true false)))",
        "equivalent": false
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)) (= (ite (= in5 1) false true) (ite (= in5 0) true false)) (= (ite (= in6 1) true false) (ite (= in6 0) false true)))",
        "equivalent": false
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)) (= (ite (= in5 1) false true) (ite (= in5 0) true false)) (= (ite (= in6 1) true false) (ite (= in6 0) false true)) (= (ite (= in7 1) false true) (ite (= in7 0) true false)))",
        "equivalent": false
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)) (= (ite (= in5 1) false true) (ite (= in5 0) true false)) (= (ite (= in6 1) true false) (ite (= in6 0) false true)) (= (ite (= in7 1) false true) (ite (= in7 0) true false)) (= (ite (= in8 1) true false) (ite (= in8 0) false true)))",
        "equivalent": false
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)) (= (ite (= in5 1) false true) (ite (= in5 0) true false)) (= (ite (= in6 1) true false) (ite (= in6 0) false true)) (= (ite (= in7 1) false true) (ite (= in7 0) true false)) (= (ite (= in8 1) true false) (ite (= in8 0) false true)) (= (ite (= in9 1) false true) (ite (= in9 0) true false)))",
        "equivalent": false
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)) (= (ite (= in5 1) false true) (ite (= in5 0) true false)) (= (ite (= in6 1) true false) (ite (= in6 0) false true)) (= (ite (= in7 1) false true) (ite (= in7 0) true false)) (= (ite (= in8 1) true false) (ite (= in8 0) false true)) (= (ite (= in9 1) false true) (ite (= in9 0) true false)) (= (ite (= in10 1) true false) (ite (= in10 0) false true)))",
        "equivalent": false
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)) (= (ite (= in5 1) false true) (ite (= in5 0) true false)) (= (ite (= in6 1) true false) (ite (= in6 0) false true)) (= (ite (= in7 1) false true) (ite (= in7 0) true false)) (= (ite (= in8 1) true false) (ite (= in8 0) false true)) (= (ite (= in9 1) false true) (ite (= in9 0) true false)) (= (ite (= in10 1) true false) (ite (= in10 0) false true)) (= (ite (= in11 1) false true) (ite (= in11 0) true false)))",
        "equivalent": false
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)) (= (ite (= in5 1) false true) (ite (= in5 0) true false)) (= (ite (= in6 1) true false) (ite (= in6 0) false true)) (= (ite (= in7 1) false true) (ite (= in7 0) true false)) (= (ite (= in8 1) true false) (ite (= in8 0) false true)) (= (ite (= in9 1) false true) (ite (= in9 0) true false)) (= (ite (= in10 1) true false) (ite (= in10 0) false true)) (= (ite (= in11 1) false true) (ite (= in11 0) true false)) (= (ite (= in12 1) true false) (ite (= in12 0) false true)))",
        "equivalent": false
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)) (= (ite (= in5 1) false true) (ite (= in5 0) true false)) (= (ite (= in6 1) true false) (ite (= in6 0) false true)) (= (ite (= in7 1) false true) (ite (= in7 0) true false)) (= (ite (= in8 1) true false) (ite (= in8 0) false true)) (= (ite (= in9 1) false true) (ite (= in9 0) true false)) (= (ite (= in10 1) true false) (ite (= in10 0) false true)) (= (ite (= in11 1) false true) (ite (= in11 0) true false)) (= (ite (= in12 1) true false) (ite (= in12 0) false true)) (= (ite (= in13 1) false true) (ite (= in13 0) true false)))",
        "equivalent": false
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)) (= (ite (= in5 1) false true) (ite (= in5 0) true false)) (= (ite (= in6 1) true false) (ite (= in6 0) false true)) (= (ite (= in7 1) false true) (ite (= in7 0) true false)) (= (ite (= in8 1) true false) (ite (= in8 0) false true)) (= (ite (= in9 1) false true) (ite (= in9 0) true false)) (= (ite (= in10 1) true false) (ite (= in10 0) false true)) (= (ite (= in11 1) false true) (ite (= in11 0) true false)) (= (ite (= in12 1) true false) (ite (= in12 0) false true)) (= (ite (= in13 1) false true) (ite (= in13 0) true false)) (= (ite (= in14 1) true false) (ite (= in14 0) false true)))",
        "equivalent": false
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)) (= (ite (= in5 1) false true) (ite (= in5 0) true false)) (= (ite (= in6 1) true false) (ite (= in6 0) false true)) (= (ite (= in7 1) false true) (ite (= in7 0) true false)) (= (ite (= in8 1) true false) (ite (= in8 0) false true)) (= (ite (= in9 1) false true) (ite (= in9 0) true false)) (= (ite (= in10 1) true false) (ite (= in10 0) false true)) (= (ite (= in11 1) false true) (ite (= in11 0) true false)) (= (ite (= in12 1) true false) (ite (= in12 0) false true)) (= (ite (= in13 1) false true) (ite (= in13 0) true false)) (= (ite (= in14 1) true false) (ite (= in14 0) false true)) (= (ite (= in15 1) false true) (ite (= in15 0) true false)))",
        "equivalent": false
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)) (= (ite (= in5 1) false true) (ite (= in5 0) true false)) (= (ite (= in6 1) true false) (ite (= in6 0) false true)) (= (ite (= in7 1) false true) (ite (= in7 0) true false)) (= (ite (= in8 1) true false) (ite (= in8 0) false true)) (= (ite (= in9 1) false true) (ite (= in9 0) true false)) (= (ite (= in10 1) true false) (ite (= in10 0) false true)) (= (ite (= in11 1) false true) (ite (= in11 0) true false)) (= (ite (= in12 1) true false) (ite (= in12 0) false true)) (= (ite (= in13 1) false true) (ite (= in13 0) true false)) (= (ite (= in14 1) true false) (ite (= in14 0) false true)) (= (ite (= in15 1) false true) (ite (= in15 0) true false)) (= (ite (= in16 1) true false) (ite (= in16 0) false true)))",
        "equivalent": false
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)) (= (ite (= in5 1) false true) (ite (= in5 0) true false)) (= (ite (= in6 1) true false) (ite (= in6 0) false true)) (= (ite (= in7 1) false true) (ite (= in7 0) true false)) (= (ite (= in8 1) true false) (ite (= in8 0) false true)) (= (ite (= in9 1) false true) (ite (= in9 0) true false)) (= (ite (= in10 1) true false) (ite (= in10 0) false true)) (= (ite (= in11 1) false true) (ite (= in11 0) true false)) (= (ite (= in12 1) true false) (ite (= in12 0) false true)) (= (ite (= in13 1) false true) (ite (= in13 0) true false)) (= (ite (= in14 1) true false) (ite (= in14 0) false true)) (= (ite (= in15 1) false true) (ite (= in15 0) true false)) (= (ite (= in16 1) true false) (ite (= in16 0) false true)) (= (ite (= in17 1) false true) (ite (= in17 0) true false)))",
        "equivalent": false
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)) (= (ite (= in5 1) false true) (ite (= in5 0) true false)) (= (ite (= in6 1) true false) (ite (= in6 0) false true)) (= (ite (= in7 1) false true) (ite (= in7 0) true false)) (= (ite (= in8 1) true false) (ite (= in8 0) false true)) (= (ite (= in9 1) false true) (ite (= in9 0) true false)) (= (ite (= in10 1) true false) (ite (= in10 0) false true)) (= (ite (= in11 1) false true) (ite (= in11 0) true false)) (= (ite (= in12 1) true false) (ite (= in12 0) false true)) (= (ite (= in13 1) false true) (ite (= in13 0) true false)) (= (ite (= in14 1) true false) (ite (= in14 0) false true)) (= (ite (= in15 1) false true) (ite (= in15 0) true false)) (= (ite (= in16 1) true false) (ite (= in16 0) false true)) (= (ite (= in17 1) false true) (ite (= in17 0) true false)) (= (ite (= in18 1) true false) (ite (= in18 0) false true)))",
        "equivalent": false
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1))  ( =  in19 0)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)) (= (ite (= in5 1) false true) (ite (= in5 0) true false)) (= (ite (= in6 1) true false) (ite (= in6 0) false true)) (= (ite (= in7 1) false true) (ite (= in7 0) true false)) (= (ite (= in8 1) true false) (ite (= in8 0) false true)) (= (ite (= in9 1) false true) (ite (= in9 0) true false)) (= (ite (= in10 1) true false) (ite (= in10 0) false true)) (= (ite (= in11 1) false true) (ite (= in11 0) true false)) (= (ite (= in12 1) true false) (ite (= in12 0) false true)) (= (ite (= in13 1) false true) (ite (= in13 0) true false)) (= (ite (= in14 1) true false) (ite (= in14 0) false true)) (= (ite (= in15 1) false true) (ite (= in15 0) true false)) (= (ite (= in16 1) true false) (ite (= in16 0) false true)) (= (ite (= in17 1) false true) (ite (= in17 0) true false)) (= (ite (= in18 1) true false) (ite (= in18 0) false true)) (= (ite (= in19 1) false true) (ite (= in19 0) true false)))",
        "equivalent": false
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1))  ( =  in19 0))  ( =  in20 1)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)) (= (ite (= in5 1) false true) (ite (= in5 0) true false)) (= (ite (= in6 1) true false) (ite (= in6 0) false true)) (= (ite (= in7 1) false true) (ite (= in7 0) true false)) (= (ite (= in8 1) true false) (ite (= in8 0) false true)) (= (ite (= in9 1) false true) (ite (= in9 0) true false)) (= (ite (= in10 1) true false) (ite (= in10 0) false true)) (= (ite (= in11 1) false true) (ite (= in11 0) true false)) (= (ite (= in12 1) true false) (ite (= in12 0) false true)) (= (ite (= in13 1) false true) (ite (= in13 0) true false)) (= (ite (= in14 1) true false) (ite (= in14 0) false true)) (= (ite (= in15 1) false true) (ite (= in15 0) true false)) (= (ite (= in16 1) true false) (ite (= in16 0) false true)) (= (ite (= in17 1) false true) (ite (= in17 0) true false)) (= (ite (= in18 1) true false) (ite (= in18 0) false true)) (= (ite (= in19 1) false true) (ite (= in19 0) true false)) (= (ite (= in20 1) true false) (ite (= in20 0) false true)))",
        "equivalent": false
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1))  ( =  in19 0))  ( =  in20 1))  ( =  in21 0)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)) (= (ite (= in5 1) false true) (ite (= in5 0) true false)) (= (ite (= in6 1) true false) (ite (= in6 0) false true)) (= (ite (= in7 1) false true) (ite (= in7 0) true false)) (= (ite (= in8 1) true false) (ite (= in8 0) false true)) (= (ite (= in9 1) false true) (ite (= in9 0) true false)) (= (ite (= in10 1) true false) (ite (= in10 0) false true)) (= (ite (= in11 1) false true) (ite (= in11 0) true false)) (= (ite (= in12 1) true false) (ite (= in12 0) false true)) (= (ite (= in13 1) false true) (ite (= in13 0) true false)) (= (ite (= in14 1) true false) (ite (= in14 0) false true)) (= (ite (= in15 1) false true) (ite (= in15 0) true false)) (= (ite (= in16 1) true false) (ite (= in16 0) false true)) (= (ite (= in17 1) false true) (ite (= in17 0) true false)) (= (ite (= in18 1) true false) (ite (= in18 0) false true)) (= (ite (= in19 1) false true) (ite (= in19 0) true false)) (= (ite (= in20 1) true false) (ite (= in20 0) false true)) (= (ite (= in21 1) false true) (ite (= in21 0) true false)))",
        "equivalent": false
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1))  ( =  in19 0))  ( =  in20 1))  ( =  in21 0))  ( =  in22 1)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)) (= (ite (= in5 1) false true) (ite (= in5 0) true false)) (= (ite (= in6 1) true false) (ite (= in6 0) false true)) (= (ite (= in7 1) false true) (ite (= in7 0) true false)) (= (ite (= in8 1) true false) (ite (= in8 0) false true)) (= (ite (= in9 1) false true) (ite (= in9 0) true false)) (= (ite (= in10 1) true false) (ite (= in10 0) false true)) (= (ite (= in11 1) false true) (ite (= in11 0) true false)) (= (ite (= in12 1) true false) (ite (= in12 0) false true)) (= (ite (= in13 1) false true) (ite (= in13 0) true false)) (= (ite (= in14 1) true false) (ite (= in14 0) false true)) (= (ite (= in15 1) false true) (ite (= in15 0) true false)) (= (ite (= in16 1) true false) (ite (= in16 0) false true)) (= (ite (= in17 1) false true) (ite (= in17 0) true false)) (= (ite (= in18 1) true false) (ite (= in18 0) false true)) (= (ite (= in19 1) false true) (ite (= in19 0) true false)) (= (ite (= in20 1) true false) (ite (= in20 0) false true)) (= (ite (= in21 1) false true) (ite (= in21 0) true false)) (= (ite (= in22 1) true false) (ite (= in22 0) false true)))",
        "equivalent": false
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1))  ( =  in19 0))  ( =  in20 1))  ( =  in21 0))  ( =  in22 1))  ( =  in23 0)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)) (= (ite (= in5 1) false true) (ite (= in5 0) true false)) (= (ite (= in6 1) true false) (ite (= in6 0) false true)) (= (ite (= in7 1) false true) (ite (= in7 0) true false)) (= (ite (= in8 1) true false) (ite (= in8 0) false true)) (= (ite (= in9 1) false true) (ite (= in9 0) true false)) (= (ite (= in10 1) true false) (ite (= in10 0) false true)) (= (ite (= in11 1) false true) (ite (= in11 0) true false)) (= (ite (= in12 1) true false) (ite (= in12 0) false true)) (= (ite (= in13 1) false true) (ite (= in13 0) true false)) (= (ite (= in14 1) true false) (ite (= in14 0) false true)) (= (ite (= in15 1) false true) (ite (= in15 0) true false)) (= (ite (= in16 1) true false) (ite (= in16 0) false true)) (= (ite (= in17 1) false true) (ite (= in17 0) true false)) (= (ite (= in18 1) true false) (ite (= in18 0) false true)) (= (ite (= in19 1) false true) (ite (= in19 0) true false)) (= (ite (= in20 1) true false) (ite (= in20 0) false true)) (= (ite (= in21 1) false true) (ite (= in21 0) true false)) (= (ite (= in22 1) true false) (ite (= in22 0) false true)) (= (ite (= in23 1) false true) (ite (= in23 0) true false)))",
        "equivalent": false
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1))  ( =  in19 0))  ( =  in20 1))  ( =  in21 0))  ( =  in22 1))  ( =  in23 0))  ( =  in24 1)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)) (= (ite (= in5 1) false true) (ite (= in5 0) true false)) (= (ite (= in6 1) true false) (ite (= in6 0) false true)) (= (ite (= in7 1) false true) (ite (= in7 0) true false)) (= (ite (= in8 1) true false) (ite (= in8 0) false true)) (= (ite (= in9 1) false true) (ite (= in9 0) true false)) (= (ite (= in10 1) true false) (ite (= in10 0) false true)) (= (ite (= in11 1) false true) (ite (= in11 0) true false)) (= (ite (= in12 1) true false) (ite (= in12 0) false true)) (= (ite (= in13 1) false true) (ite (= in13 0) true false)) (= (ite (= in14 1) true false) (ite (= in14 0) false true)) (= (ite (= in15 1) false true) (ite (= in15 0) true false)) (= (ite (= in16 1) true false) (ite (= in16 0) false true)) (= (ite (= in17 1) false true) (ite (= in17 0) true false)) (= (ite (= in18 1) true false) (ite (= in18 0) false true)) (= (ite (= in19 1) false true) (ite (= in19 0) true false)) (= (ite (= in20 1) true false) (ite (= in20 0) false true)) (= (ite (= in21 1) false true) (ite (= in21 0) true false)) (= (ite (= in22 1) true false) (ite (= in22 0) false true)) (= (ite (= in23 1) false true) (ite (= in23 0) true false)) (= (ite (= in24 1) true false) (ite (= in24 0) false true)))",
        "equivalent": false
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1))  ( =  in19 0))  ( =  in20 1))  ( =  in21 0))  ( =  in22 1))  ( =  in23 0))  ( =  in24 1))  ( =  in25 0)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)) (= (ite (= in5 1) false true) (ite (= in5 0) true false)) (= (ite (= in6 1) true false) (ite (= in6 0) false true)) (= (ite (= in7 1) false true) (ite (= in7 0) true false)) (= (ite (= in8 1) true false) (ite (= in8 0) false true)) (= (ite (= in9 1) false true) (ite (= in9 0) true false)) (= (ite (= in10 1) true false) (ite (= in10 0) false true)) (= (ite (= in11 1) false true) (ite (= in11 0) true false)) (= (ite (= in12 1) true false) (ite (= in12 0) false true)) (= (ite (= in13 1) false true) (ite (= in13 0) true false)) (= (ite (= in14 1) true false) (ite (= in14 0) false true)) (= (ite (= in15 1) false true) (ite (= in15 0) true false)) (= (ite (= in16 1) true false) (ite (= in16 0) false true)) (= (ite (= in17 1) false true) (ite (= in17 0) true false)) (= (ite (= in18 1) true false) (ite (= in18 0) false true)) (= (ite (= in19 1) false true) (ite (= in19 0) true false)) (= (ite (= in20 1) true false) (ite (= in20 0) false true)) (= (ite (= in21 1) false true) (ite (= in21 0) true false)) (= (ite (= in22 1) true false) (ite (= in22 0) false true)) (= (ite (= in23 1) false true) (ite (= in23 0) true false)) (= (ite (= in24 1) true false) (ite (= in24 0) false true)) (= (ite (= in25 1) false true) (ite (= in25 0) true false)))",
        "equivalent": false
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1))  ( =  in19 0))  ( =  in20 1))  ( =  in21 0))  ( =  in22 1))  ( =  in23 0))  ( =  in24 1))  ( =  in25 0))  ( =  in26 1)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)) (= (ite (= in5 1) false true) (ite (= in5 0) true false)) (= (ite (= in6 1) true false) (ite (= in6 0) false true)) (= (ite (= in7 1) false true) (ite (= in7 0) true false)) (= (ite (= in8 1) true false) (ite (= in8 0) false true)) (= (ite (= in9 1) false true) (ite (= in9 0) true false)) (= (ite (= in10 1) true false) (ite (= in10 0) false true)) (= (ite (= in11 1) false true) (ite (= in11 0) true false)) (= (ite (= in12 1) true false) (ite (= in12 0) false true)) (= (ite (= in13 1) false true) (ite (= in13 0) true false)) (= (ite (= in14 1) true false) (ite (= in14 0) false true)) (= (ite (= in15 1) false true) (ite (= in15 0) true false)) (= (ite (= in16 1) true false) (ite (= in16 0) false true)) (= (ite (= in17 1) false true) (ite (= in17 0) true false)) (= (ite (= in18 1) true false) (ite (= in18 0) false true)) (= (ite (= in19 1) false true) (ite (= in19 0) true false)) (= (ite (= in20 1) true false) (ite (= in20 0) false true)) (= (ite (= in21 1) false true) (ite (= in21 0) true false)) (= (ite (= in22 1) true false) (ite (= in22 0) false true)) (= (ite (= in23 1) false true) (ite (= in23 0) true false)) (= (ite (= in24 1) true false) (ite (= in24 0) false true)) (= (ite (= in25 1) false true) (ite (= in25 0) true false)) (= (ite (= in26 1) true false) (ite (= in26 0) false true)))",
        "equivalent": false
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1))  ( =  in19 0))  ( =  in20 1))  ( =  in21 0))  ( =  in22 1))  ( =  in23 0))  ( =  in24 1))  ( =  in25 0))  ( =  in26 1))  ( =  in27 0)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)) (= (ite (= in5 1) false true) (ite (= in5 0) true false)) (= (ite (= in6 1) true false) (ite (= in6 0) false true)) (= (ite (= in7 1) false true) (ite (= in7 0) true false)) (= (ite (= in8 1) true false) (ite (= in8 0) false true)) (= (ite (= in9 1) false true) (ite (= in9 0) true false)) (= (ite (= in10 1) true false) (ite (= in10 0) false true)) (= (ite (= in11 1) false true) (ite (= in11 0) true false)) (= (ite (= in12 1) true false) (ite (= in12 0) false true)) (= (ite (= in13 1) false true) (ite (= in13 0) true false)) (= (ite (= in14 1) true false) (ite (= in14 0) false true)) (= (ite (= in15 1) false true) (ite (= in15 0) true false)) (= (ite (= in16 1) true false) (ite (= in16 0) false true)) (= (ite (= in17 1) false true) (ite (= in17 0) true false)) (= (ite (= in18 1) true false) (ite (= in18 0) false true)) (= (ite (= in19 1) false true) (ite (= in19 0) true false)) (= (ite (= in20 1) true false) (ite (= in20 0) false true)) (= (ite (= in21 1) false true) (ite (= in21 0) true false)) (= (ite (= in22 1) true false) (ite (= in22 0) false true)) (= (ite (= in23 1) false true) (ite (= in23 0) true false)) (= (ite (= in24 1) true false) (ite (= in24 0) false true)) (= (ite (= in25 1) false true) (ite (= in25 0) true false)) (= (ite (= in26 1) true false) (ite (= in26 0) false true)) (= (ite (= in27 1) false true) (ite (= in27 0) true false)))",
        "equivalent": false
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1))  ( =  in19 0))  ( =  in20 1))  ( =  in21 0))  ( =  in22 1))  ( =  in23 0))  ( =  in24 1))  ( =  in25 0))  ( =  in26 1))  ( =  in27 0))  ( =  in28 1)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)) (= (ite (= in5 1) false true) (ite (= in5 0) true false)) (= (ite (= in6 1) true false) (ite (= in6 0) false true)) (= (ite (= in7 1) false true) (ite (= in7 0) true false)) (= (ite (= in8 1) true false) (ite (= in8 0) false true)) (= (ite (= in9 1) false true) (ite (= in9 0) true false)) (= (ite (= in10 1) true false) (ite (= in10 0) false true)) (= (ite (= in11 1) false true) (ite (= in11 0) true false)) (= (ite (= in12 1) true false) (ite (= in12 0) false true)) (= (ite (= in13 1) false true) (ite (= in13 0) true false)) (= (ite (= in14 1) true false) (ite (= in14 0) false true)) (= (ite (= in15 1) false true) (ite (= in15 0) true false)) (= (ite (= in16 1) true false) (ite (= in16 0) false true)) (= (ite (= in17 1) false true) (ite (= in17 0) true false)) (= (ite (= in18 1) true false) (ite (= in18 0) false true)) (= (ite (= in19 1) false true) (ite (= in19 0) true false)) (= (ite (= in20 1) true false) (ite (= in20 0) false true)) (= (ite (= in21 1) false true) (ite (= in21 0) true false)) (= (ite (= in22 1) true false) (ite (= in22 0) false true)) (= (ite (= in23 1) false true) (ite (= in23 0) true false)) (= (ite (= in24 1) true false) (ite (= in24 0) false true)) (= (ite (= in25 1) false true) (ite (= in25 0) true false)) (= (ite (= in26 1) true false) (ite (= in26 0) false true)) (= (ite (= in27 1) false true) (ite (= in27 0) true false)) (= (ite (= in28 1) true false) (ite (= in28 0) false true)))",
        "equivalent": false
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1))  ( =  in19 0))  ( =  in20 1))  ( =  in21 0))  ( =  in22 1))  ( =  in23 0))  ( =  in24 1))  ( =  in25 0))  ( =  in26 1))  ( =  in27 0))  ( =  in28 1))  ( =  in29 0)))"
          ]
        },
        "predicted": "(assert (= (ite (= in0 1) true false) (ite (= in0 0) false true)) (= (ite (= in1 1) false true) (ite (= in1 0) true false)) (= (ite (= in2 1) true false) (ite (= in2 0) false true)) (= (ite (= in3 1) false true) (ite (= in3 0) true false)) (= (ite (= in4 1) true false) (ite (= in4 0) false true)) (= (ite (= in5 1) false true) (ite (= in5 0) true false)) (= (ite (= in6 1) true false) (ite (= in6 0) false true)) (= (ite (= in7 1) false true) (ite (= in7 0) true false)) (= (ite (= in8 1) true false) (ite (= in8 0) false true)) (= (ite (= in9 1) false true) (ite (= in9 0) true false)) (= (ite (= in10 1) true false) (ite (= in10 0) false true)) (= (ite (= in11 1) false true) (ite (= in11 0) true false)) (= (ite (= in12 1) true false) (ite (= in12 0) false true)) (= (ite (= in13 1) false true) (ite (= in13 0) true false)) (= (ite (= in14 1) true false) (ite (= in14 0) false true)) (= (ite (= in15 1) false true) (ite (= in15 0) true false)) (= (ite (= in16 1) true false) (ite (= in16 0) false true)) (= (ite (= in17 1) false true) (ite (= in17 0) true false)) (= (ite (= in18 1) true false) (ite (= in18 0) false true)) (= (ite (= in19 1) false true) (ite (= in19 0) true false)) (= (ite (= in20 1) true false) (ite (= in20 0) false true)) (= (ite (= in21 1) false true) (ite (= in21 0) true false)) (= (ite (= in22 1) true false) (ite (= in22 0) false true)) (= (ite (= in23 1) false true) (ite (= in23 0) true false)) (= (ite (= in24 1) true false) (ite (= in24 0) false true)) (= (ite (= in25 1) false true) (ite (= in25 0) true false)) (= (ite (= in26 1) true false) (ite (= in26 0) false true)) (= (ite (= in27 1) false true) (ite (= in27 0) true false)) (= (ite (= in28 1) true false) (ite (= in28 0) false true)) (= (ite (= in29 1) false true) (ite (= in29 0) true false)))",
        "equivalent": false
      }
    }
  },
  "SimpleUnique": {
    "succeeded": true,
    "attempts": 1,
    "examples_right": 30,
    "generalisation": {
      "1": {
        "expected": {
          "constants": [],
          "assertions": []
        },
        "predicted": "",
        "equivalent": true
      },
      "2": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (not ( = in0 in1)))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))",
        "equivalent": true
      },
      "3": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)"
          ],
          "assertions": [
            "(assert (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in1 in2))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in1 in2)))",
        "equivalent": true
      },
      "4": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in2 in3))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in2 in3)))",
        "equivalent": true
      },
      "5": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in3 in4))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in3 in4)))",
        "equivalent": true
      },
      "6": {
        "expected": {
          "constants": [
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in4 in5))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in0 in5)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in1 in5)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in2 in5)))\n(assert (not (= in3 in4)))\n(assert (not (= in3 in5)))\n(assert (not (= in4 in5)))",
        "equivalent": true
      },
      "7": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in5 in6))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in0 in5)))\n(assert (not (= in0 in6)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in1 in5)))\n(assert (not (= in1 in6)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in2 in5)))\n(assert (not (= in2 in6)))\n(assert (not (= in3 in4)))\n(assert (not (= in3 in5)))\n(assert (not (= in3 in6)))\n(assert (not (= in4 in5)))\n(assert (not (= in4 in6)))\n(assert (not (= in5 in6)))",
        "equivalent": true
      },
      "8": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in6 in7))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in0 in5)))\n(assert (not (= in0 in6)))\n(assert (not (= in0 in7)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in1 in5)))\n(assert (not (= in1 in6)))\n(assert (not (= in1 in7)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in2 in5)))\n(assert (not (= in2 in6)))\n(assert (not (= in2 in7)))\n(assert (not (= in3 in4)))\n(assert (not (= in3 in5)))\n(assert (not (= in3 in6)))\n(assert (not (= in3 in7)))\n(assert (not (= in4 in5)))\n(assert (not (= in4 in6)))\n(assert (not (= in4 in7)))\n(assert (not (= in5 in6)))\n(assert (not (= in5 in7)))\n(assert (not (= in6 in7)))",
        "equivalent": true
      },
      "9": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in7 in8))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in0 in5)))\n(assert (not (= in0 in6)))\n(assert (not (= in0 in7)))\n(assert (not (= in0 in8)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in1 in5)))\n(assert (not (= in1 in6)))\n(assert (not (= in1 in7)))\n(assert (not (= in1 in8)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in2 in5)))\n(assert (not (= in2 in6)))\n(assert (not (= in2 in7)))\n(assert (not (= in2 in8)))\n(assert (not (= in3 in4)))\n(assert (not (= in3 in5)))\n(assert (not (= in3 in6)))\n(assert (not (= in3 in7)))\n(assert (not (= in3 in8)))\n(assert (not (= in4 in5)))\n(assert (not (= in4 in6)))\n(assert (not (= in4 in7)))\n(assert (not (= in4 in8)))\n(assert (not (= in5 in6)))\n(assert (not (= in5 in7)))\n(assert (not (= in5 in8)))\n(assert (not (= in6 in7)))\n(assert (not (= in6 in8)))\n(assert (not (= in7 in8)))",
        "equivalent": true
      },
      "10": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in8 in9))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in0 in5)))\n(assert (not (= in0 in6)))\n(assert (not (= in0 in7)))\n(assert (not (= in0 in8)))\n(assert (not (= in0 in9)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in1 in5)))\n(assert (not (= in1 in6)))\n(assert (not (= in1 in7)))\n(assert (not (= in1 in8)))\n(assert (not (= in1 in9)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in2 in5)))\n(assert (not (= in2 in6)))\n(assert (not (= in2 in7)))\n(assert (not (= in2 in8)))\n(assert (not (= in2 in9)))\n(assert (not (= in3 in4)))\n(assert (not (= in3 in5)))\n(assert (not (= in3 in6)))\n(assert (not (= in3 in7)))\n(assert (not (= in3 in8)))\n(assert (not (= in3 in9)))\n(assert (not (= in4 in5)))\n(assert (not (= in4 in6)))\n(assert (not (= in4 in7)))\n(assert (not (= in4 in8)))\n(assert (not (= in4 in9)))\n(assert (not (= in5 in6)))\n(assert (not (= in5 in7)))\n(assert (not (= in5 in8)))\n(assert (not (= in5 in9)))\n(assert (not (= in6 in7)))\n(assert (not (= in6 in8)))\n(assert (not (= in6 in9)))\n(assert (not (= in7 in8)))\n(assert (not (= in7 in9)))\n(assert (not (= in8 in9)))",
        "equivalent": true
      },
      "11": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in9 Int)",
            "(declare-const in10 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in9 in10))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in0 in5)))\n(assert (not (= in0 in6)))\n(assert (not (= in0 in7)))\n(assert (not (= in0 in8)))\n(assert (not (= in0 in9)))\n(assert (not (= in0 in10)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in1 in5)))\n(assert (not (= in1 in6)))\n(assert (not (= in1 in7)))\n(assert (not (= in1 in8)))\n(assert (not (= in1 in9)))\n(assert (not (= in1 in10)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in2 in5)))\n(assert (not (= in2 in6)))\n(assert (not (= in2 in7)))\n(assert (not (= in2 in8)))\n(assert (not (= in2 in9)))\n(assert (not (= in2 in10)))\n(assert (not (= in3 in4)))\n(assert (not (= in3 in5)))\n(assert (not (= in3 in6)))\n(assert (not (= in3 in7)))\n(assert (not (= in3 in8)))\n(assert (not (= in3 in9)))\n(assert (not (= in3 in10)))\n(assert (not (= in4 in5)))\n(assert (not (= in4 in6)))\n(assert (not (= in4 in7)))\n(assert (not (= in4 in8)))\n(assert (not (= in4 in9)))\n(assert (not (= in4 in10)))\n(assert (not (= in5 in6)))\n(assert (not (= in5 in7)))\n(assert (not (= in5 in8)))\n(assert (not (= in5 in9)))\n(assert (not (= in5 in10)))\n(assert (not (= in6 in7)))\n(assert (not (= in6 in8)))\n(assert (not (= in6 in9)))\n(assert (not (= in6 in10)))\n(assert (not (= in7 in8)))\n(assert (not (= in7 in9)))\n(assert (not (= in7 in10)))\n(assert (not (= in8 in9)))\n(assert (not (= in8 in10)))\n(assert (not (= in9 in10)))",
        "equivalent": true
      },
      "12": {
        "expected": {
          "constants": [
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in10 in11))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in0 in5)))\n(assert (not (= in0 in6)))\n(assert (not (= in0 in7)))\n(assert (not (= in0 in8)))\n(assert (not (= in0 in9)))\n(assert (not (= in0 in10)))\n(assert (not (= in0 in11)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in1 in5)))\n(assert (not (= in1 in6)))\n(assert (not (= in1 in7)))\n(assert (not (= in1 in8)))\n(assert (not (= in1 in9)))\n(assert (not (= in1 in10)))\n(assert (not (= in1 in11)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in2 in5)))\n(assert (not (= in2 in6)))\n(assert (not (= in2 in7)))\n(assert (not (= in2 in8)))\n(assert (not (= in2 in9)))\n(assert (not (= in2 in10)))\n(assert (not (= in2 in11)))\n(assert (not (= in3 in4)))\n(assert (not (= in3 in5)))\n(assert (not (= in3 in6)))\n(assert (not (= in3 in7)))\n(assert (not (= in3 in8)))\n(assert (not (= in3 in9)))\n(assert (not (= in3 in10)))\n(assert (not (= in3 in11)))\n(assert (not (= in4 in5)))\n(assert (not (= in4 in6)))\n(assert (not (= in4 in7)))\n(assert (not (= in4 in8)))\n(assert (not (= in4 in9)))\n(assert (not (= in4 in10)))\n(assert (not (= in4 in11)))\n(assert (not (= in5 in6)))\n(assert (not (= in5 in7)))\n(assert (not (= in5 in8)))\n(assert (not (= in5 in9)))\n(assert (not (= in5 in10)))\n(assert (not (= in5 in11)))\n(assert (not (= in6 in7)))\n(assert (not (= in6 in8)))\n(assert (not (= in6 in9)))\n(assert (not (= in6 in10)))\n(assert (not (= in6 in11)))\n(assert (not (= in7 in8)))\n(assert (not (= in7 in9)))\n(assert (not (= in7 in10)))\n(assert (not (= in7 in11)))\n(assert (not (= in8 in9)))\n(assert (not (= in8 in10)))\n(assert (not (= in8 in11)))\n(assert (not (= in9 in10)))\n(assert (not (= in9 in11)))\n(assert (not (= in10 in11)))",
        "equivalent": true
      },
      "13": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in11 in12))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in0 in5)))\n(assert (not (= in0 in6)))\n(assert (not (= in0 in7)))\n(assert (not (= in0 in8)))\n(assert (not (= in0 in9)))\n(assert (not (= in0 in10)))\n(assert (not (= in0 in11)))\n(assert (not (= in0 in12)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in1 in5)))\n(assert (not (= in1 in6)))\n(assert (not (= in1 in7)))\n(assert (not (= in1 in8)))\n(assert (not (= in1 in9)))\n(assert (not (= in1 in10)))\n(assert (not (= in1 in11)))\n(assert (not (= in1 in12)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in2 in5)))\n(assert (not (= in2 in6)))\n(assert (not (= in2 in7)))\n(assert (not (= in2 in8)))\n(assert (not (= in2 in9)))\n(assert (not (= in2 in10)))\n(assert (not (= in2 in11)))\n(assert (not (= in2 in12)))\n(assert (not (= in3 in4)))\n(assert (not (= in3 in5)))\n(assert (not (= in3 in6)))\n(assert (not (= in3 in7)))\n(assert (not (= in3 in8)))\n(assert (not (= in3 in9)))\n(assert (not (= in3 in10)))\n(assert (not (= in3 in11)))\n(assert (not (= in3 in12)))\n(assert (not (= in4 in5)))\n(assert (not (= in4 in6)))\n(assert (not (= in4 in7)))\n(assert (not (= in4 in8)))\n(assert (not (= in4 in9)))\n(assert (not (= in4 in10)))\n(assert (not (= in4 in11)))\n(assert (not (= in4 in12)))\n(assert (not (= in5 in6)))\n(assert (not (= in5 in7)))\n(assert (not (= in5 in8)))\n(assert (not (= in5 in9)))\n(assert (not (= in5 in10)))\n(assert (not (= in5 in11)))\n(assert (not (= in5 in12)))\n(assert (not (= in6 in7)))\n(assert (not (= in6 in8)))\n(assert (not (= in6 in9)))\n(assert (not (= in6 in10)))\n(assert (not (= in6 in11)))\n(assert (not (= in6 in12)))\n(assert (not (= in7 in8)))\n(assert (not (= in7 in9)))\n(assert (not (= in7 in10)))\n(assert (not (= in7 in11)))\n(assert (not (= in7 in12)))\n(assert (not (= in8 in9)))\n(assert (not (= in8 in10)))\n(assert (not (= in8 in11)))\n(assert (not (= in8 in12)))\n(assert (not (= in9 in10)))\n(assert (not (= in9 in11)))\n(assert (not (= in9 in12)))\n(assert (not (= in10 in11)))\n(assert (not (= in10 in12)))\n(assert (not (= in11 in12)))",
        "equivalent": true
      },
      "14": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in12 in13))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in0 in5)))\n(assert (not (= in0 in6)))\n(assert (not (= in0 in7)))\n(assert (not (= in0 in8)))\n(assert (not (= in0 in9)))\n(assert (not (= in0 in10)))\n(assert (not (= in0 in11)))\n(assert (not (= in0 in12)))\n(assert (not (= in0 in13)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in1 in5)))\n(assert (not (= in1 in6)))\n(assert (not (= in1 in7)))\n(assert (not (= in1 in8)))\n(assert (not (= in1 in9)))\n(assert (not (= in1 in10)))\n(assert (not (= in1 in11)))\n(assert (not (= in1 in12)))\n(assert (not (= in1 in13)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in2 in5)))\n(assert (not (= in2 in6)))\n(assert (not (= in2 in7)))\n(assert (not (= in2 in8)))\n(assert (not (= in2 in9)))\n(assert (not (= in2 in10)))\n(assert (not (= in2 in11)))\n(assert (not (= in2 in12)))\n(assert (not (= in2 in13)))\n(assert (not (= in3 in4)))\n(assert (not (= in3 in5)))\n(assert (not (= in3 in6)))\n(assert (not (= in3 in7)))\n(assert (not (= in3 in8)))\n(assert (not (= in3 in9)))\n(assert (not (= in3 in10)))\n(assert (not (= in3 in11)))\n(assert (not (= in3 in12)))\n(assert (not (= in3 in13)))\n(assert (not (= in4 in5)))\n(assert (not (= in4 in6)))\n(assert (not (= in4 in7)))\n(assert (not (= in4 in8)))\n(assert (not (= in4 in9)))\n(assert (not (= in4 in10)))\n(assert (not (= in4 in11)))\n(assert (not (= in4 in12)))\n(assert (not (= in4 in13)))\n(assert (not (= in5 in6)))\n(assert (not (= in5 in7)))\n(assert (not (= in5 in8)))\n(assert (not (= in5 in9)))\n(assert (not (= in5 in10)))\n(assert (not (= in5 in11)))\n(assert (not (= in5 in12)))\n(assert (not (= in5 in13)))\n(assert (not (= in6 in7)))\n(assert (not (= in6 in8)))\n(assert (not (= in6 in9)))\n(assert (not (= in6 in10)))\n(assert (not (= in6 in11)))\n(assert (not (= in6 in12)))\n(assert (not (= in6 in13)))\n(assert (not (= in7 in8)))\n(assert (not (= in7 in9)))\n(assert (not (= in7 in10)))\n(assert (not (= in7 in11)))\n(assert (not (= in7 in12)))\n(assert (not (= in7 in13)))\n(assert (not (= in8 in9)))\n(assert (not (= in8 in10)))\n(assert (not (= in8 in11)))\n(assert (not (= in8 in12)))\n(assert (not (= in8 in13)))\n(assert (not (= in9 in10)))\n(assert (not (= in9 in11)))\n(assert (not (= in9 in12)))\n(assert (not (= in9 in13)))\n(assert (not (= in10 in11)))\n(assert (not (= in10 in12)))\n(assert (not (= in10 in13)))\n(assert (not (= in11 in12)))\n(assert (not (= in11 in13)))\n(assert (not (= in12 in13)))",
        "equivalent": true
      },
      "15": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in13 in14))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in0 in5)))\n(assert (not (= in0 in6)))\n(assert (not (= in0 in7)))\n(assert (not (= in0 in8)))\n(assert (not (= in0 in9)))\n(assert (not (= in0 in10)))\n(assert (not (= in0 in11)))\n(assert (not (= in0 in12)))\n(assert (not (= in0 in13)))\n(assert (not (= in0 in14)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in1 in5)))\n(assert (not (= in1 in6)))\n(assert (not (= in1 in7)))\n(assert (not (= in1 in8)))\n(assert (not (= in1 in9)))\n(assert (not (= in1 in10)))\n(assert (not (= in1 in11)))\n(assert (not (= in1 in12)))\n(assert (not (= in1 in13)))\n(assert (not (= in1 in14)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in2 in5)))\n(assert (not (= in2 in6)))\n(assert (not (= in2 in7)))\n(assert (not (= in2 in8)))\n(assert (not (= in2 in9)))\n(assert (not (= in2 in10)))\n(assert (not (= in2 in11)))\n(assert (not (= in2 in12)))\n(assert (not (= in2 in13)))\n(assert (not (= in2 in14)))\n(assert (not (= in3 in4)))\n(assert (not (= in3 in5)))\n(assert (not (= in3 in6)))\n(assert (not (= in3 in7)))\n(assert (not (= in3 in8)))\n(assert (not (= in3 in9)))\n(assert (not (= in3 in10)))\n(assert (not (= in3 in11)))\n(assert (not (= in3 in12)))\n(assert (not (= in3 in13)))\n(assert (not (= in3 in14)))\n(assert (not (= in4 in5)))\n(assert (not (= in4 in6)))\n(assert (not (= in4 in7)))\n(assert (not (= in4 in8)))\n(assert (not (= in4 in9)))\n(assert (not (= in4 in10)))\n(assert (not (= in4 in11)))\n(assert (not (= in4 in12)))\n(assert (not (= in4 in13)))\n(assert (not (= in4 in14)))\n(assert (not (= in5 in6)))\n(assert (not (= in5 in7)))\n(assert (not (= in5 in8)))\n(assert (not (= in5 in9)))\n(assert (not (= in5 in10)))\n(assert (not (= in5 in11)))\n(assert (not (= in5 in12)))\n(assert (not (= in5 in13)))\n(assert (not (= in5 in14)))\n(assert (not (= in6 in7)))\n(assert (not (= in6 in8)))\n(assert (not (= in6 in9)))\n(assert (not (= in6 in10)))\n(assert (not (= in6 in11)))\n(assert (not (= in6 in12)))\n(assert (not (= in6 in13)))\n(assert (not (= in6 in14)))\n(assert (not (= in7 in8)))\n(assert (not (= in7 in9)))\n(assert (not (= in7 in10)))\n(assert (not (= in7 in11)))\n(assert (not (= in7 in12)))\n(assert (not (= in7 in13)))\n(assert (not (= in7 in14)))\n(assert (not (= in8 in9)))\n(assert (not (= in8 in10)))\n(assert (not (= in8 in11)))\n(assert (not (= in8 in12)))\n(assert (not (= in8 in13)))\n(assert (not (= in8 in14)))\n(assert (not (= in9 in10)))\n(assert (not (= in9 in11)))\n(assert (not (= in9 in12)))\n(assert (not (= in9 in13)))\n(assert (not (= in9 in14)))\n(assert (not (= in10 in11)))\n(assert (not (= in10 in12)))\n(assert (not (= in10 in13)))\n(assert (not (= in10 in14)))\n(assert (not (= in11 in12)))\n(assert (not (= in11 in13)))\n(assert (not (= in11 in14)))\n(assert (not (= in12 in13)))\n(assert (not (= in12 in14)))\n(assert (not (= in13 in14)))",
        "equivalent": true
      },
      "16": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in14 in15))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in0 in5)))\n(assert (not (= in0 in6)))\n(assert (not (= in0 in7)))\n(assert (not (= in0 in8)))\n(assert (not (= in0 in9)))\n(assert (not (= in0 in10)))\n(assert (not (= in0 in11)))\n(assert (not (= in0 in12)))\n(assert (not (= in0 in13)))\n(assert (not (= in0 in14)))\n(assert (not (= in0 in15)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in1 in5)))\n(assert (not (= in1 in6)))\n(assert (not (= in1 in7)))\n(assert (not (= in1 in8)))\n(assert (not (= in1 in9)))\n(assert (not (= in1 in10)))\n(assert (not (= in1 in11)))\n(assert (not (= in1 in12)))\n(assert (not (= in1 in13)))\n(assert (not (= in1 in14)))\n(assert (not (= in1 in15)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in2 in5)))\n(assert (not (= in2 in6)))\n(assert (not (= in2 in7)))\n(assert (not (= in2 in8)))\n(assert (not (= in2 in9)))\n(assert (not (= in2 in10)))\n(assert (not (= in2 in11)))\n(assert (not (= in2 in12)))\n(assert (not (= in2 in13)))\n(assert (not (= in2 in14)))\n(assert (not (= in2 in15)))\n(assert (not (= in3 in4)))\n(assert (not (= in3 in5)))\n(assert (not (= in3 in6)))\n(assert (not (= in3 in7)))\n(assert (not (= in3 in8)))\n(assert (not (= in3 in9)))\n(assert (not (= in3 in10)))\n(assert (not (= in3 in11)))\n(assert (not (= in3 in12)))\n(assert (not (= in3 in13)))\n(assert (not (= in3 in14)))\n(assert (not (= in3 in15)))\n(assert (not (= in4 in5)))\n(assert (not (= in4 in6)))\n(assert (not (= in4 in7)))\n(assert (not (= in4 in8)))\n(assert (not (= in4 in9)))\n(assert (not (= in4 in10)))\n(assert (not (= in4 in11)))\n(assert (not (= in4 in12)))\n(assert (not (= in4 in13)))\n(assert (not (= in4 in14)))\n(assert (not (= in4 in15)))\n(assert (not (= in5 in6)))\n(assert (not (= in5 in7)))\n(assert (not (= in5 in8)))\n(assert (not (= in5 in9)))\n(assert (not (= in5 in10)))\n(assert (not (= in5 in11)))\n(assert (not (= in5 in12)))\n(assert (not (= in5 in13)))\n(assert (not (= in5 in14)))\n(assert (not (= in5 in15)))\n(assert (not (= in6 in7)))\n(assert (not (= in6 in8)))\n(assert (not (= in6 in9)))\n(assert (not (= in6 in10)))\n(assert (not (= in6 in11)))\n(assert (not (= in6 in12)))\n(assert (not (= in6 in13)))\n(assert (not (= in6 in14)))\n(assert (not (= in6 in15)))\n(assert (not (= in7 in8)))\n(assert (not (= in7 in9)))\n(assert (not (= in7 in10)))\n(assert (not (= in7 in11)))\n(assert (not (= in7 in12)))\n(assert (not (= in7 in13)))\n(assert (not (= in7 in14)))\n(assert (not (= in7 in15)))\n(assert (not (= in8 in9)))\n(assert (not (= in8 in10)))\n(assert (not (= in8 in11)))\n(assert (not (= in8 in12)))\n(assert (not (= in8 in13)))\n(assert (not (= in8 in14)))\n(assert (not (= in8 in15)))\n(assert (not (= in9 in10)))\n(assert (not (= in9 in11)))\n(assert (not (= in9 in12)))\n(assert (not (= in9 in13)))\n(assert (not (= in9 in14)))\n(assert (not (= in9 in15)))\n(assert (not (= in10 in11)))\n(assert (not (= in10 in12)))\n(assert (not (= in10 in13)))\n(assert (not (= in10 in14)))\n(assert (not (= in10 in15)))\n(assert (not (= in11 in12)))\n(assert (not (= in11 in13)))\n(assert (not (= in11 in14)))\n(assert (not (= in11 in15)))\n(assert (not (= in12 in13)))\n(assert (not (= in12 in14)))\n(assert (not (= in12 in15)))\n(assert (not (= in13 in14)))\n(assert (not (= in13 in15)))\n(assert (not (= in14 in15)))",
        "equivalent": true
      },
      "17": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in15 in16))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in0 in5)))\n(assert (not (= in0 in6)))\n(assert (not (= in0 in7)))\n(assert (not (= in0 in8)))\n(assert (not (= in0 in9)))\n(assert (not (= in0 in10)))\n(assert (not (= in0 in11)))\n(assert (not (= in0 in12)))\n(assert (not (= in0 in13)))\n(assert (not (= in0 in14)))\n(assert (not (= in0 in15)))\n(assert (not (= in0 in16)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in1 in5)))\n(assert (not (= in1 in6)))\n(assert (not (= in1 in7)))\n(assert (not (= in1 in8)))\n(assert (not (= in1 in9)))\n(assert (not (= in1 in10)))\n(assert (not (= in1 in11)))\n(assert (not (= in1 in12)))\n(assert (not (= in1 in13)))\n(assert (not (= in1 in14)))\n(assert (not (= in1 in15)))\n(assert (not (= in1 in16)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in2 in5)))\n(assert (not (= in2 in6)))\n(assert (not (= in2 in7)))\n(assert (not (= in2 in8)))\n(assert (not (= in2 in9)))\n(assert (not (= in2 in10)))\n(assert (not (= in2 in11)))\n(assert (not (= in2 in12)))\n(assert (not (= in2 in13)))\n(assert (not (= in2 in14)))\n(assert (not (= in2 in15)))\n(assert (not (= in2 in16)))\n(assert (not (= in3 in4)))\n(assert (not (= in3 in5)))\n(assert (not (= in3 in6)))\n(assert (not (= in3 in7)))\n(assert (not (= in3 in8)))\n(assert (not (= in3 in9)))\n(assert (not (= in3 in10)))\n(assert (not (= in3 in11)))\n(assert (not (= in3 in12)))\n(assert (not (= in3 in13)))\n(assert (not (= in3 in14)))\n(assert (not (= in3 in15)))\n(assert (not (= in3 in16)))\n(assert (not (= in4 in5)))\n(assert (not (= in4 in6)))\n(assert (not (= in4 in7)))\n(assert (not (= in4 in8)))\n(assert (not (= in4 in9)))\n(assert (not (= in4 in10)))\n(assert (not (= in4 in11)))\n(assert (not (= in4 in12)))\n(assert (not (= in4 in13)))\n(assert (not (= in4 in14)))\n(assert (not (= in4 in15)))\n(assert (not (= in4 in16)))\n(assert (not (= in5 in6)))\n(assert (not (= in5 in7)))\n(assert (not (= in5 in8)))\n(assert (not (= in5 in9)))\n(assert (not (= in5 in10)))\n(assert (not (= in5 in11)))\n(assert (not (= in5 in12)))\n(assert (not (= in5 in13)))\n(assert (not (= in5 in14)))\n(assert (not (= in5 in15)))\n(assert (not (= in5 in16)))\n(assert (not (= in6 in7)))\n(assert (not (= in6 in8)))\n(assert (not (= in6 in9)))\n(assert (not (= in6 in10)))\n(assert (not (= in6 in11)))\n(assert (not (= in6 in12)))\n(assert (not (= in6 in13)))\n(assert (not (= in6 in14)))\n(assert (not (= in6 in15)))\n(assert (not (= in6 in16)))\n(assert (not (= in7 in8)))\n(assert (not (= in7 in9)))\n(assert (not (= in7 in10)))\n(assert (not (= in7 in11)))\n(assert (not (= in7 in12)))\n(assert (not (= in7 in13)))\n(assert (not (= in7 in14)))\n(assert (not (= in7 in15)))\n(assert (not (= in7 in16)))\n(assert (not (= in8 in9)))\n(assert (not (= in8 in10)))\n(assert (not (= in8 in11)))\n(assert (not (= in8 in12)))\n(assert (not (= in8 in13)))\n(assert (not (= in8 in14)))\n(assert (not (= in8 in15)))\n(assert (not (= in8 in16)))\n(assert (not (= in9 in10)))\n(assert (not (= in9 in11)))\n(assert (not (= in9 in12)))\n(assert (not (= in9 in13)))\n(assert (not (= in9 in14)))\n(assert (not (= in9 in15)))\n(assert (not (= in9 in16)))\n(assert (not (= in10 in11)))\n(assert (not (= in10 in12)))\n(assert (not (= in10 in13)))\n(assert (not (= in10 in14)))\n(assert (not (= in10 in15)))\n(assert (not (= in10 in16)))\n(assert (not (= in11 in12)))\n(assert (not (= in11 in13)))\n(assert (not (= in11 in14)))\n(assert (not (= in11 in15)))\n(assert (not (= in11 in16)))\n(assert (not (= in12 in13)))\n(assert (not (= in12 in14)))\n(assert (not (= in12 in15)))\n(assert (not (= in12 in16)))\n(assert (not (= in13 in14)))\n(assert (not (= in13 in15)))\n(assert (not (= in13 in16)))\n(assert (not (= in14 in15)))\n(assert (not (= in14 in16)))\n(assert (not (= in15 in16)))",
        "equivalent": true
      },
      "18": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in16 in17))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in0 in5)))\n(assert (not (= in0 in6)))\n(assert (not (= in0 in7)))\n(assert (not (= in0 in8)))\n(assert (not (= in0 in9)))\n(assert (not (= in0 in10)))\n(assert (not (= in0 in11)))\n(assert (not (= in0 in12)))\n(assert (not (= in0 in13)))\n(assert (not (= in0 in14)))\n(assert (not (= in0 in15)))\n(assert (not (= in0 in16)))\n(assert (not (= in0 in17)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in1 in5)))\n(assert (not (= in1 in6)))\n(assert (not (= in1 in7)))\n(assert (not (= in1 in8)))\n(assert (not (= in1 in9)))\n(assert (not (= in1 in10)))\n(assert (not (= in1 in11)))\n(assert (not (= in1 in12)))\n(assert (not (= in1 in13)))\n(assert (not (= in1 in14)))\n(assert (not (= in1 in15)))\n(assert (not (= in1 in16)))\n(assert (not (= in1 in17)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in2 in5)))\n(assert (not (= in2 in6)))\n(assert (not (= in2 in7)))\n(assert (not (= in2 in8)))\n(assert (not (= in2 in9)))\n(assert (not (= in2 in10)))\n(assert (not (= in2 in11)))\n(assert (not (= in2 in12)))\n(assert (not (= in2 in13)))\n(assert (not (= in2 in14)))\n(assert (not (= in2 in15)))\n(assert (not (= in2 in16)))\n(assert (not (= in2 in17)))\n(assert (not (= in3 in4)))\n(assert (not (= in3 in5)))\n(assert (not (= in3 in6)))\n(assert (not (= in3 in7)))\n(assert (not (= in3 in8)))\n(assert (not (= in3 in9)))\n(assert (not (= in3 in10)))\n(assert (not (= in3 in11)))\n(assert (not (= in3 in12)))\n(assert (not (= in3 in13)))\n(assert (not (= in3 in14)))\n(assert (not (= in3 in15)))\n(assert (not (= in3 in16)))\n(assert (not (= in3 in17)))\n(assert (not (= in4 in5)))\n(assert (not (= in4 in6)))\n(assert (not (= in4 in7)))\n(assert (not (= in4 in8)))\n(assert (not (= in4 in9)))\n(assert (not (= in4 in10)))\n(assert (not (= in4 in11)))\n(assert (not (= in4 in12)))\n(assert (not (= in4 in13)))\n(assert (not (= in4 in14)))\n(assert (not (= in4 in15)))\n(assert (not (= in4 in16)))\n(assert (not (= in4 in17)))\n(assert (not (= in5 in6)))\n(assert (not (= in5 in7)))\n(assert (not (= in5 in8)))\n(assert (not (= in5 in9)))\n(assert (not (= in5 in10)))\n(assert (not (= in5 in11)))\n(assert (not (= in5 in12)))\n(assert (not (= in5 in13)))\n(assert (not (= in5 in14)))\n(assert (not (= in5 in15)))\n(assert (not (= in5 in16)))\n(assert (not (= in5 in17)))\n(assert (not (= in6 in7)))\n(assert (not (= in6 in8)))\n(assert (not (= in6 in9)))\n(assert (not (= in6 in10)))\n(assert (not (= in6 in11)))\n(assert (not (= in6 in12)))\n(assert (not (= in6 in13)))\n(assert (not (= in6 in14)))\n(assert (not (= in6 in15)))\n(assert (not (= in6 in16)))\n(assert (not (= in6 in17)))\n(assert (not (= in7 in8)))\n(assert (not (= in7 in9)))\n(assert (not (= in7 in10)))\n(assert (not (= in7 in11)))\n(assert (not (= in7 in12)))\n(assert (not (= in7 in13)))\n(assert (not (= in7 in14)))\n(assert (not (= in7 in15)))\n(assert (not (= in7 in16)))\n(assert (not (= in7 in17)))\n(assert (not (= in8 in9)))\n(assert (not (= in8 in10)))\n(assert (not (= in8 in11)))\n(assert (not (= in8 in12)))\n(assert (not (= in8 in13)))\n(assert (not (= in8 in14)))\n(assert (not (= in8 in15)))\n(assert (not (= in8 in16)))\n(assert (not (= in8 in17)))\n(assert (not (= in9 in10)))\n(assert (not (= in9 in11)))\n(assert (not (= in9 in12)))\n(assert (not (= in9 in13)))\n(assert (not (= in9 in14)))\n(assert (not (= in9 in15)))\n(assert (not (= in9 in16)))\n(assert (not (= in9 in17)))\n(assert (not (= in10 in11)))\n(assert (not (= in10 in12)))\n(assert (not (= in10 in13)))\n(assert (not (= in10 in14)))\n(assert (not (= in10 in15)))\n(assert (not (= in10 in16)))\n(assert (not (= in10 in17)))\n(assert (not (= in11 in12)))\n(assert (not (= in11 in13)))\n(assert (not (= in11 in14)))\n(assert (not (= in11 in15)))\n(assert (not (= in11 in16)))\n(assert (not (= in11 in17)))\n(assert (not (= in12 in13)))\n(assert (not (= in12 in14)))\n(assert (not (= in12 in15)))\n(assert (not (= in12 in16)))\n(assert (not (= in12 in17)))\n(assert (not (= in13 in14)))\n(assert (not (= in13 in15)))\n(assert (not (= in13 in16)))\n(assert (not (= in13 in17)))\n(assert (not (= in14 in15)))\n(assert (not (= in14 in16)))\n(assert (not (= in14 in17)))\n(assert (not (= in15 in16)))\n(assert (not (= in15 in17)))\n(assert (not (= in16 in17)))",
        "equivalent": true
      },
      "19": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in0 in18))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in1 in18))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in2 in18))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in3 in18))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in4 in18))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in5 in18))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in6 in18))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in7 in18))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in8 in18))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in9 in18))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in10 in18))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in11 in18))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in12 in18))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in13 in18))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in14 in18))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in15 in18))) (not ( = in16 in17))) (not ( = in16 in18))) (not ( = in17 in18))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in0 in5)))\n(assert (not (= in0 in6)))\n(assert (not (= in0 in7)))\n(assert (not (= in0 in8)))\n(assert (not (= in0 in9)))\n(assert (not (= in0 in10)))\n(assert (not (= in0 in11)))\n(assert (not (= in0 in12)))\n(assert (not (= in0 in13)))\n(assert (not (= in0 in14)))\n(assert (not (= in0 in15)))\n(assert (not (= in0 in16)))\n(assert (not (= in0 in17)))\n(assert (not (= in0 in18)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in1 in5)))\n(assert (not (= in1 in6)))\n(assert (not (= in1 in7)))\n(assert (not (= in1 in8)))\n(assert (not (= in1 in9)))\n(assert (not (= in1 in10)))\n(assert (not (= in1 in11)))\n(assert (not (= in1 in12)))\n(assert (not (= in1 in13)))\n(assert (not (= in1 in14)))\n(assert (not (= in1 in15)))\n(assert (not (= in1 in16)))\n(assert (not (= in1 in17)))\n(assert (not (= in1 in18)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in2 in5)))\n(assert (not (= in2 in6)))\n(assert (not (= in2 in7)))\n(assert (not (= in2 in8)))\n(assert (not (= in2 in9)))\n(assert (not (= in2 in10)))\n(assert (not (= in2 in11)))\n(assert (not (= in2 in12)))\n(assert (not (= in2 in13)))\n(assert (not (= in2 in14)))\n(assert (not (= in2 in15)))\n(assert (not (= in2 in16)))\n(assert (not (= in2 in17)))\n(assert (not (= in2 in18)))\n(assert (not (= in3 in4)))\n(assert (not (= in3 in5)))\n(assert (not (= in3 in6)))\n(assert (not (= in3 in7)))\n(assert (not (= in3 in8)))\n(assert (not (= in3 in9)))\n(assert (not (= in3 in10)))\n(assert (not (= in3 in11)))\n(assert (not (= in3 in12)))\n(assert (not (= in3 in13)))\n(assert (not (= in3 in14)))\n(assert (not (= in3 in15)))\n(assert (not (= in3 in16)))\n(assert (not (= in3 in17)))\n(assert (not (= in3 in18)))\n(assert (not (= in4 in5)))\n(assert (not (= in4 in6)))\n(assert (not (= in4 in7)))\n(assert (not (= in4 in8)))\n(assert (not (= in4 in9)))\n(assert (not (= in4 in10)))\n(assert (not (= in4 in11)))\n(assert (not (= in4 in12)))\n(assert (not (= in4 in13)))\n(assert (not (= in4 in14)))\n(assert (not (= in4 in15)))\n(assert (not (= in4 in16)))\n(assert (not (= in4 in17)))\n(assert (not (= in4 in18)))\n(assert (not (= in5 in6)))\n(assert (not (= in5 in7)))\n(assert (not (= in5 in8)))\n(assert (not (= in5 in9)))\n(assert (not (= in5 in10)))\n(assert (not (= in5 in11)))\n(assert (not (= in5 in12)))\n(assert (not (= in5 in13)))\n(assert (not (= in5 in14)))\n(assert (not (= in5 in15)))\n(assert (not (= in5 in16)))\n(assert (not (= in5 in17)))\n(assert (not (= in5 in18)))\n(assert (not (= in6 in7)))\n(assert (not (= in6 in8)))\n(assert (not (= in6 in9)))\n(assert (not (= in6 in10)))\n(assert (not (= in6 in11)))\n(assert (not (= in6 in12)))\n(assert (not (= in6 in13)))\n(assert (not (= in6 in14)))\n(assert (not (= in6 in15)))\n(assert (not (= in6 in16)))\n(assert (not (= in6 in17)))\n(assert (not (= in6 in18)))\n(assert (not (= in7 in8)))\n(assert (not (= in7 in9)))\n(assert (not (= in7 in10)))\n(assert (not (= in7 in11)))\n(assert (not (= in7 in12)))\n(assert (not (= in7 in13)))\n(assert (not (= in7 in14)))\n(assert (not (= in7 in15)))\n(assert (not (= in7 in16)))\n(assert (not (= in7 in17)))\n(assert (not (= in7 in18)))\n(assert (not (= in8 in9)))\n(assert (not (= in8 in10)))\n(assert (not (= in8 in11)))\n(assert (not (= in8 in12)))\n(assert (not (= in8 in13)))\n(assert (not (= in8 in14)))\n(assert (not (= in8 in15)))\n(assert (not (= in8 in16)))\n(assert (not (= in8 in17)))\n(assert (not (= in8 in18)))\n(assert (not (= in9 in10)))\n(assert (not (= in9 in11)))\n(assert (not (= in9 in12)))\n(assert (not (= in9 in13)))\n(assert (not (= in9 in14)))\n(assert (not (= in9 in15)))\n(assert (not (= in9 in16)))\n(assert (not (= in9 in17)))\n(assert (not (= in9 in18)))\n(assert (not (= in10 in11)))\n(assert (not (= in10 in12)))\n(assert (not (= in10 in13)))\n(assert (not (= in10 in14)))\n(assert (not (= in10 in15)))\n(assert (not (= in10 in16)))\n(assert (not (= in10 in17)))\n(assert (not (= in10 in18)))\n(assert (not (= in11 in12)))\n(assert (not (= in11 in13)))\n(assert (not (= in11 in14)))\n(assert (not (= in11 in15)))\n(assert (not (= in11 in16)))\n(assert (not (= in11 in17)))\n(assert (not (= in11 in18)))\n(assert (not (= in12 in13)))\n(assert (not (= in12 in14)))\n(assert (not (= in12 in15)))\n(assert (not (= in12 in16)))\n(assert (not (= in12 in17)))\n(assert (not (= in12 in18)))\n(assert (not (= in13 in14)))\n(assert (not (= in13 in15)))\n(assert (not (= in13 in16)))\n(assert (not (= in13 in17)))\n(assert (not (= in13 in18)))\n(assert (not (= in14 in15)))\n(assert (not (= in14 in16)))\n(assert (not (= in14 in17)))\n(assert (not (= in14 in18)))\n(assert (not (= in15 in16)))\n(assert (not (= in15 in17)))\n(assert (not (= in15 in18)))\n(assert (not (= in16 in17)))\n(assert (not (= in16 in18)))\n(assert (not (= in17 in18)))",
        "equivalent": true
      },
      "20": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in0 in18))) (not ( = in0 in19))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in1 in18))) (not ( = in1 in19))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in2 in18))) (not ( = in2 in19))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in3 in18))) (not ( = in3 in19))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in4 in18))) (not ( = in4 in19))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in5 in18))) (not ( = in5 in19))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in6 in18))) (not ( = in6 in19))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in7 in18))) (not ( = in7 in19))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in8 in18))) (not ( = in8 in19))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in9 in18))) (not ( = in9 in19))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in10 in18))) (not ( = in10 in19))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in11 in18))) (not ( = in11 in19))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in12 in18))) (not ( = in12 in19))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in13 in18))) (not ( = in13 in19))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in14 in18))) (not ( = in14 in19))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in15 in18))) (not ( = in15 in19))) (not ( = in16 in17))) (not ( = in16 in18))) (not ( = in16 in19))) (not ( = in17 in18))) (not ( = in17 in19))) (not ( = in18 in19))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in0 in5)))\n(assert (not (= in0 in6)))\n(assert (not (= in0 in7)))\n(assert (not (= in0 in8)))\n(assert (not (= in0 in9)))\n(assert (not (= in0 in10)))\n(assert (not (= in0 in11)))\n(assert (not (= in0 in12)))\n(assert (not (= in0 in13)))\n(assert (not (= in0 in14)))\n(assert (not (= in0 in15)))\n(assert (not (= in0 in16)))\n(assert (not (= in0 in17)))\n(assert (not (= in0 in18)))\n(assert (not (= in0 in19)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in1 in5)))\n(assert (not (= in1 in6)))\n(assert (not (= in1 in7)))\n(assert (not (= in1 in8)))\n(assert (not (= in1 in9)))\n(assert (not (= in1 in10)))\n(assert (not (= in1 in11)))\n(assert (not (= in1 in12)))\n(assert (not (= in1 in13)))\n(assert (not (= in1 in14)))\n(assert (not (= in1 in15)))\n(assert (not (= in1 in16)))\n(assert (not (= in1 in17)))\n(assert (not (= in1 in18)))\n(assert (not (= in1 in19)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in2 in5)))\n(assert (not (= in2 in6)))\n(assert (not (= in2 in7)))\n(assert (not (= in2 in8)))\n(assert (not (= in2 in9)))\n(assert (not (= in2 in10)))\n(assert (not (= in2 in11)))\n(assert (not (= in2 in12)))\n(assert (not (= in2 in13)))\n(assert (not (= in2 in14)))\n(assert (not (= in2 in15)))\n(assert (not (= in2 in16)))\n(assert (not (= in2 in17)))\n(assert (not (= in2 in18)))\n(assert (not (= in2 in19)))\n(assert (not (= in3 in4)))\n(assert (not (= in3 in5)))\n(assert (not (= in3 in6)))\n(assert (not (= in3 in7)))\n(assert (not (= in3 in8)))\n(assert (not (= in3 in9)))\n(assert (not (= in3 in10)))\n(assert (not (= in3 in11)))\n(assert (not (= in3 in12)))\n(assert (not (= in3 in13)))\n(assert (not (= in3 in14)))\n(assert (not (= in3 in15)))\n(assert (not (= in3 in16)))\n(assert (not (= in3 in17)))\n(assert (not (= in3 in18)))\n(assert (not (= in3 in19)))\n(assert (not (= in4 in5)))\n(assert (not (= in4 in6)))\n(assert (not (= in4 in7)))\n(assert (not (= in4 in8)))\n(assert (not (= in4 in9)))\n(assert (not (= in4 in10)))\n(assert (not (= in4 in11)))\n(assert (not (= in4 in12)))\n(assert (not (= in4 in13)))\n(assert (not (= in4 in14)))\n(assert (not (= in4 in15)))\n(assert (not (= in4 in16)))\n(assert (not (= in4 in17)))\n(assert (not (= in4 in18)))\n(assert (not (= in4 in19)))\n(assert (not (= in5 in6)))\n(assert (not (= in5 in7)))\n(assert (not (= in5 in8)))\n(assert (not (= in5 in9)))\n(assert (not (= in5 in10)))\n(assert (not (= in5 in11)))\n(assert (not (= in5 in12)))\n(assert (not (= in5 in13)))\n(assert (not (= in5 in14)))\n(assert (not (= in5 in15)))\n(assert (not (= in5 in16)))\n(assert (not (= in5 in17)))\n(assert (not (= in5 in18)))\n(assert (not (= in5 in19)))\n(assert (not (= in6 in7)))\n(assert (not (= in6 in8)))\n(assert (not (= in6 in9)))\n(assert (not (= in6 in10)))\n(assert (not (= in6 in11)))\n(assert (not (= in6 in12)))\n(assert (not (= in6 in13)))\n(assert (not (= in6 in14)))\n(assert (not (= in6 in15)))\n(assert (not (= in6 in16)))\n(assert (not (= in6 in17)))\n(assert (not (= in6 in18)))\n(assert (not (= in6 in19)))\n(assert (not (= in7 in8)))\n(assert (not (= in7 in9)))\n(assert (not (= in7 in10)))\n(assert (not (= in7 in11)))\n(assert (not (= in7 in12)))\n(assert (not (= in7 in13)))\n(assert (not (= in7 in14)))\n(assert (not (= in7 in15)))\n(assert (not (= in7 in16)))\n(assert (not (= in7 in17)))\n(assert (not (= in7 in18)))\n(assert (not (= in7 in19)))\n(assert (not (= in8 in9)))\n(assert (not (= in8 in10)))\n(assert (not (= in8 in11)))\n(assert (not (= in8 in12)))\n(assert (not (= in8 in13)))\n(assert (not (= in8 in14)))\n(assert (not (= in8 in15)))\n(assert (not (= in8 in16)))\n(assert (not (= in8 in17)))\n(assert (not (= in8 in18)))\n(assert (not (= in8 in19)))\n(assert (not (= in9 in10)))\n(assert (not (= in9 in11)))\n(assert (not (= in9 in12)))\n(assert (not (= in9 in13)))\n(assert (not (= in9 in14)))\n(assert (not (= in9 in15)))\n(assert (not (= in9 in16)))\n(assert (not (= in9 in17)))\n(assert (not (= in9 in18)))\n(assert (not (= in9 in19)))\n(assert (not (= in10 in11)))\n(assert (not (= in10 in12)))\n(assert (not (= in10 in13)))\n(assert (not (= in10 in14)))\n(assert (not (= in10 in15)))\n(assert (not (= in10 in16)))\n(assert (not (= in10 in17)))\n(assert (not (= in10 in18)))\n(assert (not (= in10 in19)))\n(assert (not (= in11 in12)))\n(assert (not (= in11 in13)))\n(assert (not (= in11 in14)))\n(assert (not (= in11 in15)))\n(assert (not (= in11 in16)))\n(assert (not (= in11 in17)))\n(assert (not (= in11 in18)))\n(assert (not (= in11 in19)))\n(assert (not (= in12 in13)))\n(assert (not (= in12 in14)))\n(assert (not (= in12 in15)))\n(assert (not (= in12 in16)))\n(assert (not (= in12 in17)))\n(assert (not (= in12 in18)))\n(assert (not (= in12 in19)))\n(assert (not (= in13 in14)))\n(assert (not (= in13 in15)))\n(assert (not (= in13 in16)))\n(assert (not (= in13 in17)))\n(assert (not (= in13 in18)))\n(assert (not (= in13 in19)))\n(assert (not (= in14 in15)))\n(assert (not (= in14 in16)))\n(assert (not (= in14 in17)))\n(assert (not (= in14 in18)))\n(assert (not (= in14 in19)))\n(assert (not (= in15 in16)))\n(assert (not (= in15 in17)))\n(assert (not (= in15 in18)))\n(assert (not (= in15 in19)))\n(assert (not (= in16 in17)))\n(assert (not (= in16 in18)))\n(assert (not (= in16 in19)))\n(assert (not (= in17 in18)))\n(assert (not (= in17 in19)))\n(assert (not (= in18 in19)))",
        "equivalent": true
      },
      "21": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in0 in18))) (not ( = in0 in19))) (not ( = in0 in20))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in1 in18))) (not ( = in1 in19))) (not ( = in1 in20))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in2 in18))) (not ( = in2 in19))) (not ( = in2 in20))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in3 in18))) (not ( = in3 in19))) (not ( = in3 in20))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in4 in18))) (not ( = in4 in19))) (not ( = in4 in20))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in5 in18))) (not ( = in5 in19))) (not ( = in5 in20))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in6 in18))) (not ( = in6 in19))) (not ( = in6 in20))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in7 in18))) (not ( = in7 in19))) (not ( = in7 in20))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in8 in18))) (not ( = in8 in19))) (not ( = in8 in20))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in9 in18))) (not ( = in9 in19))) (not ( = in9 in20))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in10 in18))) (not ( = in10 in19))) (not ( = in10 in20))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in11 in18))) (not ( = in11 in19))) (not ( = in11 in20))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in12 in18))) (not ( = in12 in19))) (not ( = in12 in20))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in13 in18))) (not ( = in13 in19))) (not ( = in13 in20))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in14 in18))) (not ( = in14 in19))) (not ( = in14 in20))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in15 in18))) (not ( = in15 in19))) (not ( = in15 in20))) (not ( = in16 in17))) (not ( = in16 in18))) (not ( = in16 in19))) (not ( = in16 in20))) (not ( = in17 in18))) (not ( = in17 in19))) (not ( = in17 in20))) (not ( = in18 in19))) (not ( = in18 in20))) (not ( = in19 in20))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in0 in5)))\n(assert (not (= in0 in6)))\n(assert (not (= in0 in7)))\n(assert (not (= in0 in8)))\n(assert (not (= in0 in9)))\n(assert (not (= in0 in10)))\n(assert (not (= in0 in11)))\n(assert (not (= in0 in12)))\n(assert (not (= in0 in13)))\n(assert (not (= in0 in14)))\n(assert (not (= in0 in15)))\n(assert (not (= in0 in16)))\n(assert (not (= in0 in17)))\n(assert (not (= in0 in18)))\n(assert (not (= in0 in19)))\n(assert (not (= in0 in20)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in1 in5)))\n(assert (not (= in1 in6)))\n(assert (not (= in1 in7)))\n(assert (not (= in1 in8)))\n(assert (not (= in1 in9)))\n(assert (not (= in1 in10)))\n(assert (not (= in1 in11)))\n(assert (not (= in1 in12)))\n(assert (not (= in1 in13)))\n(assert (not (= in1 in14)))\n(assert (not (= in1 in15)))\n(assert (not (= in1 in16)))\n(assert (not (= in1 in17)))\n(assert (not (= in1 in18)))\n(assert (not (= in1 in19)))\n(assert (not (= in1 in20)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in2 in5)))\n(assert (not (= in2 in6)))\n(assert (not (= in2 in7)))\n(assert (not (= in2 in8)))\n(assert (not (= in2 in9)))\n(assert (not (= in2 in10)))\n(assert (not (= in2 in11)))\n(assert (not (= in2 in12)))\n(assert (not (= in2 in13)))\n(assert (not (= in2 in14)))\n(assert (not (= in2 in15)))\n(assert (not (= in2 in16)))\n(assert (not (= in2 in17)))\n(assert (not (= in2 in18)))\n(assert (not (= in2 in19)))\n(assert (not (= in2 in20)))\n(assert (not (= in3 in4)))\n(assert (not (= in3 in5)))\n(assert (not (= in3 in6)))\n(assert (not (= in3 in7)))\n(assert (not (= in3 in8)))\n(assert (not (= in3 in9)))\n(assert (not (= in3 in10)))\n(assert (not (= in3 in11)))\n(assert (not (= in3 in12)))\n(assert (not (= in3 in13)))\n(assert (not (= in3 in14)))\n(assert (not (= in3 in15)))\n(assert (not (= in3 in16)))\n(assert (not (= in3 in17)))\n(assert (not (= in3 in18)))\n(assert (not (= in3 in19)))\n(assert (not (= in3 in20)))\n(assert (not (= in4 in5)))\n(assert (not (= in4 in6)))\n(assert (not (= in4 in7)))\n(assert (not (= in4 in8)))\n(assert (not (= in4 in9)))\n(assert (not (= in4 in10)))\n(assert (not (= in4 in11)))\n(assert (not (= in4 in12)))\n(assert (not (= in4 in13)))\n(assert (not (= in4 in14)))\n(assert (not (= in4 in15)))\n(assert (not (= in4 in16)))\n(assert (not (= in4 in17)))\n(assert (not (= in4 in18)))\n(assert (not (= in4 in19)))\n(assert (not (= in4 in20)))\n(assert (not (= in5 in6)))\n(assert (not (= in5 in7)))\n(assert (not (= in5 in8)))\n(assert (not (= in5 in9)))\n(assert (not (= in5 in10)))\n(assert (not (= in5 in11)))\n(assert (not (= in5 in12)))\n(assert (not (= in5 in13)))\n(assert (not (= in5 in14)))\n(assert (not (= in5 in15)))\n(assert (not (= in5 in16)))\n(assert (not (= in5 in17)))\n(assert (not (= in5 in18)))\n(assert (not (= in5 in19)))\n(assert (not (= in5 in20)))\n(assert (not (= in6 in7)))\n(assert (not (= in6 in8)))\n(assert (not (= in6 in9)))\n(assert (not (= in6 in10)))\n(assert (not (= in6 in11)))\n(assert (not (= in6 in12)))\n(assert (not (= in6 in13)))\n(assert (not (= in6 in14)))\n(assert (not (= in6 in15)))\n(assert (not (= in6 in16)))\n(assert (not (= in6 in17)))\n(assert (not (= in6 in18)))\n(assert (not (= in6 in19)))\n(assert (not (= in6 in20)))\n(assert (not (= in7 in8)))\n(assert (not (= in7 in9)))\n(assert (not (= in7 in10)))\n(assert (not (= in7 in11)))\n(assert (not (= in7 in12)))\n(assert (not (= in7 in13)))\n(assert (not (= in7 in14)))\n(assert (not (= in7 in15)))\n(assert (not (= in7 in16)))\n(assert (not (= in7 in17)))\n(assert (not (= in7 in18)))\n(assert (not (= in7 in19)))\n(assert (not (= in7 in20)))\n(assert (not (= in8 in9)))\n(assert (not (= in8 in10)))\n(assert (not (= in8 in11)))\n(assert (not (= in8 in12)))\n(assert (not (= in8 in13)))\n(assert (not (= in8 in14)))\n(assert (not (= in8 in15)))\n(assert (not (= in8 in16)))\n(assert (not (= in8 in17)))\n(assert (not (= in8 in18)))\n(assert (not (= in8 in19)))\n(assert (not (= in8 in20)))\n(assert (not (= in9 in10)))\n(assert (not (= in9 in11)))\n(assert (not (= in9 in12)))\n(assert (not (= in9 in13)))\n(assert (not (= in9 in14)))\n(assert (not (= in9 in15)))\n(assert (not (= in9 in16)))\n(assert (not (= in9 in17)))\n(assert (not (= in9 in18)))\n(assert (not (= in9 in19)))\n(assert (not (= in9 in20)))\n(assert (not (= in10 in11)))\n(assert (not (= in10 in12)))\n(assert (not (= in10 in13)))\n(assert (not (= in10 in14)))\n(assert (not (= in10 in15)))\n(assert (not (= in10 in16)))\n(assert (not (= in10 in17)))\n(assert (not (= in10 in18)))\n(assert (not (= in10 in19)))\n(assert (not (= in10 in20)))\n(assert (not (= in11 in12)))\n(assert (not (= in11 in13)))\n(assert (not (= in11 in14)))\n(assert (not (= in11 in15)))\n(assert (not (= in11 in16)))\n(assert (not (= in11 in17)))\n(assert (not (= in11 in18)))\n(assert (not (= in11 in19)))\n(assert (not (= in11 in20)))\n(assert (not (= in12 in13)))\n(assert (not (= in12 in14)))\n(assert (not (= in12 in15)))\n(assert (not (= in12 in16)))\n(assert (not (= in12 in17)))\n(assert (not (= in12 in18)))\n(assert (not (= in12 in19)))\n(assert (not (= in12 in20)))\n(assert (not (= in13 in14)))\n(assert (not (= in13 in15)))\n(assert (not (= in13 in16)))\n(assert (not (= in13 in17)))\n(assert (not (= in13 in18)))\n(assert (not (= in13 in19)))\n(assert (not (= in13 in20)))\n(assert (not (= in14 in15)))\n(assert (not (= in14 in16)))\n(assert (not (= in14 in17)))\n(assert (not (= in14 in18)))\n(assert (not (= in14 in19)))\n(assert (not (= in14 in20)))\n(assert (not (= in15 in16)))\n(assert (not (= in15 in17)))\n(assert (not (= in15 in18)))\n(assert (not (= in15 in19)))\n(assert (not (= in15 in20)))\n(assert (not (= in16 in17)))\n(assert (not (= in16 in18)))\n(assert (not (= in16 in19)))\n(assert (not (= in16 in20)))\n(assert (not (= in17 in18)))\n(assert (not (= in17 in19)))\n(assert (not (= in17 in20)))\n(assert (not (= in18 in19)))\n(assert (not (= in18 in20)))\n(assert (not (= in19 in20)))",
        "equivalent": true
      },
      "22": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in0 in18))) (not ( = in0 in19))) (not ( = in0 in20))) (not ( = in0 in21))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in1 in18))) (not ( = in1 in19))) (not ( = in1 in20))) (not ( = in1 in21))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in2 in18))) (not ( = in2 in19))) (not ( = in2 in20))) (not ( = in2 in21))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in3 in18))) (not ( = in3 in19))) (not ( = in3 in20))) (not ( = in3 in21))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in4 in18))) (not ( = in4 in19))) (not ( = in4 in20))) (not ( = in4 in21))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in5 in18))) (not ( = in5 in19))) (not ( = in5 in20))) (not ( = in5 in21))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in6 in18))) (not ( = in6 in19))) (not ( = in6 in20))) (not ( = in6 in21))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in7 in18))) (not ( = in7 in19))) (not ( = in7 in20))) (not ( = in7 in21))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in8 in18))) (not ( = in8 in19))) (not ( = in8 in20))) (not ( = in8 in21))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in9 in18))) (not ( = in9 in19))) (not ( = in9 in20))) (not ( = in9 in21))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in10 in18))) (not ( = in10 in19))) (not ( = in10 in20))) (not ( = in10 in21))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in11 in18))) (not ( = in11 in19))) (not ( = in11 in20))) (not ( = in11 in21))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in12 in18))) (not ( = in12 in19))) (not ( = in12 in20))) (not ( = in12 in21))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in13 in18))) (not ( = in13 in19))) (not ( = in13 in20))) (not ( = in13 in21))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in14 in18))) (not ( = in14 in19))) (not ( = in14 in20))) (not ( = in14 in21))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in15 in18))) (not ( = in15 in19))) (not ( = in15 in20))) (not ( = in15 in21))) (not ( = in16 in17))) (not ( = in16 in18))) (not ( = in16 in19))) (not ( = in16 in20))) (not ( = in16 in21))) (not ( = in17 in18))) (not ( = in17 in19))) (not ( = in17 in20))) (not ( = in17 in21))) (not ( = in18 in19))) (not ( = in18 in20))) (not ( = in18 in21))) (not ( = in19 in20))) (not ( = in19 in21))) (not ( = in20 in21))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in0 in5)))\n(assert (not (= in0 in6)))\n(assert (not (= in0 in7)))\n(assert (not (= in0 in8)))\n(assert (not (= in0 in9)))\n(assert (not (= in0 in10)))\n(assert (not (= in0 in11)))\n(assert (not (= in0 in12)))\n(assert (not (= in0 in13)))\n(assert (not (= in0 in14)))\n(assert (not (= in0 in15)))\n(assert (not (= in0 in16)))\n(assert (not (= in0 in17)))\n(assert (not (= in0 in18)))\n(assert (not (= in0 in19)))\n(assert (not (= in0 in20)))\n(assert (not (= in0 in21)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in1 in5)))\n(assert (not (= in1 in6)))\n(assert (not (= in1 in7)))\n(assert (not (= in1 in8)))\n(assert (not (= in1 in9)))\n(assert (not (= in1 in10)))\n(assert (not (= in1 in11)))\n(assert (not (= in1 in12)))\n(assert (not (= in1 in13)))\n(assert (not (= in1 in14)))\n(assert (not (= in1 in15)))\n(assert (not (= in1 in16)))\n(assert (not (= in1 in17)))\n(assert (not (= in1 in18)))\n(assert (not (= in1 in19)))\n(assert (not (= in1 in20)))\n(assert (not (= in1 in21)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in2 in5)))\n(assert (not (= in2 in6)))\n(assert (not (= in2 in7)))\n(assert (not (= in2 in8)))\n(assert (not (= in2 in9)))\n(assert (not (= in2 in10)))\n(assert (not (= in2 in11)))\n(assert (not (= in2 in12)))\n(assert (not (= in2 in13)))\n(assert (not (= in2 in14)))\n(assert (not (= in2 in15)))\n(assert (not (= in2 in16)))\n(assert (not (= in2 in17)))\n(assert (not (= in2 in18)))\n(assert (not (= in2 in19)))\n(assert (not (= in2 in20)))\n(assert (not (= in2 in21)))\n(assert (not (= in3 in4)))\n(assert (not (= in3 in5)))\n(assert (not (= in3 in6)))\n(assert (not (= in3 in7)))\n(assert (not (= in3 in8)))\n(assert (not (= in3 in9)))\n(assert (not (= in3 in10)))\n(assert (not (= in3 in11)))\n(assert (not (= in3 in12)))\n(assert (not (= in3 in13)))\n(assert (not (= in3 in14)))\n(assert (not (= in3 in15)))\n(assert (not (= in3 in16)))\n(assert (not (= in3 in17)))\n(assert (not (= in3 in18)))\n(assert (not (= in3 in19)))\n(assert (not (= in3 in20)))\n(assert (not (= in3 in21)))\n(assert (not (= in4 in5)))\n(assert (not (= in4 in6)))\n(assert (not (= in4 in7)))\n(assert (not (= in4 in8)))\n(assert (not (= in4 in9)))\n(assert (not (= in4 in10)))\n(assert (not (= in4 in11)))\n(assert (not (= in4 in12)))\n(assert (not (= in4 in13)))\n(assert (not (= in4 in14)))\n(assert (not (= in4 in15)))\n(assert (not (= in4 in16)))\n(assert (not (= in4 in17)))\n(assert (not (= in4 in18)))\n(assert (not (= in4 in19)))\n(assert (not (= in4 in20)))\n(assert (not (= in4 in21)))\n(assert (not (= in5 in6)))\n(assert (not (= in5 in7)))\n(assert (not (= in5 in8)))\n(assert (not (= in5 in9)))\n(assert (not (= in5 in10)))\n(assert (not (= in5 in11)))\n(assert (not (= in5 in12)))\n(assert (not (= in5 in13)))\n(assert (not (= in5 in14)))\n(assert (not (= in5 in15)))\n(assert (not (= in5 in16)))\n(assert (not (= in5 in17)))\n(assert (not (= in5 in18)))\n(assert (not (= in5 in19)))\n(assert (not (= in5 in20)))\n(assert (not (= in5 in21)))\n(assert (not (= in6 in7)))\n(assert (not (= in6 in8)))\n(assert (not (= in6 in9)))\n(assert (not (= in6 in10)))\n(assert (not (= in6 in11)))\n(assert (not (= in6 in12)))\n(assert (not (= in6 in13)))\n(assert (not (= in6 in14)))\n(assert (not (= in6 in15)))\n(assert (not (= in6 in16)))\n(assert (not (= in6 in17)))\n(assert (not (= in6 in18)))\n(assert (not (= in6 in19)))\n(assert (not (= in6 in20)))\n(assert (not (= in6 in21)))\n(assert (not (= in7 in8)))\n(assert (not (= in7 in9)))\n(assert (not (= in7 in10)))\n(assert (not (= in7 in11)))\n(assert (not (= in7 in12)))\n(assert (not (= in7 in13)))\n(assert (not (= in7 in14)))\n(assert (not (= in7 in15)))\n(assert (not (= in7 in16)))\n(assert (not (= in7 in17)))\n(assert (not (= in7 in18)))\n(assert (not (= in7 in19)))\n(assert (not (= in7 in20)))\n(assert (not (= in7 in21)))\n(assert (not (= in8 in9)))\n(assert (not (= in8 in10)))\n(assert (not (= in8 in11)))\n(assert (not (= in8 in12)))\n(assert (not (= in8 in13)))\n(assert (not (= in8 in14)))\n(assert (not (= in8 in15)))\n(assert (not (= in8 in16)))\n(assert (not (= in8 in17)))\n(assert (not (= in8 in18)))\n(assert (not (= in8 in19)))\n(assert (not (= in8 in20)))\n(assert (not (= in8 in21)))\n(assert (not (= in9 in10)))\n(assert (not (= in9 in11)))\n(assert (not (= in9 in12)))\n(assert (not (= in9 in13)))\n(assert (not (= in9 in14)))\n(assert (not (= in9 in15)))\n(assert (not (= in9 in16)))\n(assert (not (= in9 in17)))\n(assert (not (= in9 in18)))\n(assert (not (= in9 in19)))\n(assert (not (= in9 in20)))\n(assert (not (= in9 in21)))\n(assert (not (= in10 in11)))\n(assert (not (= in10 in12)))\n(assert (not (= in10 in13)))\n(assert (not (= in10 in14)))\n(assert (not (= in10 in15)))\n(assert (not (= in10 in16)))\n(assert (not (= in10 in17)))\n(assert (not (= in10 in18)))\n(assert (not (= in10 in19)))\n(assert (not (= in10 in20)))\n(assert (not (= in10 in21)))\n(assert (not (= in11 in12)))\n(assert (not (= in11 in13)))\n(assert (not (= in11 in14)))\n(assert (not (= in11 in15)))\n(assert (not (= in11 in16)))\n(assert (not (= in11 in17)))\n(assert (not (= in11 in18)))\n(assert (not (= in11 in19)))\n(assert (not (= in11 in20)))\n(assert (not (= in11 in21)))\n(assert (not (= in12 in13)))\n(assert (not (= in12 in14)))\n(assert (not (= in12 in15)))\n(assert (not (= in12 in16)))\n(assert (not (= in12 in17)))\n(assert (not (= in12 in18)))\n(assert (not (= in12 in19)))\n(assert (not (= in12 in20)))\n(assert (not (= in12 in21)))\n(assert (not (= in13 in14)))\n(assert (not (= in13 in15)))\n(assert (not (= in13 in16)))\n(assert (not (= in13 in17)))\n(assert (not (= in13 in18)))\n(assert (not (= in13 in19)))\n(assert (not (= in13 in20)))\n(assert (not (= in13 in21)))\n(assert (not (= in14 in15)))\n(assert (not (= in14 in16)))\n(assert (not (= in14 in17)))\n(assert (not (= in14 in18)))\n(assert (not (= in14 in19)))\n(assert (not (= in14 in20)))\n(assert (not (= in14 in21)))\n(assert (not (= in15 in16)))\n(assert (not (= in15 in17)))\n(assert (not (= in15 in18)))\n(assert (not (= in15 in19)))\n(assert (not (= in15 in20)))\n(assert (not (= in15 in21)))\n(assert (not (= in16 in17)))\n(assert (not (= in16 in18)))\n(assert (not (= in16 in19)))\n(assert (not (= in16 in20)))\n(assert (not (= in16 in21)))\n(assert (not (= in17 in18)))\n(assert (not (= in17 in19)))\n(assert (not (= in17 in20)))\n(assert (not (= in17 in21)))\n(assert (not (= in18 in19)))\n(assert (not (= in18 in20)))\n(assert (not (= in18 in21)))\n(assert (not (= in19 in20)))\n(assert (not (= in19 in21)))\n(assert (not (= in20 in21)))",
        "equivalent": true
      },
      "23": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in0 in18))) (not ( = in0 in19))) (not ( = in0 in20))) (not ( = in0 in21))) (not ( = in0 in22))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in1 in18))) (not ( = in1 in19))) (not ( = in1 in20))) (not ( = in1 in21))) (not ( = in1 in22))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in2 in18))) (not ( = in2 in19))) (not ( = in2 in20))) (not ( = in2 in21))) (not ( = in2 in22))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in3 in18))) (not ( = in3 in19))) (not ( = in3 in20))) (not ( = in3 in21))) (not ( = in3 in22))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in4 in18))) (not ( = in4 in19))) (not ( = in4 in20))) (not ( = in4 in21))) (not ( = in4 in22))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in5 in18))) (not ( = in5 in19))) (not ( = in5 in20))) (not ( = in5 in21))) (not ( = in5 in22))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in6 in18))) (not ( = in6 in19))) (not ( = in6 in20))) (not ( = in6 in21))) (not ( = in6 in22))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in7 in18))) (not ( = in7 in19))) (not ( = in7 in20))) (not ( = in7 in21))) (not ( = in7 in22))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in8 in18))) (not ( = in8 in19))) (not ( = in8 in20))) (not ( = in8 in21))) (not ( = in8 in22))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in9 in18))) (not ( = in9 in19))) (not ( = in9 in20))) (not ( = in9 in21))) (not ( = in9 in22))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in10 in18))) (not ( = in10 in19))) (not ( = in10 in20))) (not ( = in10 in21))) (not ( = in10 in22))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in11 in18))) (not ( = in11 in19))) (not ( = in11 in20))) (not ( = in11 in21))) (not ( = in11 in22))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in12 in18))) (not ( = in12 in19))) (not ( = in12 in20))) (not ( = in12 in21))) (not ( = in12 in22))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in13 in18))) (not ( = in13 in19))) (not ( = in13 in20))) (not ( = in13 in21))) (not ( = in13 in22))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in14 in18))) (not ( = in14 in19))) (not ( = in14 in20))) (not ( = in14 in21))) (not ( = in14 in22))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in15 in18))) (not ( = in15 in19))) (not ( = in15 in20))) (not ( = in15 in21))) (not ( = in15 in22))) (not ( = in16 in17))) (not ( = in16 in18))) (not ( = in16 in19))) (not ( = in16 in20))) (not ( = in16 in21))) (not ( = in16 in22))) (not ( = in17 in18))) (not ( = in17 in19))) (not ( = in17 in20))) (not ( = in17 in21))) (not ( = in17 in22))) (not ( = in18 in19))) (not ( = in18 in20))) (not ( = in18 in21))) (not ( = in18 in22))) (not ( = in19 in20))) (not ( = in19 in21))) (not ( = in19 in22))) (not ( = in20 in21))) (not ( = in20 in22))) (not ( = in21 in22))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in0 in5)))\n(assert (not (= in0 in6)))\n(assert (not (= in0 in7)))\n(assert (not (= in0 in8)))\n(assert (not (= in0 in9)))\n(assert (not (= in0 in10)))\n(assert (not (= in0 in11)))\n(assert (not (= in0 in12)))\n(assert (not (= in0 in13)))\n(assert (not (= in0 in14)))\n(assert (not (= in0 in15)))\n(assert (not (= in0 in16)))\n(assert (not (= in0 in17)))\n(assert (not (= in0 in18)))\n(assert (not (= in0 in19)))\n(assert (not (= in0 in20)))\n(assert (not (= in0 in21)))\n(assert (not (= in0 in22)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in1 in5)))\n(assert (not (= in1 in6)))\n(assert (not (= in1 in7)))\n(assert (not (= in1 in8)))\n(assert (not (= in1 in9)))\n(assert (not (= in1 in10)))\n(assert (not (= in1 in11)))\n(assert (not (= in1 in12)))\n(assert (not (= in1 in13)))\n(assert (not (= in1 in14)))\n(assert (not (= in1 in15)))\n(assert (not (= in1 in16)))\n(assert (not (= in1 in17)))\n(assert (not (= in1 in18)))\n(assert (not (= in1 in19)))\n(assert (not (= in1 in20)))\n(assert (not (= in1 in21)))\n(assert (not (= in1 in22)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in2 in5)))\n(assert (not (= in2 in6)))\n(assert (not (= in2 in7)))\n(assert (not (= in2 in8)))\n(assert (not (= in2 in9)))\n(assert (not (= in2 in10)))\n(assert (not (= in2 in11)))\n(assert (not (= in2 in12)))\n(assert (not (= in2 in13)))\n(assert (not (= in2 in14)))\n(assert (not (= in2 in15)))\n(assert (not (= in2 in16)))\n(assert (not (= in2 in17)))\n(assert (not (= in2 in18)))\n(assert (not (= in2 in19)))\n(assert (not (= in2 in20)))\n(assert (not (= in2 in21)))\n(assert (not (= in2 in22)))\n(assert (not (= in3 in4)))\n(assert (not (= in3 in5)))\n(assert (not (= in3 in6)))\n(assert (not (= in3 in7)))\n(assert (not (= in3 in8)))\n(assert (not (= in3 in9)))\n(assert (not (= in3 in10)))\n(assert (not (= in3 in11)))\n(assert (not (= in3 in12)))\n(assert (not (= in3 in13)))\n(assert (not (= in3 in14)))\n(assert (not (= in3 in15)))\n(assert (not (= in3 in16)))\n(assert (not (= in3 in17)))\n(assert (not (= in3 in18)))\n(assert (not (= in3 in19)))\n(assert (not (= in3 in20)))\n(assert (not (= in3 in21)))\n(assert (not (= in3 in22)))\n(assert (not (= in4 in5)))\n(assert (not (= in4 in6)))\n(assert (not (= in4 in7)))\n(assert (not (= in4 in8)))\n(assert (not (= in4 in9)))\n(assert (not (= in4 in10)))\n(assert (not (= in4 in11)))\n(assert (not (= in4 in12)))\n(assert (not (= in4 in13)))\n(assert (not (= in4 in14)))\n(assert (not (= in4 in15)))\n(assert (not (= in4 in16)))\n(assert (not (= in4 in17)))\n(assert (not (= in4 in18)))\n(assert (not (= in4 in19)))\n(assert (not (= in4 in20)))\n(assert (not (= in4 in21)))\n(assert (not (= in4 in22)))\n(assert (not (= in5 in6)))\n(assert (not (= in5 in7)))\n(assert (not (= in5 in8)))\n(assert (not (= in5 in9)))\n(assert (not (= in5 in10)))\n(assert (not (= in5 in11)))\n(assert (not (= in5 in12)))\n(assert (not (= in5 in13)))\n(assert (not (= in5 in14)))\n(assert (not (= in5 in15)))\n(assert (not (= in5 in16)))\n(assert (not (= in5 in17)))\n(assert (not (= in5 in18)))\n(assert (not (= in5 in19)))\n(assert (not (= in5 in20)))\n(assert (not (= in5 in21)))\n(assert (not (= in5 in22)))\n(assert (not (= in6 in7)))\n(assert (not (= in6 in8)))\n(assert (not (= in6 in9)))\n(assert (not (= in6 in10)))\n(assert (not (= in6 in11)))\n(assert (not (= in6 in12)))\n(assert (not (= in6 in13)))\n(assert (not (= in6 in14)))\n(assert (not (= in6 in15)))\n(assert (not (= in6 in16)))\n(assert (not (= in6 in17)))\n(assert (not (= in6 in18)))\n(assert (not (= in6 in19)))\n(assert (not (= in6 in20)))\n(assert (not (= in6 in21)))\n(assert (not (= in6 in22)))\n(assert (not (= in7 in8)))\n(assert (not (= in7 in9)))\n(assert (not (= in7 in10)))\n(assert (not (= in7 in11)))\n(assert (not (= in7 in12)))\n(assert (not (= in7 in13)))\n(assert (not (= in7 in14)))\n(assert (not (= in7 in15)))\n(assert (not (= in7 in16)))\n(assert (not (= in7 in17)))\n(assert (not (= in7 in18)))\n(assert (not (= in7 in19)))\n(assert (not (= in7 in20)))\n(assert (not (= in7 in21)))\n(assert (not (= in7 in22)))\n(assert (not (= in8 in9)))\n(assert (not (= in8 in10)))\n(assert (not (= in8 in11)))\n(assert (not (= in8 in12)))\n(assert (not (= in8 in13)))\n(assert (not (= in8 in14)))\n(assert (not (= in8 in15)))\n(assert (not (= in8 in16)))\n(assert (not (= in8 in17)))\n(assert (not (= in8 in18)))\n(assert (not (= in8 in19)))\n(assert (not (= in8 in20)))\n(assert (not (= in8 in21)))\n(assert (not (= in8 in22)))\n(assert (not (= in9 in10)))\n(assert (not (= in9 in11)))\n(assert (not (= in9 in12)))\n(assert (not (= in9 in13)))\n(assert (not (= in9 in14)))\n(assert (not (= in9 in15)))\n(assert (not (= in9 in16)))\n(assert (not (= in9 in17)))\n(assert (not (= in9 in18)))\n(assert (not (= in9 in19)))\n(assert (not (= in9 in20)))\n(assert (not (= in9 in21)))\n(assert (not (= in9 in22)))\n(assert (not (= in10 in11)))\n(assert (not (= in10 in12)))\n(assert (not (= in10 in13)))\n(assert (not (= in10 in14)))\n(assert (not (= in10 in15)))\n(assert (not (= in10 in16)))\n(assert (not (= in10 in17)))\n(assert (not (= in10 in18)))\n(assert (not (= in10 in19)))\n(assert (not (= in10 in20)))\n(assert (not (= in10 in21)))\n(assert (not (= in10 in22)))\n(assert (not (= in11 in12)))\n(assert (not (= in11 in13)))\n(assert (not (= in11 in14)))\n(assert (not (= in11 in15)))\n(assert (not (= in11 in16)))\n(assert (not (= in11 in17)))\n(assert (not (= in11 in18)))\n(assert (not (= in11 in19)))\n(assert (not (= in11 in20)))\n(assert (not (= in11 in21)))\n(assert (not (= in11 in22)))\n(assert (not (= in12 in13)))\n(assert (not (= in12 in14)))\n(assert (not (= in12 in15)))\n(assert (not (= in12 in16)))\n(assert (not (= in12 in17)))\n(assert (not (= in12 in18)))\n(assert (not (= in12 in19)))\n(assert (not (= in12 in20)))\n(assert (not (= in12 in21)))\n(assert (not (= in12 in22)))\n(assert (not (= in13 in14)))\n(assert (not (= in13 in15)))\n(assert (not (= in13 in16)))\n(assert (not (= in13 in17)))\n(assert (not (= in13 in18)))\n(assert (not (= in13 in19)))\n(assert (not (= in13 in20)))\n(assert (not (= in13 in21)))\n(assert (not (= in13 in22)))\n(assert (not (= in14 in15)))\n(assert (not (= in14 in16)))\n(assert (not (= in14 in17)))\n(assert (not (= in14 in18)))\n(assert (not (= in14 in19)))\n(assert (not (= in14 in20)))\n(assert (not (= in14 in21)))\n(assert (not (= in14 in22)))\n(assert (not (= in15 in16)))\n(assert (not (= in15 in17)))\n(assert (not (= in15 in18)))\n(assert (not (= in15 in19)))\n(assert (not (= in15 in20)))\n(assert (not (= in15 in21)))\n(assert (not (= in15 in22)))\n(assert (not (= in16 in17)))\n(assert (not (= in16 in18)))\n(assert (not (= in16 in19)))\n(assert (not (= in16 in20)))\n(assert (not (= in16 in21)))\n(assert (not (= in16 in22)))\n(assert (not (= in17 in18)))\n(assert (not (= in17 in19)))\n(assert (not (= in17 in20)))\n(assert (not (= in17 in21)))\n(assert (not (= in17 in22)))\n(assert (not (= in18 in19)))\n(assert (not (= in18 in20)))\n(assert (not (= in18 in21)))\n(assert (not (= in18 in22)))\n(assert (not (= in19 in20)))\n(assert (not (= in19 in21)))\n(assert (not (= in19 in22)))\n(assert (not (= in20 in21)))\n(assert (not (= in20 in22)))\n(assert (not (= in21 in22)))",
        "equivalent": true
      },
      "24": {
        "expected": {
          "constants": [
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in20 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in22 Int)",
            "(declare-const in11 Int)",
            "(declare-const in21 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in23 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in0 in18))) (not ( = in0 in19))) (not ( = in0 in20))) (not ( = in0 in21))) (not ( = in0 in22))) (not ( = in0 in23))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in1 in18))) (not ( = in1 in19))) (not ( = in1 in20))) (not ( = in1 in21))) (not ( = in1 in22))) (not ( = in1 in23))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in2 in18))) (not ( = in2 in19))) (not ( = in2 in20))) (not ( = in2 in21))) (not ( = in2 in22))) (not ( = in2 in23))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in3 in18))) (not ( = in3 in19))) (not ( = in3 in20))) (not ( = in3 in21))) (not ( = in3 in22))) (not ( = in3 in23))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in4 in18))) (not ( = in4 in19))) (not ( = in4 in20))) (not ( = in4 in21))) (not ( = in4 in22))) (not ( = in4 in23))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in5 in18))) (not ( = in5 in19))) (not ( = in5 in20))) (not ( = in5 in21))) (not ( = in5 in22))) (not ( = in5 in23))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in6 in18))) (not ( = in6 in19))) (not ( = in6 in20))) (not ( = in6 in21))) (not ( = in6 in22))) (not ( = in6 in23))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in7 in18))) (not ( = in7 in19))) (not ( = in7 in20))) (not ( = in7 in21))) (not ( = in7 in22))) (not ( = in7 in23))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in8 in18))) (not ( = in8 in19))) (not ( = in8 in20))) (not ( = in8 in21))) (not ( = in8 in22))) (not ( = in8 in23))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in9 in18))) (not ( = in9 in19))) (not ( = in9 in20))) (not ( = in9 in21))) (not ( = in9 in22))) (not ( = in9 in23))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in10 in18))) (not ( = in10 in19))) (not ( = in10 in20))) (not ( = in10 in21))) (not ( = in10 in22))) (not ( = in10 in23))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in11 in18))) (not ( = in11 in19))) (not ( = in11 in20))) (not ( = in11 in21))) (not ( = in11 in22))) (not ( = in11 in23))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in12 in18))) (not ( = in12 in19))) (not ( = in12 in20))) (not ( = in12 in21))) (not ( = in12 in22))) (not ( = in12 in23))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in13 in18))) (not ( = in13 in19))) (not ( = in13 in20))) (not ( = in13 in21))) (not ( = in13 in22))) (not ( = in13 in23))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in14 in18))) (not ( = in14 in19))) (not ( = in14 in20))) (not ( = in14 in21))) (not ( = in14 in22))) (not ( = in14 in23))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in15 in18))) (not ( = in15 in19))) (not ( = in15 in20))) (not ( = in15 in21))) (not ( = in15 in22))) (not ( = in15 in23))) (not ( = in16 in17))) (not ( = in16 in18))) (not ( = in16 in19))) (not ( = in16 in20))) (not ( = in16 in21))) (not ( = in16 in22))) (not ( = in16 in23))) (not ( = in17 in18))) (not ( = in17 in19))) (not ( = in17 in20))) (not ( = in17 in21))) (not ( = in17 in22))) (not ( = in17 in23))) (not ( = in18 in19))) (not ( = in18 in20))) (not ( = in18 in21))) (not ( = in18 in22))) (not ( = in18 in23))) (not ( = in19 in20))) (not ( = in19 in21))) (not ( = in19 in22))) (not ( = in19 in23))) (not ( = in20 in21))) (not ( = in20 in22))) (not ( = in20 in23))) (not ( = in21 in22))) (not ( = in21 in23))) (not ( = in22 in23))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in0 in5)))\n(assert (not (= in0 in6)))\n(assert (not (= in0 in7)))\n(assert (not (= in0 in8)))\n(assert (not (= in0 in9)))\n(assert (not (= in0 in10)))\n(assert (not (= in0 in11)))\n(assert (not (= in0 in12)))\n(assert (not (= in0 in13)))\n(assert (not (= in0 in14)))\n(assert (not (= in0 in15)))\n(assert (not (= in0 in16)))\n(assert (not (= in0 in17)))\n(assert (not (= in0 in18)))\n(assert (not (= in0 in19)))\n(assert (not (= in0 in20)))\n(assert (not (= in0 in21)))\n(assert (not (= in0 in22)))\n(assert (not (= in0 in23)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in1 in5)))\n(assert (not (= in1 in6)))\n(assert (not (= in1 in7)))\n(assert (not (= in1 in8)))\n(assert (not (= in1 in9)))\n(assert (not (= in1 in10)))\n(assert (not (= in1 in11)))\n(assert (not (= in1 in12)))\n(assert (not (= in1 in13)))\n(assert (not (= in1 in14)))\n(assert (not (= in1 in15)))\n(assert (not (= in1 in16)))\n(assert (not (= in1 in17)))\n(assert (not (= in1 in18)))\n(assert (not (= in1 in19)))\n(assert (not (= in1 in20)))\n(assert (not (= in1 in21)))\n(assert (not (= in1 in22)))\n(assert (not (= in1 in23)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in2 in5)))\n(assert (not (= in2 in6)))\n(assert (not (= in2 in7)))\n(assert (not (= in2 in8)))\n(assert (not (= in2 in9)))\n(assert (not (= in2 in10)))\n(assert (not (= in2 in11)))\n(assert (not (= in2 in12)))\n(assert (not (= in2 in13)))\n(assert (not (= in2 in14)))\n(assert (not (= in2 in15)))\n(assert (not (= in2 in16)))\n(assert (not (= in2 in17)))\n(assert (not (= in2 in18)))\n(assert (not (= in2 in19)))\n(assert (not (= in2 in20)))\n(assert (not (= in2 in21)))\n(assert (not (= in2 in22)))\n(assert (not (= in2 in23)))\n(assert (not (= in3 in4)))\n(assert (not (= in3 in5)))\n(assert (not (= in3 in6)))\n(assert (not (= in3 in7)))\n(assert (not (= in3 in8)))\n(assert (not (= in3 in9)))\n(assert (not (= in3 in10)))\n(assert (not (= in3 in11)))\n(assert (not (= in3 in12)))\n(assert (not (= in3 in13)))\n(assert (not (= in3 in14)))\n(assert (not (= in3 in15)))\n(assert (not (= in3 in16)))\n(assert (not (= in3 in17)))\n(assert (not (= in3 in18)))\n(assert (not (= in3 in19)))\n(assert (not (= in3 in20)))\n(assert (not (= in3 in21)))\n(assert (not (= in3 in22)))\n(assert (not (= in3 in23)))\n(assert (not (= in4 in5)))\n(assert (not (= in4 in6)))\n(assert (not (= in4 in7)))\n(assert (not (= in4 in8)))\n(assert (not (= in4 in9)))\n(assert (not (= in4 in10)))\n(assert (not (= in4 in11)))\n(assert (not (= in4 in12)))\n(assert (not (= in4 in13)))\n(assert (not (= in4 in14)))\n(assert (not (= in4 in15)))\n(assert (not (= in4 in16)))\n(assert (not (= in4 in17)))\n(assert (not (= in4 in18)))\n(assert (not (= in4 in19)))\n(assert (not (= in4 in20)))\n(assert (not (= in4 in21)))\n(assert (not (= in4 in22)))\n(assert (not (= in4 in23)))\n(assert (not (= in5 in6)))\n(assert (not (= in5 in7)))\n(assert (not (= in5 in8)))\n(assert (not (= in5 in9)))\n(assert (not (= in5 in10)))\n(assert (not (= in5 in11)))\n(assert (not (= in5 in12)))\n(assert (not (= in5 in13)))\n(assert (not (= in5 in14)))\n(assert (not (= in5 in15)))\n(assert (not (= in5 in16)))\n(assert (not (= in5 in17)))\n(assert (not (= in5 in18)))\n(assert (not (= in5 in19)))\n(assert (not (= in5 in20)))\n(assert (not (= in5 in21)))\n(assert (not (= in5 in22)))\n(assert (not (= in5 in23)))\n(assert (not (= in6 in7)))\n(assert (not (= in6 in8)))\n(assert (not (= in6 in9)))\n(assert (not (= in6 in10)))\n(assert (not (= in6 in11)))\n(assert (not (= in6 in12)))\n(assert (not (= in6 in13)))\n(assert (not (= in6 in14)))\n(assert (not (= in6 in15)))\n(assert (not (= in6 in16)))\n(assert (not (= in6 in17)))\n(assert (not (= in6 in18)))\n(assert (not (= in6 in19)))\n(assert (not (= in6 in20)))\n(assert (not (= in6 in21)))\n(assert (not (= in6 in22)))\n(assert (not (= in6 in23)))\n(assert (not (= in7 in8)))\n(assert (not (= in7 in9)))\n(assert (not (= in7 in10)))\n(assert (not (= in7 in11)))\n(assert (not (= in7 in12)))\n(assert (not (= in7 in13)))\n(assert (not (= in7 in14)))\n(assert (not (= in7 in15)))\n(assert (not (= in7 in16)))\n(assert (not (= in7 in17)))\n(assert (not (= in7 in18)))\n(assert (not (= in7 in19)))\n(assert (not (= in7 in20)))\n(assert (not (= in7 in21)))\n(assert (not (= in7 in22)))\n(assert (not (= in7 in23)))\n(assert (not (= in8 in9)))\n(assert (not (= in8 in10)))\n(assert (not (= in8 in11)))\n(assert (not (= in8 in12)))\n(assert (not (= in8 in13)))\n(assert (not (= in8 in14)))\n(assert (not (= in8 in15)))\n(assert (not (= in8 in16)))\n(assert (not (= in8 in17)))\n(assert (not (= in8 in18)))\n(assert (not (= in8 in19)))\n(assert (not (= in8 in20)))\n(assert (not (= in8 in21)))\n(assert (not (= in8 in22)))\n(assert (not (= in8 in23)))\n(assert (not (= in9 in10)))\n(assert (not (= in9 in11)))\n(assert (not (= in9 in12)))\n(assert (not (= in9 in13)))\n(assert (not (= in9 in14)))\n(assert (not (= in9 in15)))\n(assert (not (= in9 in16)))\n(assert (not (= in9 in17)))\n(assert (not (= in9 in18)))\n(assert (not (= in9 in19)))\n(assert (not (= in9 in20)))\n(assert (not (= in9 in21)))\n(assert (not (= in9 in22)))\n(assert (not (= in9 in23)))\n(assert (not (= in10 in11)))\n(assert (not (= in10 in12)))\n(assert (not (= in10 in13)))\n(assert (not (= in10 in14)))\n(assert (not (= in10 in15)))\n(assert (not (= in10 in16)))\n(assert (not (= in10 in17)))\n(assert (not (= in10 in18)))\n(assert (not (= in10 in19)))\n(assert (not (= in10 in20)))\n(assert (not (= in10 in21)))\n(assert (not (= in10 in22)))\n(assert (not (= in10 in23)))\n(assert (not (= in11 in12)))\n(assert (not (= in11 in13)))\n(assert (not (= in11 in14)))\n(assert (not (= in11 in15)))\n(assert (not (= in11 in16)))\n(assert (not (= in11 in17)))\n(assert (not (= in11 in18)))\n(assert (not (= in11 in19)))\n(assert (not (= in11 in20)))\n(assert (not (= in11 in21)))\n(assert (not (= in11 in22)))\n(assert (not (= in11 in23)))\n(assert (not (= in12 in13)))\n(assert (not (= in12 in14)))\n(assert (not (= in12 in15)))\n(assert (not (= in12 in16)))\n(assert (not (= in12 in17)))\n(assert (not (= in12 in18)))\n(assert (not (= in12 in19)))\n(assert (not (= in12 in20)))\n(assert (not (= in12 in21)))\n(assert (not (= in12 in22)))\n(assert (not (= in12 in23)))\n(assert (not (= in13 in14)))\n(assert (not (= in13 in15)))\n(assert (not (= in13 in16)))\n(assert (not (= in13 in17)))\n(assert (not (= in13 in18)))\n(assert (not (= in13 in19)))\n(assert (not (= in13 in20)))\n(assert (not (= in13 in21)))\n(assert (not (= in13 in22)))\n(assert (not (= in13 in23)))\n(assert (not (= in14 in15)))\n(assert (not (= in14 in16)))\n(assert (not (= in14 in17)))\n(assert (not (= in14 in18)))\n(assert (not (= in14 in19)))\n(assert (not (= in14 in20)))\n(assert (not (= in14 in21)))\n(assert (not (= in14 in22)))\n(assert (not (= in14 in23)))\n(assert (not (= in15 in16)))\n(assert (not (= in15 in17)))\n(assert (not (= in15 in18)))\n(assert (not (= in15 in19)))\n(assert (not (= in15 in20)))\n(assert (not (= in15 in21)))\n(assert (not (= in15 in22)))\n(assert (not (= in15 in23)))\n(assert (not (= in16 in17)))\n(assert (not (= in16 in18)))\n(assert (not (= in16 in19)))\n(assert (not (= in16 in20)))\n(assert (not (= in16 in21)))\n(assert (not (= in16 in22)))\n(assert (not (= in16 in23)))\n(assert (not (= in17 in18)))\n(assert (not (= in17 in19)))\n(assert (not (= in17 in20)))\n(assert (not (= in17 in21)))\n(assert (not (= in17 in22)))\n(assert (not (= in17 in23)))\n(assert (not (= in18 in19)))\n(assert (not (= in18 in20)))\n(assert (not (= in18 in21)))\n(assert (not (= in18 in22)))\n(assert (not (= in18 in23)))\n(assert (not (= in19 in20)))\n(assert (not (= in19 in21)))\n(assert (not (= in19 in22)))\n(assert (not (= in19 in23)))\n(assert (not (= in20 in21)))\n(assert (not (= in20 in22)))\n(assert (not (= in20 in23)))\n(assert (not (= in21 in22)))\n(assert (not (= in21 in23)))\n(assert (not (= in22 in23)))",
        "equivalent": true
      },
      "25": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in0 in18))) (not ( = in0 in19))) (not ( = in0 in20))) (not ( = in0 in21))) (not ( = in0 in22))) (not ( = in0 in23))) (not ( = in0 in24))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in1 in18))) (not ( = in1 in19))) (not ( = in1 in20))) (not ( = in1 in21))) (not ( = in1 in22))) (not ( = in1 in23))) (not ( = in1 in24))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in2 in18))) (not ( = in2 in19))) (not ( = in2 in20))) (not ( = in2 in21))) (not ( = in2 in22))) (not ( = in2 in23))) (not ( = in2 in24))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in3 in18))) (not ( = in3 in19))) (not ( = in3 in20))) (not ( = in3 in21))) (not ( = in3 in22))) (not ( = in3 in23))) (not ( = in3 in24))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in4 in18))) (not ( = in4 in19))) (not ( = in4 in20))) (not ( = in4 in21))) (not ( = in4 in22))) (not ( = in4 in23))) (not ( = in4 in24))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in5 in18))) (not ( = in5 in19))) (not ( = in5 in20))) (not ( = in5 in21))) (not ( = in5 in22))) (not ( = in5 in23))) (not ( = in5 in24))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in6 in18))) (not ( = in6 in19))) (not ( = in6 in20))) (not ( = in6 in21))) (not ( = in6 in22))) (not ( = in6 in23))) (not ( = in6 in24))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in7 in18))) (not ( = in7 in19))) (not ( = in7 in20))) (not ( = in7 in21))) (not ( = in7 in22))) (not ( = in7 in23))) (not ( = in7 in24))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in8 in18))) (not ( = in8 in19))) (not ( = in8 in20))) (not ( = in8 in21))) (not ( = in8 in22))) (not ( = in8 in23))) (not ( = in8 in24))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in9 in18))) (not ( = in9 in19))) (not ( = in9 in20))) (not ( = in9 in21))) (not ( = in9 in22))) (not ( = in9 in23))) (not ( = in9 in24))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in10 in18))) (not ( = in10 in19))) (not ( = in10 in20))) (not ( = in10 in21))) (not ( = in10 in22))) (not ( = in10 in23))) (not ( = in10 in24))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in11 in18))) (not ( = in11 in19))) (not ( = in11 in20))) (not ( = in11 in21))) (not ( = in11 in22))) (not ( = in11 in23))) (not ( = in11 in24))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in12 in18))) (not ( = in12 in19))) (not ( = in12 in20))) (not ( = in12 in21))) (not ( = in12 in22))) (not ( = in12 in23))) (not ( = in12 in24))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in13 in18))) (not ( = in13 in19))) (not ( = in13 in20))) (not ( = in13 in21))) (not ( = in13 in22))) (not ( = in13 in23))) (not ( = in13 in24))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in14 in18))) (not ( = in14 in19))) (not ( = in14 in20))) (not ( = in14 in21))) (not ( = in14 in22))) (not ( = in14 in23))) (not ( = in14 in24))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in15 in18))) (not ( = in15 in19))) (not ( = in15 in20))) (not ( = in15 in21))) (not ( = in15 in22))) (not ( = in15 in23))) (not ( = in15 in24))) (not ( = in16 in17))) (not ( = in16 in18))) (not ( = in16 in19))) (not ( = in16 in20))) (not ( = in16 in21))) (not ( = in16 in22))) (not ( = in16 in23))) (not ( = in16 in24))) (not ( = in17 in18))) (not ( = in17 in19))) (not ( = in17 in20))) (not ( = in17 in21))) (not ( = in17 in22))) (not ( = in17 in23))) (not ( = in17 in24))) (not ( = in18 in19))) (not ( = in18 in20))) (not ( = in18 in21))) (not ( = in18 in22))) (not ( = in18 in23))) (not ( = in18 in24))) (not ( = in19 in20))) (not ( = in19 in21))) (not ( = in19 in22))) (not ( = in19 in23))) (not ( = in19 in24))) (not ( = in20 in21))) (not ( = in20 in22))) (not ( = in20 in23))) (not ( = in20 in24))) (not ( = in21 in22))) (not ( = in21 in23))) (not ( = in21 in24))) (not ( = in22 in23))) (not ( = in22 in24))) (not ( = in23 in24))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in0 in5)))\n(assert (not (= in0 in6)))\n(assert (not (= in0 in7)))\n(assert (not (= in0 in8)))\n(assert (not (= in0 in9)))\n(assert (not (= in0 in10)))\n(assert (not (= in0 in11)))\n(assert (not (= in0 in12)))\n(assert (not (= in0 in13)))\n(assert (not (= in0 in14)))\n(assert (not (= in0 in15)))\n(assert (not (= in0 in16)))\n(assert (not (= in0 in17)))\n(assert (not (= in0 in18)))\n(assert (not (= in0 in19)))\n(assert (not (= in0 in20)))\n(assert (not (= in0 in21)))\n(assert (not (= in0 in22)))\n(assert (not (= in0 in23)))\n(assert (not (= in0 in24)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in1 in5)))\n(assert (not (= in1 in6)))\n(assert (not (= in1 in7)))\n(assert (not (= in1 in8)))\n(assert (not (= in1 in9)))\n(assert (not (= in1 in10)))\n(assert (not (= in1 in11)))\n(assert (not (= in1 in12)))\n(assert (not (= in1 in13)))\n(assert (not (= in1 in14)))\n(assert (not (= in1 in15)))\n(assert (not (= in1 in16)))\n(assert (not (= in1 in17)))\n(assert (not (= in1 in18)))\n(assert (not (= in1 in19)))\n(assert (not (= in1 in20)))\n(assert (not (= in1 in21)))\n(assert (not (= in1 in22)))\n(assert (not (= in1 in23)))\n(assert (not (= in1 in24)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in2 in5)))\n(assert (not (= in2 in6)))\n(assert (not (= in2 in7)))\n(assert (not (= in2 in8)))\n(assert (not (= in2 in9)))\n(assert (not (= in2 in10)))\n(assert (not (= in2 in11)))\n(assert (not (= in2 in12)))\n(assert (not (= in2 in13)))\n(assert (not (= in2 in14)))\n(assert (not (= in2 in15)))\n(assert (not (= in2 in16)))\n(assert (not (= in2 in17)))\n(assert (not (= in2 in18)))\n(assert (not (= in2 in19)))\n(assert (not (= in2 in20)))\n(assert (not (= in2 in21)))\n(assert (not (= in2 in22)))\n(assert (not (= in2 in23)))\n(assert (not (= in2 in24)))\n(assert (not (= in3 in4)))\n(assert (not (= in3 in5)))\n(assert (not (= in3 in6)))\n(assert (not (= in3 in7)))\n(assert (not (= in3 in8)))\n(assert (not (= in3 in9)))\n(assert (not (= in3 in10)))\n(assert (not (= in3 in11)))\n(assert (not (= in3 in12)))\n(assert (not (= in3 in13)))\n(assert (not (= in3 in14)))\n(assert (not (= in3 in15)))\n(assert (not (= in3 in16)))\n(assert (not (= in3 in17)))\n(assert (not (= in3 in18)))\n(assert (not (= in3 in19)))\n(assert (not (= in3 in20)))\n(assert (not (= in3 in21)))\n(assert (not (= in3 in22)))\n(assert (not (= in3 in23)))\n(assert (not (= in3 in24)))\n(assert (not (= in4 in5)))\n(assert (not (= in4 in6)))\n(assert (not (= in4 in7)))\n(assert (not (= in4 in8)))\n(assert (not (= in4 in9)))\n(assert (not (= in4 in10)))\n(assert (not (= in4 in11)))\n(assert (not (= in4 in12)))\n(assert (not (= in4 in13)))\n(assert (not (= in4 in14)))\n(assert (not (= in4 in15)))\n(assert (not (= in4 in16)))\n(assert (not (= in4 in17)))\n(assert (not (= in4 in18)))\n(assert (not (= in4 in19)))\n(assert (not (= in4 in20)))\n(assert (not (= in4 in21)))\n(assert (not (= in4 in22)))\n(assert (not (= in4 in23)))\n(assert (not (= in4 in24)))\n(assert (not (= in5 in6)))\n(assert (not (= in5 in7)))\n(assert (not (= in5 in8)))\n(assert (not (= in5 in9)))\n(assert (not (= in5 in10)))\n(assert (not (= in5 in11)))\n(assert (not (= in5 in12)))\n(assert (not (= in5 in13)))\n(assert (not (= in5 in14)))\n(assert (not (= in5 in15)))\n(assert (not (= in5 in16)))\n(assert (not (= in5 in17)))\n(assert (not (= in5 in18)))\n(assert (not (= in5 in19)))\n(assert (not (= in5 in20)))\n(assert (not (= in5 in21)))\n(assert (not (= in5 in22)))\n(assert (not (= in5 in23)))\n(assert (not (= in5 in24)))\n(assert (not (= in6 in7)))\n(assert (not (= in6 in8)))\n(assert (not (= in6 in9)))\n(assert (not (= in6 in10)))\n(assert (not (= in6 in11)))\n(assert (not (= in6 in12)))\n(assert (not (= in6 in13)))\n(assert (not (= in6 in14)))\n(assert (not (= in6 in15)))\n(assert (not (= in6 in16)))\n(assert (not (= in6 in17)))\n(assert (not (= in6 in18)))\n(assert (not (= in6 in19)))\n(assert (not (= in6 in20)))\n(assert (not (= in6 in21)))\n(assert (not (= in6 in22)))\n(assert (not (= in6 in23)))\n(assert (not (= in6 in24)))\n(assert (not (= in7 in8)))\n(assert (not (= in7 in9)))\n(assert (not (= in7 in10)))\n(assert (not (= in7 in11)))\n(assert (not (= in7 in12)))\n(assert (not (= in7 in13)))\n(assert (not (= in7 in14)))\n(assert (not (= in7 in15)))\n(assert (not (= in7 in16)))\n(assert (not (= in7 in17)))\n(assert (not (= in7 in18)))\n(assert (not (= in7 in19)))\n(assert (not (= in7 in20)))\n(assert (not (= in7 in21)))\n(assert (not (= in7 in22)))\n(assert (not (= in7 in23)))\n(assert (not (= in7 in24)))\n(assert (not (= in8 in9)))\n(assert (not (= in8 in10)))\n(assert (not (= in8 in11)))\n(assert (not (= in8 in12)))\n(assert (not (= in8 in13)))\n(assert (not (= in8 in14)))\n(assert (not (= in8 in15)))\n(assert (not (= in8 in16)))\n(assert (not (= in8 in17)))\n(assert (not (= in8 in18)))\n(assert (not (= in8 in19)))\n(assert (not (= in8 in20)))\n(assert (not (= in8 in21)))\n(assert (not (= in8 in22)))\n(assert (not (= in8 in23)))\n(assert (not (= in8 in24)))\n(assert (not (= in9 in10)))\n(assert (not (= in9 in11)))\n(assert (not (= in9 in12)))\n(assert (not (= in9 in13)))\n(assert (not (= in9 in14)))\n(assert (not (= in9 in15)))\n(assert (not (= in9 in16)))\n(assert (not (= in9 in17)))\n(assert (not (= in9 in18)))\n(assert (not (= in9 in19)))\n(assert (not (= in9 in20)))\n(assert (not (= in9 in21)))\n(assert (not (= in9 in22)))\n(assert (not (= in9 in23)))\n(assert (not (= in9 in24)))\n(assert (not (= in10 in11)))\n(assert (not (= in10 in12)))\n(assert (not (= in10 in13)))\n(assert (not (= in10 in14)))\n(assert (not (= in10 in15)))\n(assert (not (= in10 in16)))\n(assert (not (= in10 in17)))\n(assert (not (= in10 in18)))\n(assert (not (= in10 in19)))\n(assert (not (= in10 in20)))\n(assert (not (= in10 in21)))\n(assert (not (= in10 in22)))\n(assert (not (= in10 in23)))\n(assert (not (= in10 in24)))\n(assert (not (= in11 in12)))\n(assert (not (= in11 in13)))\n(assert (not (= in11 in14)))\n(assert (not (= in11 in15)))\n(assert (not (= in11 in16)))\n(assert (not (= in11 in17)))\n(assert (not (= in11 in18)))\n(assert (not (= in11 in19)))\n(assert (not (= in11 in20)))\n(assert (not (= in11 in21)))\n(assert (not (= in11 in22)))\n(assert (not (= in11 in23)))\n(assert (not (= in11 in24)))\n(assert (not (= in12 in13)))\n(assert (not (= in12 in14)))\n(assert (not (= in12 in15)))\n(assert (not (= in12 in16)))\n(assert (not (= in12 in17)))\n(assert (not (= in12 in18)))\n(assert (not (= in12 in19)))\n(assert (not (= in12 in20)))\n(assert (not (= in12 in21)))\n(assert (not (= in12 in22)))\n(assert (not (= in12 in23)))\n(assert (not (= in12 in24)))\n(assert (not (= in13 in14)))\n(assert (not (= in13 in15)))\n(assert (not (= in13 in16)))\n(assert (not (= in13 in17)))\n(assert (not (= in13 in18)))\n(assert (not (= in13 in19)))\n(assert (not (= in13 in20)))\n(assert (not (= in13 in21)))\n(assert (not (= in13 in22)))\n(assert (not (= in13 in23)))\n(assert (not (= in13 in24)))\n(assert (not (= in14 in15)))\n(assert (not (= in14 in16)))\n(assert (not (= in14 in17)))\n(assert (not (= in14 in18)))\n(assert (not (= in14 in19)))\n(assert (not (= in14 in20)))\n(assert (not (= in14 in21)))\n(assert (not (= in14 in22)))\n(assert (not (= in14 in23)))\n(assert (not (= in14 in24)))\n(assert (not (= in15 in16)))\n(assert (not (= in15 in17)))\n(assert (not (= in15 in18)))\n(assert (not (= in15 in19)))\n(assert (not (= in15 in20)))\n(assert (not (= in15 in21)))\n(assert (not (= in15 in22)))\n(assert (not (= in15 in23)))\n(assert (not (= in15 in24)))\n(assert (not (= in16 in17)))\n(assert (not (= in16 in18)))\n(assert (not (= in16 in19)))\n(assert (not (= in16 in20)))\n(assert (not (= in16 in21)))\n(assert (not (= in16 in22)))\n(assert (not (= in16 in23)))\n(assert (not (= in16 in24)))\n(assert (not (= in17 in18)))\n(assert (not (= in17 in19)))\n(assert (not (= in17 in20)))\n(assert (not (= in17 in21)))\n(assert (not (= in17 in22)))\n(assert (not (= in17 in23)))\n(assert (not (= in17 in24)))\n(assert (not (= in18 in19)))\n(assert (not (= in18 in20)))\n(assert (not (= in18 in21)))\n(assert (not (= in18 in22)))\n(assert (not (= in18 in23)))\n(assert (not (= in18 in24)))\n(assert (not (= in19 in20)))\n(assert (not (= in19 in21)))\n(assert (not (= in19 in22)))\n(assert (not (= in19 in23)))\n(assert (not (= in19 in24)))\n(assert (not (= in20 in21)))\n(assert (not (= in20 in22)))\n(assert (not (= in20 in23)))\n(assert (not (= in20 in24)))\n(assert (not (= in21 in22)))\n(assert (not (= in21 in23)))\n(assert (not (= in21 in24)))\n(assert (not (= in22 in23)))\n(assert (not (= in22 in24)))\n(assert (not (= in23 in24)))",
        "equivalent": true
      },
      "26": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in0 in18))) (not ( = in0 in19))) (not ( = in0 in20))) (not ( = in0 in21))) (not ( = in0 in22))) (not ( = in0 in23))) (not ( = in0 in24))) (not ( = in0 in25))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in1 in18))) (not ( = in1 in19))) (not ( = in1 in20))) (not ( = in1 in21))) (not ( = in1 in22))) (not ( = in1 in23))) (not ( = in1 in24))) (not ( = in1 in25))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in2 in18))) (not ( = in2 in19))) (not ( = in2 in20))) (not ( = in2 in21))) (not ( = in2 in22))) (not ( = in2 in23))) (not ( = in2 in24))) (not ( = in2 in25))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in3 in18))) (not ( = in3 in19))) (not ( = in3 in20))) (not ( = in3 in21))) (not ( = in3 in22))) (not ( = in3 in23))) (not ( = in3 in24))) (not ( = in3 in25))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in4 in18))) (not ( = in4 in19))) (not ( = in4 in20))) (not ( = in4 in21))) (not ( = in4 in22))) (not ( = in4 in23))) (not ( = in4 in24))) (not ( = in4 in25))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in5 in18))) (not ( = in5 in19))) (not ( = in5 in20))) (not ( = in5 in21))) (not ( = in5 in22))) (not ( = in5 in23))) (not ( = in5 in24))) (not ( = in5 in25))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in6 in18))) (not ( = in6 in19))) (not ( = in6 in20))) (not ( = in6 in21))) (not ( = in6 in22))) (not ( = in6 in23))) (not ( = in6 in24))) (not ( = in6 in25))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in7 in18))) (not ( = in7 in19))) (not ( = in7 in20))) (not ( = in7 in21))) (not ( = in7 in22))) (not ( = in7 in23))) (not ( = in7 in24))) (not ( = in7 in25))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in8 in18))) (not ( = in8 in19))) (not ( = in8 in20))) (not ( = in8 in21))) (not ( = in8 in22))) (not ( = in8 in23))) (not ( = in8 in24))) (not ( = in8 in25))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in9 in18))) (not ( = in9 in19))) (not ( = in9 in20))) (not ( = in9 in21))) (not ( = in9 in22))) (not ( = in9 in23))) (not ( = in9 in24))) (not ( = in9 in25))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in10 in18))) (not ( = in10 in19))) (not ( = in10 in20))) (not ( = in10 in21))) (not ( = in10 in22))) (not ( = in10 in23))) (not ( = in10 in24))) (not ( = in10 in25))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in11 in18))) (not ( = in11 in19))) (not ( = in11 in20))) (not ( = in11 in21))) (not ( = in11 in22))) (not ( = in11 in23))) (not ( = in11 in24))) (not ( = in11 in25))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in12 in18))) (not ( = in12 in19))) (not ( = in12 in20))) (not ( = in12 in21))) (not ( = in12 in22))) (not ( = in12 in23))) (not ( = in12 in24))) (not ( = in12 in25))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in13 in18))) (not ( = in13 in19))) (not ( = in13 in20))) (not ( = in13 in21))) (not ( = in13 in22))) (not ( = in13 in23))) (not ( = in13 in24))) (not ( = in13 in25))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in14 in18))) (not ( = in14 in19))) (not ( = in14 in20))) (not ( = in14 in21))) (not ( = in14 in22))) (not ( = in14 in23))) (not ( = in14 in24))) (not ( = in14 in25))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in15 in18))) (not ( = in15 in19))) (not ( = in15 in20))) (not ( = in15 in21))) (not ( = in15 in22))) (not ( = in15 in23))) (not ( = in15 in24))) (not ( = in15 in25))) (not ( = in16 in17))) (not ( = in16 in18))) (not ( = in16 in19))) (not ( = in16 in20))) (not ( = in16 in21))) (not ( = in16 in22))) (not ( = in16 in23))) (not ( = in16 in24))) (not ( = in16 in25))) (not ( = in17 in18))) (not ( = in17 in19))) (not ( = in17 in20))) (not ( = in17 in21))) (not ( = in17 in22))) (not ( = in17 in23))) (not ( = in17 in24))) (not ( = in17 in25))) (not ( = in18 in19))) (not ( = in18 in20))) (not ( = in18 in21))) (not ( = in18 in22))) (not ( = in18 in23))) (not ( = in18 in24))) (not ( = in18 in25))) (not ( = in19 in20))) (not ( = in19 in21))) (not ( = in19 in22))) (not ( = in19 in23))) (not ( = in19 in24))) (not ( = in19 in25))) (not ( = in20 in21))) (not ( = in20 in22))) (not ( = in20 in23))) (not ( = in20 in24))) (not ( = in20 in25))) (not ( = in21 in22))) (not ( = in21 in23))) (not ( = in21 in24))) (not ( = in21 in25))) (not ( = in22 in23))) (not ( = in22 in24))) (not ( = in22 in25))) (not ( = in23 in24))) (not ( = in23 in25))) (not ( = in24 in25))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in0 in5)))\n(assert (not (= in0 in6)))\n(assert (not (= in0 in7)))\n(assert (not (= in0 in8)))\n(assert (not (= in0 in9)))\n(assert (not (= in0 in10)))\n(assert (not (= in0 in11)))\n(assert (not (= in0 in12)))\n(assert (not (= in0 in13)))\n(assert (not (= in0 in14)))\n(assert (not (= in0 in15)))\n(assert (not (= in0 in16)))\n(assert (not (= in0 in17)))\n(assert (not (= in0 in18)))\n(assert (not (= in0 in19)))\n(assert (not (= in0 in20)))\n(assert (not (= in0 in21)))\n(assert (not (= in0 in22)))\n(assert (not (= in0 in23)))\n(assert (not (= in0 in24)))\n(assert (not (= in0 in25)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in1 in5)))\n(assert (not (= in1 in6)))\n(assert (not (= in1 in7)))\n(assert (not (= in1 in8)))\n(assert (not (= in1 in9)))\n(assert (not (= in1 in10)))\n(assert (not (= in1 in11)))\n(assert (not (= in1 in12)))\n(assert (not (= in1 in13)))\n(assert (not (= in1 in14)))\n(assert (not (= in1 in15)))\n(assert (not (= in1 in16)))\n(assert (not (= in1 in17)))\n(assert (not (= in1 in18)))\n(assert (not (= in1 in19)))\n(assert (not (= in1 in20)))\n(assert (not (= in1 in21)))\n(assert (not (= in1 in22)))\n(assert (not (= in1 in23)))\n(assert (not (= in1 in24)))\n(assert (not (= in1 in25)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in2 in5)))\n(assert (not (= in2 in6)))\n(assert (not (= in2 in7)))\n(assert (not (= in2 in8)))\n(assert (not (= in2 in9)))\n(assert (not (= in2 in10)))\n(assert (not (= in2 in11)))\n(assert (not (= in2 in12)))\n(assert (not (= in2 in13)))\n(assert (not (= in2 in14)))\n(assert (not (= in2 in15)))\n(assert (not (= in2 in16)))\n(assert (not (= in2 in17)))\n(assert (not (= in2 in18)))\n(assert (not (= in2 in19)))\n(assert (not (= in2 in20)))\n(assert (not (= in2 in21)))\n(assert (not (= in2 in22)))\n(assert (not (= in2 in23)))\n(assert (not (= in2 in24)))\n(assert (not (= in2 in25)))\n(assert (not (= in3 in4)))\n(assert (not (= in3 in5)))\n(assert (not (= in3 in6)))\n(assert (not (= in3 in7)))\n(assert (not (= in3 in8)))\n(assert (not (= in3 in9)))\n(assert (not (= in3 in10)))\n(assert (not (= in3 in11)))\n(assert (not (= in3 in12)))\n(assert (not (= in3 in13)))\n(assert (not (= in3 in14)))\n(assert (not (= in3 in15)))\n(assert (not (= in3 in16)))\n(assert (not (= in3 in17)))\n(assert (not (= in3 in18)))\n(assert (not (= in3 in19)))\n(assert (not (= in3 in20)))\n(assert (not (= in3 in21)))\n(assert (not (= in3 in22)))\n(assert (not (= in3 in23)))\n(assert (not (= in3 in24)))\n(assert (not (= in3 in25)))\n(assert (not (= in4 in5)))\n(assert (not (= in4 in6)))\n(assert (not (= in4 in7)))\n(assert (not (= in4 in8)))\n(assert (not (= in4 in9)))\n(assert (not (= in4 in10)))\n(assert (not (= in4 in11)))\n(assert (not (= in4 in12)))\n(assert (not (= in4 in13)))\n(assert (not (= in4 in14)))\n(assert (not (= in4 in15)))\n(assert (not (= in4 in16)))\n(assert (not (= in4 in17)))\n(assert (not (= in4 in18)))\n(assert (not (= in4 in19)))\n(assert (not (= in4 in20)))\n(assert (not (= in4 in21)))\n(assert (not (= in4 in22)))\n(assert (not (= in4 in23)))\n(assert (not (= in4 in24)))\n(assert (not (= in4 in25)))\n(assert (not (= in5 in6)))\n(assert (not (= in5 in7)))\n(assert (not (= in5 in8)))\n(assert (not (= in5 in9)))\n(assert (not (= in5 in10)))\n(assert (not (= in5 in11)))\n(assert (not (= in5 in12)))\n(assert (not (= in5 in13)))\n(assert (not (= in5 in14)))\n(assert (not (= in5 in15)))\n(assert (not (= in5 in16)))\n(assert (not (= in5 in17)))\n(assert (not (= in5 in18)))\n(assert (not (= in5 in19)))\n(assert (not (= in5 in20)))\n(assert (not (= in5 in21)))\n(assert (not (= in5 in22)))\n(assert (not (= in5 in23)))\n(assert (not (= in5 in24)))\n(assert (not (= in5 in25)))\n(assert (not (= in6 in7)))\n(assert (not (= in6 in8)))\n(assert (not (= in6 in9)))\n(assert (not (= in6 in10)))\n(assert (not (= in6 in11)))\n(assert (not (= in6 in12)))\n(assert (not (= in6 in13)))\n(assert (not (= in6 in14)))\n(assert (not (= in6 in15)))\n(assert (not (= in6 in16)))\n(assert (not (= in6 in17)))\n(assert (not (= in6 in18)))\n(assert (not (= in6 in19)))\n(assert (not (= in6 in20)))\n(assert (not (= in6 in21)))\n(assert (not (= in6 in22)))\n(assert (not (= in6 in23)))\n(assert (not (= in6 in24)))\n(assert (not (= in6 in25)))\n(assert (not (= in7 in8)))\n(assert (not (= in7 in9)))\n(assert (not (= in7 in10)))\n(assert (not (= in7 in11)))\n(assert (not (= in7 in12)))\n(assert (not (= in7 in13)))\n(assert (not (= in7 in14)))\n(assert (not (= in7 in15)))\n(assert (not (= in7 in16)))\n(assert (not (= in7 in17)))\n(assert (not (= in7 in18)))\n(assert (not (= in7 in19)))\n(assert (not (= in7 in20)))\n(assert (not (= in7 in21)))\n(assert (not (= in7 in22)))\n(assert (not (= in7 in23)))\n(assert (not (= in7 in24)))\n(assert (not (= in7 in25)))\n(assert (not (= in8 in9)))\n(assert (not (= in8 in10)))\n(assert (not (= in8 in11)))\n(assert (not (= in8 in12)))\n(assert (not (= in8 in13)))\n(assert (not (= in8 in14)))\n(assert (not (= in8 in15)))\n(assert (not (= in8 in16)))\n(assert (not (= in8 in17)))\n(assert (not (= in8 in18)))\n(assert (not (= in8 in19)))\n(assert (not (= in8 in20)))\n(assert (not (= in8 in21)))\n(assert (not (= in8 in22)))\n(assert (not (= in8 in23)))\n(assert (not (= in8 in24)))\n(assert (not (= in8 in25)))\n(assert (not (= in9 in10)))\n(assert (not (= in9 in11)))\n(assert (not (= in9 in12)))\n(assert (not (= in9 in13)))\n(assert (not (= in9 in14)))\n(assert (not (= in9 in15)))\n(assert (not (= in9 in16)))\n(assert (not (= in9 in17)))\n(assert (not (= in9 in18)))\n(assert (not (= in9 in19)))\n(assert (not (= in9 in20)))\n(assert (not (= in9 in21)))\n(assert (not (= in9 in22)))\n(assert (not (= in9 in23)))\n(assert (not (= in9 in24)))\n(assert (not (= in9 in25)))\n(assert (not (= in10 in11)))\n(assert (not (= in10 in12)))\n(assert (not (= in10 in13)))\n(assert (not (= in10 in14)))\n(assert (not (= in10 in15)))\n(assert (not (= in10 in16)))\n(assert (not (= in10 in17)))\n(assert (not (= in10 in18)))\n(assert (not (= in10 in19)))\n(assert (not (= in10 in20)))\n(assert (not (= in10 in21)))\n(assert (not (= in10 in22)))\n(assert (not (= in10 in23)))\n(assert (not (= in10 in24)))\n(assert (not (= in10 in25)))\n(assert (not (= in11 in12)))\n(assert (not (= in11 in13)))\n(assert (not (= in11 in14)))\n(assert (not (= in11 in15)))\n(assert (not (= in11 in16)))\n(assert (not (= in11 in17)))\n(assert (not (= in11 in18)))\n(assert (not (= in11 in19)))\n(assert (not (= in11 in20)))\n(assert (not (= in11 in21)))\n(assert (not (= in11 in22)))\n(assert (not (= in11 in23)))\n(assert (not (= in11 in24)))\n(assert (not (= in11 in25)))\n(assert (not (= in12 in13)))\n(assert (not (= in12 in14)))\n(assert (not (= in12 in15)))\n(assert (not (= in12 in16)))\n(assert (not (= in12 in17)))\n(assert (not (= in12 in18)))\n(assert (not (= in12 in19)))\n(assert (not (= in12 in20)))\n(assert (not (= in12 in21)))\n(assert (not (= in12 in22)))\n(assert (not (= in12 in23)))\n(assert (not (= in12 in24)))\n(assert (not (= in12 in25)))\n(assert (not (= in13 in14)))\n(assert (not (= in13 in15)))\n(assert (not (= in13 in16)))\n(assert (not (= in13 in17)))\n(assert (not (= in13 in18)))\n(assert (not (= in13 in19)))\n(assert (not (= in13 in20)))\n(assert (not (= in13 in21)))\n(assert (not (= in13 in22)))\n(assert (not (= in13 in23)))\n(assert (not (= in13 in24)))\n(assert (not (= in13 in25)))\n(assert (not (= in14 in15)))\n(assert (not (= in14 in16)))\n(assert (not (= in14 in17)))\n(assert (not (= in14 in18)))\n(assert (not (= in14 in19)))\n(assert (not (= in14 in20)))\n(assert (not (= in14 in21)))\n(assert (not (= in14 in22)))\n(assert (not (= in14 in23)))\n(assert (not (= in14 in24)))\n(assert (not (= in14 in25)))\n(assert (not (= in15 in16)))\n(assert (not (= in15 in17)))\n(assert (not (= in15 in18)))\n(assert (not (= in15 in19)))\n(assert (not (= in15 in20)))\n(assert (not (= in15 in21)))\n(assert (not (= in15 in22)))\n(assert (not (= in15 in23)))\n(assert (not (= in15 in24)))\n(assert (not (= in15 in25)))\n(assert (not (= in16 in17)))\n(assert (not (= in16 in18)))\n(assert (not (= in16 in19)))\n(assert (not (= in16 in20)))\n(assert (not (= in16 in21)))\n(assert (not (= in16 in22)))\n(assert (not (= in16 in23)))\n(assert (not (= in16 in24)))\n(assert (not (= in16 in25)))\n(assert (not (= in17 in18)))\n(assert (not (= in17 in19)))\n(assert (not (= in17 in20)))\n(assert (not (= in17 in21)))\n(assert (not (= in17 in22)))\n(assert (not (= in17 in23)))\n(assert (not (= in17 in24)))\n(assert (not (= in17 in25)))\n(assert (not (= in18 in19)))\n(assert (not (= in18 in20)))\n(assert (not (= in18 in21)))\n(assert (not (= in18 in22)))\n(assert (not (= in18 in23)))\n(assert (not (= in18 in24)))\n(assert (not (= in18 in25)))\n(assert (not (= in19 in20)))\n(assert (not (= in19 in21)))\n(assert (not (= in19 in22)))\n(assert (not (= in19 in23)))\n(assert (not (= in19 in24)))\n(assert (not (= in19 in25)))\n(assert (not (= in20 in21)))\n(assert (not (= in20 in22)))\n(assert (not (= in20 in23)))\n(assert (not (= in20 in24)))\n(assert (not (= in20 in25)))\n(assert (not (= in21 in22)))\n(assert (not (= in21 in23)))\n(assert (not (= in21 in24)))\n(assert (not (= in21 in25)))\n(assert (not (= in22 in23)))\n(assert (not (= in22 in24)))\n(assert (not (= in22 in25)))\n(assert (not (= in23 in24)))\n(assert (not (= in23 in25)))\n(assert (not (= in24 in25)))",
        "equivalent": true
      },
      "27": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in0 in18))) (not ( = in0 in19))) (not ( = in0 in20))) (not ( = in0 in21))) (not ( = in0 in22))) (not ( = in0 in23))) (not ( = in0 in24))) (not ( = in0 in25))) (not ( = in0 in26))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in1 in18))) (not ( = in1 in19))) (not ( = in1 in20))) (not ( = in1 in21))) (not ( = in1 in22))) (not ( = in1 in23))) (not ( = in1 in24))) (not ( = in1 in25))) (not ( = in1 in26))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in2 in18))) (not ( = in2 in19))) (not ( = in2 in20))) (not ( = in2 in21))) (not ( = in2 in22))) (not ( = in2 in23))) (not ( = in2 in24))) (not ( = in2 in25))) (not ( = in2 in26))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in3 in18))) (not ( = in3 in19))) (not ( = in3 in20))) (not ( = in3 in21))) (not ( = in3 in22))) (not ( = in3 in23))) (not ( = in3 in24))) (not ( = in3 in25))) (not ( = in3 in26))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in4 in18))) (not ( = in4 in19))) (not ( = in4 in20))) (not ( = in4 in21))) (not ( = in4 in22))) (not ( = in4 in23))) (not ( = in4 in24))) (not ( = in4 in25))) (not ( = in4 in26))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in5 in18))) (not ( = in5 in19))) (not ( = in5 in20))) (not ( = in5 in21))) (not ( = in5 in22))) (not ( = in5 in23))) (not ( = in5 in24))) (not ( = in5 in25))) (not ( = in5 in26))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in6 in18))) (not ( = in6 in19))) (not ( = in6 in20))) (not ( = in6 in21))) (not ( = in6 in22))) (not ( = in6 in23))) (not ( = in6 in24))) (not ( = in6 in25))) (not ( = in6 in26))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in7 in18))) (not ( = in7 in19))) (not ( = in7 in20))) (not ( = in7 in21))) (not ( = in7 in22))) (not ( = in7 in23))) (not ( = in7 in24))) (not ( = in7 in25))) (not ( = in7 in26))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in8 in18))) (not ( = in8 in19))) (not ( = in8 in20))) (not ( = in8 in21))) (not ( = in8 in22))) (not ( = in8 in23))) (not ( = in8 in24))) (not ( = in8 in25))) (not ( = in8 in26))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in9 in18))) (not ( = in9 in19))) (not ( = in9 in20))) (not ( = in9 in21))) (not ( = in9 in22))) (not ( = in9 in23))) (not ( = in9 in24))) (not ( = in9 in25))) (not ( = in9 in26))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in10 in18))) (not ( = in10 in19))) (not ( = in10 in20))) (not ( = in10 in21))) (not ( = in10 in22))) (not ( = in10 in23))) (not ( = in10 in24))) (not ( = in10 in25))) (not ( = in10 in26))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in11 in18))) (not ( = in11 in19))) (not ( = in11 in20))) (not ( = in11 in21))) (not ( = in11 in22))) (not ( = in11 in23))) (not ( = in11 in24))) (not ( = in11 in25))) (not ( = in11 in26))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in12 in18))) (not ( = in12 in19))) (not ( = in12 in20))) (not ( = in12 in21))) (not ( = in12 in22))) (not ( = in12 in23))) (not ( = in12 in24))) (not ( = in12 in25))) (not ( = in12 in26))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in13 in18))) (not ( = in13 in19))) (not ( = in13 in20))) (not ( = in13 in21))) (not ( = in13 in22))) (not ( = in13 in23))) (not ( = in13 in24))) (not ( = in13 in25))) (not ( = in13 in26))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in14 in18))) (not ( = in14 in19))) (not ( = in14 in20))) (not ( = in14 in21))) (not ( = in14 in22))) (not ( = in14 in23))) (not ( = in14 in24))) (not ( = in14 in25))) (not ( = in14 in26))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in15 in18))) (not ( = in15 in19))) (not ( = in15 in20))) (not ( = in15 in21))) (not ( = in15 in22))) (not ( = in15 in23))) (not ( = in15 in24))) (not ( = in15 in25))) (not ( = in15 in26))) (not ( = in16 in17))) (not ( = in16 in18))) (not ( = in16 in19))) (not ( = in16 in20))) (not ( = in16 in21))) (not ( = in16 in22))) (not ( = in16 in23))) (not ( = in16 in24))) (not ( = in16 in25))) (not ( = in16 in26))) (not ( = in17 in18))) (not ( = in17 in19))) (not ( = in17 in20))) (not ( = in17 in21))) (not ( = in17 in22))) (not ( = in17 in23))) (not ( = in17 in24))) (not ( = in17 in25))) (not ( = in17 in26))) (not ( = in18 in19))) (not ( = in18 in20))) (not ( = in18 in21))) (not ( = in18 in22))) (not ( = in18 in23))) (not ( = in18 in24))) (not ( = in18 in25))) (not ( = in18 in26))) (not ( = in19 in20))) (not ( = in19 in21))) (not ( = in19 in22))) (not ( = in19 in23))) (not ( = in19 in24))) (not ( = in19 in25))) (not ( = in19 in26))) (not ( = in20 in21))) (not ( = in20 in22))) (not ( = in20 in23))) (not ( = in20 in24))) (not ( = in20 in25))) (not ( = in20 in26))) (not ( = in21 in22))) (not ( = in21 in23))) (not ( = in21 in24))) (not ( = in21 in25))) (not ( = in21 in26))) (not ( = in22 in23))) (not ( = in22 in24))) (not ( = in22 in25))) (not ( = in22 in26))) (not ( = in23 in24))) (not ( = in23 in25))) (not ( = in23 in26))) (not ( = in24 in25))) (not ( = in24 in26))) (not ( = in25 in26))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in0 in5)))\n(assert (not (= in0 in6)))\n(assert (not (= in0 in7)))\n(assert (not (= in0 in8)))\n(assert (not (= in0 in9)))\n(assert (not (= in0 in10)))\n(assert (not (= in0 in11)))\n(assert (not (= in0 in12)))\n(assert (not (= in0 in13)))\n(assert (not (= in0 in14)))\n(assert (not (= in0 in15)))\n(assert (not (= in0 in16)))\n(assert (not (= in0 in17)))\n(assert (not (= in0 in18)))\n(assert (not (= in0 in19)))\n(assert (not (= in0 in20)))\n(assert (not (= in0 in21)))\n(assert (not (= in0 in22)))\n(assert (not (= in0 in23)))\n(assert (not (= in0 in24)))\n(assert (not (= in0 in25)))\n(assert (not (= in0 in26)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in1 in5)))\n(assert (not (= in1 in6)))\n(assert (not (= in1 in7)))\n(assert (not (= in1 in8)))\n(assert (not (= in1 in9)))\n(assert (not (= in1 in10)))\n(assert (not (= in1 in11)))\n(assert (not (= in1 in12)))\n(assert (not (= in1 in13)))\n(assert (not (= in1 in14)))\n(assert (not (= in1 in15)))\n(assert (not (= in1 in16)))\n(assert (not (= in1 in17)))\n(assert (not (= in1 in18)))\n(assert (not (= in1 in19)))\n(assert (not (= in1 in20)))\n(assert (not (= in1 in21)))\n(assert (not (= in1 in22)))\n(assert (not (= in1 in23)))\n(assert (not (= in1 in24)))\n(assert (not (= in1 in25)))\n(assert (not (= in1 in26)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in2 in5)))\n(assert (not (= in2 in6)))\n(assert (not (= in2 in7)))\n(assert (not (= in2 in8)))\n(assert (not (= in2 in9)))\n(assert (not (= in2 in10)))\n(assert (not (= in2 in11)))\n(assert (not (= in2 in12)))\n(assert (not (= in2 in13)))\n(assert (not (= in2 in14)))\n(assert (not (= in2 in15)))\n(assert (not (= in2 in16)))\n(assert (not (= in2 in17)))\n(assert (not (= in2 in18)))\n(assert (not (= in2 in19)))\n(assert (not (= in2 in20)))\n(assert (not (= in2 in21)))\n(assert (not (= in2 in22)))\n(assert (not (= in2 in23)))\n(assert (not (= in2 in24)))\n(assert (not (= in2 in25)))\n(assert (not (= in2 in26)))\n(assert (not (= in3 in4)))\n(assert (not (= in3 in5)))\n(assert (not (= in3 in6)))\n(assert (not (= in3 in7)))\n(assert (not (= in3 in8)))\n(assert (not (= in3 in9)))\n(assert (not (= in3 in10)))\n(assert (not (= in3 in11)))\n(assert (not (= in3 in12)))\n(assert (not (= in3 in13)))\n(assert (not (= in3 in14)))\n(assert (not (= in3 in15)))\n(assert (not (= in3 in16)))\n(assert (not (= in3 in17)))\n(assert (not (= in3 in18)))\n(assert (not (= in3 in19)))\n(assert (not (= in3 in20)))\n(assert (not (= in3 in21)))\n(assert (not (= in3 in22)))\n(assert (not (= in3 in23)))\n(assert (not (= in3 in24)))\n(assert (not (= in3 in25)))\n(assert (not (= in3 in26)))\n(assert (not (= in4 in5)))\n(assert (not (= in4 in6)))\n(assert (not (= in4 in7)))\n(assert (not (= in4 in8)))\n(assert (not (= in4 in9)))\n(assert (not (= in4 in10)))\n(assert (not (= in4 in11)))\n(assert (not (= in4 in12)))\n(assert (not (= in4 in13)))\n(assert (not (= in4 in14)))\n(assert (not (= in4 in15)))\n(assert (not (= in4 in16)))\n(assert (not (= in4 in17)))\n(assert (not (= in4 in18)))\n(assert (not (= in4 in19)))\n(assert (not (= in4 in20)))\n(assert (not (= in4 in21)))\n(assert (not (= in4 in22)))\n(assert (not (= in4 in23)))\n(assert (not (= in4 in24)))\n(assert (not (= in4 in25)))\n(assert (not (= in4 in26)))\n(assert (not (= in5 in6)))\n(assert (not (= in5 in7)))\n(assert (not (= in5 in8)))\n(assert (not (= in5 in9)))\n(assert (not (= in5 in10)))\n(assert (not (= in5 in11)))\n(assert (not (= in5 in12)))\n(assert (not (= in5 in13)))\n(assert (not (= in5 in14)))\n(assert (not (= in5 in15)))\n(assert (not (= in5 in16)))\n(assert (not (= in5 in17)))\n(assert (not (= in5 in18)))\n(assert (not (= in5 in19)))\n(assert (not (= in5 in20)))\n(assert (not (= in5 in21)))\n(assert (not (= in5 in22)))\n(assert (not (= in5 in23)))\n(assert (not (= in5 in24)))\n(assert (not (= in5 in25)))\n(assert (not (= in5 in26)))\n(assert (not (= in6 in7)))\n(assert (not (= in6 in8)))\n(assert (not (= in6 in9)))\n(assert (not (= in6 in10)))\n(assert (not (= in6 in11)))\n(assert (not (= in6 in12)))\n(assert (not (= in6 in13)))\n(assert (not (= in6 in14)))\n(assert (not (= in6 in15)))\n(assert (not (= in6 in16)))\n(assert (not (= in6 in17)))\n(assert (not (= in6 in18)))\n(assert (not (= in6 in19)))\n(assert (not (= in6 in20)))\n(assert (not (= in6 in21)))\n(assert (not (= in6 in22)))\n(assert (not (= in6 in23)))\n(assert (not (= in6 in24)))\n(assert (not (= in6 in25)))\n(assert (not (= in6 in26)))\n(assert (not (= in7 in8)))\n(assert (not (= in7 in9)))\n(assert (not (= in7 in10)))\n(assert (not (= in7 in11)))\n(assert (not (= in7 in12)))\n(assert (not (= in7 in13)))\n(assert (not (= in7 in14)))\n(assert (not (= in7 in15)))\n(assert (not (= in7 in16)))\n(assert (not (= in7 in17)))\n(assert (not (= in7 in18)))\n(assert (not (= in7 in19)))\n(assert (not (= in7 in20)))\n(assert (not (= in7 in21)))\n(assert (not (= in7 in22)))\n(assert (not (= in7 in23)))\n(assert (not (= in7 in24)))\n(assert (not (= in7 in25)))\n(assert (not (= in7 in26)))\n(assert (not (= in8 in9)))\n(assert (not (= in8 in10)))\n(assert (not (= in8 in11)))\n(assert (not (= in8 in12)))\n(assert (not (= in8 in13)))\n(assert (not (= in8 in14)))\n(assert (not (= in8 in15)))\n(assert (not (= in8 in16)))\n(assert (not (= in8 in17)))\n(assert (not (= in8 in18)))\n(assert (not (= in8 in19)))\n(assert (not (= in8 in20)))\n(assert (not (= in8 in21)))\n(assert (not (= in8 in22)))\n(assert (not (= in8 in23)))\n(assert (not (= in8 in24)))\n(assert (not (= in8 in25)))\n(assert (not (= in8 in26)))\n(assert (not (= in9 in10)))\n(assert (not (= in9 in11)))\n(assert (not (= in9 in12)))\n(assert (not (= in9 in13)))\n(assert (not (= in9 in14)))\n(assert (not (= in9 in15)))\n(assert (not (= in9 in16)))\n(assert (not (= in9 in17)))\n(assert (not (= in9 in18)))\n(assert (not (= in9 in19)))\n(assert (not (= in9 in20)))\n(assert (not (= in9 in21)))\n(assert (not (= in9 in22)))\n(assert (not (= in9 in23)))\n(assert (not (= in9 in24)))\n(assert (not (= in9 in25)))\n(assert (not (= in9 in26)))\n(assert (not (= in10 in11)))\n(assert (not (= in10 in12)))\n(assert (not (= in10 in13)))\n(assert (not (= in10 in14)))\n(assert (not (= in10 in15)))\n(assert (not (= in10 in16)))\n(assert (not (= in10 in17)))\n(assert (not (= in10 in18)))\n(assert (not (= in10 in19)))\n(assert (not (= in10 in20)))\n(assert (not (= in10 in21)))\n(assert (not (= in10 in22)))\n(assert (not (= in10 in23)))\n(assert (not (= in10 in24)))\n(assert (not (= in10 in25)))\n(assert (not (= in10 in26)))\n(assert (not (= in11 in12)))\n(assert (not (= in11 in13)))\n(assert (not (= in11 in14)))\n(assert (not (= in11 in15)))\n(assert (not (= in11 in16)))\n(assert (not (= in11 in17)))\n(assert (not (= in11 in18)))\n(assert (not (= in11 in19)))\n(assert (not (= in11 in20)))\n(assert (not (= in11 in21)))\n(assert (not (= in11 in22)))\n(assert (not (= in11 in23)))\n(assert (not (= in11 in24)))\n(assert (not (= in11 in25)))\n(assert (not (= in11 in26)))\n(assert (not (= in12 in13)))\n(assert (not (= in12 in14)))\n(assert (not (= in12 in15)))\n(assert (not (= in12 in16)))\n(assert (not (= in12 in17)))\n(assert (not (= in12 in18)))\n(assert (not (= in12 in19)))\n(assert (not (= in12 in20)))\n(assert (not (= in12 in21)))\n(assert (not (= in12 in22)))\n(assert (not (= in12 in23)))\n(assert (not (= in12 in24)))\n(assert (not (= in12 in25)))\n(assert (not (= in12 in26)))\n(assert (not (= in13 in14)))\n(assert (not (= in13 in15)))\n(assert (not (= in13 in16)))\n(assert (not (= in13 in17)))\n(assert (not (= in13 in18)))\n(assert (not (= in13 in19)))\n(assert (not (= in13 in20)))\n(assert (not (= in13 in21)))\n(assert (not (= in13 in22)))\n(assert (not (= in13 in23)))\n(assert (not (= in13 in24)))\n(assert (not (= in13 in25)))\n(assert (not (= in13 in26)))\n(assert (not (= in14 in15)))\n(assert (not (= in14 in16)))\n(assert (not (= in14 in17)))\n(assert (not (= in14 in18)))\n(assert (not (= in14 in19)))\n(assert (not (= in14 in20)))\n(assert (not (= in14 in21)))\n(assert (not (= in14 in22)))\n(assert (not (= in14 in23)))\n(assert (not (= in14 in24)))\n(assert (not (= in14 in25)))\n(assert (not (= in14 in26)))\n(assert (not (= in15 in16)))\n(assert (not (= in15 in17)))\n(assert (not (= in15 in18)))\n(assert (not (= in15 in19)))\n(assert (not (= in15 in20)))\n(assert (not (= in15 in21)))\n(assert (not (= in15 in22)))\n(assert (not (= in15 in23)))\n(assert (not (= in15 in24)))\n(assert (not (= in15 in25)))\n(assert (not (= in15 in26)))\n(assert (not (= in16 in17)))\n(assert (not (= in16 in18)))\n(assert (not (= in16 in19)))\n(assert (not (= in16 in20)))\n(assert (not (= in16 in21)))\n(assert (not (= in16 in22)))\n(assert (not (= in16 in23)))\n(assert (not (= in16 in24)))\n(assert (not (= in16 in25)))\n(assert (not (= in16 in26)))\n(assert (not (= in17 in18)))\n(assert (not (= in17 in19)))\n(assert (not (= in17 in20)))\n(assert (not (= in17 in21)))\n(assert (not (= in17 in22)))\n(assert (not (= in17 in23)))\n(assert (not (= in17 in24)))\n(assert (not (= in17 in25)))\n(assert (not (= in17 in26)))\n(assert (not (= in18 in19)))\n(assert (not (= in18 in20)))\n(assert (not (= in18 in21)))\n(assert (not (= in18 in22)))\n(assert (not (= in18 in23)))\n(assert (not (= in18 in24)))\n(assert (not (= in18 in25)))\n(assert (not (= in18 in26)))\n(assert (not (= in19 in20)))\n(assert (not (= in19 in21)))\n(assert (not (= in19 in22)))\n(assert (not (= in19 in23)))\n(assert (not (= in19 in24)))\n(assert (not (= in19 in25)))\n(assert (not (= in19 in26)))\n(assert (not (= in20 in21)))\n(assert (not (= in20 in22)))\n(assert (not (= in20 in23)))\n(assert (not (= in20 in24)))\n(assert (not (= in20 in25)))\n(assert (not (= in20 in26)))\n(assert (not (= in21 in22)))\n(assert (not (= in21 in23)))\n(assert (not (= in21 in24)))\n(assert (not (= in21 in25)))\n(assert (not (= in21 in26)))\n(assert (not (= in22 in23)))\n(assert (not (= in22 in24)))\n(assert (not (= in22 in25)))\n(assert (not (= in22 in26)))\n(assert (not (= in23 in24)))\n(assert (not (= in23 in25)))\n(assert (not (= in23 in26)))\n(assert (not (= in24 in25)))\n(assert (not (= in24 in26)))\n(assert (not (= in25 in26)))",
        "equivalent": true
      },
      "28": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in0 in18))) (not ( = in0 in19))) (not ( = in0 in20))) (not ( = in0 in21))) (not ( = in0 in22))) (not ( = in0 in23))) (not ( = in0 in24))) (not ( = in0 in25))) (not ( = in0 in26))) (not ( = in0 in27))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in1 in18))) (not ( = in1 in19))) (not ( = in1 in20))) (not ( = in1 in21))) (not ( = in1 in22))) (not ( = in1 in23))) (not ( = in1 in24))) (not ( = in1 in25))) (not ( = in1 in26))) (not ( = in1 in27))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in2 in18))) (not ( = in2 in19))) (not ( = in2 in20))) (not ( = in2 in21))) (not ( = in2 in22))) (not ( = in2 in23))) (not ( = in2 in24))) (not ( = in2 in25))) (not ( = in2 in26))) (not ( = in2 in27))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in3 in18))) (not ( = in3 in19))) (not ( = in3 in20))) (not ( = in3 in21))) (not ( = in3 in22))) (not ( = in3 in23))) (not ( = in3 in24))) (not ( = in3 in25))) (not ( = in3 in26))) (not ( = in3 in27))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in4 in18))) (not ( = in4 in19))) (not ( = in4 in20))) (not ( = in4 in21))) (not ( = in4 in22))) (not ( = in4 in23))) (not ( = in4 in24))) (not ( = in4 in25))) (not ( = in4 in26))) (not ( = in4 in27))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in5 in18))) (not ( = in5 in19))) (not ( = in5 in20))) (not ( = in5 in21))) (not ( = in5 in22))) (not ( = in5 in23))) (not ( = in5 in24))) (not ( = in5 in25))) (not ( = in5 in26))) (not ( = in5 in27))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in6 in18))) (not ( = in6 in19))) (not ( = in6 in20))) (not ( = in6 in21))) (not ( = in6 in22))) (not ( = in6 in23))) (not ( = in6 in24))) (not ( = in6 in25))) (not ( = in6 in26))) (not ( = in6 in27))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in7 in18))) (not ( = in7 in19))) (not ( = in7 in20))) (not ( = in7 in21))) (not ( = in7 in22))) (not ( = in7 in23))) (not ( = in7 in24))) (not ( = in7 in25))) (not ( = in7 in26))) (not ( = in7 in27))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in8 in18))) (not ( = in8 in19))) (not ( = in8 in20))) (not ( = in8 in21))) (not ( = in8 in22))) (not ( = in8 in23))) (not ( = in8 in24))) (not ( = in8 in25))) (not ( = in8 in26))) (not ( = in8 in27))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in9 in18))) (not ( = in9 in19))) (not ( = in9 in20))) (not ( = in9 in21))) (not ( = in9 in22))) (not ( = in9 in23))) (not ( = in9 in24))) (not ( = in9 in25))) (not ( = in9 in26))) (not ( = in9 in27))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in10 in18))) (not ( = in10 in19))) (not ( = in10 in20))) (not ( = in10 in21))) (not ( = in10 in22))) (not ( = in10 in23))) (not ( = in10 in24))) (not ( = in10 in25))) (not ( = in10 in26))) (not ( = in10 in27))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in11 in18))) (not ( = in11 in19))) (not ( = in11 in20))) (not ( = in11 in21))) (not ( = in11 in22))) (not ( = in11 in23))) (not ( = in11 in24))) (not ( = in11 in25))) (not ( = in11 in26))) (not ( = in11 in27))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in12 in18))) (not ( = in12 in19))) (not ( = in12 in20))) (not ( = in12 in21))) (not ( = in12 in22))) (not ( = in12 in23))) (not ( = in12 in24))) (not ( = in12 in25))) (not ( = in12 in26))) (not ( = in12 in27))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in13 in18))) (not ( = in13 in19))) (not ( = in13 in20))) (not ( = in13 in21))) (not ( = in13 in22))) (not ( = in13 in23))) (not ( = in13 in24))) (not ( = in13 in25))) (not ( = in13 in26))) (not ( = in13 in27))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in14 in18))) (not ( = in14 in19))) (not ( = in14 in20))) (not ( = in14 in21))) (not ( = in14 in22))) (not ( = in14 in23))) (not ( = in14 in24))) (not ( = in14 in25))) (not ( = in14 in26))) (not ( = in14 in27))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in15 in18))) (not ( = in15 in19))) (not ( = in15 in20))) (not ( = in15 in21))) (not ( = in15 in22))) (not ( = in15 in23))) (not ( = in15 in24))) (not ( = in15 in25))) (not ( = in15 in26))) (not ( = in15 in27))) (not ( = in16 in17))) (not ( = in16 in18))) (not ( = in16 in19))) (not ( = in16 in20))) (not ( = in16 in21))) (not ( = in16 in22))) (not ( = in16 in23))) (not ( = in16 in24))) (not ( = in16 in25))) (not ( = in16 in26))) (not ( = in16 in27))) (not ( = in17 in18))) (not ( = in17 in19))) (not ( = in17 in20))) (not ( = in17 in21))) (not ( = in17 in22))) (not ( = in17 in23))) (not ( = in17 in24))) (not ( = in17 in25))) (not ( = in17 in26))) (not ( = in17 in27))) (not ( = in18 in19))) (not ( = in18 in20))) (not ( = in18 in21))) (not ( = in18 in22))) (not ( = in18 in23))) (not ( = in18 in24))) (not ( = in18 in25))) (not ( = in18 in26))) (not ( = in18 in27))) (not ( = in19 in20))) (not ( = in19 in21))) (not ( = in19 in22))) (not ( = in19 in23))) (not ( = in19 in24))) (not ( = in19 in25))) (not ( = in19 in26))) (not ( = in19 in27))) (not ( = in20 in21))) (not ( = in20 in22))) (not ( = in20 in23))) (not ( = in20 in24))) (not ( = in20 in25))) (not ( = in20 in26))) (not ( = in20 in27))) (not ( = in21 in22))) (not ( = in21 in23))) (not ( = in21 in24))) (not ( = in21 in25))) (not ( = in21 in26))) (not ( = in21 in27))) (not ( = in22 in23))) (not ( = in22 in24))) (not ( = in22 in25))) (not ( = in22 in26))) (not ( = in22 in27))) (not ( = in23 in24))) (not ( = in23 in25))) (not ( = in23 in26))) (not ( = in23 in27))) (not ( = in24 in25))) (not ( = in24 in26))) (not ( = in24 in27))) (not ( = in25 in26))) (not ( = in25 in27))) (not ( = in26 in27))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in0 in5)))\n(assert (not (= in0 in6)))\n(assert (not (= in0 in7)))\n(assert (not (= in0 in8)))\n(assert (not (= in0 in9)))\n(assert (not (= in0 in10)))\n(assert (not (= in0 in11)))\n(assert (not (= in0 in12)))\n(assert (not (= in0 in13)))\n(assert (not (= in0 in14)))\n(assert (not (= in0 in15)))\n(assert (not (= in0 in16)))\n(assert (not (= in0 in17)))\n(assert (not (= in0 in18)))\n(assert (not (= in0 in19)))\n(assert (not (= in0 in20)))\n(assert (not (= in0 in21)))\n(assert (not (= in0 in22)))\n(assert (not (= in0 in23)))\n(assert (not (= in0 in24)))\n(assert (not (= in0 in25)))\n(assert (not (= in0 in26)))\n(assert (not (= in0 in27)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in1 in5)))\n(assert (not (= in1 in6)))\n(assert (not (= in1 in7)))\n(assert (not (= in1 in8)))\n(assert (not (= in1 in9)))\n(assert (not (= in1 in10)))\n(assert (not (= in1 in11)))\n(assert (not (= in1 in12)))\n(assert (not (= in1 in13)))\n(assert (not (= in1 in14)))\n(assert (not (= in1 in15)))\n(assert (not (= in1 in16)))\n(assert (not (= in1 in17)))\n(assert (not (= in1 in18)))\n(assert (not (= in1 in19)))\n(assert (not (= in1 in20)))\n(assert (not (= in1 in21)))\n(assert (not (= in1 in22)))\n(assert (not (= in1 in23)))\n(assert (not (= in1 in24)))\n(assert (not (= in1 in25)))\n(assert (not (= in1 in26)))\n(assert (not (= in1 in27)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in2 in5)))\n(assert (not (= in2 in6)))\n(assert (not (= in2 in7)))\n(assert (not (= in2 in8)))\n(assert (not (= in2 in9)))\n(assert (not (= in2 in10)))\n(assert (not (= in2 in11)))\n(assert (not (= in2 in12)))\n(assert (not (= in2 in13)))\n(assert (not (= in2 in14)))\n(assert (not (= in2 in15)))\n(assert (not (= in2 in16)))\n(assert (not (= in2 in17)))\n(assert (not (= in2 in18)))\n(assert (not (= in2 in19)))\n(assert (not (= in2 in20)))\n(assert (not (= in2 in21)))\n(assert (not (= in2 in22)))\n(assert (not (= in2 in23)))\n(assert (not (= in2 in24)))\n(assert (not (= in2 in25)))\n(assert (not (= in2 in26)))\n(assert (not (= in2 in27)))\n(assert (not (= in3 in4)))\n(assert (not (= in3 in5)))\n(assert (not (= in3 in6)))\n(assert (not (= in3 in7)))\n(assert (not (= in3 in8)))\n(assert (not (= in3 in9)))\n(assert (not (= in3 in10)))\n(assert (not (= in3 in11)))\n(assert (not (= in3 in12)))\n(assert (not (= in3 in13)))\n(assert (not (= in3 in14)))\n(assert (not (= in3 in15)))\n(assert (not (= in3 in16)))\n(assert (not (= in3 in17)))\n(assert (not (= in3 in18)))\n(assert (not (= in3 in19)))\n(assert (not (= in3 in20)))\n(assert (not (= in3 in21)))\n(assert (not (= in3 in22)))\n(assert (not (= in3 in23)))\n(assert (not (= in3 in24)))\n(assert (not (= in3 in25)))\n(assert (not (= in3 in26)))\n(assert (not (= in3 in27)))\n(assert (not (= in4 in5)))\n(assert (not (= in4 in6)))\n(assert (not (= in4 in7)))\n(assert (not (= in4 in8)))\n(assert (not (= in4 in9)))\n(assert (not (= in4 in10)))\n(assert (not (= in4 in11)))\n(assert (not (= in4 in12)))\n(assert (not (= in4 in13)))\n(assert (not (= in4 in14)))\n(assert (not (= in4 in15)))\n(assert (not (= in4 in16)))\n(assert (not (= in4 in17)))\n(assert (not (= in4 in18)))\n(assert (not (= in4 in19)))\n(assert (not (= in4 in20)))\n(assert (not (= in4 in21)))\n(assert (not (= in4 in22)))\n(assert (not (= in4 in23)))\n(assert (not (= in4 in24)))\n(assert (not (= in4 in25)))\n(assert (not (= in4 in26)))\n(assert (not (= in4 in27)))\n(assert (not (= in5 in6)))\n(assert (not (= in5 in7)))\n(assert (not (= in5 in8)))\n(assert (not (= in5 in9)))\n(assert (not (= in5 in10)))\n(assert (not (= in5 in11)))\n(assert (not (= in5 in12)))\n(assert (not (= in5 in13)))\n(assert (not (= in5 in14)))\n(assert (not (= in5 in15)))\n(assert (not (= in5 in16)))\n(assert (not (= in5 in17)))\n(assert (not (= in5 in18)))\n(assert (not (= in5 in19)))\n(assert (not (= in5 in20)))\n(assert (not (= in5 in21)))\n(assert (not (= in5 in22)))\n(assert (not (= in5 in23)))\n(assert (not (= in5 in24)))\n(assert (not (= in5 in25)))\n(assert (not (= in5 in26)))\n(assert (not (= in5 in27)))\n(assert (not (= in6 in7)))\n(assert (not (= in6 in8)))\n(assert (not (= in6 in9)))\n(assert (not (= in6 in10)))\n(assert (not (= in6 in11)))\n(assert (not (= in6 in12)))\n(assert (not (= in6 in13)))\n(assert (not (= in6 in14)))\n(assert (not (= in6 in15)))\n(assert (not (= in6 in16)))\n(assert (not (= in6 in17)))\n(assert (not (= in6 in18)))\n(assert (not (= in6 in19)))\n(assert (not (= in6 in20)))\n(assert (not (= in6 in21)))\n(assert (not (= in6 in22)))\n(assert (not (= in6 in23)))\n(assert (not (= in6 in24)))\n(assert (not (= in6 in25)))\n(assert (not (= in6 in26)))\n(assert (not (= in6 in27)))\n(assert (not (= in7 in8)))\n(assert (not (= in7 in9)))\n(assert (not (= in7 in10)))\n(assert (not (= in7 in11)))\n(assert (not (= in7 in12)))\n(assert (not (= in7 in13)))\n(assert (not (= in7 in14)))\n(assert (not (= in7 in15)))\n(assert (not (= in7 in16)))\n(assert (not (= in7 in17)))\n(assert (not (= in7 in18)))\n(assert (not (= in7 in19)))\n(assert (not (= in7 in20)))\n(assert (not (= in7 in21)))\n(assert (not (= in7 in22)))\n(assert (not (= in7 in23)))\n(assert (not (= in7 in24)))\n(assert (not (= in7 in25)))\n(assert (not (= in7 in26)))\n(assert (not (= in7 in27)))\n(assert (not (= in8 in9)))\n(assert (not (= in8 in10)))\n(assert (not (= in8 in11)))\n(assert (not (= in8 in12)))\n(assert (not (= in8 in13)))\n(assert (not (= in8 in14)))\n(assert (not (= in8 in15)))\n(assert (not (= in8 in16)))\n(assert (not (= in8 in17)))\n(assert (not (= in8 in18)))\n(assert (not (= in8 in19)))\n(assert (not (= in8 in20)))\n(assert (not (= in8 in21)))\n(assert (not (= in8 in22)))\n(assert (not (= in8 in23)))\n(assert (not (= in8 in24)))\n(assert (not (= in8 in25)))\n(assert (not (= in8 in26)))\n(assert (not (= in8 in27)))\n(assert (not (= in9 in10)))\n(assert (not (= in9 in11)))\n(assert (not (= in9 in12)))\n(assert (not (= in9 in13)))\n(assert (not (= in9 in14)))\n(assert (not (= in9 in15)))\n(assert (not (= in9 in16)))\n(assert (not (= in9 in17)))\n(assert (not (= in9 in18)))\n(assert (not (= in9 in19)))\n(assert (not (= in9 in20)))\n(assert (not (= in9 in21)))\n(assert (not (= in9 in22)))\n(assert (not (= in9 in23)))\n(assert (not (= in9 in24)))\n(assert (not (= in9 in25)))\n(assert (not (= in9 in26)))\n(assert (not (= in9 in27)))\n(assert (not (= in10 in11)))\n(assert (not (= in10 in12)))\n(assert (not (= in10 in13)))\n(assert (not (= in10 in14)))\n(assert (not (= in10 in15)))\n(assert (not (= in10 in16)))\n(assert (not (= in10 in17)))\n(assert (not (= in10 in18)))\n(assert (not (= in10 in19)))\n(assert (not (= in10 in20)))\n(assert (not (= in10 in21)))\n(assert (not (= in10 in22)))\n(assert (not (= in10 in23)))\n(assert (not (= in10 in24)))\n(assert (not (= in10 in25)))\n(assert (not (= in10 in26)))\n(assert (not (= in10 in27)))\n(assert (not (= in11 in12)))\n(assert (not (= in11 in13)))\n(assert (not (= in11 in14)))\n(assert (not (= in11 in15)))\n(assert (not (= in11 in16)))\n(assert (not (= in11 in17)))\n(assert (not (= in11 in18)))\n(assert (not (= in11 in19)))\n(assert (not (= in11 in20)))\n(assert (not (= in11 in21)))\n(assert (not (= in11 in22)))\n(assert (not (= in11 in23)))\n(assert (not (= in11 in24)))\n(assert (not (= in11 in25)))\n(assert (not (= in11 in26)))\n(assert (not (= in11 in27)))\n(assert (not (= in12 in13)))\n(assert (not (= in12 in14)))\n(assert (not (= in12 in15)))\n(assert (not (= in12 in16)))\n(assert (not (= in12 in17)))\n(assert (not (= in12 in18)))\n(assert (not (= in12 in19)))\n(assert (not (= in12 in20)))\n(assert (not (= in12 in21)))\n(assert (not (= in12 in22)))\n(assert (not (= in12 in23)))\n(assert (not (= in12 in24)))\n(assert (not (= in12 in25)))\n(assert (not (= in12 in26)))\n(assert (not (= in12 in27)))\n(assert (not (= in13 in14)))\n(assert (not (= in13 in15)))\n(assert (not (= in13 in16)))\n(assert (not (= in13 in17)))\n(assert (not (= in13 in18)))\n(assert (not (= in13 in19)))\n(assert (not (= in13 in20)))\n(assert (not (= in13 in21)))\n(assert (not (= in13 in22)))\n(assert (not (= in13 in23)))\n(assert (not (= in13 in24)))\n(assert (not (= in13 in25)))\n(assert (not (= in13 in26)))\n(assert (not (= in13 in27)))\n(assert (not (= in14 in15)))\n(assert (not (= in14 in16)))\n(assert (not (= in14 in17)))\n(assert (not (= in14 in18)))\n(assert (not (= in14 in19)))\n(assert (not (= in14 in20)))\n(assert (not (= in14 in21)))\n(assert (not (= in14 in22)))\n(assert (not (= in14 in23)))\n(assert (not (= in14 in24)))\n(assert (not (= in14 in25)))\n(assert (not (= in14 in26)))\n(assert (not (= in14 in27)))\n(assert (not (= in15 in16)))\n(assert (not (= in15 in17)))\n(assert (not (= in15 in18)))\n(assert (not (= in15 in19)))\n(assert (not (= in15 in20)))\n(assert (not (= in15 in21)))\n(assert (not (= in15 in22)))\n(assert (not (= in15 in23)))\n(assert (not (= in15 in24)))\n(assert (not (= in15 in25)))\n(assert (not (= in15 in26)))\n(assert (not (= in15 in27)))\n(assert (not (= in16 in17)))\n(assert (not (= in16 in18)))\n(assert (not (= in16 in19)))\n(assert (not (= in16 in20)))\n(assert (not (= in16 in21)))\n(assert (not (= in16 in22)))\n(assert (not (= in16 in23)))\n(assert (not (= in16 in24)))\n(assert (not (= in16 in25)))\n(assert (not (= in16 in26)))\n(assert (not (= in16 in27)))\n(assert (not (= in17 in18)))\n(assert (not (= in17 in19)))\n(assert (not (= in17 in20)))\n(assert (not (= in17 in21)))\n(assert (not (= in17 in22)))\n(assert (not (= in17 in23)))\n(assert (not (= in17 in24)))\n(assert (not (= in17 in25)))\n(assert (not (= in17 in26)))\n(assert (not (= in17 in27)))\n(assert (not (= in18 in19)))\n(assert (not (= in18 in20)))\n(assert (not (= in18 in21)))\n(assert (not (= in18 in22)))\n(assert (not (= in18 in23)))\n(assert (not (= in18 in24)))\n(assert (not (= in18 in25)))\n(assert (not (= in18 in26)))\n(assert (not (= in18 in27)))\n(assert (not (= in19 in20)))\n(assert (not (= in19 in21)))\n(assert (not (= in19 in22)))\n(assert (not (= in19 in23)))\n(assert (not (= in19 in24)))\n(assert (not (= in19 in25)))\n(assert (not (= in19 in26)))\n(assert (not (= in19 in27)))\n(assert (not (= in20 in21)))\n(assert (not (= in20 in22)))\n(assert (not (= in20 in23)))\n(assert (not (= in20 in24)))\n(assert (not (= in20 in25)))\n(assert (not (= in20 in26)))\n(assert (not (= in20 in27)))\n(assert (not (= in21 in22)))\n(assert (not (= in21 in23)))\n(assert (not (= in21 in24)))\n(assert (not (= in21 in25)))\n(assert (not (= in21 in26)))\n(assert (not (= in21 in27)))\n(assert (not (= in22 in23)))\n(assert (not (= in22 in24)))\n(assert (not (= in22 in25)))\n(assert (not (= in22 in26)))\n(assert (not (= in22 in27)))\n(assert (not (= in23 in24)))\n(assert (not (= in23 in25)))\n(assert (not (= in23 in26)))\n(assert (not (= in23 in27)))\n(assert (not (= in24 in25)))\n(assert (not (= in24 in26)))\n(assert (not (= in24 in27)))\n(assert (not (= in25 in26)))\n(assert (not (= in25 in27)))\n(assert (not (= in26 in27)))",
        "equivalent": true
      },
      "29": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in0 in18))) (not ( = in0 in19))) (not ( = in0 in20))) (not ( = in0 in21))) (not ( = in0 in22))) (not ( = in0 in23))) (not ( = in0 in24))) (not ( = in0 in25))) (not ( = in0 in26))) (not ( = in0 in27))) (not ( = in0 in28))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in1 in18))) (not ( = in1 in19))) (not ( = in1 in20))) (not ( = in1 in21))) (not ( = in1 in22))) (not ( = in1 in23))) (not ( = in1 in24))) (not ( = in1 in25))) (not ( = in1 in26))) (not ( = in1 in27))) (not ( = in1 in28))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in2 in18))) (not ( = in2 in19))) (not ( = in2 in20))) (not ( = in2 in21))) (not ( = in2 in22))) (not ( = in2 in23))) (not ( = in2 in24))) (not ( = in2 in25))) (not ( = in2 in26))) (not ( = in2 in27))) (not ( = in2 in28))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in3 in18))) (not ( = in3 in19))) (not ( = in3 in20))) (not ( = in3 in21))) (not ( = in3 in22))) (not ( = in3 in23))) (not ( = in3 in24))) (not ( = in3 in25))) (not ( = in3 in26))) (not ( = in3 in27))) (not ( = in3 in28))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in4 in18))) (not ( = in4 in19))) (not ( = in4 in20))) (not ( = in4 in21))) (not ( = in4 in22))) (not ( = in4 in23))) (not ( = in4 in24))) (not ( = in4 in25))) (not ( = in4 in26))) (not ( = in4 in27))) (not ( = in4 in28))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in5 in18))) (not ( = in5 in19))) (not ( = in5 in20))) (not ( = in5 in21))) (not ( = in5 in22))) (not ( = in5 in23))) (not ( = in5 in24))) (not ( = in5 in25))) (not ( = in5 in26))) (not ( = in5 in27))) (not ( = in5 in28))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in6 in18))) (not ( = in6 in19))) (not ( = in6 in20))) (not ( = in6 in21))) (not ( = in6 in22))) (not ( = in6 in23))) (not ( = in6 in24))) (not ( = in6 in25))) (not ( = in6 in26))) (not ( = in6 in27))) (not ( = in6 in28))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in7 in18))) (not ( = in7 in19))) (not ( = in7 in20))) (not ( = in7 in21))) (not ( = in7 in22))) (not ( = in7 in23))) (not ( = in7 in24))) (not ( = in7 in25))) (not ( = in7 in26))) (not ( = in7 in27))) (not ( = in7 in28))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in8 in18))) (not ( = in8 in19))) (not ( = in8 in20))) (not ( = in8 in21))) (not ( = in8 in22))) (not ( = in8 in23))) (not ( = in8 in24))) (not ( = in8 in25))) (not ( = in8 in26))) (not ( = in8 in27))) (not ( = in8 in28))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in9 in18))) (not ( = in9 in19))) (not ( = in9 in20))) (not ( = in9 in21))) (not ( = in9 in22))) (not ( = in9 in23))) (not ( = in9 in24))) (not ( = in9 in25))) (not ( = in9 in26))) (not ( = in9 in27))) (not ( = in9 in28))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in10 in18))) (not ( = in10 in19))) (not ( = in10 in20))) (not ( = in10 in21))) (not ( = in10 in22))) (not ( = in10 in23))) (not ( = in10 in24))) (not ( = in10 in25))) (not ( = in10 in26))) (not ( = in10 in27))) (not ( = in10 in28))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in11 in18))) (not ( = in11 in19))) (not ( = in11 in20))) (not ( = in11 in21))) (not ( = in11 in22))) (not ( = in11 in23))) (not ( = in11 in24))) (not ( = in11 in25))) (not ( = in11 in26))) (not ( = in11 in27))) (not ( = in11 in28))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in12 in18))) (not ( = in12 in19))) (not ( = in12 in20))) (not ( = in12 in21))) (not ( = in12 in22))) (not ( = in12 in23))) (not ( = in12 in24))) (not ( = in12 in25))) (not ( = in12 in26))) (not ( = in12 in27))) (not ( = in12 in28))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in13 in18))) (not ( = in13 in19))) (not ( = in13 in20))) (not ( = in13 in21))) (not ( = in13 in22))) (not ( = in13 in23))) (not ( = in13 in24))) (not ( = in13 in25))) (not ( = in13 in26))) (not ( = in13 in27))) (not ( = in13 in28))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in14 in18))) (not ( = in14 in19))) (not ( = in14 in20))) (not ( = in14 in21))) (not ( = in14 in22))) (not ( = in14 in23))) (not ( = in14 in24))) (not ( = in14 in25))) (not ( = in14 in26))) (not ( = in14 in27))) (not ( = in14 in28))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in15 in18))) (not ( = in15 in19))) (not ( = in15 in20))) (not ( = in15 in21))) (not ( = in15 in22))) (not ( = in15 in23))) (not ( = in15 in24))) (not ( = in15 in25))) (not ( = in15 in26))) (not ( = in15 in27))) (not ( = in15 in28))) (not ( = in16 in17))) (not ( = in16 in18))) (not ( = in16 in19))) (not ( = in16 in20))) (not ( = in16 in21))) (not ( = in16 in22))) (not ( = in16 in23))) (not ( = in16 in24))) (not ( = in16 in25))) (not ( = in16 in26))) (not ( = in16 in27))) (not ( = in16 in28))) (not ( = in17 in18))) (not ( = in17 in19))) (not ( = in17 in20))) (not ( = in17 in21))) (not ( = in17 in22))) (not ( = in17 in23))) (not ( = in17 in24))) (not ( = in17 in25))) (not ( = in17 in26))) (not ( = in17 in27))) (not ( = in17 in28))) (not ( = in18 in19))) (not ( = in18 in20))) (not ( = in18 in21))) (not ( = in18 in22))) (not ( = in18 in23))) (not ( = in18 in24))) (not ( = in18 in25))) (not ( = in18 in26))) (not ( = in18 in27))) (not ( = in18 in28))) (not ( = in19 in20))) (not ( = in19 in21))) (not ( = in19 in22))) (not ( = in19 in23))) (not ( = in19 in24))) (not ( = in19 in25))) (not ( = in19 in26))) (not ( = in19 in27))) (not ( = in19 in28))) (not ( = in20 in21))) (not ( = in20 in22))) (not ( = in20 in23))) (not ( = in20 in24))) (not ( = in20 in25))) (not ( = in20 in26))) (not ( = in20 in27))) (not ( = in20 in28))) (not ( = in21 in22))) (not ( = in21 in23))) (not ( = in21 in24))) (not ( = in21 in25))) (not ( = in21 in26))) (not ( = in21 in27))) (not ( = in21 in28))) (not ( = in22 in23))) (not ( = in22 in24))) (not ( = in22 in25))) (not ( = in22 in26))) (not ( = in22 in27))) (not ( = in22 in28))) (not ( = in23 in24))) (not ( = in23 in25))) (not ( = in23 in26))) (not ( = in23 in27))) (not ( = in23 in28))) (not ( = in24 in25))) (not ( = in24 in26))) (not ( = in24 in27))) (not ( = in24 in28))) (not ( = in25 in26))) (not ( = in25 in27))) (not ( = in25 in28))) (not ( = in26 in27))) (not ( = in26 in28))) (not ( = in27 in28))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in0 in5)))\n(assert (not (= in0 in6)))\n(assert (not (= in0 in7)))\n(assert (not (= in0 in8)))\n(assert (not (= in0 in9)))\n(assert (not (= in0 in10)))\n(assert (not (= in0 in11)))\n(assert (not (= in0 in12)))\n(assert (not (= in0 in13)))\n(assert (not (= in0 in14)))\n(assert (not (= in0 in15)))\n(assert (not (= in0 in16)))\n(assert (not (= in0 in17)))\n(assert (not (= in0 in18)))\n(assert (not (= in0 in19)))\n(assert (not (= in0 in20)))\n(assert (not (= in0 in21)))\n(assert (not (= in0 in22)))\n(assert (not (= in0 in23)))\n(assert (not (= in0 in24)))\n(assert (not (= in0 in25)))\n(assert (not (= in0 in26)))\n(assert (not (= in0 in27)))\n(assert (not (= in0 in28)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in1 in5)))\n(assert (not (= in1 in6)))\n(assert (not (= in1 in7)))\n(assert (not (= in1 in8)))\n(assert (not (= in1 in9)))\n(assert (not (= in1 in10)))\n(assert (not (= in1 in11)))\n(assert (not (= in1 in12)))\n(assert (not (= in1 in13)))\n(assert (not (= in1 in14)))\n(assert (not (= in1 in15)))\n(assert (not (= in1 in16)))\n(assert (not (= in1 in17)))\n(assert (not (= in1 in18)))\n(assert (not (= in1 in19)))\n(assert (not (= in1 in20)))\n(assert (not (= in1 in21)))\n(assert (not (= in1 in22)))\n(assert (not (= in1 in23)))\n(assert (not (= in1 in24)))\n(assert (not (= in1 in25)))\n(assert (not (= in1 in26)))\n(assert (not (= in1 in27)))\n(assert (not (= in1 in28)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in2 in5)))\n(assert (not (= in2 in6)))\n(assert (not (= in2 in7)))\n(assert (not (= in2 in8)))\n(assert (not (= in2 in9)))\n(assert (not (= in2 in10)))\n(assert (not (= in2 in11)))\n(assert (not (= in2 in12)))\n(assert (not (= in2 in13)))\n(assert (not (= in2 in14)))\n(assert (not (= in2 in15)))\n(assert (not (= in2 in16)))\n(assert (not (= in2 in17)))\n(assert (not (= in2 in18)))\n(assert (not (= in2 in19)))\n(assert (not (= in2 in20)))\n(assert (not (= in2 in21)))\n(assert (not (= in2 in22)))\n(assert (not (= in2 in23)))\n(assert (not (= in2 in24)))\n(assert (not (= in2 in25)))\n(assert (not (= in2 in26)))\n(assert (not (= in2 in27)))\n(assert (not (= in2 in28)))\n(assert (not (= in3 in4)))\n(assert (not (= in3 in5)))\n(assert (not (= in3 in6)))\n(assert (not (= in3 in7)))\n(assert (not (= in3 in8)))\n(assert (not (= in3 in9)))\n(assert (not (= in3 in10)))\n(assert (not (= in3 in11)))\n(assert (not (= in3 in12)))\n(assert (not (= in3 in13)))\n(assert (not (= in3 in14)))\n(assert (not (= in3 in15)))\n(assert (not (= in3 in16)))\n(assert (not (= in3 in17)))\n(assert (not (= in3 in18)))\n(assert (not (= in3 in19)))\n(assert (not (= in3 in20)))\n(assert (not (= in3 in21)))\n(assert (not (= in3 in22)))\n(assert (not (= in3 in23)))\n(assert (not (= in3 in24)))\n(assert (not (= in3 in25)))\n(assert (not (= in3 in26)))\n(assert (not (= in3 in27)))\n(assert (not (= in3 in28)))\n(assert (not (= in4 in5)))\n(assert (not (= in4 in6)))\n(assert (not (= in4 in7)))\n(assert (not (= in4 in8)))\n(assert (not (= in4 in9)))\n(assert (not (= in4 in10)))\n(assert (not (= in4 in11)))\n(assert (not (= in4 in12)))\n(assert (not (= in4 in13)))\n(assert (not (= in4 in14)))\n(assert (not (= in4 in15)))\n(assert (not (= in4 in16)))\n(assert (not (= in4 in17)))\n(assert (not (= in4 in18)))\n(assert (not (= in4 in19)))\n(assert (not (= in4 in20)))\n(assert (not (= in4 in21)))\n(assert (not (= in4 in22)))\n(assert (not (= in4 in23)))\n(assert (not (= in4 in24)))\n(assert (not (= in4 in25)))\n(assert (not (= in4 in26)))\n(assert (not (= in4 in27)))\n(assert (not (= in4 in28)))\n(assert (not (= in5 in6)))\n(assert (not (= in5 in7)))\n(assert (not (= in5 in8)))\n(assert (not (= in5 in9)))\n(assert (not (= in5 in10)))\n(assert (not (= in5 in11)))\n(assert (not (= in5 in12)))\n(assert (not (= in5 in13)))\n(assert (not (= in5 in14)))\n(assert (not (= in5 in15)))\n(assert (not (= in5 in16)))\n(assert (not (= in5 in17)))\n(assert (not (= in5 in18)))\n(assert (not (= in5 in19)))\n(assert (not (= in5 in20)))\n(assert (not (= in5 in21)))\n(assert (not (= in5 in22)))\n(assert (not (= in5 in23)))\n(assert (not (= in5 in24)))\n(assert (not (= in5 in25)))\n(assert (not (= in5 in26)))\n(assert (not (= in5 in27)))\n(assert (not (= in5 in28)))\n(assert (not (= in6 in7)))\n(assert (not (= in6 in8)))\n(assert (not (= in6 in9)))\n(assert (not (= in6 in10)))\n(assert (not (= in6 in11)))\n(assert (not (= in6 in12)))\n(assert (not (= in6 in13)))\n(assert (not (= in6 in14)))\n(assert (not (= in6 in15)))\n(assert (not (= in6 in16)))\n(assert (not (= in6 in17)))\n(assert (not (= in6 in18)))\n(assert (not (= in6 in19)))\n(assert (not (= in6 in20)))\n(assert (not (= in6 in21)))\n(assert (not (= in6 in22)))\n(assert (not (= in6 in23)))\n(assert (not (= in6 in24)))\n(assert (not (= in6 in25)))\n(assert (not (= in6 in26)))\n(assert (not (= in6 in27)))\n(assert (not (= in6 in28)))\n(assert (not (= in7 in8)))\n(assert (not (= in7 in9)))\n(assert (not (= in7 in10)))\n(assert (not (= in7 in11)))\n(assert (not (= in7 in12)))\n(assert (not (= in7 in13)))\n(assert (not (= in7 in14)))\n(assert (not (= in7 in15)))\n(assert (not (= in7 in16)))\n(assert (not (= in7 in17)))\n(assert (not (= in7 in18)))\n(assert (not (= in7 in19)))\n(assert (not (= in7 in20)))\n(assert (not (= in7 in21)))\n(assert (not (= in7 in22)))\n(assert (not (= in7 in23)))\n(assert (not (= in7 in24)))\n(assert (not (= in7 in25)))\n(assert (not (= in7 in26)))\n(assert (not (= in7 in27)))\n(assert (not (= in7 in28)))\n(assert (not (= in8 in9)))\n(assert (not (= in8 in10)))\n(assert (not (= in8 in11)))\n(assert (not (= in8 in12)))\n(assert (not (= in8 in13)))\n(assert (not (= in8 in14)))\n(assert (not (= in8 in15)))\n(assert (not (= in8 in16)))\n(assert (not (= in8 in17)))\n(assert (not (= in8 in18)))\n(assert (not (= in8 in19)))\n(assert (not (= in8 in20)))\n(assert (not (= in8 in21)))\n(assert (not (= in8 in22)))\n(assert (not (= in8 in23)))\n(assert (not (= in8 in24)))\n(assert (not (= in8 in25)))\n(assert (not (= in8 in26)))\n(assert (not (= in8 in27)))\n(assert (not (= in8 in28)))\n(assert (not (= in9 in10)))\n(assert (not (= in9 in11)))\n(assert (not (= in9 in12)))\n(assert (not (= in9 in13)))\n(assert (not (= in9 in14)))\n(assert (not (= in9 in15)))\n(assert (not (= in9 in16)))\n(assert (not (= in9 in17)))\n(assert (not (= in9 in18)))\n(assert (not (= in9 in19)))\n(assert (not (= in9 in20)))\n(assert (not (= in9 in21)))\n(assert (not (= in9 in22)))\n(assert (not (= in9 in23)))\n(assert (not (= in9 in24)))\n(assert (not (= in9 in25)))\n(assert (not (= in9 in26)))\n(assert (not (= in9 in27)))\n(assert (not (= in9 in28)))\n(assert (not (= in10 in11)))\n(assert (not (= in10 in12)))\n(assert (not (= in10 in13)))\n(assert (not (= in10 in14)))\n(assert (not (= in10 in15)))\n(assert (not (= in10 in16)))\n(assert (not (= in10 in17)))\n(assert (not (= in10 in18)))\n(assert (not (= in10 in19)))\n(assert (not (= in10 in20)))\n(assert (not (= in10 in21)))\n(assert (not (= in10 in22)))\n(assert (not (= in10 in23)))\n(assert (not (= in10 in24)))\n(assert (not (= in10 in25)))\n(assert (not (= in10 in26)))\n(assert (not (= in10 in27)))\n(assert (not (= in10 in28)))\n(assert (not (= in11 in12)))\n(assert (not (= in11 in13)))\n(assert (not (= in11 in14)))\n(assert (not (= in11 in15)))\n(assert (not (= in11 in16)))\n(assert (not (= in11 in17)))\n(assert (not (= in11 in18)))\n(assert (not (= in11 in19)))\n(assert (not (= in11 in20)))\n(assert (not (= in11 in21)))\n(assert (not (= in11 in22)))\n(assert (not (= in11 in23)))\n(assert (not (= in11 in24)))\n(assert (not (= in11 in25)))\n(assert (not (= in11 in26)))\n(assert (not (= in11 in27)))\n(assert (not (= in11 in28)))\n(assert (not (= in12 in13)))\n(assert (not (= in12 in14)))\n(assert (not (= in12 in15)))\n(assert (not (= in12 in16)))\n(assert (not (= in12 in17)))\n(assert (not (= in12 in18)))\n(assert (not (= in12 in19)))\n(assert (not (= in12 in20)))\n(assert (not (= in12 in21)))\n(assert (not (= in12 in22)))\n(assert (not (= in12 in23)))\n(assert (not (= in12 in24)))\n(assert (not (= in12 in25)))\n(assert (not (= in12 in26)))\n(assert (not (= in12 in27)))\n(assert (not (= in12 in28)))\n(assert (not (= in13 in14)))\n(assert (not (= in13 in15)))\n(assert (not (= in13 in16)))\n(assert (not (= in13 in17)))\n(assert (not (= in13 in18)))\n(assert (not (= in13 in19)))\n(assert (not (= in13 in20)))\n(assert (not (= in13 in21)))\n(assert (not (= in13 in22)))\n(assert (not (= in13 in23)))\n(assert (not (= in13 in24)))\n(assert (not (= in13 in25)))\n(assert (not (= in13 in26)))\n(assert (not (= in13 in27)))\n(assert (not (= in13 in28)))\n(assert (not (= in14 in15)))\n(assert (not (= in14 in16)))\n(assert (not (= in14 in17)))\n(assert (not (= in14 in18)))\n(assert (not (= in14 in19)))\n(assert (not (= in14 in20)))\n(assert (not (= in14 in21)))\n(assert (not (= in14 in22)))\n(assert (not (= in14 in23)))\n(assert (not (= in14 in24)))\n(assert (not (= in14 in25)))\n(assert (not (= in14 in26)))\n(assert (not (= in14 in27)))\n(assert (not (= in14 in28)))\n(assert (not (= in15 in16)))\n(assert (not (= in15 in17)))\n(assert (not (= in15 in18)))\n(assert (not (= in15 in19)))\n(assert (not (= in15 in20)))\n(assert (not (= in15 in21)))\n(assert (not (= in15 in22)))\n(assert (not (= in15 in23)))\n(assert (not (= in15 in24)))\n(assert (not (= in15 in25)))\n(assert (not (= in15 in26)))\n(assert (not (= in15 in27)))\n(assert (not (= in15 in28)))\n(assert (not (= in16 in17)))\n(assert (not (= in16 in18)))\n(assert (not (= in16 in19)))\n(assert (not (= in16 in20)))\n(assert (not (= in16 in21)))\n(assert (not (= in16 in22)))\n(assert (not (= in16 in23)))\n(assert (not (= in16 in24)))\n(assert (not (= in16 in25)))\n(assert (not (= in16 in26)))\n(assert (not (= in16 in27)))\n(assert (not (= in16 in28)))\n(assert (not (= in17 in18)))\n(assert (not (= in17 in19)))\n(assert (not (= in17 in20)))\n(assert (not (= in17 in21)))\n(assert (not (= in17 in22)))\n(assert (not (= in17 in23)))\n(assert (not (= in17 in24)))\n(assert (not (= in17 in25)))\n(assert (not (= in17 in26)))\n(assert (not (= in17 in27)))\n(assert (not (= in17 in28)))\n(assert (not (= in18 in19)))\n(assert (not (= in18 in20)))\n(assert (not (= in18 in21)))\n(assert (not (= in18 in22)))\n(assert (not (= in18 in23)))\n(assert (not (= in18 in24)))\n(assert (not (= in18 in25)))\n(assert (not (= in18 in26)))\n(assert (not (= in18 in27)))\n(assert (not (= in18 in28)))\n(assert (not (= in19 in20)))\n(assert (not (= in19 in21)))\n(assert (not (= in19 in22)))\n(assert (not (= in19 in23)))\n(assert (not (= in19 in24)))\n(assert (not (= in19 in25)))\n(assert (not (= in19 in26)))\n(assert (not (= in19 in27)))\n(assert (not (= in19 in28)))\n(assert (not (= in20 in21)))\n(assert (not (= in20 in22)))\n(assert (not (= in20 in23)))\n(assert (not (= in20 in24)))\n(assert (not (= in20 in25)))\n(assert (not (= in20 in26)))\n(assert (not (= in20 in27)))\n(assert (not (= in20 in28)))\n(assert (not (= in21 in22)))\n(assert (not (= in21 in23)))\n(assert (not (= in21 in24)))\n(assert (not (= in21 in25)))\n(assert (not (= in21 in26)))\n(assert (not (= in21 in27)))\n(assert (not (= in21 in28)))\n(assert (not (= in22 in23)))\n(assert (not (= in22 in24)))\n(assert (not (= in22 in25)))\n(assert (not (= in22 in26)))\n(assert (not (= in22 in27)))\n(assert (not (= in22 in28)))\n(assert (not (= in23 in24)))\n(assert (not (= in23 in25)))\n(assert (not (= in23 in26)))\n(assert (not (= in23 in27)))\n(assert (not (= in23 in28)))\n(assert (not (= in24 in25)))\n(assert (not (= in24 in26)))\n(assert (not (= in24 in27)))\n(assert (not (= in24 in28)))\n(assert (not (= in25 in26)))\n(assert (not (= in25 in27)))\n(assert (not (= in25 in28)))\n(assert (not (= in26 in27)))\n(assert (not (= in26 in28)))\n(assert (not (= in27 in28)))",
        "equivalent": true
      },
      "30": {
        "expected": {
          "constants": [
            "(declare-const in20 Int)",
            "(declare-const in22 Int)",
            "(declare-const in21 Int)",
            "(declare-const in24 Int)",
            "(declare-const in23 Int)",
            "(declare-const in26 Int)",
            "(declare-const in25 Int)",
            "(declare-const in28 Int)",
            "(declare-const in27 Int)",
            "(declare-const in29 Int)",
            "(declare-const in0 Int)",
            "(declare-const in2 Int)",
            "(declare-const in1 Int)",
            "(declare-const in4 Int)",
            "(declare-const in3 Int)",
            "(declare-const in6 Int)",
            "(declare-const in5 Int)",
            "(declare-const in8 Int)",
            "(declare-const in7 Int)",
            "(declare-const in11 Int)",
            "(declare-const in10 Int)",
            "(declare-const in9 Int)",
            "(declare-const in13 Int)",
            "(declare-const in12 Int)",
            "(declare-const in15 Int)",
            "(declare-const in14 Int)",
            "(declare-const in17 Int)",
            "(declare-const in16 Int)",
            "(declare-const in19 Int)",
            "(declare-const in18 Int)"
          ],
          "assertions": [
            "(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (not ( = in0 in1)) (not ( = in0 in2))) (not ( = in0 in3))) (not ( = in0 in4))) (not ( = in0 in5))) (not ( = in0 in6))) (not ( = in0 in7))) (not ( = in0 in8))) (not ( = in0 in9))) (not ( = in0 in10))) (not ( = in0 in11))) (not ( = in0 in12))) (not ( = in0 in13))) (not ( = in0 in14))) (not ( = in0 in15))) (not ( = in0 in16))) (not ( = in0 in17))) (not ( = in0 in18))) (not ( = in0 in19))) (not ( = in0 in20))) (not ( = in0 in21))) (not ( = in0 in22))) (not ( = in0 in23))) (not ( = in0 in24))) (not ( = in0 in25))) (not ( = in0 in26))) (not ( = in0 in27))) (not ( = in0 in28))) (not ( = in0 in29))) (not ( = in1 in2))) (not ( = in1 in3))) (not ( = in1 in4))) (not ( = in1 in5))) (not ( = in1 in6))) (not ( = in1 in7))) (not ( = in1 in8))) (not ( = in1 in9))) (not ( = in1 in10))) (not ( = in1 in11))) (not ( = in1 in12))) (not ( = in1 in13))) (not ( = in1 in14))) (not ( = in1 in15))) (not ( = in1 in16))) (not ( = in1 in17))) (not ( = in1 in18))) (not ( = in1 in19))) (not ( = in1 in20))) (not ( = in1 in21))) (not ( = in1 in22))) (not ( = in1 in23))) (not ( = in1 in24))) (not ( = in1 in25))) (not ( = in1 in26))) (not ( = in1 in27))) (not ( = in1 in28))) (not ( = in1 in29))) (not ( = in2 in3))) (not ( = in2 in4))) (not ( = in2 in5))) (not ( = in2 in6))) (not ( = in2 in7))) (not ( = in2 in8))) (not ( = in2 in9))) (not ( = in2 in10))) (not ( = in2 in11))) (not ( = in2 in12))) (not ( = in2 in13))) (not ( = in2 in14))) (not ( = in2 in15))) (not ( = in2 in16))) (not ( = in2 in17))) (not ( = in2 in18))) (not ( = in2 in19))) (not ( = in2 in20))) (not ( = in2 in21))) (not ( = in2 in22))) (not ( = in2 in23))) (not ( = in2 in24))) (not ( = in2 in25))) (not ( = in2 in26))) (not ( = in2 in27))) (not ( = in2 in28))) (not ( = in2 in29))) (not ( = in3 in4))) (not ( = in3 in5))) (not ( = in3 in6))) (not ( = in3 in7))) (not ( = in3 in8))) (not ( = in3 in9))) (not ( = in3 in10))) (not ( = in3 in11))) (not ( = in3 in12))) (not ( = in3 in13))) (not ( = in3 in14))) (not ( = in3 in15))) (not ( = in3 in16))) (not ( = in3 in17))) (not ( = in3 in18))) (not ( = in3 in19))) (not ( = in3 in20))) (not ( = in3 in21))) (not ( = in3 in22))) (not ( = in3 in23))) (not ( = in3 in24))) (not ( = in3 in25))) (not ( = in3 in26))) (not ( = in3 in27))) (not ( = in3 in28))) (not ( = in3 in29))) (not ( = in4 in5))) (not ( = in4 in6))) (not ( = in4 in7))) (not ( = in4 in8))) (not ( = in4 in9))) (not ( = in4 in10))) (not ( = in4 in11))) (not ( = in4 in12))) (not ( = in4 in13))) (not ( = in4 in14))) (not ( = in4 in15))) (not ( = in4 in16))) (not ( = in4 in17))) (not ( = in4 in18))) (not ( = in4 in19))) (not ( = in4 in20))) (not ( = in4 in21))) (not ( = in4 in22))) (not ( = in4 in23))) (not ( = in4 in24))) (not ( = in4 in25))) (not ( = in4 in26))) (not ( = in4 in27))) (not ( = in4 in28))) (not ( = in4 in29))) (not ( = in5 in6))) (not ( = in5 in7))) (not ( = in5 in8))) (not ( = in5 in9))) (not ( = in5 in10))) (not ( = in5 in11))) (not ( = in5 in12))) (not ( = in5 in13))) (not ( = in5 in14))) (not ( = in5 in15))) (not ( = in5 in16))) (not ( = in5 in17))) (not ( = in5 in18))) (not ( = in5 in19))) (not ( = in5 in20))) (not ( = in5 in21))) (not ( = in5 in22))) (not ( = in5 in23))) (not ( = in5 in24))) (not ( = in5 in25))) (not ( = in5 in26))) (not ( = in5 in27))) (not ( = in5 in28))) (not ( = in5 in29))) (not ( = in6 in7))) (not ( = in6 in8))) (not ( = in6 in9))) (not ( = in6 in10))) (not ( = in6 in11))) (not ( = in6 in12))) (not ( = in6 in13))) (not ( = in6 in14))) (not ( = in6 in15))) (not ( = in6 in16))) (not ( = in6 in17))) (not ( = in6 in18))) (not ( = in6 in19))) (not ( = in6 in20))) (not ( = in6 in21))) (not ( = in6 in22))) (not ( = in6 in23))) (not ( = in6 in24))) (not ( = in6 in25))) (not ( = in6 in26))) (not ( = in6 in27))) (not ( = in6 in28))) (not ( = in6 in29))) (not ( = in7 in8))) (not ( = in7 in9))) (not ( = in7 in10))) (not ( = in7 in11))) (not ( = in7 in12))) (not ( = in7 in13))) (not ( = in7 in14))) (not ( = in7 in15))) (not ( = in7 in16))) (not ( = in7 in17))) (not ( = in7 in18))) (not ( = in7 in19))) (not ( = in7 in20))) (not ( = in7 in21))) (not ( = in7 in22))) (not ( = in7 in23))) (not ( = in7 in24))) (not ( = in7 in25))) (not ( = in7 in26))) (not ( = in7 in27))) (not ( = in7 in28))) (not ( = in7 in29))) (not ( = in8 in9))) (not ( = in8 in10))) (not ( = in8 in11))) (not ( = in8 in12))) (not ( = in8 in13))) (not ( = in8 in14))) (not ( = in8 in15))) (not ( = in8 in16))) (not ( = in8 in17))) (not ( = in8 in18))) (not ( = in8 in19))) (not ( = in8 in20))) (not ( = in8 in21))) (not ( = in8 in22))) (not ( = in8 in23))) (not ( = in8 in24))) (not ( = in8 in25))) (not ( = in8 in26))) (not ( = in8 in27))) (not ( = in8 in28))) (not ( = in8 in29))) (not ( = in9 in10))) (not ( = in9 in11))) (not ( = in9 in12))) (not ( = in9 in13))) (not ( = in9 in14))) (not ( = in9 in15))) (not ( = in9 in16))) (not ( = in9 in17))) (not ( = in9 in18))) (not ( = in9 in19))) (not ( = in9 in20))) (not ( = in9 in21))) (not ( = in9 in22))) (not ( = in9 in23))) (not ( = in9 in24))) (not ( = in9 in25))) (not ( = in9 in26))) (not ( = in9 in27))) (not ( = in9 in28))) (not ( = in9 in29))) (not ( = in10 in11))) (not ( = in10 in12))) (not ( = in10 in13))) (not ( = in10 in14))) (not ( = in10 in15))) (not ( = in10 in16))) (not ( = in10 in17))) (not ( = in10 in18))) (not ( = in10 in19))) (not ( = in10 in20))) (not ( = in10 in21))) (not ( = in10 in22))) (not ( = in10 in23))) (not ( = in10 in24))) (not ( = in10 in25))) (not ( = in10 in26))) (not ( = in10 in27))) (not ( = in10 in28))) (not ( = in10 in29))) (not ( = in11 in12))) (not ( = in11 in13))) (not ( = in11 in14))) (not ( = in11 in15))) (not ( = in11 in16))) (not ( = in11 in17))) (not ( = in11 in18))) (not ( = in11 in19))) (not ( = in11 in20))) (not ( = in11 in21))) (not ( = in11 in22))) (not ( = in11 in23))) (not ( = in11 in24))) (not ( = in11 in25))) (not ( = in11 in26))) (not ( = in11 in27))) (not ( = in11 in28))) (not ( = in11 in29))) (not ( = in12 in13))) (not ( = in12 in14))) (not ( = in12 in15))) (not ( = in12 in16))) (not ( = in12 in17))) (not ( = in12 in18))) (not ( = in12 in19))) (not ( = in12 in20))) (not ( = in12 in21))) (not ( = in12 in22))) (not ( = in12 in23))) (not ( = in12 in24))) (not ( = in12 in25))) (not ( = in12 in26))) (not ( = in12 in27))) (not ( = in12 in28))) (not ( = in12 in29))) (not ( = in13 in14))) (not ( = in13 in15))) (not ( = in13 in16))) (not ( = in13 in17))) (not ( = in13 in18))) (not ( = in13 in19))) (not ( = in13 in20))) (not ( = in13 in21))) (not ( = in13 in22))) (not ( = in13 in23))) (not ( = in13 in24))) (not ( = in13 in25))) (not ( = in13 in26))) (not ( = in13 in27))) (not ( = in13 in28))) (not ( = in13 in29))) (not ( = in14 in15))) (not ( = in14 in16))) (not ( = in14 in17))) (not ( = in14 in18))) (not ( = in14 in19))) (not ( = in14 in20))) (not ( = in14 in21))) (not ( = in14 in22))) (not ( = in14 in23))) (not ( = in14 in24))) (not ( = in14 in25))) (not ( = in14 in26))) (not ( = in14 in27))) (not ( = in14 in28))) (not ( = in14 in29))) (not ( = in15 in16))) (not ( = in15 in17))) (not ( = in15 in18))) (not ( = in15 in19))) (not ( = in15 in20))) (not ( = in15 in21))) (not ( = in15 in22))) (not ( = in15 in23))) (not ( = in15 in24))) (not ( = in15 in25))) (not ( = in15 in26))) (not ( = in15 in27))) (not ( = in15 in28))) (not ( = in15 in29))) (not ( = in16 in17))) (not ( = in16 in18))) (not ( = in16 in19))) (not ( = in16 in20))) (not ( = in16 in21))) (not ( = in16 in22))) (not ( = in16 in23))) (not ( = in16 in24))) (not ( = in16 in25))) (not ( = in16 in26))) (not ( = in16 in27))) (not ( = in16 in28))) (not ( = in16 in29))) (not ( = in17 in18))) (not ( = in17 in19))) (not ( = in17 in20))) (not ( = in17 in21))) (not ( = in17 in22))) (not ( = in17 in23))) (not ( = in17 in24))) (not ( = in17 in25))) (not ( = in17 in26))) (not ( = in17 in27))) (not ( = in17 in28))) (not ( = in17 in29))) (not ( = in18 in19))) (not ( = in18 in20))) (not ( = in18 in21))) (not ( = in18 in22))) (not ( = in18 in23))) (not ( = in18 in24))) (not ( = in18 in25))) (not ( = in18 in26))) (not ( = in18 in27))) (not ( = in18 in28))) (not ( = in18 in29))) (not ( = in19 in20))) (not ( = in19 in21))) (not ( = in19 in22))) (not ( = in19 in23))) (not ( = in19 in24))) (not ( = in19 in25))) (not ( = in19 in26))) (not ( = in19 in27))) (not ( = in19 in28))) (not ( = in19 in29))) (not ( = in20 in21))) (not ( = in20 in22))) (not ( = in20 in23))) (not ( = in20 in24))) (not ( = in20 in25))) (not ( = in20 in26))) (not ( = in20 in27))) (not ( = in20 in28))) (not ( = in20 in29))) (not ( = in21 in22))) (not ( = in21 in23))) (not ( = in21 in24))) (not ( = in21 in25))) (not ( = in21 in26))) (not ( = in21 in27))) (not ( = in21 in28))) (not ( = in21 in29))) (not ( = in22 in23))) (not ( = in22 in24))) (not ( = in22 in25))) (not ( = in22 in26))) (not ( = in22 in27))) (not ( = in22 in28))) (not ( = in22 in29))) (not ( = in23 in24))) (not ( = in23 in25))) (not ( = in23 in26))) (not ( = in23 in27))) (not ( = in23 in28))) (not ( = in23 in29))) (not ( = in24 in25))) (not ( = in24 in26))) (not ( = in24 in27))) (not ( = in24 in28))) (not ( = in24 in29))) (not ( = in25 in26))) (not ( = in25 in27))) (not ( = in25 in28))) (not ( = in25 in29))) (not ( = in26 in27))) (not ( = in26 in28))) (not ( = in26 in29))) (not ( = in27 in28))) (not ( = in27 in29))) (not ( = in28 in29))))"
          ]
        },
        "predicted": "(assert (not (= in0 in1)))\n(assert (not (= in0 in2)))\n(assert (not (= in0 in3)))\n(assert (not (= in0 in4)))\n(assert (not (= in0 in5)))\n(assert (not (= in0 in6)))\n(assert (not (= in0 in7)))\n(assert (not (= in0 in8)))\n(assert (not (= in0 in9)))\n(assert (not (= in0 in10)))\n(assert (not (= in0 in11)))\n(assert (not (= in0 in12)))\n(assert (not (= in0 in13)))\n(assert (not (= in0 in14)))\n(assert (not (= in0 in15)))\n(assert (not (= in0 in16)))\n(assert (not (= in0 in17)))\n(assert (not (= in0 in18)))\n(assert (not (= in0 in19)))\n(assert (not (= in0 in20)))\n(assert (not (= in0 in21)))\n(assert (not (= in0 in22)))\n(assert (not (= in0 in23)))\n(assert (not (= in0 in24)))\n(assert (not (= in0 in25)))\n(assert (not (= in0 in26)))\n(assert (not (= in0 in27)))\n(assert (not (= in0 in28)))\n(assert (not (= in0 in29)))\n(assert (not (= in1 in2)))\n(assert (not (= in1 in3)))\n(assert (not (= in1 in4)))\n(assert (not (= in1 in5)))\n(assert (not (= in1 in6)))\n(assert (not (= in1 in7)))\n(assert (not (= in1 in8)))\n(assert (not (= in1 in9)))\n(assert (not (= in1 in10)))\n(assert (not (= in1 in11)))\n(assert (not (= in1 in12)))\n(assert (not (= in1 in13)))\n(assert (not (= in1 in14)))\n(assert (not (= in1 in15)))\n(assert (not (= in1 in16)))\n(assert (not (= in1 in17)))\n(assert (not (= in1 in18)))\n(assert (not (= in1 in19)))\n(assert (not (= in1 in20)))\n(assert (not (= in1 in21)))\n(assert (not (= in1 in22)))\n(assert (not (= in1 in23)))\n(assert (not (= in1 in24)))\n(assert (not (= in1 in25)))\n(assert (not (= in1 in26)))\n(assert (not (= in1 in27)))\n(assert (not (= in1 in28)))\n(assert (not (= in1 in29)))\n(assert (not (= in2 in3)))\n(assert (not (= in2 in4)))\n(assert (not (= in2 in5)))\n(assert (not (= in2 in6)))\n(assert (not (= in2 in7)))\n(assert (not (= in2 in8)))\n(assert (not (= in2 in9)))\n(assert (not (= in2 in10)))\n(assert (not (= in2 in11)))\n(assert (not (= in2 in12)))\n(assert (not (= in2 in13)))\n(assert (not (= in2 in14)))\n(assert (not (= in2 in15)))\n(assert (not (= in2 in16)))\n(assert (not (= in2 in17)))\n(assert (not (= in2 in18)))\n(assert (not (= in2 in19)))\n(assert (not (= in2 in20)))\n(assert (not (= in2 in21)))\n(assert (not (= in2 in22)))\n(assert (not (= in2 in23)))\n(assert (not (= in2 in24)))\n(assert (not (= in2 in25)))\n(assert (not (= in2 in26)))\n(assert (not (= in2 in27)))\n(assert (not (= in2 in28)))\n(assert (not (= in2 in29)))\n(assert (not (= in3 in4)))\n(assert (not (= in3 in5)))\n(assert (not (= in3 in6)))\n(assert (not (= in3 in7)))\n(assert (not (= in3 in8)))\n(assert (not (= in3 in9)))\n(assert (not (= in3 in10)))\n(assert (not (= in3 in11)))\n(assert (not (= in3 in12)))\n(assert (not (= in3 in13)))\n(assert (not (= in3 in14)))\n(assert (not (= in3 in15)))\n(assert (not (= in3 in16)))\n(assert (not (= in3 in17)))\n(assert (not (= in3 in18)))\n(assert (not (= in3 in19)))\n(assert (not (= in3 in20)))\n(assert (not (= in3 in21)))\n(assert (not (= in3 in22)))\n(assert (not (= in3 in23)))\n(assert (not (= in3 in24)))\n(assert (not (= in3 in25)))\n(assert (not (= in3 in26)))\n(assert (not (= in3 in27)))\n(assert (not (= in3 in28)))\n(assert (not (= in3 in29)))\n(assert (not (= in4 in5)))\n(assert (not (= in4 in6)))\n(assert (not (= in4 in7)))\n(assert (not (= in4 in8)))\n(assert (not (= in4 in9)))\n(assert (not (= in4 in10)))\n(assert (not (= in4 in11)))\n(assert (not (= in4 in12)))\n(assert (not (= in4 in13)))\n(assert (not (= in4 in14)))\n(assert (not (= in4 in15)))\n(assert (not (= in4 in16)))\n(assert (not (= in4 in17)))\n(assert (not (= in4 in18)))\n(assert (not (= in4 in19)))\n(assert (not (= in4 in20)))\n(assert (not (= in4 in21)))\n(assert (not (= in4 in22)))\n(assert (not (= in4 in23)))\n(assert (not (= in4 in24)))\n(assert (not (= in4 in25)))\n(assert (not (= in4 in26)))\n(assert (not (= in4 in27)))\n(assert (not (= in4 in28)))\n(assert (not (= in4 in29)))\n(assert (not (= in5 in6)))\n(assert (not (= in5 in7)))\n(assert (not (= in5 in8)))\n(assert (not (= in5 in9)))\n(assert (not (= in5 in10)))\n(assert (not (= in5 in11)))\n(assert (not (= in5 in12)))\n(assert (not (= in5 in13)))\n(assert (not (= in5 in14)))\n(assert (not (= in5 in15)))\n(assert (not (= in5 in16)))\n(assert (not (= in5 in17)))\n(assert (not (= in5 in18)))\n(assert (not (= in5 in19)))\n(assert (not (= in5 in20)))\n(assert (not (= in5 in21)))\n(assert (not (= in5 in22)))\n(assert (not (= in5 in23)))\n(assert (not (= in5 in24)))\n(assert (not (= in5 in25)))\n(assert (not (= in5 in26)))\n(assert (not (= in5 in27)))\n(assert (not (= in5 in28)))\n(assert (not (= in5 in29)))\n(assert (not (= in6 in7)))\n(assert (not (= in6 in8)))\n(assert (not (= in6 in9)))\n(assert (not (= in6 in10)))\n(assert (not (= in6 in11)))\n(assert (not (= in6 in12)))\n(assert (not (= in6 in13)))\n(assert (not (= in6 in14)))\n(assert (not (= in6 in15)))\n(assert (not (= in6 in16)))\n(assert (not (= in6 in17)))\n(assert (not (= in6 in18)))\n(assert (not (= in6 in19)))\n(assert (not (= in6 in20)))\n(assert (not (= in6 in21)))\n(assert (not (= in6 in22)))\n(assert (not (= in6 in23)))\n(assert (not (= in6 in24)))\n(assert (not (= in6 in25)))\n(assert (not (= in6 in26)))\n(assert (not (= in6 in27)))\n(assert (not (= in6 in28)))\n(assert (not (= in6 in29)))\n(assert (not (= in7 in8)))\n(assert (not (= in7 in9)))\n(assert (not (= in7 in10)))\n(assert (not (= in7 in11)))\n(assert (not (= in7 in12)))\n(assert (not (= in7 in13)))\n(assert (not (= in7 in14)))\n(assert (not (= in7 in15)))\n(assert (not (= in7 in16)))\n(assert (not (= in7 in17)))\n(assert (not (= in7 in18)))\n(assert (not (= in7 in19)))\n(assert (not (= in7 in20)))\n(assert (not (= in7 in21)))\n(assert (not (= in7 in22)))\n(assert (not (= in7 in23)))\n(assert (not (= in7 in24)))\n(assert (not (= in7 in25)))\n(assert (not (= in7 in26)))\n(assert (not (= in7 in27)))\n(assert (not (= in7 in28)))\n(assert (not (= in7 in29)))\n(assert (not (= in8 in9)))\n(assert (not (= in8 in10)))\n(assert (not (= in8 in11)))\n(assert (not (= in8 in12)))\n(assert (not (= in8 in13)))\n(assert (not (= in8 in14)))\n(assert (not (= in8 in15)))\n(assert (not (= in8 in16)))\n(assert (not (= in8 in17)))\n(assert (not (= in8 in18)))\n(assert (not (= in8 in19)))\n(assert (not (= in8 in20)))\n(assert (not (= in8 in21)))\n(assert (not (= in8 in22)))\n(assert (not (= in8 in23)))\n(assert (not (= in8 in24)))\n(assert (not (= in8 in25)))\n(assert (not (= in8 in26)))\n(assert (not (= in8 in27)))\n(assert (not (= in8 in28)))\n(assert (not (= in8 in29)))\n(assert (not (= in9 in10)))\n(assert (not (= in9 in11)))\n(assert (not (= in9 in12)))\n(assert (not (= in9 in13)))\n(assert (not (= in9 in14)))\n(assert (not (= in9 in15)))\n(assert (not (= in9 in16)))\n(assert (not (= in9 in17)))\n(assert (not (= in9 in18)))\n(assert (not (= in9 in19)))\n(assert (not (= in9 in20)))\n(assert (not (= in9 in21)))\n(assert (not (= in9 in22)))\n(assert (not (= in9 in23)))\n(assert (not (= in9 in24)))\n(assert (not (= in9 in25)))\n(assert (not (= in9 in26)))\n(assert (not (= in9 in27)))\n(assert (not (= in9 in28)))\n(assert (not (= in9 in29)))\n(assert (not (= in10 in11)))\n(assert (not (= in10 in12)))\n(assert (not (= in10 in13)))\n(assert (not (= in10 in14)))\n(assert (not (= in10 in15)))\n(assert (not (= in10 in16)))\n(assert (not (= in10 in17)))\n(assert (not (= in10 in18)))\n(assert (not (= in10 in19)))\n(assert (not (= in10 in20)))\n(assert (not (= in10 in21)))\n(assert (not (= in10 in22)))\n(assert (not (= in10 in23)))\n(assert (not (= in10 in24)))\n(assert (not (= in10 in25)))\n(assert (not (= in10 in26)))\n(assert (not (= in10 in27)))\n(assert (not (= in10 in28)))\n(assert (not (= in10 in29)))\n(assert (not (= in11 in12)))\n(assert (not (= in11 in13)))\n(assert (not (= in11 in14)))\n(assert (not (= in11 in15)))\n(assert (not (= in11 in16)))\n(assert (not (= in11 in17)))\n(assert (not (= in11 in18)))\n(assert (not (= in11 in19)))\n(assert (not (= in11 in20)))\n(assert (not (= in11 in21)))\n(assert (not (= in11 in22)))\n(assert (not (= in11 in23)))\n(assert (not (= in11 in24)))\n(assert (not (= in11 in25)))\n(assert (not (= in11 in26)))\n(assert (not (= in11 in27)))\n(assert (not (= in11 in28)))\n(assert (not (= in11 in29)))\n(assert (not (= in12 in13)))\n(assert (not (= in12 in14)))\n(assert (not (= in12 in15)))\n(assert (not (= in12 in16)))\n(assert (not (= in12 in17)))\n(assert (not (= in12 in18)))\n(assert (not (= in12 in19)))\n(assert (not (= in12 in20)))\n(assert (not (= in12 in21)))\n(assert (not (= in12 in22)))\n(assert (not (= in12 in23)))\n(assert (not (= in12 in24)))\n(assert (not (= in12 in25)))\n(assert (not (= in12 in26)))\n(assert (not (= in12 in27)))\n(assert (not (= in12 in28)))\n(assert (not (= in12 in29)))\n(assert (not (= in13 in14)))\n(assert (not (= in13 in15)))\n(assert (not (= in13 in16)))\n(assert (not (= in13 in17)))\n(assert (not (= in13 in18)))\n(assert (not (= in13 in19)))\n(assert (not (= in13 in20)))\n(assert (not (= in13 in21)))\n(assert (not (= in13 in22)))\n(assert (not (= in13 in23)))\n(assert (not (= in13 in24)))\n(assert (not (= in13 in25)))\n(assert (not (= in13 in26)))\n(assert (not (= in13 in27)))\n(assert (not (= in13 in28)))\n(assert (not (= in13 in29)))\n(assert (not (= in14 in15)))\n(assert (not (= in14 in16)))\n(assert (not (= in14 in17)))\n(assert (not (= in14 in18)))\n(assert (not (= in14 in19)))\n(assert (not (= in14 in20)))\n(assert (not (= in14 in21)))\n(assert (not (= in14 in22)))\n(assert (not (= in14 in23)))\n(assert (not (= in14 in24)))\n(assert (not (= in14 in25)))\n(assert (not (= in14 in26)))\n(assert (not (= in14 in27)))\n(assert (not (= in14 in28)))\n(assert (not (= in14 in29)))\n(assert (not (= in15 in16)))\n(assert (not (= in15 in17)))\n(assert (not (= in15 in18)))\n(assert (not (= in15 in19)))\n(assert (not (= in15 in20)))\n(assert (not (= in15 in21)))\n(assert (not (= in15 in22)))\n(assert (not (= in15 in23)))\n(assert (not (= in15 in24)))\n(assert (not (= in15 in25)))\n(assert (not (= in15 in26)))\n(assert (not (= in15 in27)))\n(assert (not (= in15 in28)))\n(assert (not (= in15 in29)))\n(assert (not (= in16 in17)))\n(assert (not (= in16 in18)))\n(assert (not (= in16 in19)))\n(assert (not (= in16 in20)))\n(assert (not (= in16 in21)))\n(assert (not (= in16 in22)))\n(assert (not (= in16 in23)))\n(assert (not (= in16 in24)))\n(assert (not (= in16 in25)))\n(assert (not (= in16 in26)))\n(assert (not (= in16 in27)))\n(assert (not (= in16 in28)))\n(assert (not (= in16 in29)))\n(assert (not (= in17 in18)))\n(assert (not (= in17 in19)))\n(assert (not (= in17 in20)))\n(assert (not (= in17 in21)))\n(assert (not (= in17 in22)))\n(assert (not (= in17 in23)))\n(assert (not (= in17 in24)))\n(assert (not (= in17 in25)))\n(assert (not (= in17 in26)))\n(assert (not (= in17 in27)))\n(assert (not (= in17 in28)))\n(assert (not (= in17 in29)))\n(assert (not (= in18 in19)))\n(assert (not (= in18 in20)))\n(assert (not (= in18 in21)))\n(assert (not (= in18 in22)))\n(assert (not (= in18 in23)))\n(assert (not (= in18 in24)))\n(assert (not (= in18 in25)))\n(assert (not (= in18 in26)))\n(assert (not (= in18 in27)))\n(assert (not (= in18 in28)))\n(assert (not (= in18 in29)))\n(assert (not (= in19 in20)))\n(assert (not (= in19 in21)))\n(assert (not (= in19 in22)))\n(assert (not (= in19 in23)))\n(assert (not (= in19 in24)))\n(assert (not (= in19 in25)))\n(assert (not (= in19 in26)))\n(assert (not (= in19 in27)))\n(assert (not (= in19 in28)))\n(assert (not (= in19 in29)))\n(assert (not (= in20 in21)))\n(assert (not (= in20 in22)))\n(assert (not (= in20 in23)))\n(assert (not (= in20 in24)))\n(assert (not (= in20 in25)))\n(assert (not (= in20 in26)))\n(assert (not (= in20 in27)))\n(assert (not (= in20 in28)))\n(assert (not (= in20 in29)))\n(assert (not (= in21 in22)))\n(assert (not (= in21 in23)))\n(assert (not (= in21 in24)))\n(assert (not (= in21 in25)))\n(assert (not (= in21 in26)))\n(assert (not (= in21 in27)))\n(assert (not (= in21 in28)))\n(assert (not (= in21 in29)))\n(assert (not (= in22 in23)))\n(assert (not (= in22 in24)))\n(assert (not (= in22 in25)))\n(assert (not (= in22 in26)))\n(assert (not (= in22 in27)))\n(assert (not (= in22 in28)))\n(assert (not (= in22 in29)))\n(assert (not (= in23 in24)))\n(assert (not (= in23 in25)))\n(assert (not (= in23 in26)))\n(assert (not (= in23 in27)))\n(assert (not (= in23 in28)))\n(assert (not (= in23 in29)))\n(assert (not (= in24 in25)))\n(assert (not (= in24 in26)))\n(assert (not (= in24 in27)))\n(assert (not (= in24 in28)))\n(assert (not (= in24 in29)))\n(assert (not (= in25 in26)))\n(assert (not (= in25 in27)))\n(assert (not (= in25 in28)))\n(assert (not (= in25 in29)))\n(assert (not (= in26 in27)))\n(assert (not (= in26 in28)))\n(assert (not (= in26 in29)))\n(assert (not (= in27 in28)))\n(assert (not (= in27 in29)))\n(assert (not (= in28 in29)))",
        "equivalent": true
      }
    }
  }
}