; Combined SMT for checking equivalence
; Original constants:
(declare-const in6x1 Int)
(declare-const in1x6 Int)
(declare-const in5x2 Int)
(declare-const in2x5 Int)
(declare-const in4x3 Int)
(declare-const in3x4 Int)
(declare-const in6x2 Int)
(declare-const in2x6 Int)
(declare-const in5x3 Int)
(declare-const in3x5 Int)
(declare-const in5x0 Int)
(declare-const in0x5 Int)
(declare-const in4x1 Int)
(declare-const in1x4 Int)
(declare-const in3x2 Int)
(declare-const in2x3 Int)
(declare-const in6x0 Int)
(declare-const in0x6 Int)
(declare-const in5x1 Int)
(declare-const in1x5 Int)
(declare-const in4x2 Int)
(declare-const in2x4 Int)
(declare-const in6x5 Int)
(declare-const in5x6 Int)
(declare-const in6x3 Int)
(declare-const in3x6 Int)
(declare-const in5x4 Int)
(declare-const in4x5 Int)
(declare-const in6x4 Int)
(declare-const in4x6 Int)
(declare-const in3x0 Int)
(declare-const in0x3 Int)
(declare-const in2x1 Int)
(declare-const in1x2 Int)
(declare-const in4x0 Int)
(declare-const in0x4 Int)
(declare-const in3x1 Int)
(declare-const in1x3 Int)
(declare-const in1x0 Int)
(declare-const in0x1 Int)
(declare-const in2x0 Int)
(declare-const in0x2 Int)

; Original constraints (A):
(push)
(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6)))
(pop)

; Generated constraints (B):
(push)
(assert (>= in0x0 0))
(assert (< in0x0 N))
(assert (>= in0x1 0))
(assert (< in0x1 N))
(assert (>= in0x2 0))
(assert (< in0x2 N))
(assert (>= in0x3 0))
(assert (< in0x3 N))
(assert (>= in0x4 0))
(assert (< in0x4 N))
(assert (>= in0x5 0))
(assert (< in0x5 N))
(assert (>= in0x6 0))
(assert (< in0x6 N))
(assert (>= in1x0 0))
(assert (< in1x0 N))
(assert (>= in1x1 0))
(assert (< in1x1 N))
(assert (>= in1x2 0))
(assert (< in1x2 N))
(assert (>= in1x3 0))
(assert (< in1x3 N))
(assert (>= in1x4 0))
(assert (< in1x4 N))
(assert (>= in1x5 0))
(assert (< in1x5 N))
(assert (>= in1x6 0))
(assert (< in1x6 N))
(assert (>= in2x0 0))
(assert (< in2x0 N))
(assert (>= in2x1 0))
(assert (< in2x1 N))
(assert (>= in2x2 0))
(assert (< in2x2 N))
(assert (>= in2x3 0))
(assert (< in2x3 N))
(assert (>= in2x4 0))
(assert (< in2x4 N))
(assert (>= in2x5 0))
(assert (< in2x5 N))
(assert (>= in2x6 0))
(assert (< in2x6 N))
(assert (>= in3x0 0))
(assert (< in3x0 N))
(assert (>= in3x1 0))
(assert (< in3x1 N))
(assert (>= in3x2 0))
(assert (< in3x2 N))
(assert (>= in3x3 0))
(assert (< in3x3 N))
(assert (>= in3x4 0))
(assert (< in3x4 N))
(assert (>= in3x5 0))
(assert (< in3x5 N))
(assert (>= in3x6 0))
(assert (< in3x6 N))
(assert (>= in4x0 0))
(assert (< in4x0 N))
(assert (>= in4x1 0))
(assert (< in4x1 N))
(assert (>= in4x2 0))
(assert (< in4x2 N))
(assert (>= in4x3 0))
(assert (< in4x3 N))
(assert (>= in4x4 0))
(assert (< in4x4 N))
(assert (>= in4x5 0))
(assert (< in4x5 N))
(assert (>= in4x6 0))
(assert (< in4x6 N))
(assert (>= in5x0 0))
(assert (< in5x0 N))
(assert (>= in5x1 0))
(assert (< in5x1 N))
(assert (>= in5x2 0))
(assert (< in5x2 N))
(assert (>= in5x3 0))
(assert (< in5x3 N))
(assert (>= in5x4 0))
(assert (< in5x4 N))
(assert (>= in5x5 0))
(assert (< in5x5 N))
(assert (>= in5x6 0))
(assert (< in5x6 N))
(assert (>= in6x0 0))
(assert (< in6x0 N))
(assert (>= in6x1 0))
(assert (< in6x1 N))
(assert (>= in6x2 0))
(assert (< in6x2 N))
(assert (>= in6x3 0))
(assert (< in6x3 N))
(assert (>= in6x4 0))
(assert (< in6x4 N))
(assert (>= in6x5 0))
(assert (< in6x5 N))
(assert (>= in6x6 0))
(assert (< in6x6 N))
(pop)

; Now do two checks:
; 1) A => B fails means we push A and then (not B)
(push)
(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6)))
(assert (not
(and (>= in0x0 0) (< in0x0 N) (>= in0x1 0) (< in0x1 N) (>= in0x2 0) (< in0x2 N) (>= in0x3 0) (< in0x3 N) (>= in0x4 0) (< in0x4 N) (>= in0x5 0) (< in0x5 N) (>= in0x6 0) (< in0x6 N) (>= in1x0 0) (< in1x0 N) (>= in1x1 0) (< in1x1 N) (>= in1x2 0) (< in1x2 N) (>= in1x3 0) (< in1x3 N) (>= in1x4 0) (< in1x4 N) (>= in1x5 0) (< in1x5 N) (>= in1x6 0) (< in1x6 N) (>= in2x0 0) (< in2x0 N) (>= in2x1 0) (< in2x1 N) (>= in2x2 0) (< in2x2 N) (>= in2x3 0) (< in2x3 N) (>= in2x4 0) (< in2x4 N) (>= in2x5 0) (< in2x5 N) (>= in2x6 0) (< in2x6 N) (>= in3x0 0) (< in3x0 N) (>= in3x1 0) (< in3x1 N) (>= in3x2 0) (< in3x2 N) (>= in3x3 0) (< in3x3 N) (>= in3x4 0) (< in3x4 N) (>= in3x5 0) (< in3x5 N) (>= in3x6 0) (< in3x6 N) (>= in4x0 0) (< in4x0 N) (>= in4x1 0) (< in4x1 N) (>= in4x2 0) (< in4x2 N) (>= in4x3 0) (< in4x3 N) (>= in4x4 0) (< in4x4 N) (>= in4x5 0) (< in4x5 N) (>= in4x6 0) (< in4x6 N) (>= in5x0 0) (< in5x0 N) (>= in5x1 0) (< in5x1 N) (>= in5x2 0) (< in5x2 N) (>= in5x3 0) (< in5x3 N) (>= in5x4 0) (< in5x4 N) (>= in5x5 0) (< in5x5 N) (>= in5x6 0) (< in5x6 N) (>= in6x0 0) (< in6x0 N) (>= in6x1 0) (< in6x1 N) (>= in6x2 0) (< in6x2 N) (>= in6x3 0) (< in6x3 N) (>= in6x4 0) (< in6x4 N) (>= in6x5 0) (< in6x5 N) (>= in6x6 0) (< in6x6 N))
))
(check-sat)
(pop)

; 2) B => A fails means we push B and then (not A)
(push)
(assert (>= in0x0 0))
(assert (< in0x0 N))
(assert (>= in0x1 0))
(assert (< in0x1 N))
(assert (>= in0x2 0))
(assert (< in0x2 N))
(assert (>= in0x3 0))
(assert (< in0x3 N))
(assert (>= in0x4 0))
(assert (< in0x4 N))
(assert (>= in0x5 0))
(assert (< in0x5 N))
(assert (>= in0x6 0))
(assert (< in0x6 N))
(assert (>= in1x0 0))
(assert (< in1x0 N))
(assert (>= in1x1 0))
(assert (< in1x1 N))
(assert (>= in1x2 0))
(assert (< in1x2 N))
(assert (>= in1x3 0))
(assert (< in1x3 N))
(assert (>= in1x4 0))
(assert (< in1x4 N))
(assert (>= in1x5 0))
(assert (< in1x5 N))
(assert (>= in1x6 0))
(assert (< in1x6 N))
(assert (>= in2x0 0))
(assert (< in2x0 N))
(assert (>= in2x1 0))
(assert (< in2x1 N))
(assert (>= in2x2 0))
(assert (< in2x2 N))
(assert (>= in2x3 0))
(assert (< in2x3 N))
(assert (>= in2x4 0))
(assert (< in2x4 N))
(assert (>= in2x5 0))
(assert (< in2x5 N))
(assert (>= in2x6 0))
(assert (< in2x6 N))
(assert (>= in3x0 0))
(assert (< in3x0 N))
(assert (>= in3x1 0))
(assert (< in3x1 N))
(assert (>= in3x2 0))
(assert (< in3x2 N))
(assert (>= in3x3 0))
(assert (< in3x3 N))
(assert (>= in3x4 0))
(assert (< in3x4 N))
(assert (>= in3x5 0))
(assert (< in3x5 N))
(assert (>= in3x6 0))
(assert (< in3x6 N))
(assert (>= in4x0 0))
(assert (< in4x0 N))
(assert (>= in4x1 0))
(assert (< in4x1 N))
(assert (>= in4x2 0))
(assert (< in4x2 N))
(assert (>= in4x3 0))
(assert (< in4x3 N))
(assert (>= in4x4 0))
(assert (< in4x4 N))
(assert (>= in4x5 0))
(assert (< in4x5 N))
(assert (>= in4x6 0))
(assert (< in4x6 N))
(assert (>= in5x0 0))
(assert (< in5x0 N))
(assert (>= in5x1 0))
(assert (< in5x1 N))
(assert (>= in5x2 0))
(assert (< in5x2 N))
(assert (>= in5x3 0))
(assert (< in5x3 N))
(assert (>= in5x4 0))
(assert (< in5x4 N))
(assert (>= in5x5 0))
(assert (< in5x5 N))
(assert (>= in5x6 0))
(assert (< in5x6 N))
(assert (>= in6x0 0))
(assert (< in6x0 N))
(assert (>= in6x1 0))
(assert (< in6x1 N))
(assert (>= in6x2 0))
(assert (< in6x2 N))
(assert (>= in6x3 0))
(assert (< in6x3 N))
(assert (>= in6x4 0))
(assert (< in6x4 N))
(assert (>= in6x5 0))
(assert (< in6x5 N))
(assert (>= in6x6 0))
(assert (< in6x6 N))
(assert (not
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in1x0 in0x1)  ( =  in2x0 in0x2))  ( =  in2x1 in1x2))  ( =  in3x0 in0x3))  ( =  in3x1 in1x3))  ( =  in3x2 in2x3))  ( =  in4x0 in0x4))  ( =  in4x1 in1x4))  ( =  in4x2 in2x4))  ( =  in4x3 in3x4))  ( =  in5x0 in0x5))  ( =  in5x1 in1x5))  ( =  in5x2 in2x5))  ( =  in5x3 in3x5))  ( =  in5x4 in4x5))  ( =  in6x0 in0x6))  ( =  in6x1 in1x6))  ( =  in6x2 in2x6))  ( =  in6x3 in3x6))  ( =  in6x4 in4x6))  ( =  in6x5 in5x6)))
))
(check-sat)
(pop)
