; Combined SMT for checking equivalence
; Original constants:
(declare-const in0 Int)
(declare-const in2 Int)
(declare-const in1 Int)
(declare-const in4 Int)
(declare-const in3 Int)
(declare-const in6 Int)
(declare-const in5 Int)
(declare-const in20 Int)
(declare-const in8 Int)
(declare-const in7 Int)
(declare-const in11 Int)
(declare-const in21 Int)
(declare-const in10 Int)
(declare-const in9 Int)
(declare-const in13 Int)
(declare-const in12 Int)
(declare-const in15 Int)
(declare-const in14 Int)
(declare-const in17 Int)
(declare-const in16 Int)
(declare-const in19 Int)
(declare-const in18 Int)

; Original constraints (A):
(push)
(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1))  ( =  in19 0))  ( =  in20 1))  ( =  in21 0)))
(pop)

; Generated constraints (B):
(push)
(assert (= in0 0))
(assert (= in1 0))
(assert (= in2 0))
(assert (= in3 0))
(assert (= in4 0))
(assert (= in5 0))
(assert (= in6 0))
(assert (= in7 0))
(assert (= in8 0))
(assert (= in9 0))
(assert (= in10 0))
(assert (= in11 0))
(assert (= in12 0))
(assert (= in13 0))
(assert (= in14 0))
(assert (= in15 0))
(assert (= in16 0))
(assert (= in17 0))
(assert (= in18 0))
(assert (= in19 0))
(assert (= in20 0))
(assert (= in21 1))
(pop)

; Now do two checks:
; 1) A => B fails means we push A and then (not B)
(push)
(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1))  ( =  in19 0))  ( =  in20 1))  ( =  in21 0)))
(assert (not
(and (= in0 0) (= in1 0) (= in2 0) (= in3 0) (= in4 0) (= in5 0) (= in6 0) (= in7 0) (= in8 0) (= in9 0) (= in10 0) (= in11 0) (= in12 0) (= in13 0) (= in14 0) (= in15 0) (= in16 0) (= in17 0) (= in18 0) (= in19 0) (= in20 0) (= in21 1))
))
(check-sat)
(pop)

; 2) B => A fails means we push B and then (not A)
(push)
(assert (= in0 0))
(assert (= in1 0))
(assert (= in2 0))
(assert (= in3 0))
(assert (= in4 0))
(assert (= in5 0))
(assert (= in6 0))
(assert (= in7 0))
(assert (= in8 0))
(assert (= in9 0))
(assert (= in10 0))
(assert (= in11 0))
(assert (= in12 0))
(assert (= in13 0))
(assert (= in14 0))
(assert (= in15 0))
(assert (= in16 0))
(assert (= in17 0))
(assert (= in18 0))
(assert (= in19 0))
(assert (= in20 0))
(assert (= in21 1))
(assert (not
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in0 1)  ( =  in1 0))  ( =  in2 1))  ( =  in3 0))  ( =  in4 1))  ( =  in5 0))  ( =  in6 1))  ( =  in7 0))  ( =  in8 1))  ( =  in9 0))  ( =  in10 1))  ( =  in11 0))  ( =  in12 1))  ( =  in13 0))  ( =  in14 1))  ( =  in15 0))  ( =  in16 1))  ( =  in17 0))  ( =  in18 1))  ( =  in19 0))  ( =  in20 1))  ( =  in21 0)))
))
(check-sat)
(pop)
