; Combined SMT for checking equivalence
; Original constants:
(declare-const in20 Int)
(declare-const in22 Int)
(declare-const in21 Int)
(declare-const in24 Int)
(declare-const in23 Int)
(declare-const in26 Int)
(declare-const in25 Int)
(declare-const in27 Int)
(declare-const in0 Int)
(declare-const in2 Int)
(declare-const in1 Int)
(declare-const in4 Int)
(declare-const in3 Int)
(declare-const in6 Int)
(declare-const in5 Int)
(declare-const in8 Int)
(declare-const in7 Int)
(declare-const in11 Int)
(declare-const in10 Int)
(declare-const in9 Int)
(declare-const in13 Int)
(declare-const in12 Int)
(declare-const in15 Int)
(declare-const in14 Int)
(declare-const in17 Int)
(declare-const in16 Int)
(declare-const in19 Int)
(declare-const in18 Int)

; Original constraints (A):
(push)
(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6)))  ( =  in8 ( +  in6 in7)))  ( =  in9 ( +  in7 in8)))  ( =  in10 ( +  in8 in9)))  ( =  in11 ( +  in9 in10)))  ( =  in12 ( +  in10 in11)))  ( =  in13 ( +  in11 in12)))  ( =  in14 ( +  in12 in13)))  ( =  in15 ( +  in13 in14)))  ( =  in16 ( +  in14 in15)))  ( =  in17 ( +  in15 in16)))  ( =  in18 ( +  in16 in17)))  ( =  in19 ( +  in17 in18)))  ( =  in20 ( +  in18 in19)))  ( =  in21 ( +  in19 in20)))  ( =  in22 ( +  in20 in21)))  ( =  in23 ( +  in21 in22)))  ( =  in24 ( +  in22 in23)))  ( =  in25 ( +  in23 in24)))  ( =  in26 ( +  in24 in25)))  ( =  in27 ( +  in25 in26))))
(pop)

; Generated constraints (B):
(push)
(assert (<= in0 100))
(assert (= in1 in0))
(assert (<= in2 100))
(assert (= in2 ( +  in1 in0)))
(assert (<= in3 100))
(assert (= in3 ( +  in2 in1)))
(assert (<= in4 100))
(assert (= in4 ( +  in3 in2)))
(assert (<= in5 100))
(assert (= in5 ( +  in4 in3)))
(assert (<= in6 100))
(assert (= in6 ( +  in5 in4)))
(assert (<= in7 100))
(assert (= in7 ( +  in6 in5)))
(assert (<= in8 100))
(assert (= in8 ( +  in7 in6)))
(assert (<= in9 100))
(assert (= in9 ( +  in8 in7)))
(assert (<= in10 100))
(assert (= in10 ( +  in9 in8)))
(assert (<= in11 100))
(assert (= in11 ( +  in10 in9)))
(assert (<= in12 100))
(assert (= in12 ( +  in11 in10)))
(assert (<= in13 100))
(assert (= in13 ( +  in12 in11)))
(assert (<= in14 100))
(assert (= in14 ( +  in13 in12)))
(assert (<= in15 100))
(assert (= in15 ( +  in14 in13)))
(assert (<= in16 100))
(assert (= in16 ( +  in15 in14)))
(assert (<= in17 100))
(assert (= in17 ( +  in16 in15)))
(assert (<= in18 100))
(assert (= in18 ( +  in17 in16)))
(assert (<= in19 100))
(assert (= in19 ( +  in18 in17)))
(assert (<= in20 100))
(assert (= in20 ( +  in19 in18)))
(assert (<= in21 100))
(assert (= in21 ( +  in20 in19)))
(assert (<= in22 100))
(assert (= in22 ( +  in21 in20)))
(assert (<= in23 100))
(assert (= in23 ( +  in22 in21)))
(assert (<= in24 100))
(assert (= in24 ( +  in23 in22)))
(assert (<= in25 100))
(assert (= in25 ( +  in24 in23)))
(assert (<= in26 100))
(assert (= in26 ( +  in25 in24)))
(assert (<= in27 100))
(assert (= in27 ( +  in26 in25)))
(pop)

; Now do two checks:
; 1) A => B fails means we push A and then (not B)
(push)
(assert (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6)))  ( =  in8 ( +  in6 in7)))  ( =  in9 ( +  in7 in8)))  ( =  in10 ( +  in8 in9)))  ( =  in11 ( +  in9 in10)))  ( =  in12 ( +  in10 in11)))  ( =  in13 ( +  in11 in12)))  ( =  in14 ( +  in12 in13)))  ( =  in15 ( +  in13 in14)))  ( =  in16 ( +  in14 in15)))  ( =  in17 ( +  in15 in16)))  ( =  in18 ( +  in16 in17)))  ( =  in19 ( +  in17 in18)))  ( =  in20 ( +  in18 in19)))  ( =  in21 ( +  in19 in20)))  ( =  in22 ( +  in20 in21)))  ( =  in23 ( +  in21 in22)))  ( =  in24 ( +  in22 in23)))  ( =  in25 ( +  in23 in24)))  ( =  in26 ( +  in24 in25)))  ( =  in27 ( +  in25 in26))))
(assert (not
(and (<= in0 100) (= in1 in0) (<= in2 100) (= in2 ( +  in1 in0)) (<= in3 100) (= in3 ( +  in2 in1)) (<= in4 100) (= in4 ( +  in3 in2)) (<= in5 100) (= in5 ( +  in4 in3)) (<= in6 100) (= in6 ( +  in5 in4)) (<= in7 100) (= in7 ( +  in6 in5)) (<= in8 100) (= in8 ( +  in7 in6)) (<= in9 100) (= in9 ( +  in8 in7)) (<= in10 100) (= in10 ( +  in9 in8)) (<= in11 100) (= in11 ( +  in10 in9)) (<= in12 100) (= in12 ( +  in11 in10)) (<= in13 100) (= in13 ( +  in12 in11)) (<= in14 100) (= in14 ( +  in13 in12)) (<= in15 100) (= in15 ( +  in14 in13)) (<= in16 100) (= in16 ( +  in15 in14)) (<= in17 100) (= in17 ( +  in16 in15)) (<= in18 100) (= in18 ( +  in17 in16)) (<= in19 100) (= in19 ( +  in18 in17)) (<= in20 100) (= in20 ( +  in19 in18)) (<= in21 100) (= in21 ( +  in20 in19)) (<= in22 100) (= in22 ( +  in21 in20)) (<= in23 100) (= in23 ( +  in22 in21)) (<= in24 100) (= in24 ( +  in23 in22)) (<= in25 100) (= in25 ( +  in24 in23)) (<= in26 100) (= in26 ( +  in25 in24)) (<= in27 100) (= in27 ( +  in26 in25)))
))
(check-sat)
(pop)

; 2) B => A fails means we push B and then (not A)
(push)
(assert (<= in0 100))
(assert (= in1 in0))
(assert (<= in2 100))
(assert (= in2 ( +  in1 in0)))
(assert (<= in3 100))
(assert (= in3 ( +  in2 in1)))
(assert (<= in4 100))
(assert (= in4 ( +  in3 in2)))
(assert (<= in5 100))
(assert (= in5 ( +  in4 in3)))
(assert (<= in6 100))
(assert (= in6 ( +  in5 in4)))
(assert (<= in7 100))
(assert (= in7 ( +  in6 in5)))
(assert (<= in8 100))
(assert (= in8 ( +  in7 in6)))
(assert (<= in9 100))
(assert (= in9 ( +  in8 in7)))
(assert (<= in10 100))
(assert (= in10 ( +  in9 in8)))
(assert (<= in11 100))
(assert (= in11 ( +  in10 in9)))
(assert (<= in12 100))
(assert (= in12 ( +  in11 in10)))
(assert (<= in13 100))
(assert (= in13 ( +  in12 in11)))
(assert (<= in14 100))
(assert (= in14 ( +  in13 in12)))
(assert (<= in15 100))
(assert (= in15 ( +  in14 in13)))
(assert (<= in16 100))
(assert (= in16 ( +  in15 in14)))
(assert (<= in17 100))
(assert (= in17 ( +  in16 in15)))
(assert (<= in18 100))
(assert (= in18 ( +  in17 in16)))
(assert (<= in19 100))
(assert (= in19 ( +  in18 in17)))
(assert (<= in20 100))
(assert (= in20 ( +  in19 in18)))
(assert (<= in21 100))
(assert (= in21 ( +  in20 in19)))
(assert (<= in22 100))
(assert (= in22 ( +  in21 in20)))
(assert (<= in23 100))
(assert (= in23 ( +  in22 in21)))
(assert (<= in24 100))
(assert (= in24 ( +  in23 in22)))
(assert (<= in25 100))
(assert (= in25 ( +  in24 in23)))
(assert (<= in26 100))
(assert (= in26 ( +  in25 in24)))
(assert (<= in27 100))
(assert (= in27 ( +  in26 in25)))
(assert (not
(and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and  ( =  in2 ( +  in0 in1))  ( =  in3 ( +  in1 in2)))  ( =  in4 ( +  in2 in3)))  ( =  in5 ( +  in3 in4)))  ( =  in6 ( +  in4 in5)))  ( =  in7 ( +  in5 in6)))  ( =  in8 ( +  in6 in7)))  ( =  in9 ( +  in7 in8)))  ( =  in10 ( +  in8 in9)))  ( =  in11 ( +  in9 in10)))  ( =  in12 ( +  in10 in11)))  ( =  in13 ( +  in11 in12)))  ( =  in14 ( +  in12 in13)))  ( =  in15 ( +  in13 in14)))  ( =  in16 ( +  in14 in15)))  ( =  in17 ( +  in15 in16)))  ( =  in18 ( +  in16 in17)))  ( =  in19 ( +  in17 in18)))  ( =  in20 ( +  in18 in19)))  ( =  in21 ( +  in19 in20)))  ( =  in22 ( +  in20 in21)))  ( =  in23 ( +  in21 in22)))  ( =  in24 ( +  in22 in23)))  ( =  in25 ( +  in23 in24)))  ( =  in26 ( +  in24 in25)))  ( =  in27 ( +  in25 in26))))
))
(check-sat)
(pop)
